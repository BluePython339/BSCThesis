_start
push 0xcc
push 0x0
push rw-data
call memset
add esp 0xc
push 0x0
call GetModuleHandleA
mov [ rw-data ] eax
push 0x0
push 0x1000
push 0x0
call HeapCreate
mov [ rw-data ] eax
call sub_403000
call sub_4076d0
call sub_406a67
call sub_406320
call sub_404d13
call sub_404340
call sub_403ff0
call sub_403b80
call sub_4038d9
push 0x7
push rw-data
lea eax [ rw-data ]
push eax
push 0x8
call sub_404150
mov [ rw-data ] eax
push 0x7
push rw-data
push rw-data
mov edx [ rw-data ]
call sub_403060
mov eax 0x401
push 0x8
call sub_4030a0
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
mov edx rw-data
lea ecx [ rw-data ]
call sub_4030f8
call sub_403f37
mov ebx eax
cmp ebx 0x32
jge r-xdata
lea eax [ r-xdata ]
push eax
call sub_403dd0
call sub_403cab
mov [ rw-data ] eax
push 0x0
call GetModuleHandleA
mov [ rw-data ] eax
mov ebx [ rw-data ]
and ebx ebx
jle r-xdata
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
jmp sub_401c4c
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
mov [ rw-data ] 0x0
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
push 0x1
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
push [ rw-data ]
call sub_401c8a
jmp sub_401300
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403c5d
lea ecx [ rw-data ]
pop edx
call sub_403100
push [ rw-data ]
mov edx rw-data
pop ecx
call sub_407720
je r-xdata
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
mov ebx [ rw-data ]
cmp ebx 0x1
jne r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
push [ rw-data ]
call PathQuoteSpacesA
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
mov edx [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
mov [ rw-data ] 0x0
jmp r-xdata
inc [ rw-data ]
jmp r-xdata
mov ebx [ rw-data ]
dec ebx
cmp ebx [ rw-data ]
jl r-xdata
sub_401300
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
push 0x1
jmp r-xdata
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_404020
lea ecx [ rw-data ]
pop edx
call sub_403100
jmp sub_40135a
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
sub_40135a
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
push 0x1
jmp r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
jmp sub_4013ae
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
sub_4013ae
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_404020
lea ecx [ rw-data ]
pop edx
call sub_403100
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
mov edx [ rw-data ]
xor ecx ecx
call sub_407720
jne r-xdata
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
push [ rw-data ]
push 0x1
call sub_406450
and eax eax
je r-xdata
mov eax [ rw-data ]
push eax
push eax
push 0x0
call sub_403c5d
inc [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_404020
pop edx
pop ecx
mov [ rw-data ] ecx
add ecx [ rw-data ]
add edx [ rw-data ]
call sub_407720
je r-xdata
push 0xc80001
push [ rw-data ]
push 0x6e
push 0xc8
push 0x0
push 0x0
push 0x0
call sub_405046
push [ rw-data ]
push 0x14
push 0x9e
push 0xf
push 0x15
push 0x1
call sub_40451d
push 0x20
push rw-data
push 0x14
push 0x9e
push 0x28
push 0x15
push 0x2
call sub_40460e
push rw-data
push 0x14
push 0x4e
push 0x4b
push 0x3d
push 0x3
call sub_404813
push 0x4
push 0xd
push 0x0
call sub_405069
push 0x2
call sub_404833
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
jmp sub_4015d1
push [ rw-data ]
call sub_406100
call sub_402077
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
push [ rw-data ]
call RemoveDirectoryA
push 0x1
jmp r-xdata
push [ rw-data ]
push [ rw-data ]
push 0x1
call sub_406530
push 0x1
call sub_4062b0
jmp sub_401a05
xor eax eax
mov ebx [ rw-data ]
cmp ebx 0x1
jne r-xdata
mov ebx 0x332d
cmp ebx [ esp ]
jne r-xdata
push [ rw-data ]
call RemoveDirectoryA
push 0x0
jmp r-xdata
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
call sub_406035
inc [ rw-data ]
push [ rw-data ]
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_40393d
lea ecx [ rw-data ]
pop edx
call sub_403100
mov edx [ rw-data ]
xor ecx ecx
call sub_407720
jne r-xdata
mov eax 0x1
jmp r-xdata
mov ebx 0x332c
cmp ebx [ esp ]
jne r-xdata
call sub_4052c6
push eax
mov ebx 0x4
cmp ebx [ esp ]
jne r-xdata
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406085
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406075
pop [ rw-data ]
push [ rw-data ]
call RemoveDirectoryA
push 0x0
jmp r-xdata
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
push [ rw-data ]
call sub_406075
mov edx [ rw-data ]
xor ecx ecx
call sub_407720
jne r-xdata
and eax eax
je r-xdata
pop eax
jmp r-xdata
call sub_4052d4
push eax
mov ebx 0x3
cmp ebx [ esp ]
jne r-xdata
pop eax
jmp r-xdata
mov eax [ rw-data ]
push eax
push eax
push 0x2
call sub_40485c
lea ecx [ rw-data ]
pop edx
call sub_403100
push 0x0
call sub_404b85
add esp 0x8
jmp sub_4015d1
push [ rw-data ]
push 0x1
call sub_406510
and eax eax
je r-xdata
push [ rw-data ]
call sub_40216a
call sub_4052be
push eax
mov ebx 0x10
cmp ebx [ esp ]
jne r-xdata
pop eax
mov eax [ rw-data ]
push eax
push eax
push 0x2
call sub_40485c
lea ecx [ rw-data ]
pop edx
call sub_403100
push 0x0
call sub_404b85
add esp 0x8
jmp sub_4015d1
push [ rw-data ]
push 0x1
call sub_406450
and eax eax
je r-xdata
push 0x1
call sub_4062b0
push [ rw-data ]
push 0x24
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
inc [ rw-data ]
push [ rw-data ]
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_4038e7
pop [ rw-data ]
mov [ rw-data ] eax
mov ebx [ rw-data ]
cmp ebx 0x7
jne r-xdata
push [ rw-data ]
push [ rw-data ]
push 0x1
call sub_406530
push 0x1
call sub_4062b0
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406085
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406075
pop [ rw-data ]
push [ rw-data ]
call RemoveDirectoryA
push 0x0
jmp r-xdata
sub_4015d1
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_4031f0
push eax
mov eax [ rw-data ]
push eax
call sub_406ac0
inc [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_404020
pop edx
pop ecx
mov [ rw-data ] ecx
add ecx [ rw-data ]
add edx [ rw-data ]
call sub_407720
jne r-xdata
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
push [ rw-data ]
call RemoveDirectoryA
push 0x1
jmp r-xdata
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
call sub_401da8
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_404020
lea ecx [ rw-data ]
pop edx
call sub_403100
push rw-data
push [ rw-data ]
call sub_402103
and eax eax
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
push [ rw-data ]
push 0x1
call sub_406450
and eax eax
je r-xdata
mov eax [ rw-data ]
push eax
push eax
push 0x0
call sub_403c5d
inc [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_404020
pop edx
pop ecx
mov [ rw-data ] ecx
add ecx [ rw-data ]
add edx [ rw-data ]
call sub_407720
je r-xdata
push [ rw-data ]
call sub_406100
call sub_402077
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
push [ rw-data ]
call RemoveDirectoryA
push 0x1
jmp r-xdata
push [ rw-data ]
push [ rw-data ]
push 0x1
call sub_406530
push 0x1
call sub_4062b0
jmp sub_401a05
xor eax eax
mov ebx [ rw-data ]
cmp ebx 0x1
jne r-xdata
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
call sub_406035
inc [ rw-data ]
push [ rw-data ]
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_40393d
lea ecx [ rw-data ]
pop edx
call sub_403100
mov edx [ rw-data ]
xor ecx ecx
call sub_407720
jne r-xdata
mov eax 0x1
jmp r-xdata
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406085
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406075
pop [ rw-data ]
push [ rw-data ]
call RemoveDirectoryA
push 0x0
jmp r-xdata
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
push [ rw-data ]
call sub_406075
mov edx [ rw-data ]
xor ecx ecx
call sub_407720
jne r-xdata
and eax eax
je r-xdata
push [ rw-data ]
push 0x1
call sub_406510
and eax eax
je r-xdata
push [ rw-data ]
call sub_40216a
push [ rw-data ]
push 0x1
call sub_406450
and eax eax
je r-xdata
push 0x1
call sub_4062b0
push [ rw-data ]
push 0x24
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
inc [ rw-data ]
push [ rw-data ]
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_4038e7
pop [ rw-data ]
mov [ rw-data ] eax
mov ebx [ rw-data ]
cmp ebx 0x7
jne r-xdata
push [ rw-data ]
push [ rw-data ]
push 0x1
call sub_406530
push 0x1
call sub_4062b0
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406085
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406075
pop [ rw-data ]
push [ rw-data ]
call RemoveDirectoryA
push 0x0
jmp r-xdata
sub_401a05
mov edx [ rw-data ]
xor ecx ecx
call sub_407720
jne r-xdata
mov eax [ rw-data ]
push eax
push eax
push 0x800
call sub_403220
lea ecx [ rw-data ]
pop edx
call sub_403100
push [ rw-data ]
push 0x800
push [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call GetShortPathNameA
pop [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
push rw-data
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_403d19
pop [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406112
inc [ rw-data ]
push rw-data
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_403d19
pop [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406085
inc [ rw-data ]
push rw-data
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_403d19
pop [ rw-data ]
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push [ rw-data ]
call sub_403260
inc [ rw-data ]
push rw-data
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_403d19
pop [ rw-data ]
push [ rw-data ]
push rw-data
call sub_403d19
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
mov eax [ rw-data ]
cdq
push edx
push eax
call sub_403480
inc [ rw-data ]
push rw-data
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_403d19
pop [ rw-data ]
push [ rw-data ]
call PathQuoteSpacesA
push [ rw-data ]
push [ rw-data ]
push [ rw-data ]
call sub_402831
call sub_402077
push [ rw-data ]
call sub_406100
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
call sub_403cbe
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406085
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_406075
pop [ rw-data ]
push [ rw-data ]
call RemoveDirectoryA
push 0x0
jmp r-xdata
push [ rw-data ]
call sub_40216a
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
sub_401c8a
push ebx
xor eax eax
push eax
push eax
push eax
push 0x400
call sub_404070
mov [ esp ] eax
mov eax [ rw-data ]
push eax
push eax
call sub_406192
lea ecx [ esp + 0x8 ]
pop edx
call sub_403100
push [ esp ]
push 0x0
push rw-data
push [ esp + 0x10 ]
call GetTempFileNameA
mov eax [ rw-data ]
push eax
push eax
push [ esp + 0x8 ]
call sub_404090
lea ecx [ rw-data ]
pop edx
call sub_403100
push [ esp ]
call sub_4040e0
push [ rw-data ]
call sub_406100
push [ rw-data ]
call sub_4061f3
mov eax [ rw-data ]
push eax
push eax
call sub_406035
lea ecx [ rw-data ]
pop edx
call sub_403100
mov eax [ esp + 0x14 ]
call sub_404100
push eax
xor ebx ebx
cmp ebx [ esp ]
jne r-xdata
mov ebx 0x1
cmp ebx [ esp ]
jne r-xdata
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
lea ecx [ rw-data ]
pop edx
call sub_403100
mov [ esp + 0xc ] 0x2
jmp r-xdata
pop eax
mov ebx [ esp + 0x14 ]
add ebx [ esp + 0x8 ]
mov eax ebx
call sub_404100
mov [ rw-data ] eax
mov ebx [ esp + 0x14 ]
add ebx [ esp + 0x8 ]
inc ebx
mov eax ebx
call sub_404100
mov [ rw-data ] eax
mov eax 0x1
jmp r-xdata
mov [ esp + 0xc ] 0x1
push [ esp + 0x4 ]
call sub_4077b0
add esp 0xc
pop ebx
retn 0x4
sub_401da8
push ebp
push ebx
push edi
mov edx 0xd
sub esp 0x4
mov [ esp ] 0x0
dec edx
jne r-xdata
mov edx [ esp + 0x48 ]
lea ecx [ esp ]
call sub_4030f0
push 0x5
lea edx [ esp + 0x8 ]
push edx
push 0x0
mov edx [ esp + 0x10 ]
call sub_403110
mov eax 0x4
push 0x4
call sub_4030a0
push 0x5
lea edx [ esp + 0x10 ]
push edx
push 0x0
mov edx [ esp + 0x18 ]
call sub_403110
mov eax 0x4
push 0x4
call sub_4030a0
push 0x5
lea edx [ esp + 0x18 ]
push edx
push 0x0
mov edx [ esp + 0x20 ]
call sub_403110
mov eax 0x4
push 0x4
call sub_4030a0
push [ esp ]
push [ esp + 0x60 ]
push [ esp + 0x54 ]
call sub_402578
mov [ esp + 0x1c ] eax
push [ esp ]
push [ esp + 0x68 ]
push [ esp + 0x5c ]
call sub_402578
mov [ esp + 0x1c ] eax
push [ esp + 0x4c ]
mov ebp [ esp + 0x8 ]
pop [ ebp ]
mov eax [ esp + 0x50 ]
mov [ ebp + 0x4 ] eax
mov eax [ esp + 0x54 ]
mov [ ebp + 0x8 ] eax
push [ esp + 0x5c ]
mov ebp [ esp + 0x10 ]
pop [ ebp ]
mov eax [ esp + 0x60 ]
mov [ ebp + 0x4 ] eax
mov eax [ esp + 0x64 ]
mov [ ebp + 0x8 ] eax
cmp [ esp + 0x58 ] 0x0
je r-xdata
mov ebp [ esp + 0x4 ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov ebp [ esp + 0xc ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov ebx [ rw-data ]
and ebx ebx
jle r-xdata
mov eax [ esp + 0x58 ]
call sub_404110
mov [ esp + 0x20 ] eax
mov ebx [ esp + 0x58 ]
add ebx 0x4
mov eax ebx
call sub_404110
mov [ esp + 0x24 ] eax
mov ebx [ esp + 0x58 ]
add ebx 0x8
mov eax ebx
call sub_404110
mov [ esp + 0x28 ] eax
push [ esp + 0x20 ]
mov ebp [ esp + 0x18 ]
pop [ ebp ]
mov eax [ esp + 0x24 ]
mov [ ebp + 0x4 ] eax
mov eax [ esp + 0x28 ]
mov [ ebp + 0x8 ] eax
mov [ esp + 0x2c ] 0x0
xor eax eax
mov ebx [ rw-data ]
and ebx ebx
jle r-xdata
mov ebx [ esp + 0x2c ]
mov ebp [ esp + 0x14 ]
shl ebx 0x2
mov ebx [ ebp + ebx ]
mov edi [ esp + 0x2c ]
mov ebp [ esp + 0xc ]
shl edi 0x2
cmp ebx [ ebp + edi ]
jle r-xdata
mov eax 0x1
jmp r-xdata
mov ebp [ esp + 0x4 ]
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax 0x1
jmp r-xdata
inc [ esp + 0x2c ]
jmp r-xdata
mov ebx [ esp + 0x2c ]
mov ebp [ esp + 0x14 ]
shl ebx 0x2
mov ebx [ ebp + ebx ]
add ebx 0x200
push ebx
call sub_404070
mov [ esp + 0x30 ] eax
cmp [ esp + 0x30 ] 0x0
je r-xdata
push [ esp ]
call sub_4077b0
push eax
mov edx [ esp + 0x8 ]
call sub_403110
mov edx [ esp + 0x10 ]
call sub_403110
mov edx [ esp + 0x18 ]
call sub_403110
pop eax
add esp 0x34
pop edi
pop ebx
pop ebp
retn 0x24
and eax eax
je r-xdata
mov eax 0x2
cmp eax [ esp + 0x2c ]
jl r-xdata
push [ rw-data ]
call RemoveDirectoryA
push 0x10
push [ rw-data ]
push [ rw-data ]
call sub_4038e7
push 0x1
jmp r-xdata
push [ esp + 0x30 ]
mov ebx [ esp + 0x30 ]
mov ebp [ esp + 0x8 ]
shl ebx 0x2
push [ ebp + ebx ]
call sub_403d76
mov ebx [ esp + 0x2c ]
mov ebp [ esp + 0x14 ]
shl ebx 0x2
push [ ebp + ebx ]
push [ esp + 0x34 ]
call sub_404120
mov ebx [ esp + 0x2c ]
shl ebx 0x2
push [ ebp + ebx ]
mov ebx [ esp + 0x30 ]
mov ebp [ esp + 0x10 ]
shl ebx 0x2
pop eax
mov [ ebp + ebx ] eax
push [ esp + 0x30 ]
mov ebx [ esp + 0x30 ]
mov ebp [ esp + 0x8 ]
shl ebx 0x2
pop eax
mov [ ebp + ebx ] eax
jmp r-xdata
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
sub_402077
push ebp
push ebx
mov ebx [ rw-data ]
cmp ebx 0x1
jne r-xdata
mov eax 0x1
jmp r-xdata
push [ rw-data ]
call sub_4041ad
mov ebx eax
and ebx ebx
jle r-xdata
pop ebx
pop ebp
retn
push [ rw-data ]
call sub_4041b7
mov ebp [ rw-data ]
push [ ebp + 0x8 ]
call sub_406bc0
mov ebx eax
cmp ebx [ ebp + 0xc ]
jne r-xdata
jmp r-xdata
mov ebp [ rw-data ]
push [ ebp + 0x8 ]
call sub_406100
push [ rw-data ]
call sub_4041cf
or eax eax
je r-xdata
sub_402103
xor eax eax
push eax
push eax
mov edx [ esp + 0x10 ]
lea ecx [ esp ]
call sub_4030f0
push 0xa
push [ esp + 0x4 ]
push [ esp + 0x14 ]
call FindResourceA
mov [ esp + 0x4 ] eax
cmp [ esp + 0x4 ] 0x0
je r-xdata
mov eax [ esp + 0x4 ]
jmp r-xdata
push [ esp + 0x4 ]
push [ esp + 0x10 ]
call LoadResource
mov [ rw-data ] eax
push [ esp + 0x4 ]
push [ esp + 0x10 ]
call SizeofResource
mov [ rw-data ] eax
push [ esp ]
call sub_4077b0
add esp 0x8
retn 0x8
sub_40216a
push ebp
push ebx
mov edx 0xa
sub esp 0x4
mov [ esp ] 0x0
dec edx
jne r-xdata
mov edx [ esp + 0x34 ]
lea ecx [ esp ]
call sub_4030f0
mov [ esp + 0x4 ] 0x1
push [ rw-data ]
call sub_406075
jmp r-xdata
mov ebx [ esp + 0x4 ]
and ebx 0x1
and ebx ebx
jne r-xdata
mov eax [ esp + 0xc ]
mov [ rw-data ] eax
mov [ esp + 0x10 ] 0x0
mov edx [ esp + 0x8 ]
push [ rw-data ]
call sub_407750
mov ebx [ esp + 0x10 ]
mov ebp [ rw-data ]
shl ebx 0x3
add ebp ebx
lea ecx [ ebp ]
pop edx
call sub_403100
push [ esp + 0x8 ]
call sub_4035b0
push eax
mov ebx [ esp + 0x10 ]
mov ebp [ rw-data ]
shl ebx 0x3
add ebp ebx
pop eax
mov [ ebp + 0x4 ] eax
inc [ esp + 0xc ]
jmp r-xdata
mov eax [ rw-data ]
push eax
push eax
mov eax [ rw-data ]
push eax
push eax
push [ rw-data ]
push rw-data
push [ esp + 0x3c ]
call sub_4038c0
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_403260
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_4031f0
pop [ rw-data ]
mov ebx eax
and ebx ebx
jle r-xdata
mov ebx [ esp + 0x10 ]
mov ebp [ rw-data ]
shl ebx 0x3
add ebp ebx
mov edx [ ebp ]
push [ rw-data ]
call sub_407750
lea ecx [ esp + 0x18 ]
pop edx
call sub_403100
push [ rw-data ]
push [ esp + 0x18 ]
push [ rw-data ]
mov edx rw-data
call sub_407750
mov eax [ rw-data ]
push eax
push eax
mov eax [ esp + 0x24 ]
cdq
push edx
push eax
add [ esp ] 0x1
adc [ esp + 0x4 ] 0x0
pop eax
pop edx
push edx
push eax
call sub_403480
pop eax
inc [ rw-data ]
mov edx [ rw-data ]
add [ esp ] edx
call sub_403d19
pop [ rw-data ]
mov ebx [ rw-data ]
cmp ebx 0x1
je r-xdata
inc [ esp + 0x4 ]
jmp r-xdata
jmp r-xdata
mov eax 0x1
jmp r-xdata
push [ rw-data ]
push 0x24
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ esp + 0x30 ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
inc [ rw-data ]
push [ rw-data ]
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_4038e7
pop [ rw-data ]
mov [ esp + 0x18 ] eax
mov ebx [ esp + 0x18 ]
cmp ebx 0x7
jne r-xdata
xor eax eax
push [ esp + 0x14 ]
push 0x1
call sub_406510
and eax eax
je r-xdata
mov eax [ rw-data ]
push eax
push eax
push rw-data
push [ esp + 0x10 ]
push [ esp + 0x10 ]
call sub_403510
lea ecx [ esp + 0xc ]
pop edx
call sub_403100
mov edx [ esp + 0x8 ]
xor ecx ecx
call sub_407720
jne r-xdata
push [ esp ]
call sub_4077b0
push [ esp + 0x8 ]
call sub_4077b0
push [ esp + 0x14 ]
call sub_4077b0
push [ esp + 0x24 ]
call sub_4077b0
add esp 0x28
pop ebx
pop ebp
retn 0x4
call sub_402077
push [ rw-data ]
call sub_406100
push [ rw-data ]
call RemoveDirectoryA
push 0x0
jmp r-xdata
push [ esp + 0x14 ]
push 0x1
call sub_406450
and eax eax
je r-xdata
push 0x1
call sub_4062b0
push [ rw-data ]
push 0x23
mov edx [ rw-data ]
push [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ esp + 0x20 ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ rw-data ]
call sub_407750
inc [ rw-data ]
push [ rw-data ]
mov edx [ rw-data ]
add [ esp + 0x4 ] edx
call sub_4038e7
pop [ rw-data ]
mov [ esp + 0x18 ] eax
mov ebx [ esp + 0x18 ]
cmp ebx 0x7
jne r-xdata
mov eax 0x1
jmp r-xdata
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
mov edx [ esp + 0x24 ]
push [ rw-data ]
call sub_407750
mov edx [ esp + 0x18 ]
call sub_407750
mov edx rw-data
call sub_407750
lea ecx [ esp + 0x28 ]
pop edx
call sub_403100
mov ebx [ esp + 0x10 ]
mov ebp [ rw-data ]
shl ebx 0x3
add ebp ebx
mov eax [ ebp + 0x4 ]
mov [ esp + 0x1c ] eax
push [ esp + 0x1c ]
mov ebx [ rw-data ]
add ebx [ esp + 0x24 ]
push ebx
push 0x1
call sub_406530
push 0x1
call sub_4062b0
mov ebx [ esp + 0x20 ]
add ebx [ esp + 0x1c ]
mov [ esp + 0x20 ] ebx
push [ rw-data ]
call sub_404203
mov edx [ esp + 0x14 ]
push [ rw-data ]
call sub_407750
mov ebp [ rw-data ]
lea ecx [ ebp + 0x8 ]
pop edx
call sub_403100
push [ esp + 0x14 ]
call sub_406bc0
mov [ ebp + 0xc ] eax
jmp r-xdata
mov ebx [ esp + 0x18 ]
cmp ebx 0x2
jne r-xdata
jmp r-xdata
and eax eax
je r-xdata
mov eax [ esp + 0xc ]
cmp eax [ esp + 0x10 ]
jl r-xdata
inc [ esp + 0x10 ]
jmp r-xdata
call sub_402077
xor eax eax
jmp r-xdata
sub_402578
push ebp
push ebx
push edi
mov edx 0xf
sub esp 0x4
mov [ esp ] 0x0
dec edx
jne r-xdata
mov edx [ esp + 0x54 ]
lea ecx [ esp ]
call sub_4030f0
push 0x5
lea edx [ esp + 0x8 ]
push edx
push 0x0
mov edx [ esp + 0x10 ]
call sub_403110
mov eax 0x100
push 0x4
call sub_4030a0
push 0x5
lea edx [ esp + 0x10 ]
push edx
push 0x0
mov edx [ esp + 0x18 ]
call sub_403110
mov eax 0x100
push 0x4
call sub_4030a0
mov [ esp + 0x14 ] 0x0
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x1c ] 0x0
mov [ esp + 0x20 ] 0x0
mov [ esp + 0x24 ] 0x0
mov [ esp + 0x28 ] 0x0
mov [ esp + 0x18 ] 0x1
push [ esp ]
call sub_4031f0
mov [ esp + 0x2c ] eax
mov eax [ esp + 0x4 ]
mov [ esp + 0x30 ] eax
mov eax [ esp ]
mov [ esp + 0x34 ] eax
mov [ esp + 0x14 ] 0x0
mov [ esp + 0x18 ] 0x0
mov [ esp + 0x14 ] 0x0
push [ esp + 0x14 ]
mov ebp [ esp + 0x34 ]
pop [ ebp ]
add [ esp + 0x30 ] 0x4
mov ebp [ esp + 0x34 ]
movsx ebx [ ebp ]
and ebx ebx
jne r-xdata
mov [ esp + 0x14 ] 0x0
mov [ esp + 0x18 ] 0x0
mov eax [ esp + 0x4c ]
mov [ esp + 0x38 ] eax
mov [ esp + 0x20 ] 0x0
mov ebx [ esp + 0x18 ]
mov edi [ esp + 0x14 ]
mov ebp [ esp + 0x4 ]
shl edi 0x2
add ebx [ ebp + edi ]
mov edi [ esp + 0x14 ]
mov ebp [ esp + 0xc ]
shl edi 0x2
add ebx [ ebp + edi ]
and ebx 0xff
mov [ esp + 0x18 ] ebx
mov ebx [ esp + 0x14 ]
mov ebp [ esp + 0x4 ]
shl ebx 0x2
mov eax [ ebp + ebx ]
mov [ esp + 0x24 ] eax
mov ebx [ esp + 0x18 ]
shl ebx 0x2
push [ ebp + ebx ]
mov ebx [ esp + 0x18 ]
shl ebx 0x2
pop eax
mov [ ebp + ebx ] eax
push [ esp + 0x24 ]
mov ebx [ esp + 0x1c ]
shl ebx 0x2
pop eax
mov [ ebp + ebx ] eax
inc [ esp + 0x14 ]
jmp r-xdata
mov ebp [ esp + 0x34 ]
movsx eax [ ebp ]
push eax
mov ebx [ esp + 0x18 ]
mov ebp [ esp + 0x10 ]
shl ebx 0x2
pop eax
mov [ ebp + ebx ] eax
inc [ esp + 0x34 ]
inc [ esp + 0x14 ]
jmp r-xdata
mov eax [ esp ]
mov [ esp + 0x34 ] eax
mov eax [ esp + 0x4c ]
jmp r-xdata
mov ebx [ esp + 0x14 ]
inc ebx
and ebx 0xff
mov [ esp + 0x14 ] ebx
mov ebx [ esp + 0x18 ]
mov edi [ esp + 0x14 ]
mov ebp [ esp + 0x4 ]
shl edi 0x2
add ebx [ ebp + edi ]
and ebx 0xff
mov [ esp + 0x18 ] ebx
mov ebx [ esp + 0x14 ]
shl ebx 0x2
mov eax [ ebp + ebx ]
mov [ esp + 0x24 ] eax
mov ebx [ esp + 0x18 ]
shl ebx 0x2
push [ ebp + ebx ]
mov ebx [ esp + 0x18 ]
shl ebx 0x2
pop eax
mov [ ebp + ebx ] eax
push [ esp + 0x24 ]
mov ebx [ esp + 0x1c ]
shl ebx 0x2
pop eax
mov [ ebp + ebx ] eax
mov ebx [ esp + 0x14 ]
shl ebx 0x2
mov ebx [ ebp + ebx ]
mov edi [ esp + 0x18 ]
shl edi 0x2
mov edi [ ebp + edi ]
and edi 0xff
add ebx edi
and ebx 0xff
mov [ esp + 0x1c ] ebx
mov ebx [ esp + 0x1c ]
shl ebx 0x2
mov eax [ ebp + ebx ]
mov [ esp + 0x28 ] eax
mov ebp [ esp + 0x38 ]
movsx ebx [ ebp ]
xor ebx [ esp + 0x28 ]
push ebx
mov ebp [ esp + 0x3c ]
pop eax
mov [ ebp ] al
inc [ esp + 0x38 ]
inc [ esp + 0x20 ]
jmp r-xdata
mov eax 0xff
cmp eax [ esp + 0x14 ]
jl r-xdata
mov eax 0xff
cmp eax [ esp + 0x14 ]
jl r-xdata
push [ esp ]
call sub_4077b0
push eax
mov edx [ esp + 0x8 ]
call sub_403110
mov edx [ esp + 0x10 ]
call sub_403110
pop eax
add esp 0x3c
pop edi
pop ebx
pop ebp
retn 0xc
mov ebx [ esp + 0x50 ]
dec ebx
cmp ebx [ esp + 0x20 ]
jl r-xdata
sub_402831
push ebp
push ebx
mov edx 0x15
sub esp 0x4
mov [ esp ] 0x0
dec edx
jne r-xdata
mov edx [ esp + 0x60 ]
lea ecx [ esp ]
call sub_4030f0
mov edx [ esp + 0x64 ]
lea ecx [ esp + 0x4 ]
call sub_4030f0
mov edx [ esp + 0x68 ]
lea ecx [ esp + 0x8 ]
call sub_4030f0
mov edx [ esp ]
push [ rw-data ]
call sub_407750
mov edx rw-data
call sub_407750
mov edx [ esp + 0xc ]
call sub_407750
lea ecx [ esp + 0x10 ]
pop edx
call sub_403100
lea eax [ esp + 0x10 ]
lea ebp [ esp + 0x10 ]
mov [ ebp ] 0x3c
mov [ ebp + 0x4 ] 0x140
mov [ ebp + 0x1c ] 0x0
mov eax rw-data
mov [ ebp + 0xc ] eax
mov eax rw-data
mov [ ebp + 0x10 ] eax
mov eax [ esp + 0xc ]
mov [ ebp + 0x14 ] eax
mov eax [ esp + 0x4 ]
mov [ ebp + 0x18 ] eax
lea eax [ esp + 0x10 ]
push eax
call ShellExecuteExA
mov [ esp + 0x4c ] eax
jmp r-xdata
mov ebx [ esp + 0x50 ]
cmp ebx 0x103
je r-xdata
push 0x19
call Sleep
lea eax [ esp + 0x50 ]
push eax
lea ebp [ esp + 0x14 ]
push [ ebp + 0x38 ]
call GetExitCodeProcess
and eax eax
je r-xdata
jmp r-xdata
mov eax 0x1
jmp r-xdata
push [ esp ]
call sub_4077b0
push [ esp + 0x4 ]
call sub_4077b0
push [ esp + 0x8 ]
call sub_4077b0
push [ esp + 0xc ]
call sub_4077b0
add esp 0x54
pop ebx
pop ebp
retn 0xc
sub_403000
mov ebp 0x0
pushfd
pop eax
mov ebp 0x0
mov ecx eax
xor eax 0x200000
push eax
popfd
pushfd
pop eax
xor eax ecx
je r-xdata
mov eax ebp
retn
mov eax 0x1
cpuid
mov eax edx
and eax 0x800000
je r-xdata
or ebp 0x2
mov eax edx
and eax 0x2000000
je r-xdata
mov eax 0x80000001
cpuid
mov eax edx
and eax 0x80000000
je r-xdata
or ebp 0x8
mov eax edx
and eax 0x4000000
je r-xdata
or ebp 0x4
or ebp 0x10
sub_403060
push eax
or edx edx
je r-xdata
pop eax
retn
sub edx 0x18
push edx
push esi
push edi
mov eax [ edx + 0x8 ]
mov esi [ edx + 0x10 ]
mov edi [ edx + 0x4 ]
add edx 0x18
push edx
push eax
push eax
push edx
call sub_403128
pop eax
pop edx
add edx edi
dec esi
jne r-xdata
pop edi
pop esi
push 0x0
push [ rw-data ]
call HeapFree
sub_4030a0
push eax
mov edx [ esp + 0x8 ]
inc eax
imul edx eax
add edx 0x18
push edx
push 0x8
push [ rw-data ]
call HeapAlloc
pop edx
or eax eax
je r-xdata
mov edx [ esp + 0xc ]
mov [ edx ] eax
retn 0x10
mov [ eax + 0x10 ] edx
mov edx [ esp + 0x4 ]
mov [ eax + 0x4 ] edx
mov edx [ esp + 0x8 ]
mov [ eax + 0x8 ] edx
mov edx [ esp + 0xc ]
mov [ eax + 0xc ] edx
mov edx [ esp + 0x10 ]
mov [ eax + 0x14 ] edx
mov [ eax ] 0x1
add eax 0x18
sub_403128
push ebp
mov ebp esp
push ebx
push esi
push edi
push eax
mov esi [ ebp + 0xc ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
pop eax
pop edi
pop esi
pop ebx
pop ebp
retn 0x8
mov ebx [ ebp + 0x8 ]
add eax ebx
cmp [ eax ] 0x0
je r-xdata
xor edi edi
cmp [ esi + 0x4 ] edi
jle r-xdata
add esi 0x4
push [ eax ]
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
add esi 0x14
jmp r-xdata
mov eax [ esi + 0xc ]
push [ esi + 0x10 ]
imul eax edi
add eax [ esi + 0x8 ]
add eax ebx
push eax
call sub_403128
inc edi
cmp edi [ esi + 0x4 ]
jl r-xdata
cmp eax 0xfffffffe
jne r-xdata
mov eax [ esi ]
cmp eax 0xffffffff
jne r-xdata
sub_4031f0
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
xor eax eax
retn 0x4
lea edx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
add eax 0x1
test cl cl
jne r-xdata
sub eax edx
retn 0x4
sub_403220
push esi
mov esi [ esp + 0x8 ]
test esi esi
push edi
jge r-xdata
mov eax [ esp + 0x10 ]
push eax
push esi
call sub_407960
test esi esi
mov edi eax
je r-xdata
xor esi esi
mov [ edi ] 0x0
pop edi
pop esi
retn 0x8
push esi
push 0x20
push edi
call memset
add esp 0xc
add edi esi
sub_403260
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
push esi
call sub_4031f0
test esi esi
mov ebx eax
je r-xdata
xor edi edi
cmp [ esi ] 0x20
mov edi esi
jne r-xdata
test edi edi
pop ebp
je r-xdata
push ebp
call sub_407a20
mov edi eax
sub esi edi
cmp esi ebx
mov [ esp + 0x10 ] esi
jge r-xdata
lea ebx [ ebx ]
pop edi
mov [ esi ] 0x0
pop esi
pop ebx
retn 0x8
mov eax [ esp + 0x10 ]
push ebx
add eax edi
push eax
push esi
call sub_407a40
pop edi
pop esi
pop ebx
retn 0x8
xor eax eax
mov eax esi
sub ebx eax
jmp r-xdata
cmp [ edi + ebx - 0x1 ] 0x20
lea eax [ edi + ebx - 0x1 ]
jne r-xdata
add esi 0x1
cmp [ esi ] 0x20
je r-xdata
push ebp
push edi
call sub_4079e0
mov edx [ esp + 0x18 ]
push edx
push ebx
mov ebp eax
call sub_407960
test ebp ebp
mov esi eax
je r-xdata
mov ecx edi
sub ecx eax
lea eax [ ecx + ebx - 0x1 ]
add eax esi
sub ebx eax
jmp r-xdata
lea ecx [ ecx ]
sub eax 0x1
cmp [ eax ] 0x20
je r-xdata
sub_403310
mov ecx [ esp + 0x8 ]
sub esp 0x20
push ebp
push esi
push edi
mov edi eax
mov eax [ esp + 0x30 ]
lea esi [ esp + 0xc ]
mov ebp edi
push ebx
push 0x0
push 0xa
push ecx
push eax
call sub_408010
add cl 0x30
mov [ esi ] cl
mov ecx edx
mov edx eax
add esi 0x1
or edx ecx
mov [ esp + 0x38 ] ebx
jne r-xdata
pop ebx
mov al [ esi - 0x1 ]
sub esi 0x1
mov [ edi ] al
lea ecx [ esp + 0xc ]
add edi 0x1
cmp esi ecx
jne r-xdata
mov [ edi ] 0x0
pop edi
pop esi
mov eax ebp
pop ebp
add esp 0x20
retn
sub_403370
mov edx [ esp + 0x8 ]
test edx edx
mov ecx [ esp + 0x4 ]
mov eax esi
jg r-xdata
push edx
push ecx
call sub_403310
add esp 0x8
mov eax esi
retn
jl r-xdata
not ecx
not edx
add ecx 0x1
mov [ esi ] 0x2d
lea eax [ esi + 0x1 ]
adc edx 0x0
test ecx ecx
jae r-xdata
sub_4033b0
sub esp 0x10
push ebx
push ebp
push edi
push eax
push 0x20
mov ebx ecx
call sub_407960
test ebx ebx
mov edi eax
mov ebp edi
jne r-xdata
jge r-xdata
mov [ edi ] 0x30
add edi 0x1
jmp r-xdata
push esi
xor esi esi
test ebx ebx
je r-xdata
mov [ edi ] 0x2d
add edi 0x1
cmp ebx 0x80000000
jne r-xdata
sub ebp edi
add ebp 0x20
push ebp
call sub_407a90
mov [ edi ] 0x0
pop edi
pop ebp
pop ebx
add esp 0x10
retn
pop esi
jmp r-xdata
neg ebx
mov ecx [ r--data ]
mov [ edi ] ecx
mov edx [ r--data ]
mov [ edi + 0x4 ] edx
mov ax [ r--data ]
mov [ edi + 0x8 ] ax
mov cl [ r--data ]
mov [ edi + 0xa ] cl
add edi 0xa
xor ebx ebx
jmp r-xdata
mov eax 0x66666667
imul ebx
sar edx 0x2
mov eax edx
shr eax 0x1f
add eax edx
mov ecx ebx
mov ebx eax
mov al bl
mov dl 0xa
imul dl
sub cl al
add esi 0x1
add cl 0x30
test ebx ebx
mov [ esp + esi + 0x10 ] cl
jne r-xdata
test esi esi
jle r-xdata
nop
mov al [ esp + esi + 0x10 ]
mov [ edi ] al
sub esi 0x1
add edi 0x1
test esi esi
jg r-xdata
sub_403480
push esi
mov esi [ esp + 0xc ]
push edi
mov edi [ esp + 0xc ]
mov ecx edi
add ecx 0x80000000
mov eax esi
adc eax 0x0
test eax eax
ja r-xdata
mov eax [ esp + 0x14 ]
push ebx
push eax
push 0x40
call sub_407960
test esi esi
mov ebx eax
jg r-xdata
jb r-xdata
push esi
push edi
call sub_403310
mov eax ebx
add esp 0x8
lea edx [ eax + 0x1 ]
pop ebx
jmp r-xdata
jl r-xdata
mov eax [ esp + 0x14 ]
mov ecx edi
call sub_4033b0
pop edi
pop esi
retn 0xc
cmp ecx 0xffffffff
ja r-xdata
mov cl [ eax ]
add eax 0x1
test cl cl
jne r-xdata
not edi
not esi
add edi 0x1
mov [ ebx ] 0x2d
lea eax [ ebx + 0x1 ]
adc esi 0x0
test edi edi
jae r-xdata
sub eax edx
mov ecx 0x40
sub ecx eax
push ecx
call sub_407a90
pop edi
pop esi
retn 0xc
sub_403510
mov eax [ esp + 0x4 ]
push ebx
push ebp
push esi
xor ebp ebp
test eax eax
push edi
jne r-xdata
mov edi [ esp + 0x18 ]
cmp edi 0x1
jge r-xdata
mov eax r--data
mov ecx [ esp + 0x1c ]
mov dl [ ecx ]
xor esi esi
mov ebx eax
jmp r-xdata
mov edi 0x1
mov cl [ eax ]
cmp cl dl
je r-xdata
add esi 0x1
cmp esi edi
je r-xdata
test cl cl
jne r-xdata
mov ebp eax
sub ebp ebx
test cl cl
je r-xdata
add eax 0x1
jmp r-xdata
push esi
push ebp
call sub_407960
test edi edi
mov esi eax
jne r-xdata
push esi
call sub_407ab0
push ebp
push ebx
push eax
call strncpy
add esp 0xc
push eax
call sub_4079e0
mov esi [ esp + 0x20 ]
mov edi eax
test edi edi
je r-xdata
lea ebx [ eax + 0x1 ]
pop edi
mov [ esi + ebp ] 0x0
pop esi
pop ebp
pop ebx
retn 0x10
push ebp
push ebx
push esi
call strncpy
add esp 0xc
sub_4035b0
push esi
mov esi [ esp + 0x8 ]
xor eax eax
xor edx edx
test esi esi
je r-xdata
pop esi
retn 0x4
mov cl [ esi ]
cmp cl 0x20
je r-xdata
add esi 0x1
jmp r-xdata
cmp cl 0x9
jne r-xdata
mov cl [ esi ]
cmp cl 0x2d
push ebx
push ebp
push edi
jne r-xdata
xor edi edi
cmp cl 0x2b
jne r-xdata
mov edi 0x1
add esi edi
jmp r-xdata
mov bl [ esi ]
cmp bl 0x24
jne r-xdata
add esi 0x1
cmp bl 0x25
jne r-xdata
mov bl [ esi + 0x1 ]
add esi 0x1
cmp bl 0x30
jl r-xdata
cmp bl 0x30
jl r-xdata
mov bl [ esi + 0x1 ]
add esi 0x1
cmp bl 0x30
jl r-xdata
cmp bl 0x41
jl r-xdata
cmp bl 0x39
jle r-xdata
test edi edi
pop edi
pop ebp
pop ebx
je r-xdata
lea esp [ esp ]
cmp bl 0x31
jg r-xdata
cmp bl 0x61
jl r-xdata
cmp bl 0x46
jle r-xdata
cmp bl 0x30
jl r-xdata
neg eax
adc edx 0x0
neg edx
push 0x0
push 0xa
push edx
push eax
call sub_4080b0
mov ecx eax
movsx eax bl
mov bl [ esi + 0x1 ]
mov ebp edx
cdq
add ecx eax
adc ebp edx
sub ecx 0x30
sbb ebp 0x0
add esi 0x1
cmp bl 0x30
mov eax ecx
mov edx ebp
jge r-xdata
push 0x0
sub eax 0x18
push 0x2
sbb edx 0x0
push edx
push eax
call sub_4080b0
mov ecx eax
movsx eax bl
mov bl [ esi + 0x1 ]
mov ebp edx
cdq
add ecx eax
adc ebp edx
add esi 0x1
cmp bl 0x30
mov eax ecx
mov edx ebp
jge r-xdata
cmp bl 0x66
jg r-xdata
push 0x0
push 0x10
push edx
push eax
call sub_4080b0
cmp bl 0x61
mov ecx eax
movsx eax bl
mov ebp edx
cdq
jl r-xdata
cmp bl 0x39
jg r-xdata
cmp bl 0x39
jg r-xdata
jmp r-xdata
add ecx eax
adc ebp edx
sub ecx 0x37
sbb ebp 0x0
mov eax ecx
mov edx ebp
jmp r-xdata
add ecx eax
adc ebp edx
sub ecx 0x57
sbb ebp 0x0
mov eax ecx
mov edx ebp
jmp r-xdata
push 0x0
sub eax 0x3
push 0x10
sbb edx 0x0
push edx
push eax
call sub_4080b0
mov ecx eax
movsx eax bl
mov ebp edx
cdq
add ecx eax
adc ebp edx
mov eax ecx
mov edx ebp
jmp r-xdata
sub_403730
sub esp 0xc
push ebx
push ebp
push esi
mov esi [ esp + 0x1c ]
test esi esi
push edi
je r-xdata
mov [ esp + 0x10 ] 0x0
mov eax esi
lea edx [ eax + 0x1 ]
mov eax [ esp + 0x24 ]
test eax eax
je r-xdata
push ebp
call sub_407a20
mov esi eax
mov cl [ eax ]
add eax 0x1
test cl cl
jne r-xdata
sub eax edx
mov [ esp + 0x10 ] eax
jmp r-xdata
test esi esi
mov ebp ebx
mov [ esp + 0x2c ] ebp
je r-xdata
push eax
call sub_407a20
mov edi eax
push esi
call sub_4079e0
mov edi [ esp + 0x24 ]
mov ebp eax
push edi
mov [ esp + 0x18 ] ebp
call sub_4079e0
mov ecx [ esp + 0x10 ]
mov [ esp + 0x24 ] eax
mov eax [ esp + 0x2c ]
push eax
push ecx
call sub_407960
test ebp ebp
mov ebx eax
mov [ esp + 0x20 ] ebx
je r-xdata
sub ebp ebx
add ebp [ esp + 0x10 ]
push ebp
call sub_407a90
pop edi
pop esi
pop ebp
mov [ ebx ] 0x0
pop ebx
add esp 0xc
retn 0x10
cmp [ esi ] 0x0
je r-xdata
test edi edi
je r-xdata
mov edx ebx
mov eax esi
sub edx esi
cmp [ edi ] 0x0
je r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
add eax 0x1
test cl cl
jne r-xdata
add ebx [ esp + 0x10 ]
jmp r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
add eax 0x1
test cl cl
jne r-xdata
sub eax edx
cmp [ esp + 0x24 ] 0x0
mov ebx eax
je r-xdata
test [ esp + 0x28 ] 0x1
mov ebp _strnicmp
jne r-xdata
cmp [ esp + 0x14 ] 0x0
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
mov ebp strncmp
mov eax [ rw-data ]
lea edx [ ebx + 0x1 ]
push edx
push 0x0
push eax
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov ebp eax
mov edx ebp
mov [ esp + 0x18 ] ebp
mov eax edi
sub edx edi
mov edi edi
cmp [ esp + 0x24 ] 0x0
je r-xdata
push ebx
push edi
push esi
call ebp
add esp 0xc
test eax eax
jne r-xdata
mov cl [ eax ]
mov [ edx + eax ] cl
add eax 0x1
test cl cl
jne r-xdata
mov edi ebp
mov ebp [ esp + 0x2c ]
mov ebx [ esp + 0x20 ]
cmp [ esp + 0x14 ] 0x0
jne r-xdata
mov eax [ esp + 0x20 ]
mov cl [ esi ]
mov [ eax ] cl
add eax 0x1
mov [ esp + 0x20 ] eax
add esi 0x1
add esi ebx
jmp r-xdata
mov edx [ esp + 0x18 ]
mov eax [ rw-data ]
push edx
push 0x0
push eax
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
cmp [ esi ] 0x0
jne r-xdata
sub_4038e7
push esi
push 0x1
call sub_403afa
push [ esp + 0x10 ]
push [ esp + 0xc ]
push [ esp + 0x14 ]
call sub_403b52
push eax
call [ MessageBoxA@IAT ]
push 0x0
mov esi eax
call sub_403afa
mov eax esi
pop esi
retn 0xc
sub_40393d
push ebp
mov ebp esp
sub esp 0x128
push ebx
xor ebx ebx
cmp [ rw-data ] ebx
push edi
jne r-xdata
push 0x20
lea eax [ ebp - 0x24 ]
push ebx
push eax
call memset
add esp 0xc
push r--data
call [ __import_lookup_table_0(KERNEL32:LoadLibraryA) ]
cmp eax ebx
mov [ ebp - 0x4 ] eax
mov edi 0x104
je r-xdata
push ebx
mov [ rw-data ] 0x1
call [ CoInitialize@IAT ]
push [ ebp + 0x10 ]
push edi
call sub_407960
mov [ eax ] 0x0
cmp [ ebp + 0xc ] ebx
jne r-xdata
push 0x103
push [ ebp + 0xc ]
lea eax [ ebp - 0x128 ]
push eax
call strncpy
lea eax [ ebp - 0x128 ]
push eax
mov [ ebp - 0x25 ] bl
call strlen
add esp 0x10
cmp eax 0x3
jle r-xdata
mov [ ebp + 0xc ] r--data
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push [ ebp - 0x4 ]
call esi
mov [ ebp + 0xc ] eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x18 ] eax
call sub_403b52
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x128 ]
push 0x1
mov [ ebp - 0x14 ] 0x40
mov [ ebp - 0x10 ] sub_403916
mov [ ebp - 0xc ] eax
call sub_403afa
lea eax [ ebp - 0x24 ]
push eax
call [ ebp + 0xc ]
push 0x0
mov [ ebp + 0xc ] eax
call sub_403afa
cmp [ ebp + 0xc ] ebx
je r-xdata
lea eax [ ebp + eax - 0x129 ]
cmp [ eax ] 0x5c
jne r-xdata
push [ ebp - 0x4 ]
call [ FreeLibrary@IAT ]
test ebx ebx
pop esi
jne r-xdata
push r--data
push [ ebp - 0x4 ]
call esi
push [ ebp + 0x10 ]
mov ebx eax
push edi
call sub_407960
mov esi eax
push esi
push [ ebp + 0xc ]
mov [ esi ] 0x0
call ebx
push [ ebp + 0xc ]
call [ CoTaskMemFree@IAT ]
push esi
call strlen
mov ebx eax
lea eax [ esi + ebx ]
cmp [ eax - 0x1 ] 0x5c
pop ecx
je r-xdata
mov [ eax ] bl
sub edi ebx
push edi
call sub_407a90
pop edi
pop ebx
leave
retn 0xc
mov [ eax ] 0x5c
mov [ eax + 0x1 ] 0x0
inc ebx
sub_403a93
push ebx
push esi
push edi
mov edi [ esp + 0x10 ]
push 0x0
push edi
call [ __import_lookup_table_7(USER32:GetWindowThreadProcessId) ]
mov ebx [ __import_lookup_table_0(KERNEL32:GetCurrentThreadId) ]
mov esi eax
call ebx
cmp esi eax
jne r-xdata
pop edi
xor eax eax
pop esi
inc eax
pop ebx
retn 0x8
push edi
call [ __import_lookup_table_7(USER32:IsWindowVisible) ]
test eax eax
je r-xdata
push edi
call [ __import_lookup_table_7(USER32:IsWindowEnabled) ]
test eax eax
je r-xdata
call [ __import_lookup_table_7(USER32:GetForegroundWindow) ]
cmp edi eax
je r-xdata
push 0x0
push edi
call [ __import_lookup_table_7(USER32:EnableWindow) ]
push 0x10
push rw-data
call sub_406a3a
pop ecx
mov esi eax
pop ecx
mov [ esi + 0x4 ] edi
call ebx
mov [ esi ] eax
sub_403afa
cmp [ esp + 0x4 ] 0x0
je r-xdata
push esi
mov esi [ rw-data ]
test esi esi
je r-xdata
push [ esp + 0x4 ]
push sub_403a93
call [ EnumWindows@IAT ]
jmp r-xdata
pop esi
push ebx
push edi
retn 0x4
test ebx ebx
mov esi ebx
jne r-xdata
push 0x1
push [ esi + 0xc ]
call [ __import_lookup_table_7(USER32:EnableWindow) ]
push edi
push rw-data
call sub_406a7d
pop ecx
pop ecx
mov ebx [ esi ]
lea edi [ esi + 0x8 ]
call [ __import_lookup_table_0(KERNEL32:GetCurrentThreadId) ]
cmp [ edi ] eax
jne r-xdata
pop edi
pop ebx
sub_403b52
push ebp
mov ebp esp
push ecx
push esi
call [ __import_lookup_table_7(USER32:GetForegroundWindow) ]
mov esi eax
test esi esi
je r-xdata
mov eax esi
pop esi
leave
retn
lea eax [ ebp - 0x4 ]
push eax
push esi
call [ __import_lookup_table_7(USER32:GetWindowThreadProcessId) ]
call [ __import_lookup_table_0(KERNEL32:GetCurrentProcessId) ]
cmp [ ebp - 0x4 ] eax
je r-xdata
xor esi esi
sub_403b9c
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_40668d
or [ ebp - 0x4 ] 0xffffffff
mov edi eax
xor esi esi
call [ __import_lookup_table_0(KERNEL32:GetCommandLineA) ]
mov cl [ eax ]
test cl cl
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov edx [ ebp + 0x8 ]
mov ecx [ ebp + 0x8 ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov cl [ eax ]
xor ebx ebx
inc ebx
cmp cl 0x22
jne r-xdata
inc eax
cmp [ eax ] 0x20
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
test cl cl
je r-xdata
inc eax
mov cl [ eax ]
test cl cl
mov esi eax
je r-xdata
xor ebx ebx
mov esi eax
mov edx eax
jmp r-xdata
cmp cl 0x22
je r-xdata
test ebx ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
jne r-xdata
cmp [ eax ] 0x0
mov edx eax
je r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
mov ecx [ edi ]
cmp ecx [ ebp - 0x4 ]
jne r-xdata
cmp [ eax ] 0x0
je r-xdata
inc eax
mov cl [ eax ]
test cl cl
jne r-xdata
mov cl [ eax ]
xor esi esi
test cl cl
jne r-xdata
inc [ ebp - 0x4 ]
test esi esi
je r-xdata
jmp r-xdata
cmp cl 0x20
je r-xdata
mov edx eax
cmp cl 0x20
jne r-xdata
and [ ecx ] 0x0
sub edx esi
mov [ ecx ] edx
inc [ edi ]
mov eax esi
jmp r-xdata
inc eax
jmp r-xdata
sub_403c5d
push ebp
mov ebp esp
push ecx
push [ rw-data ]
and [ ebp - 0x4 ] 0x0
call sub_40668d
mov ecx [ ebp + 0x8 ]
test ecx ecx
jl r-xdata
push ebx
push esi
push edi
lea eax [ ebp - 0x4 ]
push eax
call sub_403b9c
push [ ebp + 0xc ]
mov esi [ ebp - 0x4 ]
push esi
mov ebx eax
call sub_407960
push esi
mov edi eax
push ebx
push edi
call strncpy
add esp 0xc
mov [ edi + esi ] 0x0
pop edi
pop esi
pop ebx
leave
retn 0x8
mov [ eax ] ecx
sub_403cbe
push ebx
push esi
push edi
push [ esp + 0x10 ]
mov ebx 0x104
push ebx
call sub_407960
push ebx
mov esi eax
push esi
push [ rw-data ]
call [ GetModuleFileNameA@IAT ]
push r--data
push esi
mov edi eax
call strcmp
test eax eax
pop ecx
pop ecx
jne r-xdata
sub ebx edi
push ebx
call sub_407a90
mov [ edi + esi ] 0x0
pop edi
pop esi
pop ebx
retn 0x4
lea eax [ edi - 0x4 ]
push eax
lea eax [ esi + 0x4 ]
push eax
push esi
call memmove
add esp 0xc
sub edi 0x4
sub_403d3a
mov eax [ rw-data ]
test eax eax
je r-xdata
mov eax [ rw-data ]
test eax eax
je r-xdata
push eax
call [ CloseHandle@IAT ]
and [ rw-data ] 0x0
retn
push eax
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
and [ rw-data ] 0x0
sub_403d90
mov eax [ esp + 0x4 ]
push eax
call sub_403e40
test eax eax
je r-xdata
xor eax eax
retn 0x4
mov eax [ rw-data ]
test eax eax
je r-xdata
push 0x0
mov [ rw-data ] 0xffffffff
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
call eax
sub_403dd0
mov eax [ esp + 0x4 ]
mov [ rw-data ] eax
mov [ esp + 0x4 ] sub_403d90
jmp r-xdata
mov eax [ esp + 0x4 ]
test eax eax
je r-xdata
mov eax [ rw-data ]
push eax
call [ __import_lookup_table_0(KERNEL32:SetUnhandledExceptionFilter) ]
mov [ rw-data ] 0x0
retn 0x4
cmp [ rw-data ] 0x0
je r-xdata
push eax
call [ __import_lookup_table_0(KERNEL32:SetUnhandledExceptionFilter) ]
mov [ rw-data ] eax
retn 0x4
mov [ esp + 0x4 ] eax
jmp [ __import_lookup_table_0(KERNEL32:SetUnhandledExceptionFilter) ]
sub_403e40
mov eax [ esp + 0x4 ]
mov ecx [ eax ]
mov edx [ ecx ]
mov [ rw-data ] edx
mov ecx [ eax ]
mov edx [ ecx + 0xc ]
mov ecx [ rw-data ]
mov [ rw-data ] edx
mov [ rw-data ] ecx
mov ecx [ eax ]
cmp [ ecx ] 0xc0000005
jne r-xdata
mov [ rw-data ] 0x0
cmp [ ecx + 0x10 ] 0x2
jb r-xdata
mov edx [ ecx + 0x18 ]
mov [ rw-data ] edx
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0xb0 ]
mov [ rw-data ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0xa4 ]
mov [ rw-data ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0xac ]
mov [ rw-data ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0xa8 ]
mov [ rw-data ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0xb4 ]
mov [ rw-data ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0xa0 ]
mov [ rw-data ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0x9c ]
mov [ rw-data ] edx
mov ecx [ eax + 0x4 ]
mov edx [ ecx + 0xc4 ]
mov [ rw-data ] edx
mov eax [ eax + 0x4 ]
mov ecx [ eax + 0xc0 ]
mov [ rw-data ] ecx
mov eax 0x1
retn 0x4
sub_403f37
push ebp
lea ebp [ esp - 0x78 ]
sub esp 0x130
push esi
mov esi [ GetVersionExA@IAT ]
push edi
push 0x64
pop edi
lea eax [ ebp - 0x1c ]
push eax
mov [ ebp - 0x1c ] 0x94
call esi
test eax eax
je r-xdata
mov eax edi
pop edi
pop esi
add ebp 0x78
leave
retn
mov eax [ ebp - 0xc ]
dec eax
je r-xdata
cmp [ ebp - 0x14 ] 0x0
je r-xdata
dec eax
jne r-xdata
push 0xa
cmp [ ebp - 0x14 ] 0xa
je r-xdata
mov eax [ ebp - 0x18 ]
sub eax 0x3
je r-xdata
push 0x1e
jmp r-xdata
cmp [ ebp - 0x14 ] 0x5a
jne r-xdata
push 0x5
jmp r-xdata
dec eax
je r-xdata
pop edi
push 0x28
jmp r-xdata
push 0x14
jmp r-xdata
dec eax
je r-xdata
mov eax [ ebp - 0x14 ]
sub eax 0x0
je r-xdata
dec eax
jne r-xdata
push 0x32
jmp r-xdata
dec eax
je r-xdata
push 0x46
pop edi
lea eax [ ebp - 0xb8 ]
push eax
mov [ ebp - 0xb8 ] 0x9c
call esi
test eax eax
je r-xdata
push 0x3c
jmp r-xdata
dec eax
jne r-xdata
cmp [ ebp - 0x1e ] 0x1
je r-xdata
push 0x41
jmp r-xdata
push 0x4b
jmp r-xdata
sub_404020
push esi
push edi
mov edi [ esp + 0x10 ]
test edi edi
jge r-xdata
mov eax [ esp + 0x14 ]
push eax
push edi
call sub_407960
mov ecx [ esp + 0xc ]
test ecx ecx
mov esi eax
je r-xdata
xor edi edi
push edi
call sub_407a90
pop edi
mov [ esi ] 0x0
pop esi
retn 0xc
test edi edi
je r-xdata
mov al [ ecx ]
test al al
je r-xdata
mov [ esi ] al
add esi 0x1
add ecx 0x1
sub edi 0x1
jne r-xdata
sub_404090
push ebx
mov ebx [ esp + 0x8 ]
push esi
xor esi esi
test ebx ebx
push edi
je r-xdata
mov eax [ esp + 0x14 ]
push eax
push esi
call sub_407960
test esi esi
mov edi eax
je r-xdata
mov eax ebx
lea edx [ eax + 0x1 ]
mov [ edi + esi ] 0x0
pop edi
pop esi
pop ebx
retn 0x8
push esi
push ebx
push edi
call memcpy
add esp 0xc
mov cl [ eax ]
add eax 0x1
test cl cl
jne r-xdata
sub eax edx
mov esi eax
sub_404120
mov ecx [ esp + 0x8 ]
test ecx ecx
jle r-xdata
xor eax eax
retn 0x8
mov eax [ esp + 0x4 ]
test eax eax
push ecx
je r-xdata
call sub_404070
retn 0x8
push eax
mov eax [ rw-data ]
push 0x8
push eax
call [ HeapReAlloc@IAT ]
retn 0x8
sub_404150
push esi
push edi
push 0x2c
xor edi edi
push edi
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov ecx [ esp + 0x10 ]
mov esi eax
mov eax [ esp + 0xc ]
mov [ esi + 0xc ] ecx
mov ecx [ esp + 0x14 ]
push 0x10000
add eax 0x8
mov [ esi + 0x18 ] ecx
mov ecx [ esp + 0x1c ]
push 0x10
push eax
mov [ esi + 0x8 ] edi
mov [ esi ] edi
mov [ esi + 0x4 ] edi
mov [ esi + 0x20 ] eax
mov [ esi + 0x10 ] edi
mov [ esi + 0x24 ] 0x1
mov [ esi + 0x28 ] ecx
call sub_4066bc
mov [ esi + 0x1c ] eax
pop edi
mov eax esi
pop esi
retn 0x10
sub_4041cf
mov ecx [ esp + 0x4 ]
mov eax [ ecx + 0x8 ]
test eax eax
je r-xdata
mov eax [ ecx ]
and [ ecx + 0x14 ] 0x0
test eax eax
mov [ ecx + 0x8 ] eax
je r-xdata
mov eax [ eax ]
test eax eax
je r-xdata
mov edx [ ecx + 0xc ]
mov ecx [ ecx + 0x8 ]
mov [ edx ] ecx
retn 0x4
add eax 0x8
inc [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
jmp r-xdata
sub_404203
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
push [ esi + 0x1c ]
call sub_406701
push [ esi + 0x20 ]
xor ebx ebx
mov edi eax
push ebx
push edi
call memset
mov eax [ esi + 0x8 ]
add esp 0xc
inc [ esi + 0x10 ]
cmp eax ebx
jne r-xdata
mov [ edi + 0x4 ] eax
mov eax [ esi + 0x8 ]
mov eax [ eax ]
mov [ edi ] eax
mov eax [ esi + 0x8 ]
cmp [ eax ] ebx
je r-xdata
mov eax [ esi ]
cmp eax ebx
je r-xdata
mov eax [ esi + 0x8 ]
mov [ eax ] edi
inc [ esi + 0x14 ]
mov [ esi + 0x8 ] edi
mov eax [ eax ]
mov [ eax + 0x4 ] edi
mov eax [ esi ]
mov [ esi + 0x8 ] edi
mov [ edi ] eax
mov [ edi + 0x4 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x24 ] ebx
jmp r-xdata
mov [ eax + 0x4 ] edi
cmp [ eax ] ebx
jne r-xdata
mov [ esi ] eax
mov eax [ esi + 0x8 ]
cmp [ eax + 0x4 ] ebx
jne r-xdata
mov ecx [ esi + 0xc ]
mov [ ecx ] eax
lea eax [ edi + 0x8 ]
pop edi
pop esi
pop ebx
retn 0x4
mov [ esi + 0x4 ] eax
sub_404288
push esi
mov esi [ esp + 0x8 ]
test esi esi
je r-xdata
pop esi
retn 0x4
push esi
call sub_4042b2
push [ esi + 0x1c ]
call sub_40686e
push esi
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
sub_4042b2
push ebx
push ebp
push esi
mov esi [ esp + 0x10 ]
mov ebx [ esi + 0x18 ]
xor ebp ebp
cmp ebx ebp
je r-xdata
push [ esi + 0x1c ]
call sub_40681e
mov eax [ esi + 0xc ]
mov [ esi + 0x8 ] ebp
mov [ eax ] ebp
mov [ esi ] ebp
mov [ esi + 0x4 ] ebp
mov [ esi + 0x10 ] ebp
mov [ esi + 0x24 ] 0x1
pop esi
pop ebp
pop ebx
retn 0x4
push edi
mov edi [ esi ]
jmp r-xdata
cmp edi ebp
jne r-xdata
push ebx
lea eax [ edi + 0x8 ]
push eax
call sub_403128
mov edi [ edi ]
pop edi
sub_4042fd
push esi
mov esi [ esp + 0x8 ]
push 0x28
push 0x8
mov [ esi + 0x14 ] 0xa
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov [ esi + 0xc ] eax
mov eax [ rw-data ]
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] eax
pop esi
retn
sub_404340
push ebp
mov ebp esp
push ecx
push ecx
push rw-data
call [ __import_lookup_table_0(KERNEL32:InitializeCriticalSection) ]
push 0x11
call [ __import_lookup_table_2(GDI32:GetStockObject) ]
push sub_4048c2
push 0x32
push 0x20
mov [ rw-data ] eax
call sub_406951
push sub_40432a
push sub_4042fd
push 0x50
mov [ rw-data ] eax
call sub_406694
push 0x8
mov [ rw-data ] eax
lea eax [ ebp - 0x8 ]
push 0x0
push eax
call memset
add esp 0xc
lea eax [ ebp - 0x8 ]
push eax
mov [ ebp - 0x8 ] 0x8
mov [ ebp - 0x4 ] 0xb08
call [ InitCommonControlsEx@IAT ]
leave
retn
sub_4043ca
cmp [ esp + 0xc ] 0x138
push ebp
mov ebp 0xd0d0d0d1
jne r-xdata
mov eax ebp
pop ebp
retn 0x14
push ebx
mov ebx [ esp + 0x18 ]
push esi
mov esi [ esp + 0x10 ]
mov eax [ esi + 0x14 ]
cmp eax 0xffffffff
push edi
mov edi [ SetBkColor@IAT ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax 0xffffffff
je r-xdata
push eax
push ebx
call [ __import_lookup_table_2(GDI32:SetTextColor) ]
cmp [ esi + 0x10 ] 0xffffffff
jne r-xdata
pop edi
pop esi
pop ebx
push eax
push ebx
call edi
mov ebp [ esi + 0x18 ]
push 0xf
call [ GetSysColor@IAT ]
push eax
push ebx
call edi
push 0xf
call [ GetSysColorBrush@IAT ]
mov ebp eax
sub_40442f
push ebp
mov ebp esp
push ebx
push esi
push edi
push [ rw-data ]
call sub_40668d
cmp [ rw-data ] 0x0
mov ebx eax
mov edi rw-data
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov esi 0x94
push esi
push 0x0
push edi
call memset
add esp 0xc
mov [ rw-data ] 0x3
mov [ rw-data ] esi
mov [ rw-data ] sub_4043ca
mov [ rw-data ] sub_4048e0
mov [ rw-data ] sub_40493a
mov [ rw-data ] sub_404960
mov [ rw-data ] 0x1
mov ecx [ ebp + 0x20 ]
push 0x0
push [ rw-data ]
mov eax ecx
push 0xffffffff
push [ ebx ]
or ecx 0x50020000
push [ ebp + 0x18 ]
shr eax 0x8
push [ ebp + 0x14 ]
and eax 0x200
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
push [ ebp + 0x1c ]
push r--data
push eax
call [ CreateWindowExA@IAT ]
mov esi eax
test esi esi
je r-xdata
mov [ ebp + 0x1c ] r--data
pop edi
mov eax esi
pop esi
pop ebx
pop ebp
retn 0x1c
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_40688c
or [ eax + 0x14 ] 0xffffffff
or [ eax + 0x10 ] 0xffffffff
push edi
push esi
push eax
push [ ebp + 0x8 ]
call sub_404a1b
mov esi eax
sub_40453d
cmp [ esp + 0xc ] 0x133
push ebp
push esi
mov esi [ esp + 0xc ]
mov ebp 0xd0d0d0d1
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0xffffffff
push ebx
mov ebx [ esp + 0x1c ]
push edi
mov edi [ SetBkColor@IAT ]
je r-xdata
cmp [ esp + 0x14 ] 0x138
jne r-xdata
mov eax [ esi + 0x10 ]
cmp eax 0xffffffff
je r-xdata
push eax
push ebx
call [ __import_lookup_table_2(GDI32:SetTextColor) ]
cmp [ esi + 0x10 ] 0xffffffff
jne r-xdata
pop esi
mov eax ebp
pop ebp
retn 0x14
push [ esi ]
call [ __import_lookup_table_7(USER32:IsWindowEnabled) ]
test eax eax
je r-xdata
pop edi
pop ebx
push eax
push ebx
call edi
mov ebp [ esi + 0x18 ]
push 0x14
call [ GetSysColor@IAT ]
push eax
push ebx
call edi
push 0x14
call [ GetSysColorBrush@IAT ]
mov ebp eax
sub_4045b8
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x7
push esi
mov esi [ ebp + 0x8 ]
jne r-xdata
cmp [ ebp + 0xc ] 0x8
jne r-xdata
push 0x36b0
jmp r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
push [ rw-data ]
call [ __import_lookup_table_7(USER32:CallWindowProcA) ]
pop esi
pop ebp
retn 0x10
push 0x36b1
push 0xfffffff4
push esi
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
push eax
push 0x332f
push esi
call sub_404a96
push eax
call [ PostMessageA@IAT ]
sub_40460e
push ebp
mov ebp esp
push ebx
push esi
push edi
push [ rw-data ]
call sub_40668d
cmp [ rw-data ] 0x0
mov esi eax
mov ebx rw-data
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edi 0x94
push edi
push 0x0
push ebx
call memset
add esp 0xc
mov [ rw-data ] 0x2
mov [ rw-data ] edi
mov [ rw-data ] sub_40453d
mov [ rw-data ] sub_4048e0
mov [ rw-data ] sub_40493a
mov [ rw-data ] sub_404960
mov [ rw-data ] 0x1
mov ecx [ ebp + 0x20 ]
push 0x0
push [ rw-data ]
mov eax ecx
push 0xffffffff
push [ esi ]
or ecx 0x50030080
push [ ebp + 0x18 ]
shr eax 0x8
push [ ebp + 0x14 ]
not eax
push [ ebp + 0x10 ]
and eax 0x200
push [ ebp + 0xc ]
push ecx
push [ ebp + 0x1c ]
push r--data
push eax
call [ CreateWindowExA@IAT ]
mov edi eax
test edi edi
je r-xdata
mov [ ebp + 0x1c ] r--data
mov eax edi
pop edi
pop esi
pop ebx
pop ebp
retn 0x1c
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_40688c
push sub_4045b8
push 0xfffffffc
push edi
mov esi eax
call [ __import_lookup_table_7(USER32:SetWindowLongA) ]
or [ esi + 0x14 ] 0xffffffff
or [ esi + 0x10 ] 0xffffffff
push ebx
push edi
push esi
push [ ebp + 0x8 ]
mov [ rw-data ] eax
call sub_404a1b
mov edi eax
sub_404750
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_40668d
xor ebx ebx
cmp [ rw-data ] ebx
mov [ ebp - 0x4 ] eax
mov edi rw-data
jne r-xdata
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi 0x94
push esi
push ebx
push edi
call memset
xor eax eax
add esp 0xc
inc eax
mov [ rw-data ] eax
mov [ rw-data ] esi
mov [ rw-data ] sub_404735
mov [ rw-data ] sub_404713
mov [ rw-data ] eax
mov eax [ ebp - 0x4 ]
push ebx
push [ rw-data ]
push 0xffffffff
push [ eax ]
mov eax [ ebp + 0x20 ]
push [ ebp + 0x18 ]
or eax 0x50030000
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
push [ ebp + 0x1c ]
push r--data
push ebx
call [ CreateWindowExA@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
mov [ ebp + 0x1c ] r--data
pop edi
mov eax esi
pop esi
pop ebx
leave
retn 0x1c
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_40688c
push edi
push esi
push eax
push [ ebp + 0x8 ]
call sub_404a1b
mov esi eax
sub_40485c
push edi
push [ esp + 0x8 ]
push [ rw-data ]
call sub_4068f0
mov edi eax
test edi edi
je r-xdata
pop edi
retn 0x8
mov eax [ edi + 0x4 ]
mov eax [ eax + 0x18 ]
test eax eax
je r-xdata
push ebx
push esi
push [ edi ]
call [ __import_lookup_table_7(USER32:GetWindowTextLengthA) ]
push [ esp + 0x14 ]
mov esi eax
push esi
call sub_407960
mov ebx eax
lea eax [ esi + 0x1 ]
push eax
push ebx
mov [ ebx ] 0x0
push [ edi ]
call [ GetWindowTextA@IAT ]
push ebx
call strlen
pop ecx
sub esi eax
push esi
call sub_407a90
pop esi
pop ebx
push [ esp + 0xc ]
push edi
call eax
jmp r-xdata
sub_4048e0
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
push esi
mov esi [ ebp + 0x8 ]
jne r-xdata
cmp [ ebp + 0xc ] 0x2
jne r-xdata
mov eax [ ebp + 0x10 ]
mov [ esi + 0x14 ] eax
jmp r-xdata
push 0x407
push 0x0
push 0x0
push [ esi ]
call [ RedrawWindow@IAT ]
pop esi
pop ebp
retn 0xc
mov eax [ esi + 0x18 ]
test eax eax
je r-xdata
push edi
mov edi [ ebp + 0x10 ]
cmp edi 0xffffffff
jne r-xdata
push eax
call sub_404b36
push edi
call sub_404ac9
mov [ esi + 0x18 ] eax
and [ esi + 0x18 ] 0x0
jmp r-xdata
mov [ esi + 0x10 ] edi
pop edi
sub_404974
push ebp
mov ebp esp
push ebx
push edi
mov edi [ ebp + 0x8 ]
push 0xfffffff4
push edi
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push edi
call [ __import_lookup_table_7(USER32:DefWindowProcA) ]
push esi
push ebx
push [ rw-data ]
call sub_4068f0
push [ ebp + 0x14 ]
mov esi eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push edi
push [ esi + 0xc ]
call [ __import_lookup_table_7(USER32:CallWindowProcA) ]
cmp [ ebp + 0xc ] 0x82
mov [ ebp + 0x14 ] eax
jne r-xdata
mov eax [ ebp + 0x14 ]
pop esi
jmp r-xdata
mov eax [ esi + 0x4 ]
mov eax [ eax + 0xc ]
test eax eax
je r-xdata
pop edi
pop ebx
pop ebp
retn 0x10
mov esi [ RemovePropA@IAT ]
push r--data
push edi
call esi
push r--data
push edi
call esi
test eax eax
je r-xdata
push esi
call eax
push 0xffffffff
push 0xfffffff4
push edi
call [ __import_lookup_table_7(USER32:SetWindowLongA) ]
push ebx
push [ rw-data ]
call sub_40691b
push edi
call [ RevokeDragDrop@IAT ]
sub_404a1b
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
push [ rw-data ]
call sub_40668d
cmp [ ebp + 0x8 ] 0xffffffff
mov esi [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
jne r-xdata
mov ebx [ ebp + 0x10 ]
mov eax [ ebp + 0x14 ]
mov edi [ __import_lookup_table_7(USER32:SetWindowLongA) ]
push sub_404974
push 0xfffffffc
push ebx
mov [ esi ] ebx
mov [ esi + 0x4 ] eax
call edi
push [ ebp + 0x8 ]
mov [ esi + 0xc ] eax
push 0xfffffff4
push ebx
call edi
push [ ebp + 0x8 ]
push r--data
push ebx
call [ SetPropA@IAT ]
mov edi [ ebp - 0x4 ]
push 0x1
push [ edi + 0x8 ]
push 0x30
push ebx
call [ __import_lookup_table_7(USER32:SendMessageA) ]
and [ edi + 0x4 ] 0x0
cmp [ ebp + 0x8 ] esi
mov eax esi
je r-xdata
mov [ ebp + 0x8 ] esi
pop edi
pop esi
pop ebx
leave
retn 0x10
mov eax ebx
sub_404a96
push ebx
mov ebx [ esp + 0x8 ]
push esi
push edi
mov edi [ GetParent@IAT ]
push ebx
jmp r-xdata
call edi
mov esi eax
test esi esi
jne r-xdata
push r--data
push ebx
call [ GetPropA@IAT ]
test eax eax
jne r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
retn 0x4
mov ebx esi
push esi
sub_404ac9
push ebx
push ebp
push edi
mov ebp rw-data
push ebp
xor edi edi
call [ __import_lookup_table_0(KERNEL32:EnterCriticalSection) ]
mov eax [ rw-data ]
mov ebx [ esp + 0x10 ]
jmp r-xdata
test eax eax
jne r-xdata
cmp [ eax + 0x8 ] ebx
je r-xdata
jmp r-xdata
mov edi [ eax + 0xc ]
inc [ eax + 0x10 ]
test edi edi
jne r-xdata
mov eax [ eax ]
push esi
push 0x14
push rw-data
call sub_406a3a
mov esi eax
test esi esi
pop ecx
pop ecx
je r-xdata
push ebp
call [ __import_lookup_table_0(KERNEL32:LeaveCriticalSection) ]
mov eax edi
pop edi
pop ebp
pop ebx
retn 0x4
pop esi
push ebx
mov [ esi ] ebx
call [ CreateSolidBrush@IAT ]
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] 0x1
mov edi eax
sub_404b36
push esi
push edi
mov edi rw-data
push edi
call [ __import_lookup_table_0(KERNEL32:EnterCriticalSection) ]
mov esi [ rw-data ]
jmp r-xdata
test esi esi
jne r-xdata
mov eax [ esi + 0xc ]
cmp eax [ esp + 0xc ]
je r-xdata
jmp r-xdata
dec [ esi + 0x10 ]
jne r-xdata
mov esi [ esi ]
push edi
call [ __import_lookup_table_0(KERNEL32:LeaveCriticalSection) ]
pop edi
pop esi
retn 0x4
push eax
call [ DeleteObject@IAT ]
add esi 0x8
push esi
push rw-data
call sub_406a7d
pop ecx
pop ecx
sub_404b85
push ebp
mov ebp esp
sub esp 0x100
push esi
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_4068f0
mov esi eax
test esi esi
je r-xdata
pop esi
leave
retn 0x4
push 0x4
push [ esi ]
call [ __import_lookup_table_7(USER32:GetWindow) ]
test eax eax
je r-xdata
push edi
mov edi [ RemovePropA@IAT ]
push r--data
push [ esi ]
call edi
push r--data
push [ esi ]
call edi
test eax eax
pop edi
je r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
push [ esi ]
call [ RevokeDragDrop@IAT ]
push eax
call [ __import_lookup_table_7(USER32:SetActiveWindow) ]
push [ esi ]
call [ DestroyWindow@IAT ]
push [ ebp + 0x8 ]
lea eax [ ebp - 0x100 ]
push r--data
push eax
call sprintf
add esp 0xc
push [ rw-data ]
lea eax [ ebp - 0x100 ]
push eax
call [ __import_lookup_table_7(USER32:UnregisterClassA) ]
push 0x0
push [ esi ]
push 0x221
push eax
call [ __import_lookup_table_7(USER32:SendMessageA) ]
jmp r-xdata
mov esi [ esi + 0x18 ]
test esi esi
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
push [ esi + 0x8 ]
call [ __import_lookup_table_7(USER32:DestroyAcceleratorTable) ]
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_40691b
push esi
call [ DeleteObject@IAT ]
sub_404c73
push ebp
mov ebp esp
push ecx
push edi
push [ rw-data ]
call sub_40668d
push [ rw-data ]
mov edi eax
call sub_40699a
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
push [ rw-data ]
call sub_4069be
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call sub_404b85
mov eax [ edi + 0x54 ]
test eax eax
je r-xdata
pop edi
leave
retn
mov eax [ eax + 0x14 ]
test eax eax
push esi
mov esi [ __import_lookup_table_0(KERNEL32:HeapFree) ]
je r-xdata
push [ edi + 0x54 ]
push 0x0
push [ rw-data ]
call esi
pop esi
push eax
push 0x0
push [ rw-data ]
call esi
sub_404cde
push edi
mov edi [ esp + 0x8 ]
mov eax [ edi + 0x54 ]
test eax eax
je r-xdata
pop edi
retn
mov eax [ eax + 0x14 ]
test eax eax
push esi
mov esi [ __import_lookup_table_0(KERNEL32:HeapFree) ]
je r-xdata
push [ edi + 0x54 ]
push 0x0
push [ rw-data ]
call esi
pop esi
push eax
push 0x0
push [ rw-data ]
call esi
sub_404d13
push sub_404b85
push 0x10
push 0x30
call sub_406951
push sub_404cde
push 0x0
push 0x58
mov [ rw-data ] eax
call sub_406694
push 0x1
push [ rw-data ]
mov [ rw-data ] eax
call [ LoadIconA@IAT ]
push 0x7f00
push 0x0
mov [ rw-data ] eax
call [ LoadCursorA@IAT ]
mov [ rw-data ] eax
jmp sub_4052e2
sub_404d63
push ebp
mov ebp esp
sub esp 0x13c
push ebx
push esi
push edi
push [ ebp + 0x8 ]
mov [ ebp - 0x14 ] 0x1
push [ rw-data ]
call sub_40688c
cmp [ ebp + 0x8 ] 0xffffffff
mov esi eax
jne r-xdata
push [ ebp + 0x8 ]
cmp esi 0xffffffff
mov [ ebp + 0x8 ] esi
jne r-xdata
push 0x28
lea eax [ ebp - 0x3c ]
push edi
push eax
call memset
mov eax [ rw-data ]
mov [ ebp - 0x2c ] eax
mov eax [ rw-data ]
mov [ ebp - 0x28 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x24 ] eax
lea eax [ ebp - 0x13c ]
mov [ ebp - 0x18 ] eax
add esp 0xc
lea eax [ ebp - 0x3c ]
push eax
mov [ ebp - 0x3c ] 0x8
mov [ ebp - 0x38 ] sub_405d7f
mov [ ebp - 0x30 ] edi
mov [ ebp - 0x20 ] 0x10
call [ RegisterClassA@IAT ]
mov ebx [ ebp + 0x20 ]
test bl 0x8
je r-xdata
mov [ ebp + 0x1c ] r--data
push eax
jmp r-xdata
and ebx 0xfffffff7
test ebx 0xeffffffc
jne r-xdata
mov [ ebp - 0x14 ] edi
lea eax [ ebp - 0x13c ]
push r--data
push eax
call sprintf
xor edi edi
add esp 0xc
cmp [ ebp + 0x1c ] edi
jne r-xdata
test ebx 0x10000000
je r-xdata
or ebx 0xc00000
mov [ ebp + 0x20 ] 0x1
and ebx 0xefffffff
mov [ ebp + 0x20 ] edi
jmp r-xdata
test bl 0x3
jne r-xdata
cmp [ ebp + 0x10 ] eax
jne r-xdata
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x4 ] eax
push edi
mov eax ebx
and eax 0xfffffffc
push eax
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] edi
mov [ ebp - 0xc ] edi
call [ AdjustWindowRect@IAT ]
mov eax [ ebp - 0x8 ]
sub eax [ ebp - 0x10 ]
mov edi [ ebp + 0xc ]
mov [ ebp + 0x14 ] eax
mov eax [ ebp - 0x4 ]
sub eax [ ebp - 0xc ]
mov [ ebp + 0x18 ] eax
mov eax 0xffff0001
cmp edi eax
je r-xdata
test bl 0x1
je r-xdata
mov edi 0x80000000
mov [ ebp + 0x10 ] edi
test bl 0x2
je r-xdata
push 0x0
call [ __import_lookup_table_7(USER32:GetSystemMetrics) ]
cmp [ ebp + 0x14 ] eax
jle r-xdata
xor eax eax
push eax
push [ rw-data ]
and ebx 0xfffffffc
push eax
push [ ebp + 0x24 ]
lea ecx [ ebp - 0x13c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push edi
push ebx
push [ ebp + 0x1c ]
push ecx
push eax
call [ CreateWindowExA@IAT ]
xor edi edi
cmp eax edi
mov [ esi ] eax
je r-xdata
mov eax [ ebp + 0x24 ]
test eax eax
jne r-xdata
sub eax [ ebp + 0x14 ]
push 0x1
cdq
sub eax edx
mov edi eax
sar edi 0x1
call [ __import_lookup_table_7(USER32:GetSystemMetrics) ]
cmp [ ebp + 0x18 ] eax
jle r-xdata
mov [ ebp + 0x14 ] eax
push [ rw-data ]
lea eax [ ebp - 0x13c ]
push eax
call [ __import_lookup_table_7(USER32:UnregisterClassA) ]
push [ ebp + 0x8 ]
push [ rw-data ]
call sub_40691b
xor eax eax
mov ecx [ ebp + 0x8 ]
inc ecx
push ecx
push r--data
push eax
call [ SetPropA@IAT ]
cmp [ ebp + 0x20 ] edi
je r-xdata
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call [ __import_lookup_table_7(USER32:GetWindowRect) ]
mov eax [ ebp - 0x8 ]
sub eax [ ebp - 0x10 ]
sub eax [ ebp + 0x14 ]
cdq
sub eax edx
mov edi eax
mov eax [ ebp - 0x4 ]
sub eax [ ebp - 0xc ]
sar edi 0x1
sub eax [ ebp + 0x18 ]
add edi [ ebp - 0x10 ]
cdq
sub eax edx
sar eax 0x1
add eax [ ebp - 0xc ]
test edi edi
mov [ ebp + 0x10 ] eax
jge r-xdata
call [ __import_lookup_table_7(USER32:GetActiveWindow) ]
test eax eax
je r-xdata
sub eax [ ebp + 0x18 ]
cdq
sub eax edx
sar eax 0x1
mov [ ebp + 0x10 ] eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
and ebx 0x21000000
neg ebx
sbb ebx ebx
push 0xc
neg ebx
push edi
mov [ esi + 0x2c ] ebx
mov [ esi + 0x10 ] 0x2
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov [ esi + 0x4 ] eax
mov [ eax + 0x2 ] 0x9
mov eax [ esi + 0x4 ]
mov [ eax + 0x4 ] 0xfa01
mov eax [ esi + 0x4 ]
mov [ eax ] 0x3
mov eax [ esi + 0x4 ]
mov [ eax + 0x8 ] 0x9
mov eax [ esi + 0x4 ]
mov [ eax + 0xa ] 0xfa02
mov eax [ esi + 0x4 ]
mov [ eax + 0x6 ] 0x7
push [ esi + 0x10 ]
push [ esi + 0x4 ]
call [ __import_lookup_table_7(USER32:CreateAcceleratorTableA) ]
or [ esi + 0x14 ] 0xffffffff
cmp [ ebp - 0x14 ] edi
mov [ esi + 0x8 ] eax
mov [ esi + 0x1c ] edi
je r-xdata
test ebx 0x1000000
je r-xdata
test eax eax
jge r-xdata
xor edi edi
mov eax [ ebp + 0x8 ]
cmp eax esi
je r-xdata
push [ esi ]
call sub_4081e3
test ebx 0x20000000
je r-xdata
push 0x3
jmp r-xdata
and [ ebp + 0x10 ] 0x0
pop edi
pop esi
pop ebx
leave
retn 0x20
mov eax [ esi ]
jmp r-xdata
push 0x1
push 0x2
jmp r-xdata
push [ esi ]
call [ __import_lookup_table_7(USER32:ShowWindow) ]
sub_405046
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_404d63
pop ebp
retn 0x1c
sub_405069
push ebp
mov ebp esp
push ecx
push esi
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x3
push [ rw-data ]
call sub_4068f0
mov esi eax
test esi esi
je r-xdata
mov eax [ esi + 0x8 ]
pop esi
leave
retn 0xc
test [ ebp + 0xc ] 0x10000
je r-xdata
test [ ebp + 0xc ] 0x20000
je r-xdata
mov [ ebp - 0x4 ] 0x7
test [ ebp + 0xc ] 0x40000
je r-xdata
or [ ebp - 0x4 ] 0x8
mov ecx [ esi + 0x10 ]
and [ ebp + 0xc ] 0xffff
xor eax eax
test ecx ecx
push edi
jle r-xdata
or [ ebp - 0x4 ] 0x10
lea eax [ ecx + 0x1 ]
cmp eax 0x1
mov [ esi + 0x10 ] eax
jne r-xdata
mov edi [ esi + 0x4 ]
imul eax eax 0x6
push eax
push [ esi + 0x4 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
push 0x6
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
jmp r-xdata
inc eax
add edi 0x6
cmp eax ecx
jl r-xdata
movzx edx [ edi ]
cmp [ ebp - 0x4 ] edx
je r-xdata
push [ esi + 0x10 ]
push [ esi + 0x4 ]
call [ __import_lookup_table_7(USER32:CreateAcceleratorTableA) ]
mov [ esi + 0x8 ] eax
push eax
call [ __import_lookup_table_7(USER32:DestroyAcceleratorTable) ]
mov dx [ ebp + 0xc ]
mov [ esi + 0x4 ] eax
mov eax [ esi + 0x10 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x6
mov [ eax + ecx - 0x4 ] dx
mov eax [ esi + 0x10 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x6
mov dx [ ebp + 0x10 ]
mov [ eax + ecx - 0x2 ] dx
mov eax [ esi + 0x10 ]
mov ecx [ esi + 0x4 ]
imul eax eax 0x6
mov dl [ ebp - 0x4 ]
mov [ eax + ecx - 0x6 ] dl
movzx edx [ edi + 0x2 ]
cmp [ ebp + 0xc ] edx
jne r-xdata
mov dx [ ebp + 0x10 ]
imul eax eax 0x6
mov ecx [ esi + 0x4 ]
mov [ eax + ecx + 0x4 ] dx
jmp r-xdata
mov eax [ esi + 0x8 ]
test eax eax
pop edi
je r-xdata
sub_405184
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
push [ rw-data ]
call sub_40668d
mov ebx [ __import_lookup_table_0(KERNEL32:HeapFree) ]
mov esi eax
mov eax [ esi + 0x54 ]
xor edi edi
cmp eax edi
je r-xdata
mov eax [ esi + 0x18 ]
or [ esi + 0x8 ] 0xffffffff
cmp eax edi
je r-xdata
mov eax [ eax + 0x14 ]
cmp eax edi
je r-xdata
cmp [ ebp + 0x8 ] 0xffffffff
lea eax [ ebp - 0x1c ]
je r-xdata
mov ecx [ eax + 0x4 ]
mov [ ebp + 0x8 ] ecx
mov ecx [ eax + 0x8 ]
mov [ esi + 0x4 ] ecx
mov [ esi + 0xc ] edi
mov ecx [ eax ]
push eax
push edi
mov [ esi + 0x18 ] ecx
push [ rw-data ]
call ebx
cmp [ esi + 0x18 ] edi
jne r-xdata
push [ esi + 0x54 ]
push edi
push [ rw-data ]
call ebx
mov [ esi + 0x54 ] edi
push eax
push edi
push [ rw-data ]
call ebx
push edi
push edi
push edi
push eax
call [ GetMessageA@IAT ]
mov ebx [ PeekMessageA@IAT ]
push 0x3
push edi
push edi
push edi
push eax
call ebx
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ esi + 0x1c ] edi
jmp r-xdata
lea eax [ ebp - 0x1c ]
push eax
call [ __import_lookup_table_7(USER32:TranslateMessage) ]
lea eax [ ebp - 0x1c ]
push eax
call [ __import_lookup_table_7(USER32:DispatchMessageA) ]
lea ecx [ ebp - 0x1c ]
push ecx
push eax
push ebx
call [ __import_lookup_table_7(USER32:TranslateAcceleratorA) ]
test eax eax
jne r-xdata
call [ __import_lookup_table_7(USER32:GetActiveWindow) ]
mov ebx eax
push ebx
call sub_405f9c
cmp eax edi
je r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
mov eax [ ebp - 0x18 ]
mov [ ebp + 0x8 ] eax
mov eax [ ebp - 0x14 ]
mov [ esi + 0x10 ] eax
mov eax [ ebp - 0x10 ]
mov [ esi + 0x14 ] eax
mov [ ebp + 0x8 ] eax
mov [ esi + 0xc ] edi
jmp r-xdata
mov eax [ esi + 0xc ]
cmp eax edi
je r-xdata
push 0x1ff
push [ ebp + 0x8 ]
push edi
push edi
push edi
call [ MsgWaitForMultipleObjects@IAT ]
cmp eax 0x102
je r-xdata
xor eax eax
jmp r-xdata
push 0x3
push edi
push edi
push edi
lea eax [ ebp - 0x1c ]
push eax
call ebx
test eax eax
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
jmp r-xdata
sub_4052f3
push [ esp + 0xc ]
push [ esp + 0xc ]
call [ __import_lookup_table_7(USER32:SetCursorPos) ]
movzx ecx [ esp + 0x4 ]
push 0x8040
xor eax eax
push eax
push eax
push 0x2
push ecx
push eax
call [ __import_lookup_table_7(USER32:LoadImageA) ]
push eax
call [ __import_lookup_table_7(USER32:SetCursor) ]
retn
sub_405321
push ebx
mov ebx [ eax + 0x30 ]
cmp ebx 0x1
push esi
push edi
mov edi ecx
je r-xdata
cmp ebx 0x4
mov [ eax + 0x10 ] edi
jne r-xdata
cmp ebx 0x4
je r-xdata
mov ecx [ eax + 0x18 ]
mov esi [ eax + 0x4c ]
mov edx ecx
sub edx [ eax + 0x10 ]
cmp edx esi
jl r-xdata
lea ecx [ edi - 0x2 ]
mov [ eax + 0x10 ] ecx
cmp ebx 0x7
jne r-xdata
sub ecx esi
mov [ eax + 0x10 ] ecx
mov esi [ eax + 0x54 ]
cmp edx esi
jle r-xdata
cmp ebx 0x2
je r-xdata
mov edx [ eax + 0x10 ]
mov esi [ eax + 0x4c ]
lea ecx [ edi + 0x2 ]
mov [ eax + 0x18 ] ecx
sub ecx edx
cmp ecx esi
jl r-xdata
cmp ebx 0x5
je r-xdata
add esi edx
mov [ eax + 0x18 ] esi
mov esi [ eax + 0x54 ]
cmp ecx esi
jle r-xdata
cmp ebx 0x8
jne r-xdata
cmp ebx 0x4
mov edi [ esp + 0x10 ]
mov [ eax + 0x14 ] edi
jne r-xdata
cmp ebx 0x5
je r-xdata
cmp ebx 0x3
je r-xdata
mov ecx [ eax + 0x1c ]
mov esi [ eax + 0x50 ]
mov edx ecx
sub edx [ eax + 0x14 ]
cmp edx esi
jge r-xdata
lea ecx [ edi - 0x2 ]
mov [ eax + 0x14 ] ecx
cmp ebx 0x4
jne r-xdata
mov esi [ eax + 0x58 ]
cmp edx esi
jle r-xdata
sub ecx esi
mov [ eax + 0x14 ] ecx
jmp r-xdata
mov edi [ esp + 0x10 ]
cmp ebx 0x6
je r-xdata
jmp r-xdata
mov edx [ eax + 0x14 ]
mov esi [ eax + 0x50 ]
lea ecx [ edi + 0x2 ]
mov [ eax + 0x1c ] ecx
sub ecx edx
cmp ecx esi
jl r-xdata
cmp ebx 0x8
je r-xdata
add esi edx
mov [ eax + 0x1c ] esi
mov esi [ eax + 0x58 ]
cmp ecx esi
jle r-xdata
cmp ebx 0x7
jne r-xdata
pop edi
pop esi
pop ebx
retn
sub_405403
push ebp
mov ebp esp
push 0xfffffff0
push [ ebp + 0x8 ]
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
test eax 0x40000000
je r-xdata
mov eax [ ebp + 0x18 ]
sub eax [ ebp + 0x10 ]
push 0x1
push eax
mov eax [ ebp + 0x14 ]
sub eax [ ebp + 0xc ]
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ MoveWindow@IAT ]
pop ebp
retn
push 0x2
lea eax [ ebp + 0xc ]
push eax
push [ ebp + 0x8 ]
call [ GetParent@IAT ]
push eax
push 0x0
call [ __import_lookup_table_7(USER32:MapWindowPoints) ]
sub_405451
push ebp
mov ebp esp
push esi
push edi
push [ ebp + 0x10 ]
mov edi eax
push [ ebp + 0xc ]
call [ __import_lookup_table_7(USER32:SetCursorPos) ]
push [ ebp + 0x10 ]
mov ecx [ ebp + 0xc ]
mov eax edi
call sub_405321
pop ecx
lea esi [ edi + 0x10 ]
push esi
push [ edi + 0x30 ]
push 0x214
push [ ebp + 0x8 ]
call [ __import_lookup_table_7(USER32:SendMessageA) ]
sub esp 0x10
mov edi esp
push [ ebp + 0x8 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
call sub_405403
add esp 0x14
pop edi
pop esi
pop ebp
retn
sub_40549f
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
push [ rw-data ]
call sub_40668d
mov edi eax
xor ebx ebx
cmp [ edi ] ebx
mov [ ebp - 0x4 ] 0xd0d0d0d1
jne r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x200
jne r-xdata
cmp [ ebp + 0xc ] 0x112
jne r-xdata
cmp eax 0x100
jne r-xdata
mov eax [ ebp + 0x14 ]
movsx ecx ax
shr eax 0x10
movsx eax ax
mov [ edi + 0x4 ] ebx
push 0x1
mov [ ebp - 0xc ] eax
lea eax [ ebp - 0x10 ]
push eax
push ebx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ecx
call [ __import_lookup_table_7(USER32:MapWindowPoints) ]
push [ ebp - 0xc ]
mov ecx [ ebp - 0x10 ]
mov eax edi
call sub_405321
pop ecx
lea esi [ edi + 0x10 ]
push esi
push [ edi + 0x30 ]
push 0x214
push [ ebp + 0x8 ]
call [ __import_lookup_table_7(USER32:SendMessageA) ]
sub esp 0x10
mov edi esp
push [ ebp + 0x8 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
call sub_405403
add esp 0x14
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn 0x10
mov esi [ ebp + 0x10 ]
mov eax esi
and eax 0xfff0
cmp eax 0xf000
jne r-xdata
cmp eax 0x202
je r-xdata
mov eax [ ebp + 0x10 ]
sub eax 0xd
je r-xdata
mov [ ebp - 0x4 ] ebx
push ebx
lea eax [ ebp - 0x8 ]
push eax
push ebx
push 0x26
call [ SystemParametersInfoA@IAT ]
cmp [ ebp - 0x8 ] ebx
je r-xdata
call [ ReleaseCapture@IAT ]
jmp r-xdata
cmp eax 0x215
jne r-xdata
sub eax 0xe
je r-xdata
lea eax [ edi + 0x10 ]
and esi 0xf
push eax
push [ ebp + 0x8 ]
mov [ edi + 0x30 ] esi
mov esi [ __import_lookup_table_7(USER32:GetWindowRect) ]
mov [ edi ] 0x1
call esi
lea eax [ edi + 0x20 ]
push eax
push [ ebp + 0x8 ]
call esi
mov esi [ __import_lookup_table_7(USER32:GetSystemMetrics) ]
push 0x3d
mov [ edi + 0x34 ] ebx
mov [ edi + 0x38 ] ebx
call esi
push 0x3e
mov [ edi + 0x3c ] eax
call esi
push 0xfffffff0
push [ ebp + 0x8 ]
mov [ edi + 0x40 ] eax
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
test eax 0x800000
je r-xdata
push ebx
push ebx
push 0x232
push [ ebp + 0x8 ]
call [ PostMessageA@IAT ]
cmp [ edi + 0x4 ] ebx
mov [ edi ] ebx
je r-xdata
push 0xa
pop esi
sub eax esi
je r-xdata
push 0xffffffec
push [ ebp + 0x8 ]
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
test ax 0x100
je r-xdata
push 0x5
call esi
push 0x6
jmp r-xdata
push [ edi + 0xc ]
push [ edi + 0x8 ]
call [ __import_lookup_table_7(USER32:SetCursorPos) ]
lea eax [ ebp - 0x10 ]
push eax
call [ __import_lookup_table_7(USER32:GetCursorPos) ]
mov eax [ edi + 0x30 ]
cmp eax ebx
jne r-xdata
dec eax
je r-xdata
mov [ edi + 0x44 ] ebx
mov [ edi + 0x48 ] ebx
push 0x2d
call esi
push 0x2e
mov [ edi + 0x44 ] eax
call esi
mov [ edi + 0x48 ] eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
mov [ edi + 0x30 ] 0x1
push [ ebp - 0xc ]
push [ edi + 0x10 ]
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
call [ __import_lookup_table_7(USER32:GetCursorPos) ]
mov ecx [ edi + 0x30 ]
cmp ecx ebx
jne r-xdata
dec eax
je r-xdata
push [ ebp + 0x8 ]
call [ __import_lookup_table_7(USER32:SetCapture) ]
push ebx
push ebx
push 0x231
push [ ebp + 0x8 ]
call [ PostMessageA@IAT ]
cmp [ edi + 0x30 ] ebx
jne r-xdata
push ebx
push 0x1
push 0x201
push [ ebp + 0x8 ]
call esi
push 0x22
call esi
push 0x23
mov [ edi + 0x4c ] eax
call esi
push 0x3b
mov [ edi + 0x50 ] eax
call esi
push 0x3c
mov [ edi + 0x54 ] eax
call esi
mov esi [ __import_lookup_table_7(USER32:SendMessageA) ]
mov [ edi + 0x58 ] eax
lea eax [ edi + 0x34 ]
push eax
push ebx
push 0x24
push [ ebp + 0x8 ]
call esi
push 0x1
call [ GetKeyState@IAT ]
test ax ax
jne r-xdata
cmp eax 0x6
jne r-xdata
push 0x2
pop eax
jmp r-xdata
push 0x7f84
jmp r-xdata
push 0x2
pop eax
cmp ecx eax
jne r-xdata
push [ edi + 0x14 ]
mov [ edi + 0x30 ] 0x3
jmp r-xdata
lea eax [ ebp - 0x10 ]
push eax
call [ __import_lookup_table_7(USER32:GetCursorPos) ]
mov eax [ edi + 0x30 ]
cmp eax ebx
jne r-xdata
dec eax
jne r-xdata
mov [ edi + 0x4 ] ebx
jmp r-xdata
mov [ edi + 0x4 ] 0x1
add edi 0x8
push edi
call [ __import_lookup_table_7(USER32:GetCursorPos) ]
push 0x8040
push ebx
push ebx
push 0x2
push 0x7f86
push ebx
call [ __import_lookup_table_7(USER32:LoadImageA) ]
push eax
call [ __import_lookup_table_7(USER32:SetCursor) ]
jmp r-xdata
sub [ ebp - 0x10 ] esi
mov eax [ edi + 0x1c ]
dec eax
dec eax
push eax
jmp r-xdata
mov ecx [ edi + 0x14 ]
add ecx eax
push ecx
mov ecx [ edi + 0x10 ]
mov [ edi + 0x30 ] 0x4
add ecx eax
jmp r-xdata
call sub_4052f3
jmp r-xdata
cmp ecx 0x1
jne r-xdata
mov ecx [ edi + 0x18 ]
push [ edi + 0x14 ]
sub ecx eax
mov [ edi + 0x30 ] 0x5
push ecx
jmp r-xdata
push [ ebp - 0x10 ]
push 0x7f85
jmp r-xdata
cmp eax 0x3
jne r-xdata
mov ecx [ edi + 0x18 ]
push 0x2
pop eax
mov [ edi + 0x30 ] eax
push [ ebp - 0xc ]
sub ecx eax
push ecx
lea eax [ ebp - 0x10 ]
push eax
call [ __import_lookup_table_7(USER32:GetCursorPos) ]
mov ecx [ edi + 0x30 ]
cmp ecx ebx
jne r-xdata
push [ edi + 0x10 ]
mov [ edi + 0x30 ] 0x7
push ecx
push 0x7f82
jmp r-xdata
add esp 0xc
jmp r-xdata
sub [ ebp - 0xc ] esi
jmp r-xdata
push 0x7f83
cmp eax 0x6
jne r-xdata
mov eax [ edi + 0x18 ]
push [ edi + 0x14 ]
dec eax
dec eax
mov [ edi + 0x30 ] 0x5
push eax
jmp r-xdata
push 0x2
pop eax
cmp ecx eax
jne r-xdata
mov eax [ edi + 0x1c ]
dec eax
dec eax
mov [ edi + 0x30 ] 0x6
push eax
push [ ebp - 0xc ]
mov eax edi
push [ ebp - 0x10 ]
push [ ebp + 0x8 ]
call sub_405451
add [ ebp - 0x10 ] esi
jmp r-xdata
push 0x2
pop eax
jmp r-xdata
cmp ecx 0x1
jne r-xdata
mov ecx [ edi + 0x1c ]
sub ecx eax
push ecx
mov ecx [ edi + 0x18 ]
mov [ edi + 0x30 ] 0x8
sub ecx eax
add [ ebp - 0xc ] esi
jmp r-xdata
mov ecx [ edi + 0x1c ]
sub ecx eax
push ecx
sub_405885
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push esi
mov esi 0xd0d0d0d1
je r-xdata
mov eax esi
pop esi
pop ebp
retn
push edi
push r--data
push [ ebp + 0x8 ]
call [ GetPropA@IAT ]
push 0xfffffff4
push [ ebp + 0x8 ]
mov edi eax
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
cmp edi eax
jne r-xdata
pop edi
push edi
push [ rw-data ]
call sub_4068f0
test eax eax
je r-xdata
mov ecx [ eax + 0x4 ]
mov ecx [ ecx + 0x8 ]
test ecx ecx
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call ecx
mov esi eax
sub_4058e5
push ebx
mov ebx [ esp + 0xc ]
push esi
mov esi [ esp + 0xc ]
mov eax [ esi + 0x1c ]
test eax eax
push edi
mov edi [ esp + 0x18 ]
je r-xdata
push 0xc
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
test eax eax
je r-xdata
cmp [ eax + 0x4 ] ebx
jne r-xdata
pop edi
pop esi
pop ebx
retn 0xc
and [ eax ] 0x0
mov [ eax + 0x4 ] ebx
mov [ eax + 0x8 ] edi
mov ecx [ esi + 0x1c ]
test ecx ecx
jne r-xdata
cmp [ eax + 0x8 ] edi
je r-xdata
mov [ ecx ] eax
mov [ esi + 0x18 ] eax
jmp r-xdata
mov [ esi + 0x1c ] eax
sub_40594f
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
push [ rw-data ]
xor ebx ebx
call sub_40668d
mov edi [ ebp + 0x14 ]
push edi
push [ ebp + 0x10 ]
mov esi eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_40549f
cmp eax 0xd0d0d0d1
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x10
mov eax [ ebp + 0x8 ]
test eax eax
mov [ ebp - 0x8 ] eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
push r--data
push [ ebp - 0x8 ]
call [ GetPropA@IAT ]
test eax eax
mov [ ebp - 0x4 ] eax
jne r-xdata
mov eax [ esi + 0x50 ]
cmp eax edx
je r-xdata
mov eax [ ebx + 0xc ]
cmp eax edx
je r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
push [ ebp - 0x8 ]
call [ GetParent@IAT ]
test eax eax
mov [ ebp - 0x8 ] eax
jne r-xdata
mov eax [ ebp + 0xc ]
cmp eax 0x115
mov ecx [ ebp - 0x4 ]
mov [ ebp + 0x14 ] 0xd0d0d0d1
mov [ esi + 0x4 ] ecx
ja r-xdata
jmp r-xdata
push edi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call eax
cmp eax 0xe0e0e0e1
jne r-xdata
dec [ ebp - 0x4 ]
push [ ebp - 0x4 ]
push [ rw-data ]
call sub_4068f0
mov ebx eax
jmp r-xdata
mov ecx 0x332f
cmp eax ecx
ja r-xdata
cmp eax 0x114
jae r-xdata
xor edx edx
xor edx edx
cmp ebx edx
je r-xdata
mov ecx 0x3331
sub eax ecx
je r-xdata
je r-xdata
push edi
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
cmp eax 0x14
ja r-xdata
mov [ esi + 0xc ] ecx
dec eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ esi + 0xc ] 0x332c
mov [ esi ] eax
mov [ esi + 0x8 ] edi
jmp r-xdata
cmp eax 0x133
jb r-xdata
mov eax [ ebp + 0x14 ]
cmp eax 0x15
je r-xdata
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ esi + 0xc ] 0x3332
mov [ esi ] eax
jmp r-xdata
sub eax 0xe
jne r-xdata
mov [ ebp + 0x14 ] edx
cmp eax 0x135
jbe r-xdata
cmp ebx edx
je r-xdata
cmp eax 0x24
je r-xdata
cmp ebx edx
je r-xdata
sub eax 0x3
je r-xdata
mov [ esi + 0x54 ] edi
cmp eax 0x138
je r-xdata
cmp [ ebx + 0x1c ] edx
jne r-xdata
cmp ebx edx
je r-xdata
cmp eax 0x4e
je r-xdata
push [ ebp - 0x4 ]
push 0xf
push esi
call sub_4058e5
jmp r-xdata
cmp [ ebx + 0x18 ] 0x0
je r-xdata
cmp ecx 0xffffffff
je r-xdata
dec eax
dec eax
je r-xdata
cmp eax 0x30d5
je r-xdata
push 0x0
push sub_405939
push [ ebp + 0x8 ]
call [ EnumChildWindows@IAT ]
jmp r-xdata
movzx eax [ ebx + 0x24 ]
cmp ax dx
je r-xdata
push edi
push [ ebp + 0x10 ]
push 0x4e
push [ ebp + 0x8 ]
push [ edi ]
jmp r-xdata
mov ecx 0x111
cmp eax ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp [ ebx ] eax
jne r-xdata
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0x8 ]
call [ GetClientRect@IAT ]
push [ ebx + 0x18 ]
lea eax [ ebp - 0x18 ]
push eax
push [ ebp + 0x10 ]
call [ FillRect@IAT ]
mov [ ebp + 0x14 ] 0x1
jmp r-xdata
push [ ebp - 0x4 ]
push [ ebp + 0xc ]
push esi
call sub_4058e5
xor edx edx
jmp r-xdata
mov eax [ ebp + 0x8 ]
cmp [ ebp - 0x8 ] eax
jne r-xdata
dec eax
je r-xdata
push edi
push [ ebp + 0x10 ]
push 0x30d6
push [ ebp + 0x8 ]
call [ PostMessageA@IAT ]
jmp r-xdata
cmp eax 0x30d6
jne r-xdata
movzx eax [ ebx + 0x26 ]
cmp ax dx
je r-xdata
movzx eax ax
mov [ edi + 0x18 ] eax
call sub_405885
add esp 0x14
mov [ ebp + 0x14 ] eax
jmp r-xdata
mov ebx [ ebp + 0x10 ]
push edi
push ebx
push ecx
push [ ebp + 0x8 ]
push edi
call sub_405885
add esp 0x14
cmp eax 0xd0d0d0d1
jne r-xdata
mov ebx [ ebx + 0x20 ]
test ebx ebx
je r-xdata
mov [ ebp + 0x14 ] 0x1
jmp r-xdata
cmp ecx 0xffffffff
je r-xdata
cmp [ ebp + 0x10 ] dx
je r-xdata
sub eax 0xa
jne r-xdata
and [ ebp + 0x14 ] 0x0
jmp r-xdata
cmp edi 0x203
mov eax [ ebp + 0x10 ]
mov [ esi + 0xc ] 0x332e
mov [ esi ] eax
jne r-xdata
movzx eax [ ebx + 0x28 ]
cmp ax dx
je r-xdata
movzx eax ax
mov [ edi + 0x1c ] eax
mov eax ebx
shr eax 0x10
test edi edi
je r-xdata
push eax
push [ ebp + 0x10 ]
call ebx
mov [ ebp + 0x14 ] eax
mov eax [ ebp + 0x10 ]
sub eax edx
je r-xdata
push [ ebp - 0x4 ]
push 0x3330
push esi
call sub_4058e5
cmp edi 0x206
jne r-xdata
mov [ esi + 0x8 ] 0x2
jmp r-xdata
movzx eax [ ebx + 0x2a ]
cmp ax dx
je r-xdata
movzx eax ax
mov [ edi + 0x20 ] eax
test ax ax
je r-xdata
push 0xfffffff4
push edi
mov [ esi + 0xc ] 0x332c
mov [ esi + 0x8 ] eax
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
cmp eax 0xffffd8f0
mov [ esi ] eax
jne r-xdata
cmp [ ebx + 0x2c ] edx
je r-xdata
dec eax
push [ ebp - 0x4 ]
je r-xdata
cmp edi 0x201
jne r-xdata
mov [ esi + 0x8 ] 0x3
jmp r-xdata
movzx eax ax
mov [ edi + 0x24 ] eax
jmp r-xdata
mov [ esi ] ebx
jmp r-xdata
cmp bx 0xfa01
jne r-xdata
and ebx 0xffff
push [ ebp - 0x4 ]
push [ ebp - 0x4 ]
and [ ebx + 0x2c ] 0x0
push 0x3335
mov [ ebx + 0x2c ] 0x1
push 0x3333
jmp r-xdata
dec eax
jne r-xdata
cmp edi 0x204
jne r-xdata
mov [ esi + 0x8 ] edx
jmp r-xdata
mov [ esi + 0xc ] 0x332d
cmp bx 0xfa02
jne r-xdata
push 0x0
push esi
call sub_4058e5
jmp r-xdata
push 0x5
mov [ ebx + 0x2c ] 0x1
push 0x3334
jmp r-xdata
mov [ esi + 0xc ] edx
jmp r-xdata
mov [ esi + 0x8 ] 0x1
jmp r-xdata
movzx eax bx
mov [ esi ] eax
push 0x1
jmp r-xdata
push esi
call sub_4058e5
call sub_405ed0
jmp r-xdata
sub_405d7f
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
push edi
push [ ebp + 0x14 ]
mov edi [ ebp + 0x8 ]
push ebx
push esi
push edi
call sub_40594f
cmp esi 0x5
mov [ ebp + 0x10 ] eax
je r-xdata
push 0x0
call [ __import_lookup_table_0(KERNEL32:SetLastError) ]
mov eax [ ebp + 0x10 ]
cmp eax 0xd0d0d0d1
jne r-xdata
push r--data
push edi
call [ GetPropA@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0x10
push [ ebp + 0x14 ]
push ebx
push esi
push edi
call [ __import_lookup_table_7(USER32:DefWindowProcA) ]
cmp [ ebp + 0x10 ] 0xd0d0d0d1
je r-xdata
push [ ebp + 0x14 ]
push ebx
push esi
cmp esi 0x120
je r-xdata
cmp esi 0x7
je r-xdata
mov ecx 0x111
cmp esi ecx
jne r-xdata
mov eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
push 0x0
push ebx
push ecx
jmp r-xdata
push eax
push edi
call [ DefFrameProcA@IAT ]
jmp r-xdata
sub_405e15
push ebx
push edi
mov edi [ esp + 0xc ]
xor ebx ebx
push edi
inc ebx
call [ __import_lookup_table_7(USER32:IsWindowEnabled) ]
test eax eax
je r-xdata
pop edi
mov eax ebx
pop ebx
retn 0x8
push edi
call [ __import_lookup_table_7(USER32:IsWindowVisible) ]
test eax eax
je r-xdata
push 0xfffffff0
push edi
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
test eax 0x10000
je r-xdata
push esi
mov esi [ esp + 0x14 ]
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
push edi
call [ __import_lookup_table_7(USER32:SetFocus) ]
xor ebx ebx
jmp r-xdata
cmp eax edi
jne r-xdata
push edi
call [ __import_lookup_table_7(USER32:SetFocus) ]
xor ebx ebx
jmp r-xdata
mov [ esi + 0x8 ] ebx
pop esi
sub_405e7a
push ebx
mov ebx [ esp + 0x8 ]
push edi
xor edi edi
push ebx
inc edi
call [ __import_lookup_table_7(USER32:IsWindowEnabled) ]
test eax eax
je r-xdata
mov eax edi
pop edi
pop ebx
retn 0x8
push ebx
call [ __import_lookup_table_7(USER32:IsWindowVisible) ]
test eax eax
je r-xdata
push 0xfffffff0
push ebx
call [ __import_lookup_table_7(USER32:GetWindowLongA) ]
test eax 0x10000
je r-xdata
push esi
mov esi [ esp + 0x14 ]
cmp [ esi ] ebx
jne r-xdata
mov [ esi + 0x4 ] ebx
pop esi
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
push eax
call [ __import_lookup_table_7(USER32:SetFocus) ]
mov [ esi + 0xc ] edi
xor edi edi
sub_405ed0
push ebp
mov ebp esp
sub esp 0x48
push ebx
push esi
push edi
call [ __import_lookup_table_7(USER32:GetActiveWindow) ]
mov [ ebp - 0x4 ] eax
call [ GetFocus@IAT ]
mov edi eax
push edi
push [ ebp - 0x4 ]
xor ebx ebx
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] ebx
call [ IsChild@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x14 ] ebx
cmp edi ebx
mov [ ebp - 0x14 ] edi
mov esi edi
je r-xdata
mov esi [ EnumChildWindows@IAT ]
mov edi sub_405e15
push edi
push [ ebp - 0x4 ]
call esi
cmp [ ebp - 0xc ] ebx
je r-xdata
push sub_405e7a
push [ ebp - 0x4 ]
call [ EnumChildWindows@IAT ]
cmp [ ebp - 0x8 ] ebx
jne r-xdata
cmp [ ebp + 0x8 ] ebx
lea eax [ ebp - 0x14 ]
push eax
je r-xdata
push 0x32
lea eax [ ebp - 0x48 ]
push eax
push esi
call [ __import_lookup_table_7(USER32:GetClassNameA) ]
lea eax [ ebp - 0x48 ]
push r--data
push eax
call strcmp
test eax eax
pop ecx
pop ecx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
lea eax [ ebp - 0x14 ]
push eax
push edi
push [ ebp - 0x4 ]
call esi
cmp [ ebp - 0x10 ] ebx
je r-xdata
push esi
call [ GetParent@IAT ]
mov esi eax
cmp esi ebx
jne r-xdata
cmp edi esi
mov [ ebp - 0x4 ] esi
jne r-xdata
push [ ebp - 0x10 ]
call [ __import_lookup_table_7(USER32:SetFocus) ]
jmp r-xdata
jmp r-xdata
mov [ ebp - 0x14 ] ebx
sub_405f9c
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ GetKeyState@IAT ]
push 0x9
call esi
test al al
jns r-xdata
push r--data
push [ ebp + 0x8 ]
call [ GetPropA@IAT ]
test eax eax
je r-xdata
push 0x11
call esi
test al al
js r-xdata
xor eax eax
dec eax
push eax
push [ rw-data ]
call sub_4068f0
mov eax [ eax + 0x8 ]
jmp r-xdata
push 0x10
call esi
test al al
js r-xdata
pop esi
leave
retn 0x4
push 0x12
call esi
test al al
js r-xdata
mov esi [ GetFocus@IAT ]
push 0x5
lea eax [ ebp - 0x8 ]
push eax
call esi
push eax
call [ __import_lookup_table_7(USER32:GetClassNameA) ]
push 0x4
lea eax [ ebp - 0x8 ]
push r--data
push eax
call strncmp
add esp 0xc
test eax eax
jne r-xdata
push eax
push eax
push 0x44e
call esi
push eax
call [ __import_lookup_table_7(USER32:SendMessageA) ]
test ax 0x800
je r-xdata
sub_406035
push ebx
push esi
push edi
push [ esp + 0x10 ]
mov ebx 0x104
push ebx
call sub_407960
mov edi eax
push edi
push ebx
call [ GetCurrentDirectoryA@IAT ]
mov esi eax
test esi esi
je r-xdata
sub ebx esi
push ebx
call sub_407a90
mov [ edi + esi ] 0x0
pop edi
pop esi
pop ebx
retn 0x4
cmp [ edi + esi - 0x1 ] 0x5c
je r-xdata
mov [ edi + esi ] 0x5c
inc esi
sub_406085
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
xor edi edi
xor esi esi
test eax eax
je r-xdata
push ebx
push edi
call sub_4079e0
push [ ebp + 0xc ]
sub esi edi
push esi
mov ebx eax
call sub_407960
test ebx ebx
mov [ ebp + 0x8 ] eax
je r-xdata
mov cl [ eax ]
cmp cl 0x22
mov edi eax
jne r-xdata
test esi esi
pop ebx
je r-xdata
push ebx
call sub_407a20
mov edi eax
mov esi edi
jmp r-xdata
lea edi [ eax + 0x1 ]
mov eax [ ebp + 0x8 ]
pop edi
mov [ eax + esi ] 0x0
pop esi
pop ebp
retn 0x8
push esi
push edi
push [ ebp + 0x8 ]
call strncpy
add esp 0xc
test cl cl
jne r-xdata
cmp cl 0x7c
je r-xdata
cmp cl 0x2f
je r-xdata
lea esi [ eax + 0x1 ]
cmp cl 0x5c
jne r-xdata
inc eax
mov cl [ eax ]
sub_406112
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
xor edi edi
xor esi esi
test eax eax
je r-xdata
push edi
call sub_4079e0
push [ ebp + 0xc ]
sub esi edi
push esi
mov [ ebp + 0x8 ] eax
call sub_407960
cmp [ ebp + 0x8 ] 0x0
mov ebx eax
je r-xdata
mov cl [ eax ]
cmp cl 0x22
mov edi eax
jne r-xdata
push esi
push edi
push ebx
call strncpy
add esp 0xc
pop edi
mov [ ebx + esi ] 0x0
pop esi
pop ebx
pop ebp
retn 0x8
push [ ebp + 0x8 ]
call sub_407a20
mov edi eax
test cl cl
jne r-xdata
lea edi [ eax + 0x1 ]
jmp r-xdata
cmp cl 0x2f
je r-xdata
mov al [ edi ]
mov esi edi
jmp r-xdata
lea edi [ eax + 0x1 ]
cmp cl 0x5c
jne r-xdata
test al al
jne r-xdata
inc eax
mov cl [ eax ]
cmp al 0x22
je r-xdata
inc esi
mov al [ esi ]
sub_406192
push ebx
push ebp
push esi
push edi
push [ esp + 0x14 ]
mov esi 0x104
push esi
call sub_407960
mov edi eax
push edi
push esi
call [ __import_lookup_table_0(KERNEL32:GetTempPathA) ]
push r--data
mov ebx eax
call [ __import_lookup_table_0(KERNEL32:LoadLibraryA) ]
mov ebp eax
test ebp ebp
je r-xdata
sub esi ebx
push esi
call sub_407a90
mov [ edi + ebx ] 0x0
pop edi
pop esi
pop ebp
pop ebx
retn 0x4
push r--data
push ebp
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push ebp
call [ FreeLibrary@IAT ]
push esi
push edi
push edi
call eax
mov ebx eax
sub_4061f3
push ebp
mov ebp esp
sub esp 0x108
cmp [ ebp + 0x8 ] 0x0
je r-xdata
xor eax eax
push 0x104
push [ ebp + 0x8 ]
lea eax [ ebp - 0x108 ]
push eax
call strncpy
lea eax [ ebp - 0x108 ]
push eax
mov [ ebp - 0x4 ] 0x0
call strlen
add esp 0x10
lea eax [ ebp + eax - 0x108 ]
jmp r-xdata
lea ecx [ ebp - 0x108 ]
cmp eax ecx
ja r-xdata
lea ecx [ eax - 0x1 ]
mov dl [ ecx ]
cmp dl 0x20
je r-xdata
mov [ eax ] 0x0
push 0x0
lea eax [ ebp - 0x108 ]
push eax
call [ CreateDirectoryA@IAT ]
jmp r-xdata
mov eax ecx
cmp dl 0x5c
je r-xdata
leave
retn 0x4
cmp dl 0x2f
jne r-xdata
sub_406270
push ecx
push esi
mov esi [ esp + 0xc ]
xor eax eax
cmp [ esi + 0x14 ] eax
mov [ esp + 0x4 ] eax
jne r-xdata
pop esi
pop ecx
retn 0x4
mov ecx [ esi + 0x8 ]
sub ecx [ esi + 0xc ]
mov edx [ esi + 0x4 ]
push eax
lea eax [ esp + 0x8 ]
push eax
mov eax [ esi ]
push ecx
push edx
push eax
call [ WriteFile@IAT ]
mov ecx [ esi + 0x8 ]
mov eax [ esp + 0x4 ]
mov [ esi + 0xc ] ecx
sub_4062b0
push edi
mov edi [ esp + 0x8 ]
cmp edi 0xffffffff
je r-xdata
pop edi
retn 0x4
mov eax [ rw-data ]
push esi
push edi
push eax
call sub_4068f0
mov esi eax
test esi esi
je r-xdata
pop esi
cmp [ esi + 0x4 ] 0x0
je r-xdata
mov eax [ esi ]
push eax
call [ CloseHandle@IAT ]
mov ecx [ rw-data ]
push edi
push ecx
call sub_40691b
push esi
call sub_406270
mov ecx [ esi + 0x4 ]
mov edx [ rw-data ]
push ecx
push 0x0
push edx
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
sub_406340
push ecx
mov ecx [ rw-data ]
push ebp
push esi
push edi
mov esi eax
mov eax [ esp + 0x14 ]
push eax
push ecx
call sub_40688c
cmp esi 0x1
mov edi eax
jne r-xdata
cmp esi 0x2
jne r-xdata
push 0x0
push 0x80
push 0x3
push 0x0
push esi
push 0x80000000
push ebx
call [ CreateFileA@IAT ]
mov esi eax
jmp r-xdata
cmp esi 0x3
jne r-xdata
push 0x0
push 0x80
push 0x4
push 0x0
push 0x1
push 0xc0000000
push ebx
call [ CreateFileA@IAT ]
mov esi eax
jmp r-xdata
cmp esi 0xffffffff
je r-xdata
mov esi [ esp + 0xc ]
mov ebp [ CreateFileA@IAT ]
push 0x0
push 0x80
push 0x2
push 0x0
push 0x1
push 0xc0000000
push ebx
call ebp
mov esi eax
cmp esi 0xffffffff
jne r-xdata
cmp [ esp + 0x14 ] 0xffffffff
jne r-xdata
test esi esi
je r-xdata
push 0x0
push 0x0
push 0x5
push 0x0
push 0x1
push 0x40000000
push ebx
call ebp
mov esi eax
jmp r-xdata
pop edi
pop esi
xor eax eax
pop ebp
pop ecx
retn
mov eax [ rw-data ]
push edi
push eax
call sub_40691b
push 0x1000
mov [ edi ] esi
mov edx [ rw-data ]
push 0x0
push edx
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
cmp [ esp + 0x14 ] 0xffffffff
mov [ edi + 0x4 ] eax
mov [ edi + 0x8 ] 0x1000
mov [ edi + 0xc ] 0x0
mov [ edi + 0x14 ] 0x1
jne r-xdata
pop edi
mov eax esi
pop esi
pop ebp
pop ecx
retn
mov eax edi
pop edi
pop esi
pop ebp
pop ecx
retn
sub_406450
mov eax [ esp + 0x4 ]
mov ecx [ rw-data ]
push ebx
push ebp
push esi
push edi
push eax
push ecx
call sub_40688c
mov ebx [ esp + 0x18 ]
mov ebp [ CreateFileA@IAT ]
push 0x0
push 0x80
push 0x2
push 0x0
push 0x1
push 0xc0000000
push ebx
mov esi eax
call ebp
mov edi eax
cmp edi 0xffffffff
jne r-xdata
test edi edi
je r-xdata
push 0x0
push 0x0
push 0x5
push 0x0
push 0x1
push 0x40000000
push ebx
call ebp
mov edi eax
cmp edi 0xffffffff
je r-xdata
cmp [ esp + 0x14 ] 0xffffffff
jne r-xdata
push 0x1000
mov [ esi ] edi
mov edx [ rw-data ]
push 0x0
push edx
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
cmp [ esp + 0x14 ] 0xffffffff
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] 0x1000
mov [ esi + 0xc ] 0x0
mov [ esi + 0x14 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
retn 0x8
mov eax [ rw-data ]
push esi
push eax
call sub_40691b
mov eax edi
pop edi
pop esi
pop ebp
pop ebx
retn 0x8
pop edi
mov eax esi
pop esi
pop ebp
pop ebx
retn 0x8
sub_406530
push ecx
push edi
mov edi [ esp + 0x10 ]
xor eax eax
test edi edi
mov [ esp + 0x4 ] eax
je r-xdata
pop edi
pop ecx
retn 0xc
push esi
mov esi [ esp + 0x18 ]
test esi esi
je r-xdata
pop esi
mov eax [ esp + 0x10 ]
mov ecx [ rw-data ]
push eax
push ecx
call sub_4068f0
test eax eax
je r-xdata
mov eax [ esp + 0x8 ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
mov eax [ eax ]
push 0x0
lea edx [ esp + 0xc ]
push edx
push esi
push edi
push eax
call [ WriteFile@IAT ]
push esi
push edi
push eax
call sub_406590
pop esi
pop edi
pop ecx
retn 0xc
sub_406590
push ecx
push esi
mov esi [ esp + 0xc ]
cmp [ esi + 0x14 ] 0x1
push edi
mov [ esp + 0x8 ] 0x0
jne r-xdata
mov ecx [ esi + 0xc ]
mov edi [ esp + 0x18 ]
cmp ecx edi
jle r-xdata
mov eax [ esi + 0xc ]
mov ecx [ esi ]
push 0x1
push 0x0
neg eax
push eax
push ecx
call [ SetFilePointer@IAT ]
mov edx [ esi + 0x8 ]
mov [ esi + 0x14 ] 0x0
mov [ esi + 0xc ] edx
push esi
call sub_406270
mov eax [ esi + 0x8 ]
cmp edi eax
jl r-xdata
mov eax [ esi + 0x8 ]
add eax [ esi + 0x4 ]
sub eax ecx
mov ecx edi
sub ecx 0x1
je r-xdata
mov ecx [ esi + 0x4 ]
sub ecx [ esi + 0xc ]
mov edx [ esp + 0x14 ]
push edi
push edx
add ecx eax
push ecx
call memcpy
add esp 0xc
sub [ esi + 0xc ] edi
mov eax edi
pop edi
pop esi
pop ecx
retn 0xc
mov eax [ esp + 0x14 ]
mov ecx [ esi ]
push 0x0
lea edx [ esp + 0xc ]
push edx
push edi
push eax
push ecx
call [ WriteFile@IAT ]
mov eax [ esp + 0x8 ]
pop edi
pop esi
pop ecx
retn 0xc
mov edx [ esp + 0x14 ]
mov cl [ edx ]
mov [ eax ] cl
sub [ esi + 0xc ] edi
mov eax edi
pop edi
pop esi
pop ecx
retn 0xc
sub ecx 0x1
je r-xdata
mov edx [ esp + 0x14 ]
mov cx [ edx ]
mov [ eax ] cx
sub [ esi + 0xc ] edi
mov eax edi
pop edi
pop esi
pop ecx
retn 0xc
sub ecx 0x2
je r-xdata
mov edx [ esp + 0x14 ]
mov ecx [ edx ]
mov [ eax ] ecx
sub [ esi + 0xc ] edi
mov eax edi
pop edi
pop esi
pop ecx
retn 0xc
mov ecx [ esp + 0x14 ]
push edi
push ecx
push eax
call memcpy
add esp 0xc
sub [ esi + 0xc ] edi
mov eax edi
pop edi
pop esi
pop ecx
retn 0xc
sub_406694
push esi
push [ esp + 0x8 ]
push 0x8
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
cmp [ esp + 0xc ] 0x0
mov esi eax
je r-xdata
mov eax esi
pop esi
retn 0xc
push esi
call [ esp + 0x10 ]
pop ecx
sub_4066bc
push 0x18
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
test eax eax
je r-xdata
retn 0xc
mov ecx [ esp + 0x8 ]
and [ eax ] 0x0
and [ eax + 0x4 ] 0x0
mov [ eax + 0x10 ] ecx
mov ecx [ esp + 0xc ]
mov [ eax + 0x14 ] ecx
mov ecx [ esp + 0x4 ]
add ecx 0x4
mov edx ecx
and edx 0x3
mov [ eax + 0xc ] ecx
je r-xdata
sub ecx edx
add ecx 0x4
mov [ eax + 0xc ] ecx
sub_406701
push ebx
push esi
mov esi [ esp + 0xc ]
mov eax [ esi + 0x4 ]
xor ebx ebx
cmp eax ebx
push edi
je r-xdata
mov edi [ esi + 0x8 ]
mov eax [ esi + 0x10 ]
sar edi 0x4
and edi 0xfffffff0
cmp edi eax
jl r-xdata
mov edx [ eax + 0x14 ]
cmp edx ebx
jle r-xdata
mov edi eax
mov eax [ esi + 0x14 ]
cmp edi eax
jle r-xdata
mov edx [ eax + 0x10 ]
mov ecx [ esi + 0xc ]
imul ecx edx
inc edx
lea ecx [ ecx + eax + 0x18 ]
mov [ eax + 0x10 ] edx
mov ecx [ eax + 0x8 ]
mov edi [ ecx ]
dec edx
mov [ eax + 0x8 ] edi
mov [ eax + 0x14 ] edx
jmp r-xdata
mov eax [ esi + 0xc ]
add eax 0x18
push eax
push edx
push [ rw-data ]
call ebx
mov [ eax + 0xc ] ebp
xor edx edx
mov [ eax + 0xc ] edi
jmp r-xdata
mov eax [ esi + 0xc ]
imul eax edi
push ebp
add eax 0x18
push eax
push ebx
push [ rw-data ]
mov ebx [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
call ebx
xor ebp ebp
xor edx edx
inc ebp
cmp eax edx
je r-xdata
pop edi
pop esi
mov [ ecx ] eax
lea eax [ ecx + 0x4 ]
pop ebx
retn 0x4
mov edx [ eax + 0x10 ]
cmp edx [ eax + 0xc ]
jl r-xdata
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov ecx [ esi ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov [ esi ] eax
mov ecx [ esi + 0x4 ]
mov [ eax ] ecx
mov [ eax + 0x4 ] edx
mov [ esi + 0x4 ] eax
jmp r-xdata
mov ecx [ eax + 0xc ]
add [ esi + 0x8 ] ecx
cmp [ eax + 0xc ] ebp
mov [ eax + 0x10 ] ebp
mov [ eax + 0x14 ] edx
mov [ eax + 0x8 ] edx
pop ebp
jle r-xdata
mov edx [ eax ]
cmp edx ebx
je r-xdata
lea ecx [ eax + 0x18 ]
mov [ ecx + 0x4 ] eax
mov ecx [ eax ]
cmp ecx edx
je r-xdata
cmp eax [ esi + 0x4 ]
jne r-xdata
mov edi [ eax + 0x4 ]
mov [ edx + 0x4 ] edi
mov edx [ eax + 0x4 ]
mov edi [ eax ]
mov [ edx ] edi
mov edx [ eax ]
mov [ esi + 0x4 ] edx
jmp r-xdata
mov [ edx + 0x4 ] eax
jmp r-xdata
mov edx [ esi ]
mov [ eax ] edx
mov [ eax + 0x4 ] ebx
mov [ esi ] eax
mov edx [ eax ]
cmp edx ebx
je r-xdata
sub_40681e
push ebx
mov ebx [ __import_lookup_table_0(KERNEL32:HeapFree) ]
push ebp
push esi
mov esi [ esp + 0x10 ]
mov eax [ esi + 0x4 ]
xor ebp ebp
cmp eax ebp
push edi
je r-xdata
mov eax [ esi ]
cmp eax ebp
je r-xdata
mov edi [ eax ]
push eax
push ebp
push [ rw-data ]
call ebx
cmp edi ebp
mov eax edi
jne r-xdata
pop edi
mov [ esi ] ebp
mov [ esi + 0x4 ] ebp
mov [ esi + 0x8 ] ebp
pop esi
pop ebp
pop ebx
retn 0x4
mov edi [ eax ]
push eax
push ebp
push [ rw-data ]
call ebx
cmp edi ebp
mov eax edi
jne r-xdata
sub_40688c
push edi
mov edi [ esp + 0xc ]
cmp edi 0xffffffff
jne r-xdata
push esi
mov esi [ esp + 0xc ]
cmp edi [ esi + 0x8 ]
jl r-xdata
mov eax [ esp + 0x8 ]
mov ecx [ eax ]
add ecx 0x8
push ecx
add eax 0xc
push eax
call sub_406a3a
pop ecx
pop ecx
jmp r-xdata
mov eax [ esi + 0x10 ]
test eax eax
je r-xdata
mov eax [ esi + 0x4 ]
mov ecx [ esi ]
add eax edi
imul ecx eax
push ecx
push [ esi + 0x1c ]
mov [ esi + 0x8 ] eax
push 0x8
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov [ esi + 0x1c ] eax
pop edi
retn 0x8
mov eax [ esi ]
imul eax edi
add eax [ esi + 0x1c ]
pop esi
push edi
call eax
sub_4068f0
mov edx [ esp + 0x8 ]
test edx edx
jl r-xdata
mov eax edx
mov ecx [ esp + 0x4 ]
cmp edx [ ecx + 0x8 ]
jge r-xdata
retn 0x8
cmp [ eax ] 0x0
jne r-xdata
mov eax [ ecx ]
imul eax edx
add eax [ ecx + 0x1c ]
jmp r-xdata
xor eax eax
test eax eax
je r-xdata
sub_40691b
mov edx [ esp + 0x8 ]
test edx edx
mov ecx [ esp + 0x4 ]
jl r-xdata
push edx
add ecx 0xc
push ecx
call sub_406a7d
pop ecx
pop ecx
cmp edx [ ecx + 0x8 ]
jge r-xdata
mov eax [ ecx ]
push eax
imul eax edx
add eax [ ecx + 0x1c ]
push 0x0
push eax
call memset
add esp 0xc
jmp r-xdata
retn 0x8
sub_406951
push esi
push edi
mov edi [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
push 0x20
push 0x8
push [ rw-data ]
call edi
mov ecx [ esp + 0x14 ]
mov esi eax
mov eax [ esp + 0xc ]
and [ esi + 0xc ] 0x0
mov [ esi + 0x10 ] ecx
mov ecx [ esp + 0x10 ]
mov [ esi ] eax
imul eax ecx
push eax
push 0x8
mov [ esi + 0x4 ] ecx
mov [ esi + 0x8 ] ecx
push [ rw-data ]
call edi
mov [ esi + 0x1c ] eax
pop edi
mov eax esi
pop esi
retn 0xc
sub_40699a
mov eax [ esp + 0x4 ]
mov ecx [ eax + 0xc ]
xor edx edx
cmp ecx edx
mov [ eax + 0x14 ] edx
mov [ eax + 0x18 ] ecx
je r-xdata
retn 0x4
jmp r-xdata
cmp [ ecx ] edx
jne r-xdata
mov ecx [ eax + 0x18 ]
mov ecx [ ecx ]
mov [ eax + 0x18 ] ecx
sub_4069be
mov ecx [ esp + 0x4 ]
push edi
mov edi [ esp + 0xc ]
xor eax eax
push esi
test eax eax
pop esi
jne r-xdata
cmp esi [ ecx + 0x8 ]
jge r-xdata
pop edi
retn 0x8
mov edx [ ecx + 0x18 ]
test edx edx
je r-xdata
mov edx [ ecx ]
imul edx esi
add edx [ ecx + 0x1c ]
cmp [ edx ] 0x0
je r-xdata
lea eax [ edx + 0x8 ]
mov [ edi ] eax
mov edx [ ecx + 0x18 ]
mov edx [ edx + 0x4 ]
mov [ ecx + 0x18 ] edx
inc [ ecx + 0x14 ]
test eax eax
je r-xdata
mov eax edx
mov [ edi ] esi
mov esi [ ecx + 0x14 ]
test esi esi
jl r-xdata
sub_406a0c
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x10 ] 0x0
je r-xdata
pop esi
pop ebp
retn 0x4
push esi
call sub_40699a
jmp r-xdata
lea eax [ ebp + 0x8 ]
push eax
push esi
call sub_4069be
test eax eax
jne r-xdata
push [ ebp + 0x8 ]
call [ esi + 0x10 ]
sub_406a3a
push [ esp + 0x8 ]
push 0x8
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
test eax eax
je r-xdata
add eax 0x8
retn
mov ecx [ esp + 0x4 ]
mov edx [ ecx ]
test edx edx
je r-xdata
mov [ ecx ] eax
mov [ edx + 0x4 ] eax
mov edx [ ecx ]
mov [ eax ] edx
sub_406a7d
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x4 ]
sub eax 0x8
cmp [ ecx ] eax
mov edx [ eax ]
jne r-xdata
mov ecx [ eax + 0x4 ]
mov [ ecx ] edx
mov ecx [ eax ]
test ecx ecx
je r-xdata
mov [ ecx ] edx
mov ecx [ eax ]
test ecx ecx
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
retn
mov edx [ eax + 0x4 ]
mov [ ecx + 0x4 ] edx
and [ ecx + 0x4 ] 0x0
jmp r-xdata
sub_406ac0
lea eax [ esp - 0x58 ]
sub esp 0x68
push eax
call sub_406d80
mov ecx [ esp + 0x74 ]
mov edx [ esp + 0x70 ]
push ecx
push edx
lea eax [ esp + 0x1c ]
push eax
call sub_407540
lea ecx [ esp + 0x20 ]
push ecx
lea edx [ esp + 0x14 ]
push edx
call sub_407610
mov eax [ esp + 0x8c ]
add esp 0x18
push eax
push 0x20
call sub_407960
xor ecx ecx
jmp r-xdata
movzx edx [ esp + ecx ]
shr edx 0x4
movzx edx [ edx + r--data ]
mov [ eax ] dl
movzx edx [ esp + ecx ]
and edx 0xf
movzx edx [ edx + r--data ]
mov [ eax + 0x1 ] dl
movzx edx [ esp + ecx + 0x1 ]
shr edx 0x4
movzx edx [ edx + r--data ]
mov [ eax + 0x2 ] dl
movzx edx [ esp + ecx + 0x1 ]
and edx 0xf
movzx edx [ edx + r--data ]
mov [ eax + 0x3 ] dl
movzx edx [ esp + ecx + 0x2 ]
shr edx 0x4
movzx edx [ edx + r--data ]
mov [ eax + 0x4 ] dl
movzx edx [ esp + ecx + 0x2 ]
and edx 0xf
movzx edx [ edx + r--data ]
mov [ eax + 0x5 ] dl
movzx edx [ esp + ecx + 0x3 ]
shr edx 0x4
movzx edx [ edx + r--data ]
mov [ eax + 0x6 ] dl
movzx edx [ esp + ecx + 0x3 ]
and edx 0xf
movzx edx [ edx + r--data ]
mov [ eax + 0x7 ] dl
add ecx 0x4
add eax 0x8
cmp ecx 0x10
jl r-xdata
mov [ eax ] 0x0
add esp 0x68
retn 0xc
sub_406bc0
mov eax [ esp + 0x4 ]
sub esp 0x8
push esi
or esi 0xffffffff
test eax eax
je r-xdata
mov eax esi
not eax
pop esi
add esp 0x8
retn 0x4
push ebx
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push eax
call [ CreateFileA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
mov [ esp + 0x8 ] ebx
je r-xdata
pop ebx
mov eax [ rw-data ]
push ebp
push 0x1000
push 0x0
push eax
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov ebp eax
test ebp ebp
mov [ esp + 0x10 ] ebp
je r-xdata
push ebx
call [ CloseHandle@IAT ]
pop ebp
push edi
nop
test edi edi
je r-xdata
mov ebp edx
shr ebp 0x3
lea ebx [ ebx ]
cmp edx 0x1000
je r-xdata
movzx ecx [ eax ]
xor ecx esi
and ecx 0xff
shr esi 0x8
xor esi [ ecx * 4 + r--data ]
add eax 0x1
sub edi 0x1
jne r-xdata
movzx ebx [ eax ]
xor ebx esi
and ebx 0xff
add eax 0x1
mov ecx esi
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
movzx ebx [ eax ]
xor ebx ecx
and ebx 0xff
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
movzx ebx [ eax + 0x1 ]
xor ebx ecx
and ebx 0xff
add eax 0x1
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
movzx ebx [ eax + 0x1 ]
xor ebx ecx
add eax 0x1
and ebx 0xff
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
movzx ebx [ eax + 0x1 ]
xor ebx ecx
add eax 0x1
and ebx 0xff
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
movzx ebx [ eax + 0x1 ]
xor ebx ecx
add eax 0x1
and ebx 0xff
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
movzx ebx [ eax + 0x1 ]
add eax 0x1
xor ebx ecx
and ebx 0xff
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
movzx ebx [ eax + 0x1 ]
add eax 0x1
xor ebx ecx
and ebx 0xff
shr ecx 0x8
xor ecx [ ebx * 4 + r--data ]
add eax 0x1
sub edi 0x8
sub ebp 0x1
mov esi ecx
jne r-xdata
mov ebx [ esp + 0x10 ]
mov ebp [ esp + 0x14 ]
push 0x0
lea ecx [ esp + 0x20 ]
push ecx
push 0x1000
push ebp
push ebx
call [ ReadFile@IAT ]
mov edx [ esp + 0x1c ]
cmp edx 0x8
mov eax ebp
mov edi edx
jb r-xdata
mov edx [ rw-data ]
push ebp
push 0x0
push edx
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
pop edi
sub_406db0
test edx edx
jbe r-xdata
retn
push esi
lea esi [ edx - 0x1 ]
shr esi 0x2
add ecx 0x1
add eax 0x2
add esi 0x1
movzx edx [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
movzx edx [ eax - 0x1 ]
mov [ ecx ] dl
movzx edx [ eax ]
mov [ ecx + 0x1 ] dl
movzx edx [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
sub esi 0x1
jne r-xdata
pop esi
sub_406df0
test ecx ecx
jbe r-xdata
retn
add ecx 0xffffffff
push esi
shr ecx 0x2
add eax 0x2
push edi
mov esi edx
add ecx 0x1
movzx edi [ eax - 0x1 ]
xor edx edx
mov dh [ eax + 0x1 ]
add esi 0x4
add eax 0x4
mov dl [ eax - 0x4 ]
shl edx 0x8
or edx edi
movzx edi [ eax - 0x6 ]
shl edx 0x8
or edx edi
sub ecx 0x1
mov [ esi - 0x4 ] edx
jne r-xdata
pop edi
pop esi
sub_406e30
push esi
mov esi edx
test esi esi
jbe r-xdata
pop esi
retn
sub ecx eax
lea esp [ esp ]
mov dl [ ecx + eax ]
mov [ eax ] dl
add eax 0x1
sub esi 0x1
jne r-xdata
sub_406e70
mov eax [ esp + 0x4 ]
sub esp 0x44
push ebx
push ebp
push esi
push edi
add ecx 0x2
lea esi [ esp + 0x14 ]
mov edi 0x10
movzx ebx [ ecx - 0x1 ]
xor edx edx
mov dh [ ecx + 0x1 ]
add esi 0x4
add ecx 0x4
mov dl [ ecx - 0x4 ]
shl edx 0x8
or edx ebx
movzx ebx [ ecx - 0x6 ]
shl edx 0x8
or edx ebx
sub edi 0x1
mov [ esi - 0x4 ] edx
jne r-xdata
mov esi [ eax + 0x4 ]
mov edx [ eax + 0x8 ]
mov ecx [ eax + 0xc ]
mov eax [ eax ]
mov ebx edx
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ esp + 0x14 ]
mov ebx esi
lea eax [ edi + eax - 0x28955b88 ]
rol eax 0x7
add eax esi
and ebx eax
mov edi eax
not edi
and edi edx
or edi ebx
add edi [ esp + 0x18 ]
lea ecx [ edi + ecx - 0x173848aa ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi [ esp + 0x1c ]
mov ebx ecx
lea edx [ edi + edx + 0x242070db ]
ror edx 0xf
add edx ecx
and ebx edx
mov edi edx
not edi
and edi eax
or edi ebx
add edi [ esp + 0x20 ]
mov ebx edx
lea esi [ edi + esi - 0x3e423112 ]
ror esi 0xa
add esi edx
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ esp + 0x24 ]
mov ebx esi
lea eax [ edi + eax - 0xa83f051 ]
rol eax 0x7
add eax esi
and ebx eax
mov edi eax
not edi
and edi edx
or edi ebx
add edi [ esp + 0x28 ]
lea ecx [ edi + ecx + 0x4787c62a ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi [ esp + 0x2c ]
mov ebx ecx
lea edx [ edi + edx - 0x57cfb9ed ]
ror edx 0xf
add edx ecx
mov edi edx
not edi
and edi eax
and ebx edx
or edi ebx
add edi [ esp + 0x30 ]
lea esi [ edi + esi - 0x2b96aff ]
ror esi 0xa
add esi edx
mov ebx edx
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ esp + 0x34 ]
mov ebx esi
lea eax [ edi + eax + 0x698098d8 ]
rol eax 0x7
add eax esi
and ebx eax
mov edi eax
not edi
and edi edx
or edi ebx
add edi [ esp + 0x38 ]
lea ecx [ edi + ecx - 0x74bb0851 ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
and edi esi
mov ebx ecx
and ebx eax
or edi ebx
add edi [ esp + 0x3c ]
mov ebx ecx
lea edx [ edi + edx - 0xa44f ]
ror edx 0xf
add edx ecx
and ebx edx
mov edi edx
not edi
and edi eax
or edi ebx
add edi [ esp + 0x40 ]
mov ebx edx
lea esi [ edi + esi - 0x76a32842 ]
ror esi 0xa
add esi edx
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ esp + 0x44 ]
mov ebx esi
lea eax [ edi + eax + 0x6b901122 ]
rol eax 0x7
add eax esi
and ebx eax
mov edi eax
not edi
and edi edx
or edi ebx
add edi [ esp + 0x48 ]
lea ecx [ edi + ecx - 0x2678e6d ]
rol ecx 0xc
add ecx eax
mov edi ecx
not edi
mov ebx edi
and ebx esi
mov ebp ecx
and ebp eax
or ebx ebp
add ebx [ esp + 0x4c ]
mov ebp ecx
lea edx [ ebx + edx - 0x5986bc72 ]
ror edx 0xf
add edx ecx
mov ebx edx
not ebx
mov [ esp + 0x10 ] ebx
and ebx eax
and ebp edx
or ebx ebp
and edi edx
mov ebp [ esp + 0x50 ]
add ebx ebp
lea esi [ ebx + esi + 0x49b40821 ]
ror esi 0xa
add esi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x18 ]
mov ebx edx
lea eax [ edi + eax - 0x9e1da9e ]
mov edi [ esp + 0x10 ]
and edi esi
rol eax 0x5
add eax esi
and ebx eax
or edi ebx
add edi [ esp + 0x2c ]
lea ecx [ edi + ecx - 0x3fbf4cc0 ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x40 ]
lea edx [ edi + edx + 0x265e5a51 ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x14 ]
mov ebx ecx
lea esi [ edi + esi - 0x16493856 ]
ror esi 0xc
add esi edx
and ebx esi
mov edi ecx
not edi
and edi edx
or edi ebx
add edi [ esp + 0x28 ]
mov ebx edx
lea eax [ edi + eax - 0x29d0efa3 ]
rol eax 0x5
add eax esi
mov edi edx
not edi
and edi esi
and ebx eax
or edi ebx
add edi [ esp + 0x3c ]
lea ecx [ edi + ecx + 0x2441453 ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi ebp
lea edx [ edi + edx - 0x275e197f ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x24 ]
lea esi [ edi + esi - 0x182c0438 ]
ror esi 0xc
add esi edx
mov edi ecx
not edi
and edi edx
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x38 ]
mov ebx edx
lea eax [ edi + eax + 0x21e1cde6 ]
rol eax 0x5
add eax esi
and ebx eax
mov edi edx
not edi
and edi esi
or edi ebx
add edi [ esp + 0x4c ]
lea ecx [ edi + ecx - 0x3cc8f82a ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x20 ]
lea edx [ edi + edx - 0xb2af279 ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x34 ]
mov ebx ecx
lea esi [ edi + esi + 0x455a14ed ]
ror esi 0xc
add esi edx
and ebx esi
mov edi ecx
not edi
and edi edx
or edi ebx
add edi [ esp + 0x48 ]
mov ebx edx
lea eax [ edi + eax - 0x561c16fb ]
rol eax 0x5
add eax esi
and ebx eax
mov edi edx
not edi
and edi esi
or edi ebx
add edi [ esp + 0x1c ]
lea ecx [ edi + ecx - 0x3105c08 ]
rol ecx 0x9
add ecx eax
mov edi esi
not edi
and edi eax
mov ebx ecx
and ebx esi
or edi ebx
add edi [ esp + 0x30 ]
lea edx [ edi + edx + 0x676f02d9 ]
rol edx 0xe
add edx ecx
mov edi eax
not edi
and edi ecx
mov ebx edx
and ebx eax
or edi ebx
add edi [ esp + 0x44 ]
lea esi [ edi + esi - 0x72d5b376 ]
ror esi 0xc
add esi edx
mov edi ecx
xor edi edx
xor edi esi
add edi [ esp + 0x28 ]
lea eax [ edi + eax - 0x5c6be ]
rol eax 0x4
add eax esi
mov edi edx
xor edi esi
xor edi eax
add edi [ esp + 0x34 ]
lea edi [ edi + ecx - 0x788e097f ]
rol edi 0xb
add edi eax
mov ecx edi
xor ecx esi
xor ecx eax
add ecx [ esp + 0x40 ]
mov ebx edi
lea edx [ ecx + edx + 0x6d9d6122 ]
rol edx 0x10
add edx edi
xor ebx edx
mov ecx ebx
xor ecx eax
add ecx [ esp + 0x4c ]
lea ecx [ ecx + esi - 0x21ac7f4 ]
ror ecx 0x9
add ecx edx
xor ebx ecx
add ebx [ esp + 0x18 ]
mov esi edx
xor esi ecx
lea eax [ ebx + eax - 0x5b4115bc ]
rol eax 0x4
add eax ecx
xor esi eax
add esi [ esp + 0x24 ]
lea esi [ esi + edi + 0x4bdecfa9 ]
rol esi 0xb
add esi eax
mov edi esi
xor edi ecx
xor edi eax
add edi [ esp + 0x30 ]
lea edx [ edi + edx - 0x944b4a0 ]
rol edx 0x10
add edx esi
mov edi esi
xor edi edx
mov ebx edi
xor ebx eax
add ebx [ esp + 0x3c ]
lea ecx [ ebx + ecx - 0x41404390 ]
ror ecx 0x9
add ecx edx
xor edi ecx
add edi [ esp + 0x48 ]
lea eax [ edi + eax + 0x289b7ec6 ]
rol eax 0x4
add eax ecx
mov edi edx
xor edi ecx
xor edi eax
add edi [ esp + 0x14 ]
lea esi [ edi + esi - 0x155ed806 ]
rol esi 0xb
add esi eax
mov edi esi
xor edi ecx
xor edi eax
add edi [ esp + 0x20 ]
lea edi [ edi + edx - 0x2b10cf7b ]
rol edi 0x10
add edi esi
mov edx esi
xor edx edi
mov ebx edx
xor ebx eax
add ebx [ esp + 0x2c ]
lea ecx [ ebx + ecx + 0x4881d05 ]
ror ecx 0x9
add ecx edi
xor edx ecx
add edx [ esp + 0x38 ]
lea eax [ edx + eax - 0x262b2fc7 ]
mov edx edi
xor edx ecx
rol eax 0x4
add eax ecx
xor edx eax
add edx [ esp + 0x44 ]
lea edx [ edx + esi - 0x1924661b ]
rol edx 0xb
add edx eax
mov esi edx
xor esi ecx
xor esi eax
add esi ebp
lea esi [ esi + edi + 0x1fa27cf8 ]
rol esi 0x10
add esi edx
mov edi edx
xor edi esi
xor edi eax
add edi [ esp + 0x1c ]
lea ecx [ edi + ecx - 0x3b53a99b ]
ror ecx 0x9
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi [ esp + 0x14 ]
lea eax [ edi + eax - 0xbd6ddbc ]
rol eax 0x6
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi [ esp + 0x30 ]
lea edx [ edi + edx + 0x432aff97 ]
rol edx 0xa
add edx eax
mov edi ecx
not edi
or edi edx
xor edi eax
add edi [ esp + 0x4c ]
lea esi [ edi + esi - 0x546bdc59 ]
rol esi 0xf
add esi edx
mov edi eax
not edi
or edi esi
xor edi edx
add edi [ esp + 0x28 ]
lea ecx [ edi + ecx - 0x36c5fc7 ]
ror ecx 0xb
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi [ esp + 0x44 ]
lea eax [ edi + eax + 0x655b59c3 ]
rol eax 0x6
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi [ esp + 0x20 ]
lea edx [ edi + edx - 0x70f3336e ]
rol edx 0xa
mov edi ecx
not edi
add edx eax
or edi edx
xor edi eax
add edi [ esp + 0x3c ]
lea esi [ edi + esi - 0x100b83 ]
mov edi eax
not edi
rol esi 0xf
add esi edx
or edi esi
xor edi edx
add edi [ esp + 0x18 ]
lea ecx [ edi + ecx - 0x7a7ba22f ]
ror ecx 0xb
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi [ esp + 0x34 ]
lea eax [ edi + eax + 0x6fa87e4f ]
rol eax 0x6
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi ebp
lea edx [ edi + edx - 0x1d31920 ]
rol edx 0xa
add edx eax
mov edi ecx
not edi
or edi edx
xor edi eax
add edi [ esp + 0x2c ]
lea esi [ edi + esi - 0x5cfebcec ]
mov edi eax
not edi
rol esi 0xf
add esi edx
or edi esi
xor edi edx
add edi [ esp + 0x48 ]
lea ecx [ edi + ecx + 0x4e0811a1 ]
ror ecx 0xb
add ecx esi
mov edi edx
not edi
or edi ecx
xor edi esi
add edi [ esp + 0x24 ]
lea eax [ edi + eax - 0x8ac817e ]
rol eax 0x6
add eax ecx
mov edi esi
not edi
or edi eax
xor edi ecx
add edi [ esp + 0x40 ]
lea edx [ edi + edx - 0x42c50dcb ]
rol edx 0xa
add edx eax
mov edi ecx
not edi
or edi edx
xor edi eax
add edi [ esp + 0x1c ]
lea esi [ edi + esi + 0x2ad7d2bb ]
mov edi [ esp + 0x58 ]
mov ebx [ edi ]
add ebx eax
not eax
rol esi 0xf
add esi edx
or eax esi
xor eax edx
add eax [ esp + 0x38 ]
mov [ edi ] ebx
lea eax [ eax + ecx - 0x14792c6f ]
ror eax 0xb
add eax [ edi + 0x4 ]
add eax esi
mov [ edi + 0x4 ] eax
mov eax [ edi + 0x8 ]
add eax esi
mov [ edi + 0x8 ] eax
mov eax [ edi + 0xc ]
add eax edx
mov [ edi + 0xc ] eax
pop edi
pop esi
pop ebp
pop ebx
add esp 0x44
retn
sub_407540
push ebx
mov ebx [ esp + 0x10 ]
push ebp
push esi
mov esi [ esp + 0x10 ]
mov eax [ esi + 0x10 ]
mov ecx eax
shr ecx 0x3
lea eax [ eax + ebx * 8 ]
lea edx [ ebx * 8 ]
and ecx 0x3f
cmp eax edx
push edi
mov [ esi + 0x10 ] eax
jae r-xdata
mov eax ebx
shr eax 0x1d
add [ esi + 0x14 ] eax
mov edi 0x40
sub edi ecx
cmp ebx edi
jb r-xdata
add [ esi + 0x14 ] 0x1
xor ebp ebp
xor eax eax
test edi edi
jbe r-xdata
pop edi
pop esi
pop ebp
pop ebx
retn
mov edx [ esp + 0x18 ]
add ebp edx
lea ecx [ ecx + esi + 0x18 ]
lea esp [ esp ]
lea ecx [ esi + 0x18 ]
push esi
call sub_406e70
mov ebp edi
add edi 0x3f
add esp 0x4
cmp edi ebx
jae r-xdata
lea ebp [ ecx + esi + 0x18 ]
lea esp [ esp ]
mov dl [ eax + ebp ]
mov [ ecx + eax ] dl
add eax 0x1
cmp eax edi
jb r-xdata
xor ecx ecx
jmp r-xdata
mov eax [ esp + 0x18 ]
lea ecx [ eax + edi - 0x3f ]
push esi
call sub_406e70
add edi 0x40
add esp 0x4
add ebp 0x40
cmp edi ebx
jb r-xdata
mov ecx [ esp + 0x18 ]
mov dl [ eax + ecx ]
mov [ eax + ebp ] dl
add eax 0x1
cmp eax edi
jb r-xdata
xor eax eax
sub ebx ebp
mov edi ebx
je r-xdata
sub_407610
sub esp 0x8
push esi
mov esi [ esp + 0x14 ]
push edi
xor ecx ecx
lea eax [ esi + 0x12 ]
mov edi edi
movzx edx [ eax - 0x2 ]
mov [ esp + ecx + 0x8 ] dl
movzx edx [ eax - 0x1 ]
mov [ esp + ecx + 0x9 ] dl
movzx edx [ eax ]
mov [ esp + ecx + 0xa ] dl
movzx edx [ eax + 0x1 ]
mov [ esp + ecx + 0xb ] dl
add ecx 0x4
add eax 0x4
cmp ecx 0x8
jb r-xdata
mov ecx [ esi + 0x10 ]
shr ecx 0x3
and ecx 0x3f
cmp ecx 0x38
mov eax 0x38
jb r-xdata
sub eax ecx
push eax
push rw-data
push esi
call sub_407540
push 0x8
lea eax [ esp + 0x18 ]
push eax
push esi
call sub_407540
mov ecx [ esp + 0x2c ]
add esp 0x18
add ecx 0x1
lea eax [ esi + 0x2 ]
mov edi 0x4
nop
mov eax 0x78
movzx edx [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
movzx edx [ eax - 0x1 ]
mov [ ecx ] dl
movzx edx [ eax ]
mov [ ecx + 0x1 ] dl
movzx edx [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
sub edi 0x1
jne r-xdata
push 0x58
push edi
push esi
call memset
add esp 0xc
pop edi
pop esi
add esp 0x8
retn
sub_4076d0
push ebp
mov ebp esp
push 0x0
push 0x1000
push 0x1
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] 0x0
mov [ rw-data ] 0x10
mov eax [ rw-data ]
push eax
push 0x1
mov ecx [ rw-data ]
push ecx
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov [ rw-data ] eax
pop ebp
retn
sub_407720
or edx edx
jne r-xdata
or ecx ecx
jne r-xdata
mov edx rw-data
mov ah [ edx ]
inc edx
mov al [ ecx ]
inc ecx
cmp ah al
jne r-xdata
mov ecx rw-data
xor eax eax
test eax eax
retn
or ah ah
jne r-xdata
mov eax 0x1
test eax eax
retn
sub_407750
push ebp
mov ebp esp
sub esp 0xc
mov [ ebp - 0xc ] edx
cmp [ ebp - 0xc ] 0x0
je r-xdata
mov eax [ rw-data ]
add eax [ rw-data ]
mov [ eax ] 0x0
mov eax [ ebp - 0xc ]
push eax
call strlen
add esp 0x4
mov [ ebp - 0x8 ] eax
mov ecx [ rw-data ]
push ecx
mov edx [ ebp - 0x8 ]
push edx
call sub_407960
mov [ ebp - 0x4 ] eax
mov eax [ ebp - 0x8 ]
push eax
mov ecx [ ebp - 0xc ]
push ecx
mov edx [ ebp - 0x4 ]
push edx
call sub_407a40
jmp r-xdata
mov esp ebp
pop ebp
retn
sub_4077b0
push ebp
mov ebp esp
push eax
push edx
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop edx
pop eax
pop ebp
retn 0x4
mov eax [ ebp + 0x8 ]
push eax
push 0x1
mov ecx [ rw-data ]
push ecx
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
sub_4077e0
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp + 0xc ]
push eax
call strlen
add esp 0x4
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
add ecx 0x5
push ecx
push 0x1
mov edx [ rw-data ]
push edx
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov edx [ ebp - 0x4 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
push edx
call sub_407a40
sub_407830
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
cmp [ ebp + 0xc ] 0x0
je r-xdata
mov eax [ ebp + 0x8 ]
cmp [ eax ] 0x0
je r-xdata
mov eax [ ebp + 0xc ]
push eax
call strlen
add esp 0x4
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0x0
jne r-xdata
mov eax [ ebp - 0x4 ]
add eax 0x1
mov esp ebp
pop ebp
retn 0x8
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
push edx
push 0x1
mov eax [ rw-data ]
push eax
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0x4 ]
add edx 0x5
push edx
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push ecx
push 0x1
mov edx [ rw-data ]
push edx
call [ HeapReAlloc@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov edx [ ebp - 0x4 ]
add edx 0x5
push edx
push 0x1
mov eax [ rw-data ]
push eax
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
jmp r-xdata
mov edx [ ebp - 0x4 ]
push edx
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
push edx
call sub_407a40
jmp r-xdata
sub_4078e0
push ebp
mov ebp esp
push ecx
mov eax [ rw-data ]
sub eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0x0
jne r-xdata
mov edx [ ebp - 0x4 ]
add edx 0x5
push edx
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push ecx
push 0x1
mov edx [ rw-data ]
push edx
call [ HeapReAlloc@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov edx [ ebp - 0x4 ]
add edx 0x5
push edx
push 0x1
mov eax [ rw-data ]
push eax
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
jmp r-xdata
mov edx [ ebp - 0x4 ]
push edx
mov eax [ rw-data ]
add eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
push edx
call sub_407a40
mov eax [ ebp + 0xc ]
mov [ rw-data ] eax
mov esp ebp
pop ebp
retn 0x8
sub_407960
push ebp
mov ebp esp
sub esp 0x8
mov eax [ rw-data ]
add eax [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov ecx [ rw-data ]
sub ecx 0x4
cmp [ ebp - 0x8 ] ecx
jl r-xdata
mov eax [ rw-data ]
add eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0xc ]
add ecx [ ebp + 0x8 ]
mov [ rw-data ] ecx
mov eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn 0x8
mov edx [ ebp - 0x8 ]
add edx 0x4000
mov [ rw-data ] edx
mov eax [ rw-data ]
add eax 0x5
push eax
mov ecx [ rw-data ]
push ecx
push 0x1
mov edx [ rw-data ]
push edx
call [ HeapReAlloc@IAT ]
mov [ rw-data ] eax
sub_4079e0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
mov ecx [ rw-data ]
add ecx [ rw-data ]
cmp [ ebp + 0x8 ] ecx
ja r-xdata
mov eax [ ebp + 0x8 ]
sub eax [ rw-data ]
add eax 0x1
jmp r-xdata
pop ebp
retn 0x4
sub_407a40
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
add eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
mov [ ecx ] 0x0
mov esp ebp
pop ebp
retn 0xc
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov eax [ edx ]
mov [ ecx ] eax
mov ecx [ ebp + 0x8 ]
add ecx 0x4
mov [ ebp + 0x8 ] ecx
mov edx [ ebp + 0xc ]
add edx 0x4
mov [ ebp + 0xc ] edx
mov eax [ ebp + 0x10 ]
sub eax 0x4
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
jle r-xdata
sub_407ac0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
or eax eax
je r-xdata
xor eax eax
leave
retn 0x4
cmp [ eax ] 0x434a
jne r-xdata
mov eax [ eax + 0x2 ]
leave
retn 0x4
sub_407ae0
push ebp
mov ebp esp
add esp 0xfffffff4
cld
push ebx
push edi
push esi
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
cmp [ esi ] 0x434a
jne r-xdata
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x6 ] 0x0
je r-xdata
add esi 0xa
mov [ ebp - 0x4 ] 0x8
xor ebx ebx
mov edx 0x80000000
inc ebx
mov eax edi
sub eax [ ebp + 0xc ]
push esi
mov ecx [ esi + 0x2 ]
mov esi [ ebp + 0xc ]
xor eax eax
cmp ecx 0x4
jb r-xdata
call sub_407c7e
jb r-xdata
mov ecx [ ebp - 0x8 ]
call sub_407c96
add al [ ebp - 0x9 ]
pop esi
cmp eax [ esi + 0x6 ]
je r-xdata
lea esp [ esp ]
lea esp [ esp ]
call sub_407ca2
dec ecx
loop r-xdata
call sub_407c7e
jae r-xdata
xor eax eax
call sub_407c7e
jae r-xdata
xor eax eax
jmp r-xdata
cmp ecx 0x4
jae r-xdata
dec ecx
mov eax ecx
push ebp
mov ecx [ ebp - 0x4 ]
mov ebp eax
xor eax eax
shl ebp cl
call sub_407c96
or eax ebp
pop ebp
mov ebx eax
call sub_407ca2
cmp eax 0x10000
jae r-xdata
mov eax ebx
call sub_407ca2
jmp r-xdata
mov ecx 0x7
call sub_407c96
push eax
mov ecx 0x2
call sub_407c96
mov ecx eax
inc ecx
inc ecx
pop eax
or eax eax
je r-xdata
mov ecx 0x4
call sub_407c96
dec eax
je r-xdata
pop esi
pop edi
pop ebx
leave
retn 0x8
mov ebx [ esi ]
add eax ebx
shl ebx 0x1
adc ebx 0x1
xor eax ebx
add esi 0x4
sub ecx 0x4
je r-xdata
mov edx 0x4
sub edx ecx
sub esi edx
mov ecx 0x4
jmp r-xdata
inc ecx
cmp eax 0x37ff
jae r-xdata
push esi
mov esi edi
sub esi eax
[ edi ] [ esi ]
pop esi
jmp r-xdata
cmp ecx 0x2
je r-xdata
mov ebx eax
jmp r-xdata
stosb [ edi ]
jmp r-xdata
jns r-xdata
inc ecx
cmp eax 0x27f
jae r-xdata
inc ecx
call sub_407c96
mov [ ebp - 0x4 ] eax
jmp r-xdata
inc ecx
call sub_407c7e
jae r-xdata
cmp eax 0x7f
ja r-xdata
mov ecx 0x1
call sub_407c96
add eax 0x7
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x9 ] 0x0
cmp eax 0x8
je r-xdata
push ebp
inc ecx
call sub_407c8b
mov [ ebp - 0x9 ] al
jmp r-xdata
call sub_407c8b
mov [ edi ] al
inc edi
dec ebp
jne r-xdata
call sub_407c7e
jb r-xdata
mov ebp 0x100
pop ebp
jmp r-xdata
sub_407cb4
push ebp
mov ebp esp
add esp 0xfffffff4
cld
push ebx
push edi
push esi
mov esi [ esp + 0x20 ]
mov edi [ esp + 0x24 ]
cmp [ esi ] 0x434a
jne r-xdata
lea ebp [ esp + 0x18 ]
mov esi [ esp + 0x20 ]
cmp [ esi + 0x6 ] 0x0
je r-xdata
add esi 0xa
xor ebx ebx
mov edx 0x80000000
mov [ esp + 0x14 ] 0x8
inc ebx
lea esp [ esp ]
add eax 0x0
mov eax edi
sub eax [ esp + 0x24 ]
mov ecx [ esi + 0x2 ]
mov esi [ esp + 0x24 ]
xor eax eax
cmp ecx 0x4
jb r-xdata
jae r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
mov esi [ esp + 0x20 ]
cmp eax [ esi + 0x6 ]
je r-xdata
lea esp [ esp ]
lea esp [ esp ]
add edx edx
jne r-xdata
mov ecx [ esp + 0x10 ]
xor eax eax
lea esp [ esp ]
add eax 0x0
xor eax eax
jmp r-xdata
cmp ecx 0x4
jae r-xdata
jb r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
pop esi
pop edi
pop ebx
leave
retn 0x8
mov ebx [ esi ]
add eax ebx
shl ebx 0x1
adc ebx 0x1
xor eax ebx
add esi 0x4
sub ecx 0x4
je r-xdata
mov edx 0x4
sub edx ecx
sub esi edx
mov ecx 0x4
jmp r-xdata
mov ecx 0x1
nop
add edx edx
jne r-xdata
add edx edx
jne r-xdata
add al [ esp + 0xc ]
adc ecx ecx
add edx edx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
jae r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
add edx edx
jne r-xdata
jb r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
mov ecx 0x7
xor eax eax
lea esp [ esp ]
lea esp [ esp ]
nop
mov ecx 0x4
xor eax eax
lea esp [ esp ]
lea esp [ esp ]
add edx edx
jne r-xdata
dec ecx
dec ecx
jne r-xdata
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
dec ecx
mov eax ecx
mov ecx [ esp + 0x14 ]
mov ebp eax
xor eax eax
shl ebp cl
xor eax eax
mov eax ebx
mov ecx 0x1
lea esp [ esp ]
mov edi edi
add edx edx
jne r-xdata
mov ebp eax
mov ecx 0x2
xor eax eax
lea ebx [ ebx ]
add edx edx
jne r-xdata
dec eax
je r-xdata
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
adc ecx ecx
add edx edx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
mov [ edi ] al
inc edi
jmp r-xdata
jns r-xdata
add edx edx
jne r-xdata
or eax ebp
mov ebx eax
mov ecx 0x1
lea ebx [ ebx ]
jb r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
add edx edx
jne r-xdata
mov ecx eax
mov eax ebp
add ecx 0x2
test eax eax
je r-xdata
inc ecx
add edx edx
jne r-xdata
adc ecx ecx
add edx edx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
add edx edx
jne r-xdata
jmp r-xdata
cmp ecx 0x2
je r-xdata
mov ebx eax
jmp r-xdata
jae r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
jb r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
mov ebp esi
mov esi edi
sub esi eax
[ edi ] [ esi ]
mov esi ebp
jmp r-xdata
inc ecx
xor eax eax
nop
mov ecx 0x1
xor eax eax
lea esp [ esp ]
lea esp [ esp ]
nop
mov ebp 0x100
add edx edx
jne r-xdata
cmp eax 0x10000
jae r-xdata
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
inc ecx
cmp eax 0x37ff
jae r-xdata
add edx edx
jne r-xdata
mov [ esp + 0x14 ] eax
jmp r-xdata
add edx edx
jne r-xdata
add eax 0x7
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] 0x0
cmp eax 0x8
je r-xdata
add edx edx
jne r-xdata
mov [ edi ] al
inc edi
dec ebp
jne r-xdata
inc ecx
cmp eax 0x27f
jae r-xdata
mov ecx 0x8
xor eax eax
lea ecx [ ecx ]
mov ecx 0x8
xor eax eax
lea esp [ esp ]
add eax 0x0
add edx edx
jne r-xdata
cmp eax 0x7f
ja r-xdata
adc eax eax
dec ecx
jne r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
jb r-xdata
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
inc ecx
add edx edx
jne r-xdata
mov [ esp + 0xc ] al
jmp r-xdata
jmp r-xdata
sub_408010
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_4080b0
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_40811a
push ebp
mov ebp esp
sub esp 0x38
push ebx
push edi
push [ rw-data ]
lea eax [ ebp - 0x38 ]
push r--data
push eax
call sprintf
add esp 0xc
lea eax [ ebp - 0x38 ]
push eax
push [ ebp + 0x8 ]
call [ GetPropA@IAT ]
mov edi eax
xor ebx ebx
cmp edi ebx
je r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ __import_lookup_table_7(USER32:DefWindowProcA) ]
cmp [ ebp + 0xc ] 0x82
mov eax [ edi + 0x14 ]
mov [ ebp - 0x4 ] eax
jne r-xdata
cmp [ ebp - 0x4 ] ebx
je r-xdata
push [ rw-data ]
call sub_40668d
cmp [ eax + 0x10 ] ebx
jne r-xdata
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call [ __import_lookup_table_7(USER32:CallWindowProcA) ]
jmp r-xdata
mov ecx [ eax + 0xc ]
mov ecx [ ecx ]
mov ecx [ eax ]
jmp r-xdata
pop edi
pop ebx
leave
retn 0x10
mov eax [ edi + 0x8 ]
cmp eax ebx
push esi
mov esi [ __import_lookup_table_0(KERNEL32:HeapFree) ]
je r-xdata
mov [ eax ] ebx
mov [ eax + 0x10 ] ebx
cmp [ edi ] ecx
jne r-xdata
push edi
push ebx
push [ rw-data ]
call esi
lea eax [ ebp - 0x38 ]
push eax
push [ ebp + 0x8 ]
call [ RemovePropA@IAT ]
pop esi
push eax
push ebx
push [ rw-data ]
call esi
sub_4081e3
push ebp
mov ebp esp
sub esp 0x38
push ebx
push esi
push [ rw-data ]
call sub_40668d
mov esi eax
cmp [ esi + 0x10 ] 0x0
jne r-xdata
mov eax [ esi + 0xc ]
mov eax [ eax ]
mov eax [ esi ]
jmp r-xdata
mov eax [ ebp - 0x4 ]
pop esi
pop ebx
leave
retn 0x4
push edi
push [ rw-data ]
lea eax [ ebp - 0x38 ]
push r--data
push eax
call sprintf
mov edi [ GetPropA@IAT ]
add esp 0xc
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ebx [ ebp + 0x8 ]
test ebx ebx
mov [ ebp - 0x4 ] eax
je r-xdata
lea eax [ ebp - 0x38 ]
push eax
push ebx
call edi
mov edi eax
xor ecx ecx
cmp edi ecx
je r-xdata
lea eax [ ebp - 0x38 ]
push eax
push [ ebp - 0x4 ]
call edi
mov ecx [ esi ]
mov [ eax + 0x4 ] ecx
mov ecx [ esi + 0xc ]
mov [ eax + 0x8 ] ecx
mov ecx [ esi + 0x10 ]
mov [ eax + 0xc ] ecx
mov ecx [ esi + 0x14 ]
mov [ eax + 0x10 ] ecx
and [ esi + 0xc ] 0x0
cmp [ esi + 0xc ] ecx
mov edi [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
jne r-xdata
mov eax [ esi + 0xc ]
cmp eax ecx
je r-xdata
mov [ esi + 0x10 ] ecx
push 0x28
push 0x8
push [ rw-data ]
call edi
and [ esi + 0x10 ] 0x0
mov [ esi + 0xc ] eax
mov [ esi + 0x14 ] 0xa
jmp r-xdata
mov eax [ edi + 0x4 ]
mov [ esi ] eax
mov eax [ edi + 0x8 ]
mov [ esi + 0xc ] eax
mov eax [ edi + 0xc ]
mov [ esi + 0x10 ] eax
mov eax [ edi + 0x10 ]
mov [ esi + 0x14 ] eax
and [ edi + 0x8 ] 0x0
jmp r-xdata
push eax
push ecx
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
push 0x18
push 0x8
mov [ esi ] ebx
push [ rw-data ]
call edi
mov edi eax
push edi
lea eax [ ebp - 0x38 ]
push eax
push ebx
mov [ edi ] ebx
call [ SetPropA@IAT ]
push sub_40811a
push 0xfffffffc
push ebx
call [ __import_lookup_table_7(USER32:SetWindowLongA) ]
mov [ edi + 0x14 ] eax
and [ esi + 0x4 ] 0x0
pop edi
sub_401c4c
push 0x0
call sub_401c66
push [ rw-data ]
call HeapDestroy
call ExitProcess
sub_401c66
call j_sub_403d3a
call sub_403f20
call sub_404010
call sub_4043b0
call sub_404c73
call sub_406310
call sub_406a7c
retn
sub_402100
xor eax eax
retn
sub_4030f0
push edx
push ecx
call sub_4077e0
retn
sub_4030f8
push edx
push ecx
call sub_407830
retn
sub_403100
push edx
push ecx
call sub_4078e0
retn
sub_403110
push eax
or edx edx
je r-xdata
pop eax
retn
sub edx 0x18
push edx
push 0x0
push [ rw-data ]
call HeapFree
memset
jmp [ memset@IAT ]
GetModuleHandleA
jmp [ GetModuleHandleA@IAT ]
HeapCreate
jmp [ HeapCreate@IAT ]
RemoveDirectoryA
jmp [ RemoveDirectoryA@IAT ]
GetShortPathNameA
jmp [ GetShortPathNameA@IAT ]
HeapDestroy
jmp [ __import_lookup_table_0(KERNEL32:HeapDestroy) ]
ExitProcess
jmp [ ExitProcess@IAT ]
GetTempFileNameA
jmp [ __import_lookup_table_0(KERNEL32:GetTempFileNameA) ]
FindResourceA
jmp [ __import_lookup_table_0(KERNEL32:FindResourceA) ]
LoadResource
jmp [ __import_lookup_table_0(KERNEL32:LoadResource) ]
SizeofResource
jmp [ __import_lookup_table_0(KERNEL32:SizeofResource) ]
GetExitCodeProcess
jmp [ __import_lookup_table_0(KERNEL32:GetExitCodeProcess) ]
HeapFree
jmp [ __import_lookup_table_0(KERNEL32:HeapFree) ]
HeapAlloc
jmp [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
sub_4038c0
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
mov edx [ esp + 0x4 ]
push eax
push 0x0
push ecx
push edx
call sub_403730
retn 0xc
sub_4038d9
call InitCommonControls
push 0x0
call [ CoInitialize@IAT ]
retn
sub_403916
mov eax [ esp + 0x8 ]
dec eax
jne r-xdata
xor eax eax
retn 0x10
cmp [ esp + 0x10 ] eax
je r-xdata
push [ esp + 0x10 ]
push 0x1
push 0x466
push [ esp + 0x10 ]
call [ __import_lookup_table_7(USER32:SendMessageA) ]
sub_403b80
push 0x0
push 0x0
push 0x10
call sub_406694
push rw-data
mov [ rw-data ] eax
call [ __import_lookup_table_0(KERNEL32:InitializeCriticalSection) ]
retn
sub_403cab
push [ rw-data ]
call sub_40668d
push 0x0
call sub_403b9c
retn
sub_403d19
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn 0x8
cmp [ ebp + 0xc ] 0x0
jne r-xdata
pop ebp
jmp [ SetEnvironmentVariableA@IAT ]
mov [ ebp + 0xc ] r--data
j_sub_403d3a
jmp sub_403d3a
sub_403d76
xor eax eax
cmp [ esp + 0x4 ] eax
je r-xdata
retn 0x8
cmp [ esp + 0x8 ] eax
je r-xdata
jmp sub_407cb4
sub_403f20
mov eax [ rw-data ]
push eax
call [ __import_lookup_table_0(KERNEL32:SetUnhandledExceptionFilter) ]
mov [ rw-data ] 0x0
retn
Sleep
jmp [ __import_lookup_table_0(KERNEL32:Sleep) ]
sub_403ff0
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
retn
sub_404010
retn
sub_404070
mov eax [ esp + 0x4 ]
test eax eax
jle r-xdata
xor eax eax
retn 0x4
push eax
mov eax [ rw-data ]
push 0x8
push eax
call [ __import_lookup_table_0(KERNEL32:HeapAlloc) ]
retn 0x4
sub_4040e0
mov eax [ esp + 0x4 ]
mov ecx [ rw-data ]
push eax
push 0x0
push ecx
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
retn 0x4
sub_404100
movsx eax [ eax ]
retn
sub_404110
mov eax [ eax ]
retn
sub_4041ad
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x10 ]
retn 0x4
sub_4041b7
mov eax [ esp + 0x4 ]
and [ eax + 0x8 ] 0x0
mov [ eax + 0x24 ] 0x1
mov eax [ eax + 0xc ]
and [ eax ] 0x0
retn 0x4
sub_40432a
mov eax [ esp + 0x4 ]
push [ eax + 0xc ]
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
retn
sub_4043b0
push [ rw-data ]
call sub_40668d
mov eax [ eax + 0x18 ]
test eax eax
je r-xdata
retn
push eax
call [ DestroyWindow@IAT ]
sub_40451d
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_40442f
pop ebp
retn 0x18
sub_404713
xor eax eax
cmp [ esp + 0x8 ] eax
push eax
je r-xdata
push eax
push 0x1
jmp r-xdata
mov eax [ esp + 0xc ]
push 0xf1
push [ eax ]
call [ __import_lookup_table_7(USER32:SendMessageA) ]
retn 0x8
sub_404735
mov eax [ esp + 0x4 ]
push 0x0
push 0x0
push 0xf0
push [ eax ]
call [ __import_lookup_table_7(USER32:SendMessageA) ]
and eax 0x1
retn 0x4
sub_404813
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_404750
pop ebp
retn 0x18
sub_404833
cmp [ esp + 0x4 ] 0xffffffff
jne r-xdata
push [ esp + 0x4 ]
push [ rw-data ]
call sub_4068f0
test eax eax
je r-xdata
push 0x0
jmp r-xdata
retn 0x4
push [ eax ]
call [ __import_lookup_table_7(USER32:SetFocus) ]
sub_4048c2
push [ esp + 0x4 ]
push [ rw-data ]
call sub_4068f0
test eax eax
je r-xdata
retn 0x4
push [ eax ]
call [ DestroyWindow@IAT ]
sub_40493a
cmp [ esp + 0x8 ] 0x1
jne r-xdata
cmp [ esp + 0x8 ] 0x2
jne r-xdata
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x14 ]
jmp r-xdata
or eax 0xffffffff
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x10 ]
jmp r-xdata
retn 0x8
sub_404960
mov eax [ esp + 0x4 ]
mov eax [ eax + 0x18 ]
test eax eax
je r-xdata
retn 0x4
push eax
call sub_404b36
sub_4052be
push 0xffffffff
call sub_405184
retn
sub_4052c6
push [ rw-data ]
call sub_40668d
mov eax [ eax ]
retn
sub_4052d4
push [ rw-data ]
call sub_40668d
mov eax [ eax ]
retn
sub_4052e2
push 0x0
push 0x0
push 0x5c
call sub_406694
mov [ rw-data ] eax
retn
sub_405939
push 0x0
push 0x0
push 0x15
push [ esp + 0x10 ]
call [ __import_lookup_table_7(USER32:SendMessageA) ]
xor eax eax
inc eax
retn 0x8
sub_406075
cmp [ esp + 0x4 ] 0x0
je r-xdata
retn 0x4
jmp [ __import_lookup_table_0(KERNEL32:SetCurrentDirectoryA) ]
sub_406100
cmp [ esp + 0x4 ] 0x0
je r-xdata
xor eax eax
retn 0x4
jmp [ __import_lookup_table_0(KERNEL32:DeleteFileA) ]
sub_406310
mov eax [ rw-data ]
push eax
call sub_406a0c
retn
sub_406320
push sub_4062b0
push 0x10
push 0x18
call sub_406951
mov [ rw-data ] eax
retn
sub_406510
mov eax [ esp + 0x4 ]
push ebx
mov ebx [ esp + 0xc ]
push eax
mov eax 0x1
call sub_406340
add esp 0x4
pop ebx
retn 0x8
sub_40668d
mov eax [ esp + 0x4 ]
retn 0x4
sub_40686e
push [ esp + 0x4 ]
call sub_40681e
push [ esp + 0x4 ]
push 0x0
push [ rw-data ]
call [ __import_lookup_table_0(KERNEL32:HeapFree) ]
retn 0x4
sub_406a67
push 0x0
push 0x400
push 0x0
call [ HeapCreate@IAT ]
mov [ rw-data ] eax
retn
sub_406a7c
retn
sub_406d80
mov eax [ esp + 0x4 ]
xor ecx ecx
mov [ eax + 0x14 ] ecx
mov [ eax + 0x10 ] ecx
mov [ eax ] 0x67452301
mov [ eax + 0x4 ] 0xefcdab89
mov [ eax + 0x8 ] 0x98badcfe
mov [ eax + 0xc ] 0x10325476
retn
sub_406e50
test eax eax
jbe r-xdata
retn
push eax
mov eax [ esp + 0x8 ]
push eax
push ecx
call memset
add esp 0xc
sub_407a20
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
lea eax [ ecx + eax - 0x1 ]
pop ebp
retn 0x4
sub_407a90
push ebp
mov ebp esp
mov eax [ rw-data ]
sub eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn 0x4
sub_407ab0
push ebp
mov ebp esp
mov eax [ rw-data ]
add eax [ ebp + 0x8 ]
pop ebp
retn 0x4
sub_407c7e
add edx edx
jne r-xdata
retn
mov edx [ esi ]
add esi 0x4
stc
adc edx edx
sub_407c8b
mov ecx 0x8
call sub_407c96
retn
sub_407c96
xor eax eax
call sub_407c7e
adc eax eax
loop r-xdata
retn
sub_407ca2
xor ecx ecx
inc ecx
call sub_407c7e
adc ecx ecx
call sub_407c7e
jb r-xdata
retn
sub_407fe2
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ eax ] 0x5
mov [ eax + 0x4 ] 0x20
mov [ eax + 0xc ] 0x1d4
mov [ eax + 0x8 ] 0x32e
leave
retn 0x4
strncpy
jmp [ strncpy@IAT ]
_strnicmp
jmp [ _strnicmp@IAT ]
strncmp
jmp [ strncmp@IAT ]
strlen
jmp [ strlen@IAT ]
strcmp
jmp [ __import_lookup_table_3(MSVCRT:strcmp) ]
memmove
jmp [ __import_lookup_table_3(MSVCRT:memmove) ]
memcpy
jmp [ memcpy@IAT ]
sprintf
jmp [ __import_lookup_table_3(MSVCRT:sprintf) ]
InitCommonControls
jmp [ InitCommonControls@IAT ]
ShellExecuteExA
jmp [ ShellExecuteExA@IAT ]
PathQuoteSpacesA
jmp [ __import_lookup_table_6(SHLWAPI:PathQuoteSpacesA) ]
