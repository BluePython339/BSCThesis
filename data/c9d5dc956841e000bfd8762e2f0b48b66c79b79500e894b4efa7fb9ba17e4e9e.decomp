sub_401000
push ebp
mov ebp esp
push ecx
mov eax [ rw-data ]
movsx ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ rw-data ]
movsx eax [ edx ]
mov [ rw-data ] eax
mov ecx [ rw-data ]
mov edx [ rw-data ]
add edx 0x1
mov [ rw-data ] edx
cmp ecx 0x3a
je r-xdata
mov edx [ rw-data ]
cmp edx [ ebp + 0x8 ]
jge r-xdata
mov edx [ rw-data ]
movsx eax [ edx ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
push eax
mov ecx [ ebp + 0x10 ]
push ecx
call [ strchr@IAT ]
add esp 0x8
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ rw-data ]
mov ecx [ ebp + 0xc ]
mov edx [ ecx + eax * 4 ]
mov [ rw-data ] edx
mov eax [ rw-data ]
movsx ecx [ eax ]
cmp ecx 0x2d
jne r-xdata
mov edx [ _iob@IAT ]
add edx 0x40
push edx
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
push ecx
call [ fputs@IAT ]
add esp 0x8
mov edx [ _iob@IAT ]
add edx 0x40
push edx
push r--data
call [ fputs@IAT ]
add esp 0x8
mov eax [ _iob@IAT ]
add eax 0x40
push eax
mov ecx [ rw-data ]
push ecx
call [ fputc@IAT ]
add esp 0x8
mov edx [ _iob@IAT ]
add edx 0x40
push edx
push 0xa
call [ fputc@IAT ]
add esp 0x8
mov eax 0x3f
jmp r-xdata
mov ecx [ rw-data ]
add ecx 0x1
mov [ rw-data ] ecx
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
movsx edx [ ecx ]
cmp edx 0x3a
je r-xdata
mov esp ebp
pop ebp
retn
mov edx [ rw-data ]
add edx 0x1
mov [ rw-data ] edx
mov eax [ rw-data ]
movsx ecx [ eax ]
test ecx ecx
jne r-xdata
mov eax [ rw-data ]
movsx ecx [ eax ]
test ecx ecx
je r-xdata
mov [ rw-data ] 0x0
mov eax [ rw-data ]
movsx ecx [ eax ]
test ecx ecx
jne r-xdata
mov edx [ rw-data ]
movsx eax [ edx ]
cmp eax 0x2d
jne r-xdata
mov eax [ rw-data ]
add eax 0x1
mov [ rw-data ] eax
mov ecx [ ebp + 0x8 ]
cmp ecx [ rw-data ]
jg r-xdata
mov edx [ rw-data ]
mov [ rw-data ] edx
jmp r-xdata
jmp r-xdata
mov edx [ rw-data ]
add edx 0x1
mov [ rw-data ] edx
mov ecx [ rw-data ]
add ecx 0x1
mov [ rw-data ] ecx
or eax 0xffffffff
jmp r-xdata
mov eax [ rw-data ]
mov ecx [ ebp + 0xc ]
mov edx [ ecx + eax * 4 ]
mov [ rw-data ] edx
mov [ rw-data ] rw-data
mov edx [ _iob@IAT ]
add edx 0x40
push edx
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
push ecx
call [ fputs@IAT ]
add esp 0x8
mov edx [ _iob@IAT ]
add edx 0x40
push edx
push r--data
call [ fputs@IAT ]
add esp 0x8
mov eax [ _iob@IAT ]
add eax 0x40
push eax
mov ecx [ rw-data ]
push ecx
call [ fputc@IAT ]
add esp 0x8
mov edx [ _iob@IAT ]
add edx 0x40
push edx
push 0xa
call [ fputc@IAT ]
add esp 0x8
mov eax 0x3f
jmp r-xdata
mov [ rw-data ] rw-data
mov eax [ rw-data ]
add eax 0x1
mov [ rw-data ] eax
mov eax [ rw-data ]
sub_401262
push ebp
mov ebp esp
sub esp 0x130
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x14 ] 0x0
mov [ ebp - 0x28 ] 0x0
mov [ ebp - 0x8 ] 0x2
mov eax [ ebp + 0xc ]
cmp [ eax + 0x4 ] 0x0
je r-xdata
push r--data
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
call sub_401000
add esp 0xc
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0xffffffff
je r-xdata
push r--data
mov ecx [ ebp + 0xc ]
mov edx [ ecx + 0x4 ]
push edx
call strcmp
add esp 0x8
test eax eax
jne r-xdata
cmp [ ebp - 0x14 ] 0x0
je r-xdata
mov edx [ ebp - 0xc ]
mov [ ebp - 0x130 ] edx
mov eax [ ebp - 0x130 ]
sub eax 0x31
mov [ ebp - 0x130 ] eax
cmp [ ebp - 0x130 ] 0x46
ja r-xdata
push r--data
call [ puts@IAT ]
add esp 0x4
push 0x0
call [ exit@IAT ]
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
push r--data
mov edx [ ebp - 0x14 ]
push edx
call [ fopen@IAT ]
add esp 0x8
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
push ecx
call sub_401ccb
mov edx [ ebp - 0x130 ]
xor ecx ecx
mov cl [ edx + lookup_table_40163e ]
jmp [ ecx * 4 + jump_table_4015fe ]
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ _iob@IAT ]
add eax 0x20
mov [ ebp - 0x4 ] eax
mov [ rw-data ] 0x1
jmp r-xdata
push r--data
call sub_404180
mov [ ebp - 0x8 ] 0x1
jmp r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
mov edx [ rw-data ]
mov [ ebp - 0x14 ] edx
jmp r-xdata
mov eax [ rw-data ]
push eax
call [ atoi@IAT ]
add esp 0x4
push eax
call sub_403903
add esp 0x4
jmp r-xdata
push r--data
call [ puts@IAT ]
add esp 0x4
push 0x0
call [ exit@IAT ]
mov [ rw-data ] 0x1
jmp r-xdata
mov [ rw-data ] 0x1
jmp r-xdata
mov ecx [ rw-data ]
push ecx
call [ atoi@IAT ]
add esp 0x4
mov [ rw-data ] ax
jmp r-xdata
push r--data
call sub_404180
mov edx [ rw-data ]
add edx 0x1
mov [ rw-data ] edx
jmp r-xdata
mov eax [ rw-data ]
push eax
call [ atoi@IAT ]
add esp 0x4
mov [ rw-data ] eax
jmp r-xdata
mov ecx [ rw-data ]
push ecx
call [ atoi@IAT ]
add esp 0x4
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] 0x1
mov ecx [ ebp - 0x8 ]
push ecx
mov edx [ rw-data ]
push edx
call sub_40513d
push r--data
call [ printf@IAT ]
add esp 0x4
jmp r-xdata
cmp [ ebp - 0x28 ] 0x0
jne r-xdata
mov ecx [ rw-data ]
mov edx [ ebp + 0xc ]
mov eax [ edx + ecx * 4 ]
mov [ ebp - 0x12c ] eax
mov ecx [ rw-data ]
add ecx 0x1
mov [ rw-data ] ecx
lea edx [ ebp - 0x128 ]
push edx
mov eax [ ebp - 0x12c ]
push eax
call sub_401e40
add esp 0x8
test eax eax
jne r-xdata
push 0x0
push 0x2
push 0x2
call [ Ordinal_WSOCK32_23@IAT ]
mov [ ebp - 0x10 ] eax
cmp [ ebp - 0x10 ] 0xffffffff
jne r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
push ecx
call sub_401ccb
mov edx [ ebp - 0x28 ]
add edx 0x1
mov [ ebp - 0x28 ] edx
jmp r-xdata
lea ecx [ ebp - 0x128 ]
push ecx
push r--data
call sub_404180
push 0x10
push 0x0
lea edx [ ebp - 0x24 ]
push edx
call memset
add esp 0xc
mov [ ebp - 0x24 ] 0x2
push 0x0
call [ Ordinal_WSOCK32_8@IAT ]
mov [ ebp - 0x20 ] eax
mov ax [ rw-data ]
push eax
call [ Ordinal_WSOCK32_9@IAT ]
mov [ ebp - 0x22 ] ax
push 0x10
lea ecx [ ebp - 0x24 ]
push ecx
mov edx [ ebp - 0x10 ]
push edx
call [ Ordinal_WSOCK32_2@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
push eax
call sub_4036d2
add esp 0x4
push eax
push r--data
call sub_404180
mov eax [ rw-data ]
cmp eax [ ebp + 0x8 ]
jge r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call [ Ordinal_WSOCK32_111@IAT ]
push eax
push r--data
call sub_404180
cmp [ rw-data ] 0x0
je r-xdata
mov ax [ ebp - 0x22 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
and eax 0xffff
push eax
mov ecx [ ebp - 0x20 ]
push ecx
call [ Ordinal_WSOCK32_11@IAT ]
push eax
push r--data
mov edx [ ebp - 0x4 ]
push edx
call [ fprintf@IAT ]
add esp 0x10
mov edx [ ebp - 0x10 ]
push edx
mov eax [ ebp - 0x4 ]
push eax
call sub_401685
add esp 0x8
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp - 0x4 ]
push ecx
call sub_403af0
add esp 0x8
call [ Ordinal_WSOCK32_116@IAT ]
xor eax eax
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x4 ]
push ecx
call sub_403d27
add esp 0x4
sub_401685
push ebp
mov ebp esp
mov eax 0x1588
call sub_405270
push esi
push edi
mov [ ebp - 0x8 ] 0x3e8
mov [ ebp - 0x10 ] 0x0
mov [ ebp - 0x4 ] 0x0
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0xffffffff
jne r-xdata
push 0x12f
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
push 0x130
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov [ ebp - 0x114 ] 0x0
mov [ ebp - 0x218 ] 0x0
lea edx [ ebp - 0xc ]
push edx
call sub_4039d0
add esp 0x4
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x32c ]
cmp ecx [ ebp - 0x218 ]
jae r-xdata
cmp [ ebp - 0x10 ] 0x0
jle r-xdata
mov ecx [ ebp - 0x32c ]
cmp ecx [ ebp - 0x218 ]
jne r-xdata
mov edx [ ebp - 0x32c ]
mov eax [ ebp + edx * 4 - 0x214 ]
cmp eax [ ebp + 0xc ]
jne r-xdata
pop edi
pop esi
mov esp ebp
pop ebp
retn
xor edx edx
test edx edx
jne r-xdata
cmp [ ebp - 0x218 ] 0x40
jae r-xdata
jmp r-xdata
jmp r-xdata
mov [ ebp - 0x32c ] 0x0
jmp r-xdata
mov eax [ rw-data ]
push eax
lea ecx [ ebp - 0x220 ]
push ecx
call sub_405010
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edx [ ebp - 0x32c ]
mov eax [ ebp + 0xc ]
mov [ ebp + edx * 4 - 0x214 ] eax
mov ecx [ ebp - 0x218 ]
add ecx 0x1
mov [ ebp - 0x218 ] ecx
mov eax [ ebp - 0x32c ]
add eax 0x1
mov [ ebp - 0x32c ] eax
lea eax [ ebp - 0x220 ]
push eax
push 0x0
mov ecx [ ebp - 0x114 ]
push ecx
lea edx [ ebp - 0x218 ]
push edx
mov eax [ ebp + 0xc ]
add eax 0x1
push eax
call [ Ordinal_WSOCK32_18@IAT ]
mov [ ebp - 0x328 ] eax
cmp [ ebp - 0x328 ] 0x0
jne r-xdata
mov ecx 0x41
lea esi [ ebp - 0x218 ]
lea edi [ ebp - 0x324 ]
[ edi ] [ esi ]
lea edx [ ebp - 0x324 ]
mov [ ebp - 0x114 ] edx
cmp [ ebp - 0x328 ] 0x0
jge r-xdata
push r--data
mov ecx [ _iob@IAT ]
add ecx 0x40
push ecx
call [ fprintf@IAT ]
add esp 0x8
mov edx [ ebp + 0x8 ]
push edx
call [ fflush@IAT ]
add esp 0x4
jmp r-xdata
cmp [ ebp - 0x328 ] 0x0
jle r-xdata
call [ _errno@IAT ]
mov eax [ eax ]
push eax
call [ strerror@IAT ]
add esp 0x4
push eax
push r--data
call [ printf@IAT ]
add esp 0x8
jmp r-xdata
cmp [ ebp - 0x328 ] 0x0
jle r-xdata
lea ecx [ ebp - 0x218 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
call Ordinal_WSOCK32_151
test eax eax
je r-xdata
jmp r-xdata
cmp [ ebp - 0x114 ] 0x0
je r-xdata
push 0x10
push 0x0
lea eax [ ebp - 0x340 ]
push eax
call memset
add esp 0xc
push 0xa18
push 0x0
lea ecx [ ebp - 0xd58 ]
push ecx
call memset
add esp 0xc
lea edx [ ebp - 0x340 ]
push edx
push 0x40c
lea eax [ ebp - 0x1164 ]
push eax
mov ecx [ ebp + 0xc ]
push ecx
call sub_401b7b
add esp 0x10
mov [ ebp - 0x330 ] eax
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x114 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
call Ordinal_WSOCK32_151
test eax eax
je r-xdata
cmp [ ebp - 0x330 ] 0x0
jg r-xdata
cmp [ ebp - 0x330 ] 0x0
jge r-xdata
push 0x10
push 0x0
lea eax [ ebp - 0x1178 ]
push eax
call memset
add esp 0xc
mov [ ebp - 0x1178 ] 0x2
mov ecx [ ebp - 0xc ]
mov [ ebp - 0x1174 ] ecx
mov dx [ rw-data ]
push edx
call [ Ordinal_WSOCK32_9@IAT ]
mov [ ebp - 0x1176 ] ax
mov [ ebp - 0x4 ] 0x0
mov ax [ ebp - 0x8 ]
mov [ ebp - 0x1586 ] ax
mov cx [ ebp - 0x1586 ]
push ecx
lea edx [ ebp - 0x1168 ]
push edx
lea eax [ ebp - 0x1584 ]
push eax
mov cx [ ebp - 0x8 ]
add cx 0x1
mov [ ebp - 0x8 ] cx
call sub_401b98
add esp 0xc
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ ebp - 0x10 ]
sub ecx 0x1
mov [ ebp - 0x10 ] ecx
lea edx [ ebp - 0x110 ]
push edx
lea eax [ ebp - 0xd58 ]
push eax
mov ecx [ ebp - 0x330 ]
push ecx
lea edx [ ebp - 0x1164 ]
push edx
call sub_4031f0
add esp 0x10
test eax eax
je r-xdata
jmp r-xdata
mov ecx [ ebp - 0x33c ]
push ecx
call [ Ordinal_WSOCK32_11@IAT ]
push eax
mov edx [ ebp - 0x330 ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0x10
cmp [ rw-data ] 0x1
jle r-xdata
call [ _errno@IAT ]
mov edx [ eax ]
push edx
call [ strerror@IAT ]
add esp 0x4
push eax
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
jmp r-xdata
lea ecx [ ebp - 0x1178 ]
push ecx
mov edx [ ebp - 0x1168 ]
push edx
lea eax [ ebp - 0x1584 ]
push eax
mov ecx [ ebp + 0xc ]
push ecx
call sub_401b5e
add esp 0x10
cmp [ rw-data ] 0x0
jle r-xdata
mov edx [ ebp - 0x1174 ]
push edx
call [ Ordinal_WSOCK32_11@IAT ]
push eax
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
lea ecx [ ebp - 0x110 ]
push ecx
mov edx [ ebp - 0x33c ]
push edx
call [ Ordinal_WSOCK32_11@IAT ]
push eax
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0x10
mov eax [ ebp - 0x340 ]
mov [ ebp - 0xd58 ] eax
mov ecx [ ebp - 0x33c ]
mov [ ebp - 0xd54 ] ecx
mov edx [ ebp - 0x338 ]
mov [ ebp - 0xd50 ] edx
mov eax [ ebp - 0x334 ]
mov [ ebp - 0xd4c ] eax
lea ecx [ ebp - 0xd54 ]
push ecx
call sub_403910
add esp 0x4
test eax eax
je r-xdata
mov ecx [ _iob@IAT ]
add ecx 0x20
push ecx
mov edx [ ebp - 0x330 ]
push edx
lea eax [ ebp - 0x1164 ]
push eax
call sub_401f40
add esp 0xc
mov eax [ ebp - 0x10 ]
add eax 0x1
mov [ ebp - 0x10 ] eax
jmp r-xdata
mov edx [ rw-data ]
push edx
call sub_404f40
jmp r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov ecx [ rw-data ]
push ecx
lea edx [ ebp - 0xd58 ]
push edx
mov eax [ ebp + 0x8 ]
push eax
call sub_402de0
add esp 0xc
lea edx [ ebp - 0xd58 ]
push edx
mov eax [ ebp + 0x8 ]
push eax
call sub_403d6b
add esp 0x8
jmp r-xdata
sub_401b5e
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push eax
mov ecx [ ebp + 0x10 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
mov eax [ ebp + 0x8 ]
push eax
call sub_403600
add esp 0x10
pop ebp
retn
sub_401b7b
push ebp
mov ebp esp
mov eax [ ebp + 0x14 ]
push eax
mov ecx [ ebp + 0x10 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
mov eax [ ebp + 0x8 ]
push eax
call sub_403655
add esp 0x10
pop ebp
retn
sub_401b98
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x1e1
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0xc ]
mov [ edx ] 0x32
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
push ecx
push 0x0
mov edx [ ebp + 0x8 ]
push edx
call memset
add esp 0xc
mov ax [ ebp + 0x10 ]
push eax
call [ Ordinal_WSOCK32_9@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] ax
mov edx [ ebp + 0x8 ]
mov [ edx + 0x2 ] 0x0
push 0x1
call [ Ordinal_WSOCK32_9@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x4 ] ax
mov edx [ ebp + 0x8 ]
mov [ edx + 0x6 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ eax + 0x8 ] 0x0
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0xa ] 0x0
cmp [ rw-data ] 0x0
je r-xdata
push 0x1e2
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
push ecx
push 0x0
push r--data
call sub_40432d
mov edx [ ebp - 0x4 ]
add edx eax
mov [ ebp - 0x4 ] edx
mov eax [ ebp - 0x4 ]
mov [ eax ] 0x0
mov ecx [ ebp - 0x4 ]
add ecx 0x1
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x4 ]
mov [ edx ] 0x0
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
mov [ ecx ] 0x21
mov edx [ ebp - 0x4 ]
add edx 0x1
mov [ ebp - 0x4 ] edx
mov eax [ ebp - 0x4 ]
mov [ eax ] 0x0
mov ecx [ ebp - 0x4 ]
add ecx 0x1
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x4 ]
mov [ edx ] 0x1
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov esp ebp
pop ebp
retn
push 0x10
call [ Ordinal_WSOCK32_9@IAT ]
mov edx [ ebp + 0x8 ]
mov cx [ edx + 0x2 ]
or cx ax
mov edx [ ebp + 0x8 ]
mov [ edx + 0x2 ] cx
sub_401ccb
push ebp
mov ebp esp
push r--data
push r--data
call sub_401def
add esp 0x8
mov eax [ ebp + 0x8 ]
push eax
push r--data
call sub_401def
add esp 0x8
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
xor ecx ecx
mov cx [ rw-data ]
push ecx
push r--data
call sub_401def
add esp 0x8
push r--data
call sub_401def
add esp 0x4
mov edx [ rw-data ]
push edx
push r--data
call sub_401def
add esp 0x8
mov eax [ rw-data ]
push eax
push r--data
call sub_401def
add esp 0x8
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push r--data
call sub_401def
add esp 0x4
push 0x1
call [ exit@IAT ]
sub_401def
push ebp
mov ebp esp
push ecx
lea eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
mov eax [ _iob@IAT ]
add eax 0x40
push eax
call [ vfprintf@IAT ]
add esp 0xc
mov [ ebp - 0x4 ] 0x0
mov ecx [ _iob@IAT ]
add ecx 0x40
push ecx
push 0xa
call [ putc@IAT ]
add esp 0x8
mov esp ebp
pop ebp
retn
sub_401e59
push ebp
mov ebp esp
sub esp 0x8
mov eax [ ebp + 0xc ]
sub eax [ ebp + 0x8 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x8 ]
cmp ecx [ ebp + 0xc ]
jbe r-xdata
push 0x1c
call [ malloc@IAT ]
add esp 0x4
mov [ ebp - 0x8 ] eax
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push 0x1d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x10 ]
push eax
call [ _strdup@IAT ]
add esp 0x4
mov ecx [ ebp - 0x8 ]
mov [ ecx ] eax
mov edx [ ebp + 0x8 ]
push edx
call [ Ordinal_WSOCK32_8@IAT ]
mov ecx [ ebp - 0x8 ]
mov [ ecx + 0x4 ] eax
mov edx [ ebp + 0xc ]
push edx
call [ Ordinal_WSOCK32_8@IAT ]
mov ecx [ ebp - 0x8 ]
mov [ ecx + 0x8 ] eax
mov edx [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ edx + 0xc ] eax
mov ecx [ ebp - 0x8 ]
mov [ ecx + 0x18 ] 0x0
push 0x1
mov edx [ ebp - 0x4 ]
push edx
call [ calloc@IAT ]
add esp 0x8
mov ecx [ ebp - 0x8 ]
mov [ ecx + 0x10 ] eax
mov edx [ ebp - 0x8 ]
mov eax [ ebp - 0x8 ]
mov ecx [ eax + 0xc ]
mov [ edx + 0x14 ] ecx
mov edx [ ebp - 0x4 ]
push edx
push 0x0
mov eax [ ebp - 0x8 ]
mov ecx [ eax + 0x10 ]
push ecx
call memset
add esp 0xc
mov edx [ ebp - 0x8 ]
push edx
call sub_4038b0
add esp 0x4
mov eax 0x1
mov esp ebp
pop ebp
retn 0x10
mov [ ebp + 0x10 ] r--data
sub_401f40
push ebp
mov ebp esp
sub esp 0x140
lea eax [ ebp - 0x130 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push 0x3a
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov cx [ eax + 0x2 ]
push ecx
call [ Ordinal_WSOCK32_15@IAT ]
mov [ ebp - 0x8 ] ax
lea edx [ ebp - 0x130 ]
mov [ ebp - 0x4 ] edx
mov eax [ ebp - 0x8 ]
and eax 0xffff
and eax 0x8000
test eax eax
je r-xdata
push 0x3b
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
push r--data
mov ecx [ ebp - 0x4 ]
push ecx
call [ sprintf@IAT ]
add esp 0x8
mov edx [ ebp - 0x4 ]
add edx eax
mov [ ebp - 0x4 ] edx
jmp r-xdata
mov edx [ ebp - 0x90 ]
and edx 0xffff
push edx
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov ecx [ ebp - 0x13c ]
jmp [ ecx * 4 + jump_table_4024c3 ]
mov edx [ ebp - 0x8 ]
and edx 0xffff
and edx 0x7000
sar edx 0xb
mov [ ebp - 0x90 ] dx
mov eax [ ebp - 0x90 ]
and eax 0xffff
mov [ ebp - 0x13c ] eax
cmp [ ebp - 0x13c ] 0x8
ja r-xdata
mov edx [ ebp - 0x8 ]
and edx 0xffff
and edx 0x200
test edx edx
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
push r--data
mov edx [ ebp - 0x4 ]
push edx
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
jmp r-xdata
push r--data
mov edx [ ebp - 0x4 ]
push edx
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
jmp r-xdata
push r--data
mov edx [ ebp - 0x4 ]
push edx
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov edx [ ebp - 0x8 ]
and edx 0xffff
and edx 0x100
test edx edx
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x8 ]
and edx 0xffff
and edx 0x400
test edx edx
je r-xdata
mov edx [ ebp - 0x8 ]
and edx 0xffff
and edx 0x80
test edx edx
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x8 ]
and edx 0xffff
and edx 0x10
test edx edx
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x8 ]
and edx 0xffff
and edx 0xf
push edx
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0x8
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
push ecx
call [ Ordinal_WSOCK32_15@IAT ]
and eax 0xffff
push eax
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0x130 ]
push eax
mov ecx [ ebp - 0x8 ]
and ecx 0xffff
push ecx
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0x10
mov eax [ ebp + 0x8 ]
mov cx [ eax + 0x4 ]
push ecx
call [ Ordinal_WSOCK32_15@IAT ]
and eax 0xffff
push eax
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov cx [ eax + 0x6 ]
push ecx
call [ Ordinal_WSOCK32_15@IAT ]
and eax 0xffff
push eax
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov cx [ eax + 0x8 ]
push ecx
call [ Ordinal_WSOCK32_15@IAT ]
and eax 0xffff
push eax
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov cx [ eax + 0xa ]
push ecx
call [ Ordinal_WSOCK32_15@IAT ]
and eax 0xffff
push eax
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
add eax 0xc
mov [ ebp - 0xac ] eax
push r--data
mov ecx [ ebp + 0x10 ]
push ecx
call [ fprintf@IAT ]
add esp 0x8
mov edx [ ebp + 0xc ]
push edx
push r--data
mov eax [ ebp + 0x10 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
lea ecx [ ebp - 0x8c ]
mov [ ebp - 0xa8 ] ecx
lea edx [ ebp - 0xa4 ]
mov [ ebp - 0x134 ] edx
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov eax [ ebp - 0x134 ]
lea ecx [ ebp - 0xa4 ]
cmp eax ecx
jbe r-xdata
mov edx [ ebp - 0xac ]
movsx eax [ edx ]
and eax 0xff
mov [ ebp - 0x138 ] al
mov ecx [ ebp - 0xac ]
add ecx 0x1
mov [ ebp - 0xac ] ecx
mov edx [ ebp - 0x138 ]
and edx 0xff
push edx
push r--data
mov eax [ ebp - 0xa8 ]
push eax
call [ sprintf@IAT ]
add esp 0xc
mov ecx [ ebp - 0xa8 ]
add ecx eax
mov [ ebp - 0xa8 ] ecx
mov edx [ __mb_cur_max@IAT ]
cmp [ edx ] 0x1
jle r-xdata
push r--data
mov edx [ ebp + 0x10 ]
push edx
call [ fprintf@IAT ]
add esp 0x8
mov eax [ ebp + 0x10 ]
push eax
call [ fflush@IAT ]
add esp 0x4
mov esp ebp
pop ebp
retn
lea edx [ ebp - 0xa4 ]
push edx
lea eax [ ebp - 0x8c ]
push eax
push r--data
mov ecx [ ebp + 0x10 ]
push ecx
call [ fprintf@IAT ]
add esp 0x10
mov ecx [ ebp - 0x138 ]
and ecx 0xff
mov edx [ _pctype@IAT ]
mov eax [ edx ]
xor edx edx
mov dx [ eax + ecx * 2 ]
and edx 0x157
mov [ ebp - 0x140 ] edx
push 0x157
mov eax [ ebp - 0x138 ]
and eax 0xff
push eax
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x140 ] eax
jmp r-xdata
mov eax [ ebp - 0x134 ]
mov cl [ ebp - 0x138 ]
mov [ eax ] cl
mov edx [ ebp - 0x134 ]
add edx 0x1
mov [ ebp - 0x134 ] edx
mov eax [ ebp - 0xa8 ]
mov [ eax ] 0x0
mov ecx [ ebp - 0x134 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0x134 ]
lea eax [ ebp - 0xa4 ]
sub edx eax
cmp edx 0x10
jl r-xdata
mov [ ebp - 0x138 ] 0x2e
cmp [ ebp - 0x140 ] 0x0
jne r-xdata
jmp r-xdata
lea ecx [ ebp - 0xa4 ]
push ecx
lea edx [ ebp - 0x8c ]
push edx
push r--data
mov eax [ ebp + 0x10 ]
push eax
call [ fprintf@IAT ]
add esp 0x10
lea ecx [ ebp - 0x8c ]
mov [ ebp - 0xa8 ] ecx
lea edx [ ebp - 0xa4 ]
mov [ ebp - 0x134 ] edx
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0xc ]
sub ecx 0x1
mov [ ebp + 0xc ] ecx
test eax eax
jle r-xdata
sub_4024f0
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov dx [ ecx + 0x8 ]
push edx
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0xa ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0xa ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0xc ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0xc ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0xe ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0xe ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x10 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x10 ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x12 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x12 ] ax
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x14 ]
push eax
call [ Ordinal_WSOCK32_14@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x14 ] eax
mov edx [ ebp + 0x8 ]
mov eax [ edx + 0x18 ]
push eax
call [ Ordinal_WSOCK32_14@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x18 ] eax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x1c ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x1c ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x1e ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x1e ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x20 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x20 ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x22 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x22 ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x24 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x24 ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x26 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x26 ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x28 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x28 ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x2a ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x2a ] ax
mov edx [ ebp + 0x8 ]
mov ax [ edx + 0x2c ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x2c ] ax
pop ebp
retn
push 0x14
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
sub_402680
push ebp
mov ebp esp
sub esp 0x8
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov eax [ ebp + 0x8 ]
jmp r-xdata
jmp r-xdata
push 0x1c
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
test ecx ecx
je r-xdata
mov eax [ ebp - 0x4 ]
push eax
call sub_404f60
mov edx [ __mb_cur_max@IAT ]
cmp [ edx ] 0x1
jle r-xdata
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
mov ecx [ _pctype@IAT ]
mov edx [ ecx ]
xor ecx ecx
mov cx [ edx + eax * 2 ]
and ecx 0x157
mov [ ebp - 0x8 ] ecx
push 0x157
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
push ecx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] eax
jmp r-xdata
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov [ edx ] 0x2e
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
mov edx [ ebp + 0x8 ]
add edx 0x1
mov [ ebp + 0x8 ] edx
sub_402730
push ebp
mov ebp esp
sub esp 0x14
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x20 ] 0x0
mov edx [ ebp + 0x8 ]
mov [ edx + 0x10 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ eax + 0x44 ] 0x0
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x74 ] 0x0
mov edx [ ebp + 0x8 ]
mov [ edx + 0x78 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ eax + 0x64 ] 0x0
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x7c ] 0x0
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
push 0x16
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x4 ]
cmp ecx [ eax + 0xa10 ]
jge r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x10
push eax
call sub_402680
add esp 0x4
mov ecx [ ebp + 0x8 ]
add ecx 0x20
push ecx
call sub_402680
add esp 0x4
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x4 ]
imul edx edx 0x18
mov eax [ ebp + 0x8 ]
lea ecx [ eax + edx + 0xb0 ]
mov [ ebp - 0xc ] ecx
mov edx [ ebp - 0xc ]
xor eax eax
mov ax [ edx + 0x12 ]
and eax 0x8000
mov [ ebp - 0x10 ] eax
mov ecx [ ebp - 0xc ]
movsx edx [ ecx + 0x10 ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0xc ]
push eax
call sub_4029f0
add esp 0x4
mov ecx [ ebp - 0xc ]
mov [ ecx + 0x14 ] eax
mov edx [ ebp - 0xc ]
cmp [ edx + 0x14 ] 0x0
jne r-xdata
mov eax [ ebp + 0x8 ]
movsx ecx [ eax + 0x10 ]
test ecx ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x7c ]
add ecx 0x1
mov edx [ ebp + 0x8 ]
mov [ edx + 0x7c ] ecx
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx + 0x20 ]
test edx edx
jne r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
cmp [ ebp - 0x8 ] 0x20
jne r-xdata
mov eax [ ebp - 0x8 ]
mov [ ebp - 0x14 ] eax
cmp [ ebp - 0x14 ] 0x2b
ja r-xdata
mov edx [ ebp - 0xc ]
push edx
mov eax [ ebp + 0x8 ]
add eax 0x10
push eax
call strcpy
add esp 0x8
cmp [ ebp - 0x10 ] 0x0
je r-xdata
cmp [ ebp - 0x8 ] 0x6
jne r-xdata
mov edx [ ebp + 0x8 ]
mov [ edx + 0x64 ] 0x1
mov edx [ ebp - 0x14 ]
xor ecx ecx
mov cl [ edx + lookup_table_4029bb ]
jmp [ ecx * 4 + jump_table_4029af ]
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
cmp [ ebp - 0x8 ] 0x1c
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ eax + 0x74 ] 0x1
push 0x3
push r--data
mov eax [ ebp - 0xc ]
push eax
call [ strncmp@IAT ]
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
add ecx 0x20
push ecx
call strcpy
add esp 0x8
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
cmp [ ebp - 0x8 ] 0x87
je r-xdata
push r--data
mov ecx [ ebp - 0xc ]
push ecx
call strcmp
add esp 0x8
test eax eax
jne r-xdata
jmp r-xdata
mov ecx [ ebp - 0xc ]
push ecx
mov edx [ ebp + 0x8 ]
add edx 0x20
push edx
call strcpy
add esp 0x8
cmp [ ebp - 0x10 ] 0x0
jne r-xdata
cmp [ ebp - 0x8 ] 0x2b
jne r-xdata
mov eax [ ebp + 0x8 ]
mov [ eax + 0x6c ] 0x1
cmp [ ebp - 0x8 ] 0x6a
jne r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x10
push eax
mov ecx [ ebp - 0xc ]
push ecx
call strcmp
add esp 0x8
test eax eax
jne r-xdata
mov edx [ ebp + 0x8 ]
mov [ edx + 0x68 ] 0x1
jmp r-xdata
jmp r-xdata
cmp [ ebp - 0x8 ] 0x3
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x70 ] 0x1
mov edx [ ebp + 0x8 ]
mov [ edx + 0x78 ] 0x1
mov edx [ ebp - 0x4 ]
add edx 0x1
mov [ ebp - 0x4 ] edx
mov edx [ ebp + 0x8 ]
add edx 0x20
push edx
mov eax [ ebp - 0xc ]
push eax
call strcmp
add esp 0x8
test eax eax
je r-xdata
mov ecx [ ebp - 0xc ]
push ecx
mov edx [ ebp + 0x8 ]
add edx 0x44
push edx
call strcpy
add esp 0x8
sub_4029be
add al [ edx ]
add al [ ecx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add [ ecx ] eax
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add al [ edx ]
add esp ecx
int3
sub_4029f0
push ebp
mov ebp esp
sub esp 0xc
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
xor edx edx
mov dx [ ecx + 0x12 ]
and edx 0x8000
neg edx
sbb edx edx
neg edx
mov [ ebp - 0x4 ] edx
mov eax [ ebp - 0x4 ]
shl eax 0x8
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx + 0x10 ]
and edx 0xff
or eax edx
mov [ ebp - 0x8 ] eax
mov eax [ ebp - 0x8 ]
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0x42
jg r-xdata
push 0x1f
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp - 0xc ] 0xbe
jg r-xdata
cmp [ ebp - 0xc ] 0x42
je r-xdata
mov eax [ ebp - 0xc ]
sub eax 0xbf
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0x83
ja r-xdata
cmp [ ebp - 0xc ] 0xbe
je r-xdata
push 0x3
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ strncmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp - 0xc ] 0x31
ja r-xdata
xor eax eax
jmp r-xdata
mov edx [ ebp - 0xc ]
xor ecx ecx
mov cl [ edx + lookup_table_402d53 ]
jmp [ ecx * 4 + jump_table_402d37 ]
mov eax r--data
jmp r-xdata
mov eax [ ebp - 0xc ]
sub eax 0x43
mov [ ebp - 0xc ] eax
cmp [ ebp - 0xc ] 0x44
ja r-xdata
jmp r-xdata
mov eax r--data
jmp r-xdata
mov edx [ ebp - 0xc ]
xor ecx ecx
mov cl [ edx + lookup_table_402ca0 ]
jmp [ ecx * 4 + jump_table_402c64 ]
mov esp ebp
pop ebp
retn
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
push r--data
mov eax [ ebp + 0x8 ]
push eax
call strcmp
add esp 0x8
test eax eax
jne r-xdata
push r--data
mov edx [ ebp + 0x8 ]
push edx
call strcmp
add esp 0x8
test eax eax
jne r-xdata
mov edx [ ebp - 0xc ]
xor ecx ecx
mov cl [ edx + lookup_table_402cf2 ]
jmp [ ecx * 4 + jump_table_402cd2 ]
xor eax eax
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
push 0x3
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ strncmp@IAT ]
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
sub_402d5a
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
add [ edx ] eax
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
add eax [ esi ]
add al 0x6
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
push es
add eax 0xcccccccc
int3
sub_402de0
push ebp
mov ebp esp
sub esp 0x2d4
lea eax [ ebp - 0x104 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x1d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0xc ]
movsx ecx [ eax + 0x10 ]
test ecx ecx
jne r-xdata
push 0x1e
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0xc ]
add edx 0x20
push edx
mov eax [ ebp + 0xc ]
add eax 0x10
push eax
push r--data
lea ecx [ ebp - 0x124 ]
push ecx
call [ sprintf@IAT ]
add esp 0x10
mov edx [ ebp + 0xc ]
movsx eax [ edx + 0x20 ]
test eax eax
jne r-xdata
mov edx [ ebp + 0xc ]
cmp [ edx + 0x64 ] 0x0
je r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push r--data
lea ecx [ ebp - 0x124 ]
push ecx
call [ sprintf@IAT ]
add esp 0x8
jmp r-xdata
mov edx [ ebp + 0xc ]
cmp [ edx + 0x78 ] 0x0
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x4 ]
mov [ edx ] 0x20
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0xc ]
add ecx 0x30
push ecx
mov edx [ ebp - 0x4 ]
push edx
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
lea edx [ ebp - 0x124 ]
push edx
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x4 ]
push ecx
call [ Ordinal_WSOCK32_11@IAT ]
push eax
push r--data
mov edx [ ebp - 0x4 ]
push edx
call [ sprintf@IAT ]
add esp 0x10
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
cmp [ rw-data ] 0x0
je r-xdata
mov edx [ ebp + 0xc ]
cmp [ edx + 0x68 ] 0x0
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp + 0xc ]
cmp [ edx + 0x6c ] 0x0
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp + 0xc ]
cmp [ edx + 0x70 ] 0x0
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp + 0xc ]
cmp [ edx + 0x74 ] 0x0
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp + 0xc ]
cmp [ edx + 0x7c ] 0x0
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp + 0xc ]
movsx eax [ edx + 0x44 ]
test eax eax
je r-xdata
push r--data
mov eax [ ebp - 0x4 ]
push eax
call sub_404550
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x4 ]
mov [ edx ] 0xa
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
mov [ ecx ] 0x0
mov edx [ ebp + 0x8 ]
push edx
lea eax [ ebp - 0x104 ]
push eax
call [ fputs@IAT ]
add esp 0x8
cmp [ ebp + 0x10 ] 0x0
je r-xdata
push 0x20
mov ecx [ ebp + 0xc ]
add ecx 0x44
push ecx
call [ strchr@IAT ]
add esp 0x8
test eax eax
jne r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
call [ fflush@IAT ]
add esp 0x4
mov esp ebp
pop ebp
retn
mov [ ebp - 0x22c ] 0x0
jmp r-xdata
mov [ ebp - 0x2d0 ] r--data
mov [ ebp - 0x2d0 ] r--data
jmp r-xdata
mov edx [ ebp + 0xc ]
mov eax [ ebp - 0x22c ]
cmp eax [ edx + 0xa10 ]
jge r-xdata
mov edx [ ebp - 0x2d0 ]
mov [ ebp - 0x128 ] edx
mov eax [ ebp - 0x128 ]
push eax
mov ecx [ ebp + 0xc ]
add ecx 0x44
push ecx
mov edx [ ebp - 0x128 ]
push edx
push r--data
mov eax [ ebp - 0x4 ]
push eax
call [ sprintf@IAT ]
add esp 0x14
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
cmp [ rw-data ] 0x0
jne r-xdata
mov ecx [ ebp - 0x22c ]
imul ecx ecx 0x18
mov edx [ ebp + 0xc ]
lea eax [ edx + ecx + 0xb0 ]
mov [ ebp - 0x2c4 ] eax
mov ecx [ ebp - 0x2c4 ]
xor edx edx
mov dx [ ecx + 0x12 ]
and edx 0x8000
mov [ ebp - 0x2c8 ] edx
mov eax [ ebp - 0x2c4 ]
mov ecx [ eax + 0x14 ]
mov [ ebp - 0x2cc ] ecx
cmp [ ebp - 0x2cc ] 0x0
jne r-xdata
mov [ ebp - 0x2b0 ] 0x0
push 0x84
lea ecx [ ebp - 0x2b0 ]
push ecx
mov edx [ ebp + 0xc ]
mov eax [ edx + 0x4 ]
push eax
call sub_403804
add esp 0xc
test eax eax
jne r-xdata
mov edx [ ebp - 0x2c4 ]
push edx
lea eax [ ebp - 0x2c0 ]
push eax
call strcpy
add esp 0x8
push eax
call sub_402680
add esp 0x4
cmp [ ebp - 0x2c8 ] 0x0
je r-xdata
mov [ ebp - 0x2cc ] r--data
lea ecx [ ebp - 0x2b0 ]
push ecx
mov edx [ ebp + 0xc ]
add edx 0x30
push edx
push r--data
lea eax [ ebp - 0x228 ]
push eax
call [ sprintf@IAT ]
add esp 0x10
lea ecx [ ebp - 0x228 ]
push ecx
call sub_404f60
lea edx [ ebp - 0x228 ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
mov [ ebp - 0x2d4 ] r--data
mov [ ebp - 0x2d4 ] r--data
jmp r-xdata
mov ecx [ ebp - 0x22c ]
add ecx 0x1
mov [ ebp - 0x22c ] ecx
mov ecx [ ebp - 0x2cc ]
push ecx
mov edx [ ebp - 0x2d4 ]
push edx
mov eax [ ebp - 0x2c4 ]
movsx ecx [ eax + 0x10 ]
and ecx 0xff
push ecx
lea edx [ ebp - 0x2c0 ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0x18
jmp r-xdata
sub_4031f0
push ebp
mov ebp esp
sub esp 0x13c
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push 0x5a
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp + 0xc ] 0x0
jg r-xdata
push 0x5b
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
push 0x5c
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push 0xa18
push 0x0
mov ecx [ ebp + 0x10 ]
push ecx
call memset
add esp 0xc
mov edx [ ebp + 0x8 ]
add edx [ ebp + 0xc ]
mov [ ebp - 0x11c ] edx
mov eax [ ebp + 0x8 ]
add eax 0xc
mov [ ebp - 0x4 ] eax
push 0x100
lea ecx [ ebp - 0x110 ]
push ecx
lea edx [ ebp - 0x4 ]
push edx
call sub_4043d0
lea eax [ ebp - 0x4 ]
push eax
call sub_403587
add esp 0x4
and eax 0xffff
mov [ ebp - 0x120 ] eax
lea ecx [ ebp - 0x4 ]
push ecx
call sub_403587
add esp 0x4
and eax 0xffff
mov [ ebp - 0x114 ] eax
cmp [ rw-data ] 0x1
jle r-xdata
push 0x5d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
add ecx 0x4
mov [ ebp - 0x4 ] ecx
lea edx [ ebp - 0x4 ]
push edx
call sub_403587
add esp 0x4
and eax 0xffff
mov [ ebp - 0x124 ] eax
mov eax [ ebp - 0x11c ]
sub eax [ ebp - 0x4 ]
mov [ ebp - 0x118 ] eax
mov ecx [ ebp - 0x124 ]
cmp ecx [ ebp - 0x118 ]
jle r-xdata
push r--data
call [ printf@IAT ]
add esp 0x4
lea edx [ ebp - 0x110 ]
push edx
push r--data
call [ printf@IAT ]
add esp 0x8
mov eax [ ebp - 0x120 ]
push eax
lea ecx [ ebp - 0x110 ]
push ecx
call sub_404ee0
push eax
push r--data
call [ printf@IAT ]
add esp 0x8
mov edx [ ebp - 0x114 ]
push edx
lea eax [ ebp - 0x110 ]
push eax
call sub_404e80
push eax
push r--data
call [ printf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x4 ]
xor edx edx
mov dl [ ecx ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] 0x1
jle r-xdata
mov edx [ ebp - 0x118 ]
push edx
mov eax [ ebp - 0x124 ]
push eax
push r--data
call [ printf@IAT ]
add esp 0xc
or eax 0xffffffff
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
jge r-xdata
mov ecx [ ebp - 0x8 ]
push ecx
push r--data
call [ printf@IAT ]
add esp 0x8
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x8 ]
imul ecx ecx 0x12
mov edx [ ebp - 0x4 ]
add edx ecx
mov [ ebp - 0x10 ] edx
cmp [ ebp - 0x8 ] 0x64
jle r-xdata
mov edx [ ebp - 0x8 ]
push edx
push r--data
mov eax [ ebp + 0x14 ]
push eax
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x8 ]
imul ecx ecx 0x12
mov edx [ ebp - 0x4 ]
add edx ecx
mov [ ebp - 0xc ] edx
jmp r-xdata
mov [ ebp - 0x8 ] 0x64
mov eax [ ebp + 0x10 ]
mov [ eax + 0xa14 ] 0x1
mov ecx [ ebp - 0x4 ]
cmp ecx [ ebp - 0xc ]
jae r-xdata
mov ecx [ ebp - 0x11c ]
sub ecx [ ebp - 0x10 ]
cmp ecx 0x2e
jl r-xdata
mov edx [ ebp + 0x10 ]
mov eax [ edx + 0xa10 ]
imul eax eax 0x18
mov ecx [ ebp + 0x10 ]
lea edx [ ecx + eax + 0xb0 ]
mov [ ebp - 0x13c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0xa10 ]
add ecx 0x1
mov edx [ ebp + 0x10 ]
mov [ edx + 0xa10 ] ecx
push 0x12
mov eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x138 ]
push ecx
call memcpy
add esp 0xc
mov dx [ ebp - 0x128 ]
push edx
call [ Ordinal_WSOCK32_15@IAT ]
mov ecx [ ebp - 0x13c ]
mov [ ecx + 0x12 ] ax
mov edx [ ebp - 0x13c ]
mov al [ ebp - 0x129 ]
mov [ edx + 0x10 ] al
push 0xf
lea ecx [ ebp - 0x138 ]
push ecx
mov edx [ ebp - 0x13c ]
push edx
call [ strncpy@IAT ]
add esp 0xc
mov [ eax + 0xf ] 0x0
mov eax [ ebp - 0x13c ]
push eax
call sub_404f60
jmp r-xdata
mov eax [ ebp + 0x10 ]
push eax
call sub_402730
add esp 0x4
mov eax 0x1
push 0x2e
mov edx [ ebp - 0x10 ]
push edx
mov eax [ ebp + 0x10 ]
add eax 0x80
push eax
call memcpy
add esp 0xc
mov ecx [ ebp + 0x10 ]
add ecx 0x80
push ecx
call sub_4024f0
add esp 0x4
mov edx [ ebp + 0x10 ]
xor eax eax
mov al [ edx + 0x85 ]
push eax
mov ecx [ ebp + 0x10 ]
xor edx edx
mov dl [ ecx + 0x84 ]
push edx
mov eax [ ebp + 0x10 ]
xor ecx ecx
mov cl [ eax + 0x83 ]
push ecx
mov edx [ ebp + 0x10 ]
xor eax eax
mov al [ edx + 0x82 ]
push eax
mov ecx [ ebp + 0x10 ]
xor edx edx
mov dl [ ecx + 0x81 ]
push edx
mov eax [ ebp + 0x10 ]
xor ecx ecx
mov cl [ eax + 0x80 ]
push ecx
push r--data
mov edx [ ebp + 0x10 ]
add edx 0x30
push edx
call [ sprintf@IAT ]
add esp 0x20
mov eax [ ebp - 0x4 ]
add eax 0x12
mov [ ebp - 0x4 ] eax
sub_403587
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0x0
jne r-xdata
push 0x40
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push 0x2
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
push ecx
lea edx [ ebp - 0x4 ]
push edx
call memcpy
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
add ecx 0x2
mov edx [ ebp + 0x8 ]
mov [ edx ] ecx
mov ax [ ebp - 0x4 ]
push eax
call [ Ordinal_WSOCK32_15@IAT ]
mov esp ebp
pop ebp
retn
push 0x41
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
sub_403600
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
push 0x15
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push 0x10
mov edx [ ebp + 0x14 ]
push edx
push 0x0
mov eax [ ebp + 0x10 ]
push eax
mov ecx [ ebp + 0xc ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
call [ Ordinal_WSOCK32_20@IAT ]
pop ebp
retn
push 0x16
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
sub_403655
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x10
cmp [ ebp + 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
push 0x23
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
lea edx [ ebp - 0x4 ]
push edx
mov eax [ ebp + 0x14 ]
push eax
push 0x0
mov ecx [ ebp + 0x10 ]
push ecx
mov edx [ ebp + 0xc ]
push edx
mov eax [ ebp + 0x8 ]
push eax
call [ Ordinal_WSOCK32_17@IAT ]
mov esp ebp
pop ebp
retn
push 0x24
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
sub_403700
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] 0x0
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
push 0x28
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
test eax eax
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] 0x4
setl al
mov ecx [ __mb_cur_max@IAT ]
cmp [ ecx ] 0x1
jle r-xdata
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx ]
mov eax [ _pctype@IAT ]
mov ecx [ eax ]
xor eax eax
mov ax [ ecx + edx * 2 ]
and eax 0x103
mov [ ebp - 0x8 ] eax
push 0x103
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
push eax
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx ]
cmp edx 0x2e
jne r-xdata
mov eax 0x1
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
jmp r-xdata
mov eax [ ebp - 0x4 ]
add eax 0x1
mov [ ebp - 0x4 ] eax
mov esp ebp
pop ebp
retn
mov ecx [ ebp + 0x8 ]
add ecx 0x1
mov [ ebp + 0x8 ] ecx
sub_4037ad
push ebp
mov ebp esp
sub esp 0x8
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
call [ Ordinal_WSOCK32_52@IAT ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
push 0x43
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push 0x4
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0xc ]
mov ecx [ eax ]
push ecx
lea edx [ ebp - 0x8 ]
push edx
call memcpy
add esp 0xc
mov eax [ ebp - 0x8 ]
or eax 0xffffffff
jmp r-xdata
mov esp ebp
pop ebp
retn
sub_403804
push ebp
mov ebp esp
sub esp 0x8
cmp [ ebp + 0xc ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] 0x1
jg r-xdata
push 0x5b
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0x8 ]
mov [ ebp - 0x8 ] edx
mov eax [ ebp + 0x10 ]
sub eax 0x1
mov [ ebp + 0x10 ] eax
push 0x2
push 0x4
lea ecx [ ebp - 0x8 ]
push ecx
call [ Ordinal_WSOCK32_51@IAT ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
push 0x5c
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp - 0x4 ]
cmp [ edx ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp + 0x10 ]
push eax
mov ecx [ ebp - 0x4 ]
mov edx [ ecx ]
push edx
mov eax [ ebp + 0xc ]
push eax
call [ strncpy@IAT ]
add esp 0xc
mov ecx [ ebp + 0x10 ]
mov [ eax + ecx ] 0x0
mov edx [ ebp + 0xc ]
push edx
call strlen
add esp 0x4
xor eax eax
jmp r-xdata
mov esp ebp
pop ebp
retn
sub_4038b0
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x18 ] 0x0
mov [ ebp - 0x4 ] rw-data
jmp r-xdata
push 0x1d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
cmp [ ecx + 0x18 ] 0x0
je r-xdata
mov edx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
mov [ edx + 0x18 ] eax
mov esp ebp
pop ebp
retn
jmp r-xdata
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0x18 ]
mov [ ebp - 0x4 ] eax
sub_403910
push ebp
mov ebp esp
sub esp 0x14
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
push edx
call [ Ordinal_WSOCK32_14@IAT ]
mov [ ebp - 0x8 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
push 0x4a
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x1
mov eax [ ebp - 0x4 ]
mov ecx [ eax + 0x4 ]
push ecx
call [ Ordinal_WSOCK32_14@IAT ]
mov [ ebp - 0xc ] eax
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0x8 ]
push eax
call [ Ordinal_WSOCK32_14@IAT ]
mov [ ebp - 0x10 ] eax
mov ecx [ ebp - 0x8 ]
cmp ecx [ ebp - 0xc ]
jb r-xdata
jmp r-xdata
mov edx [ ebp - 0x8 ]
cmp edx [ ebp - 0x10 ]
ja r-xdata
mov ecx [ ebp - 0x4 ]
mov edx [ ecx + 0x18 ]
mov [ ebp - 0x4 ] edx
mov eax [ ebp - 0x8 ]
sub eax [ ebp - 0xc ]
mov [ ebp - 0x14 ] eax
mov ecx [ ebp - 0x4 ]
mov edx [ ecx + 0x10 ]
mov eax [ ebp - 0x14 ]
movsx ecx [ edx + eax ]
test ecx ecx
je r-xdata
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0x10 ]
mov ecx [ ebp - 0x14 ]
mov [ eax + ecx ] 0x1
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0x14 ]
sub eax 0x1
mov ecx [ ebp - 0x4 ]
mov [ ecx + 0x14 ] eax
jmp r-xdata
xor eax eax
jmp r-xdata
mov esp ebp
pop ebp
retn
sub_4039d0
push ebp
mov ebp esp
push ecx
mov [ ebp - 0x4 ] 0x0
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
push 0x81
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp - 0x4 ]
cmp [ rw-data ] 0x0
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
cmp [ rw-data ] 0x0
jg r-xdata
mov ecx [ rw-data ]
mov edx [ ecx + 0x10 ]
mov eax [ rw-data ]
movsx ecx [ edx + eax ]
test ecx ecx
jne r-xdata
push 0x94
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ rw-data ]
sub ecx 0x1
mov [ rw-data ] ecx
mov edx [ rw-data ]
mov [ rw-data ] edx
mov [ rw-data ] 0x0
xor eax eax
jmp r-xdata
mov edx [ rw-data ]
add edx 0x1
mov [ rw-data ] edx
mov eax [ rw-data ]
mov ecx [ rw-data ]
cmp ecx [ eax + 0xc ]
jl r-xdata
mov edx [ rw-data ]
mov eax [ edx + 0x4 ]
push eax
call [ Ordinal_WSOCK32_8@IAT ]
add eax [ rw-data ]
push eax
call [ Ordinal_WSOCK32_14@IAT ]
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov [ ebp - 0x4 ] 0x1
mov esp ebp
pop ebp
retn
jmp r-xdata
mov edx [ rw-data ]
mov eax [ edx + 0x18 ]
mov [ rw-data ] eax
mov [ rw-data ] 0x0
sub_403af0
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x5d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
lea edx [ ebp - 0x4 ]
push edx
call [ time@IAT ]
add esp 0x4
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0x8
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0x8
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0x8
lea eax [ ebp - 0x4 ]
push eax
call [ ctime@IAT ]
add esp 0x4
push eax
call sub_404f60
push eax
call sub_403c0c
add esp 0x4
push eax
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0xc
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0x8
jmp r-xdata
push 0x5e
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
cmp [ ecx ] 0x0
je r-xdata
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0x8
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0x8
mov esp ebp
pop ebp
retn
mov edx [ ebp + 0xc ]
mov eax [ edx ]
push eax
call sub_403c0c
add esp 0x4
push eax
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0xc
jmp r-xdata
mov eax [ ebp + 0xc ]
add eax 0x4
mov [ ebp + 0xc ] eax
sub_403c0c
push ebp
mov ebp esp
sub esp 0x8
mov [ ebp - 0x4 ] rw-data
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov [ ecx ] 0x27
mov edx [ ebp - 0x4 ]
add edx 0x1
mov [ ebp - 0x4 ] edx
jmp r-xdata
push 0x3a
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx ]
test edx edx
je r-xdata
mov eax [ ebp - 0x4 ]
mov [ eax ] 0x27
mov ecx [ ebp - 0x4 ]
add ecx 0x1
mov [ ebp - 0x4 ] ecx
mov edx [ ebp - 0x4 ]
mov [ edx ] 0x0
mov eax rw-data
mov esp ebp
pop ebp
retn
mov eax [ __mb_cur_max@IAT ]
cmp [ eax ] 0x1
jle r-xdata
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
mov edx [ _pctype@IAT ]
mov eax [ edx ]
xor edx edx
mov dx [ eax + ecx * 2 ]
and edx 0x157
mov [ ebp - 0x8 ] edx
push 0x157
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx ]
push edx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
cmp eax 0x5c
je r-xdata
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
and ecx 0xff
push ecx
push r--data
mov edx [ ebp - 0x4 ]
push edx
call [ sprintf@IAT ]
add esp 0xc
mov ecx [ ebp - 0x4 ]
add ecx eax
mov [ ebp - 0x4 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ eax ] 0x5c
mov ecx [ ebp - 0x4 ]
add ecx 0x1
mov [ ebp - 0x4 ] ecx
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx ]
cmp edx 0x27
jne r-xdata
jmp r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x1
mov [ ebp + 0x8 ] eax
mov edx [ ebp - 0x4 ]
mov eax [ ebp + 0x8 ]
mov cl [ eax ]
mov [ edx ] cl
mov edx [ ebp - 0x4 ]
add edx 0x1
mov [ ebp - 0x4 ] edx
sub_403d27
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0x8
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0x8
pop ebp
retn
push 0x7c
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
sub_403d6b
push ebp
mov ebp esp
sub esp 0x418
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x88
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov [ ebp - 0x408 ] 0x0
cmp [ rw-data ] 0x0
jne r-xdata
push 0x89
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov [ ebp - 0x408 ] 0x0
push 0x400
lea edx [ ebp - 0x408 ]
push edx
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x4 ]
push ecx
call sub_403804
add esp 0xc
test eax eax
jne r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ ebp - 0x8 ]
cmp ecx [ eax + 0xa10 ]
jge r-xdata
mov edx [ ebp + 0xc ]
mov eax [ edx + 0x4 ]
push eax
call [ Ordinal_WSOCK32_11@IAT ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
push ecx
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
lea eax [ ebp - 0x408 ]
push eax
call sub_403c0c
add esp 0x4
push eax
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0xc
mov edx [ ebp - 0x4 ]
push edx
call sub_403c0c
add esp 0x4
push eax
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
add ecx 0x30
push ecx
call sub_403c0c
add esp 0x4
push eax
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0xc ]
add eax 0x10
push eax
call sub_403c0c
add esp 0x4
push eax
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0xc
mov edx [ ebp + 0xc ]
add edx 0x20
push edx
call sub_403c0c
add esp 0x4
push eax
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
mov edx [ ecx + 0x64 ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
mov edx [ ecx + 0x78 ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
mov edx [ ecx + 0x6c ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
mov edx [ ecx + 0x68 ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
mov edx [ ecx + 0x70 ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] 0x0
jmp r-xdata
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0x8
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0x8
mov eax [ ebp + 0x8 ]
push eax
call [ fflush@IAT ]
add esp 0x4
mov esp ebp
pop ebp
retn
mov edx [ ebp - 0x8 ]
imul edx edx 0x18
mov eax [ ebp + 0xc ]
lea ecx [ eax + edx + 0xb0 ]
mov [ ebp - 0x40c ] ecx
mov edx [ ebp - 0x40c ]
xor eax eax
mov ax [ edx + 0x12 ]
and eax 0x8000
mov [ ebp - 0x410 ] eax
mov ecx [ ebp - 0x40c ]
mov edx [ ecx + 0x14 ]
mov [ ebp - 0x414 ] edx
cmp [ ebp - 0x414 ] 0x0
jne r-xdata
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0x8
mov ecx [ ebp - 0x40c ]
push ecx
call sub_403c0c
add esp 0x4
push eax
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
mov eax [ ebp - 0x40c ]
movsx ecx [ eax + 0x10 ]
and ecx 0xff
push ecx
push r--data
mov edx [ ebp + 0x8 ]
push edx
call [ fprintf@IAT ]
add esp 0xc
cmp [ ebp - 0x410 ] 0x0
je r-xdata
mov [ ebp - 0x414 ] r--data
mov [ ebp - 0x418 ] r--data
mov [ ebp - 0x418 ] r--data
jmp r-xdata
mov edx [ ebp - 0x8 ]
add edx 0x1
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x418 ]
push eax
push r--data
mov ecx [ ebp + 0x8 ]
push ecx
call [ fprintf@IAT ]
add esp 0xc
mov edx [ ebp - 0x414 ]
push edx
call sub_403c0c
add esp 0x4
push eax
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ fprintf@IAT ]
add esp 0xc
jmp r-xdata
sub_4040a0
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x17
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0xc ]
mov [ eax ] 0x0
push 0x18
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx ]
mov eax [ _pctype@IAT ]
mov ecx [ eax ]
xor eax eax
mov ax [ ecx + edx * 2 ]
and eax 0x4
mov [ ebp - 0x8 ] eax
push 0x4
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
push eax
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ecx ]
imul edx edx 0xa
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
lea edx [ edx + ecx - 0x30 ]
mov eax [ ebp + 0xc ]
mov [ eax ] edx
mov ecx [ ebp + 0x8 ]
add ecx 0x1
mov [ ebp + 0x8 ] ecx
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
mov ecx [ ebp + 0x8 ]
cmp ecx [ ebp - 0x4 ]
jbe r-xdata
mov ecx [ __mb_cur_max@IAT ]
cmp [ ecx ] 0x1
jle r-xdata
mov [ ebp - 0xc ] 0x1
jmp r-xdata
mov eax [ ebp - 0xc ]
mov esp ebp
pop ebp
retn 0x8
sub_404180
push ebp
mov ebp esp
push ecx
lea eax [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
mov eax [ _iob@IAT ]
add eax 0x40
push eax
call [ vfprintf@IAT ]
add esp 0xc
mov [ ebp - 0x4 ] 0x0
mov ecx [ _iob@IAT ]
add ecx 0x40
push ecx
push 0xa
call [ putc@IAT ]
add esp 0x8
push 0x1
call [ exit@IAT ]
sub_4041d0
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x1f
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0xc ]
push edx
mov eax [ ebp + 0x8 ]
push eax
call sub_4045d0
add esp 0x8
test eax eax
je r-xdata
push 0x20
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp + 0x8 ]
push ecx
call [ Ordinal_WSOCK32_52@IAT ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov eax 0x1
jmp r-xdata
push 0x4
mov edx [ ebp - 0x4 ]
mov eax [ edx + 0xc ]
mov ecx [ eax ]
push ecx
mov edx [ ebp + 0xc ]
push edx
call memcpy
add esp 0xc
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
push ecx
call [ Ordinal_WSOCK32_14@IAT ]
mov edx [ ebp + 0xc ]
mov [ edx ] eax
mov eax 0x1
xor eax eax
jmp r-xdata
mov esp ebp
pop ebp
retn 0x8
sub_404270
push ebp
mov ebp esp
sub esp 0x8
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push 0x22
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0xc ]
shl eax 0x1
mov ecx [ ebp + 0x10 ]
mov [ ecx ] al
mov edx [ ebp + 0x10 ]
add edx 0x1
mov [ ebp + 0x10 ] edx
push 0x23
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0x10 ]
mov [ edx ] 0x0
mov eax [ ebp + 0x10 ]
sub eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn 0xc
mov edx [ ebp + 0x8 ]
xor eax eax
mov al [ edx ]
mov [ ebp - 0x8 ] eax
mov ecx [ ebp - 0x8 ]
shr ecx 0x4
and ecx 0xf
add ecx 0x41
mov edx [ ebp + 0x10 ]
mov [ edx ] cl
mov eax [ ebp + 0x10 ]
add eax 0x1
mov [ ebp + 0x10 ] eax
mov ecx [ ebp - 0x8 ]
and ecx 0xf
add ecx 0x41
mov edx [ ebp + 0x10 ]
mov [ edx ] cl
mov eax [ ebp + 0x10 ]
add eax 0x1
mov [ ebp + 0x10 ] eax
mov ecx [ ebp + 0x8 ]
add ecx 0x1
mov [ ebp + 0x8 ] ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ ebp + 0xc ]
sub ecx 0x1
mov [ ebp + 0xc ] ecx
test eax eax
jle r-xdata
sub_40432d
push ebp
mov ebp esp
sub esp 0x14
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push 0x39
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
cmp eax 0x2a
jne r-xdata
push 0x3a
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
push r--data
lea eax [ ebp - 0x14 ]
push eax
call [ sprintf@IAT ]
add esp 0x10
mov ecx [ ebp + 0x8 ]
movsx edx [ ecx + 0x1 ]
test edx edx
jne r-xdata
push 0x11
push 0x0
lea eax [ ebp - 0x14 ]
push eax
call memset
add esp 0xc
mov [ ebp - 0x14 ] 0x2a
jmp r-xdata
mov ecx [ ebp + 0x10 ]
push ecx
push 0x10
lea edx [ ebp - 0x14 ]
push edx
call sub_404270
mov esp ebp
pop ebp
retn 0xc
sub_4043d0
push ebp
mov ebp esp
sub esp 0x18
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0x0
jne r-xdata
push 0x2d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x2e
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp + 0x10 ] 0x0
jg r-xdata
push 0x2f
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
mov [ ebp - 0x10 ] eax
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x8 ] ecx
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
movsx ecx [ eax ]
mov [ ebp - 0xc ] ecx
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
add eax 0x1
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
mov edx [ ebp - 0xc ]
and edx 0x80000001
jns r-xdata
push 0x30
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
test edx edx
je r-xdata
dec edx
or edx 0xfffffffe
inc edx
mov eax [ ebp - 0xc ]
cdq
sub eax edx
sar eax 0x1
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0xc ]
cmp eax [ ebp + 0x10 ]
jle r-xdata
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
add ecx [ ebp - 0xc ]
mov [ ebp - 0x4 ] ecx
mov eax 0xfffffffe
jmp r-xdata
mov esp ebp
pop ebp
retn 0xc
mov eax [ ebp + 0xc ]
mov [ eax ] 0x0
mov ecx [ ebp + 0x8 ]
mov edx [ ecx ]
sub edx [ ebp - 0x10 ]
and edx 0x80000001
jns r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
sub edx 0x41
mov [ ebp - 0x14 ] edx
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
add ecx 0x1
mov edx [ ebp + 0x8 ]
mov [ edx ] ecx
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
sub edx 0x41
mov [ ebp - 0x18 ] edx
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
add ecx 0x1
mov edx [ ebp + 0x8 ]
mov [ edx ] ecx
cmp [ ebp - 0x14 ] 0xf
ja r-xdata
test edx edx
je r-xdata
dec edx
or edx 0xfffffffe
inc edx
mov eax 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x18 ] 0xf
jbe r-xdata
mov eax [ ebp + 0xc ]
sub eax [ ebp - 0x8 ]
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
add ecx 0x1
mov edx [ ebp + 0x8 ]
mov [ edx ] ecx
mov eax [ ebp - 0x14 ]
shl eax 0x4
or eax [ ebp - 0x18 ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] al
mov edx [ ebp + 0xc ]
add edx 0x1
mov [ ebp + 0xc ] edx
jmp r-xdata
mov edx [ ebp + 0xc ]
cmp edx [ ebp - 0x4 ]
jae r-xdata
sub_404550
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x1d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ ebp + 0xc ]
mov dl [ ecx ]
mov [ eax ] dl
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
mov edx [ ebp + 0xc ]
add edx 0x1
mov [ ebp + 0xc ] edx
test ecx ecx
je r-xdata
push 0x1e
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
sub eax [ ebp - 0x4 ]
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp + 0x8 ]
add eax 0x1
mov [ ebp + 0x8 ] eax
jmp r-xdata
sub_4045d0
push ebp
mov ebp esp
sub esp 0x10
mov [ ebp - 0x4 ] 0x0
mov [ ebp - 0x8 ] 0x0
mov [ ebp - 0xc ] 0x0
mov [ ebp - 0x10 ] 0x0
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x48
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov edx [ ebp + 0xc ]
mov [ edx ] 0xffffffff
push 0x2e
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp + 0x8 ]
push ecx
call sub_4046c0
add esp 0xc
test eax eax
jne r-xdata
push 0x49
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push 0x2e
lea edx [ ebp - 0x8 ]
push edx
lea eax [ ebp + 0x8 ]
push eax
call sub_4046c0
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push 0x2e
lea ecx [ ebp - 0xc ]
push ecx
lea edx [ ebp + 0x8 ]
push edx
call sub_4046c0
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov esp ebp
pop ebp
retn
push 0x0
lea eax [ ebp - 0x10 ]
push eax
lea ecx [ ebp + 0x8 ]
push ecx
call sub_4046c0
add esp 0xc
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
mov edx [ ebp - 0x4 ]
shl edx 0x18
mov eax [ ebp - 0x8 ]
shl eax 0x10
or edx eax
mov ecx [ ebp - 0xc ]
shl ecx 0x8
or edx ecx
or edx [ ebp - 0x10 ]
mov eax [ ebp + 0xc ]
mov [ eax ] edx
mov eax 0x1
xor eax eax
jmp r-xdata
sub_4046c0
push ebp
mov ebp esp
sub esp 0x8
push esi
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0x0
jne r-xdata
push 0x27
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x28
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
mov [ ecx ] 0x0
mov edx [ __mb_cur_max@IAT ]
cmp [ edx ] 0x1
jle r-xdata
push 0x29
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
mov eax [ _pctype@IAT ]
mov ecx [ eax ]
xor eax eax
mov ax [ ecx + edx * 2 ]
and eax 0x4
mov [ ebp - 0x4 ] eax
push 0x4
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
push edx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov ecx [ __mb_cur_max@IAT ]
cmp [ ecx ] 0x1
jle r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
movsx ecx [ eax ]
mov edx [ _pctype@IAT ]
mov eax [ edx ]
xor edx edx
mov dx [ eax + ecx * 2 ]
and edx 0x4
mov [ ebp - 0x8 ] edx
push 0x4
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
movsx ecx [ eax ]
push ecx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] eax
jmp r-xdata
pop esi
mov esp ebp
pop ebp
retn
mov edx [ ebp + 0xc ]
cmp [ edx ] 0x100
jl r-xdata
mov eax [ ebp + 0xc ]
mov ecx [ eax ]
imul ecx ecx 0xa
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
movsx edx [ eax ]
lea eax [ ecx + edx - 0x30 ]
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
add eax 0x1
mov ecx [ ebp + 0x8 ]
mov [ ecx ] eax
jmp r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
movsx eax [ ebp + 0x10 ]
mov ecx [ ebp + 0x8 ]
mov ecx [ ecx ]
add ecx 0x1
mov esi [ ebp + 0x8 ]
mov [ esi ] ecx
cmp edx eax
je r-xdata
xor eax eax
jmp r-xdata
mov eax 0x1
xor eax eax
jmp r-xdata
sub_404820
push ebp
mov ebp esp
sub esp 0x12c
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x5d
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push r--data
mov edx [ ebp + 0xc ]
push edx
call strcpy
add esp 0x8
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ strpbrk@IAT ]
add esp 0x8
test eax eax
jne r-xdata
push 0x5e
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
push 0x100
mov ecx [ ebp + 0x8 ]
push ecx
lea edx [ ebp - 0x110 ]
push edx
call [ strncpy@IAT ]
add esp 0xc
mov [ eax + 0xff ] 0x0
push 0x2f
lea eax [ ebp - 0x110 ]
push eax
call [ strchr@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] eax
cmp [ ebp - 0x8 ] 0x0
je r-xdata
lea ecx [ ebp - 0x114 ]
push ecx
mov edx [ ebp + 0x8 ]
push edx
call sub_4041d0
test eax eax
je r-xdata
lea edx [ ebp - 0x110 ]
mov [ ebp - 0x8 ] edx
lea eax [ ebp - 0x118 ]
push eax
lea ecx [ ebp - 0x8 ]
push ecx
call sub_404d05
add esp 0x8
test eax eax
je r-xdata
mov [ ebp - 0x120 ] 0x0
mov ecx [ ebp - 0x8 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0x8 ]
add edx 0x1
mov [ ebp - 0x8 ] edx
mov eax [ ebp - 0x8 ]
movsx ecx [ eax ]
cmp ecx 0x2f
jne r-xdata
mov eax [ ebp + 0x14 ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
mov edx [ ebp - 0x114 ]
push edx
mov eax [ ebp - 0x114 ]
push eax
call [ ebp + 0x10 ]
jmp r-xdata
mov eax [ ebp + 0x8 ]
push eax
push r--data
mov ecx [ ebp + 0xc ]
push ecx
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
jmp r-xdata
lea edx [ ebp - 0x4 ]
push edx
lea eax [ ebp - 0x8 ]
push eax
call sub_404d05
add esp 0x8
test eax eax
je r-xdata
lea eax [ ebp - 0x124 ]
push eax
mov ecx [ ebp - 0x8 ]
push ecx
call sub_4040a0
test eax eax
jne r-xdata
mov [ ebp - 0x120 ] 0x1
mov edx [ ebp - 0x8 ]
add edx 0x1
mov [ ebp - 0x8 ] edx
mov esp ebp
pop ebp
retn 0x10
lea ecx [ ebp - 0xc ]
push ecx
lea edx [ ebp - 0x8 ]
push edx
call sub_404d05
add esp 0x8
test eax eax
je r-xdata
cmp [ ebp - 0x124 ] 0x0
jle r-xdata
mov edx [ ebp - 0x8 ]
push edx
push r--data
mov eax [ ebp + 0xc ]
push eax
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
jmp r-xdata
mov eax [ __mb_cur_max@IAT ]
cmp [ eax ] 0x1
jle r-xdata
mov ecx [ ebp - 0x124 ]
push ecx
push r--data
mov edx [ ebp + 0xc ]
push edx
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
jmp r-xdata
cmp [ ebp - 0x124 ] 0x20
jle r-xdata
mov eax [ ebp - 0x8 ]
movsx ecx [ eax ]
mov edx [ _pctype@IAT ]
mov eax [ edx ]
xor edx edx
mov dx [ eax + ecx * 2 ]
and edx 0x4
mov [ ebp - 0x12c ] edx
push 0x4
mov ecx [ ebp - 0x8 ]
movsx edx [ ecx ]
push edx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x12c ] eax
jmp r-xdata
cmp [ ebp - 0x124 ] 0x10
jge r-xdata
mov edx [ ebp - 0x118 ]
shl edx 0x18
mov eax [ ebp - 0x4 ]
shl eax 0x10
or edx eax
mov ecx [ ebp - 0xc ]
shl ecx 0x8
or edx ecx
mov [ ebp - 0x114 ] edx
cmp [ ebp - 0x12c ] 0x0
jne r-xdata
lea edx [ ebp - 0x114 ]
push edx
lea eax [ ebp - 0x110 ]
push eax
call sub_4041d0
test eax eax
jne r-xdata
push 0x10
mov eax [ ebp - 0x124 ]
push eax
push r--data
mov ecx [ ebp + 0xc ]
push ecx
call [ sprintf@IAT ]
add esp 0x10
xor eax eax
jmp r-xdata
mov eax 0x1
mov [ ebp - 0x8 ] 0x0
push 0x2d
mov eax [ ebp - 0x10 ]
push eax
call [ strchr@IAT ]
add esp 0x8
mov [ ebp - 0x128 ] eax
cmp [ ebp - 0x128 ] 0x0
je r-xdata
mov eax [ ebp - 0x124 ]
mov ecx [ ebp - 0x114 ]
and ecx [ eax * 4 + r--data ]
mov [ ebp - 0x114 ] ecx
cmp [ ebp - 0x124 ] 0x20
jne r-xdata
lea ecx [ ebp - 0x110 ]
push ecx
push r--data
mov edx [ ebp + 0xc ]
push edx
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
jmp r-xdata
lea edx [ ebp - 0x118 ]
push edx
mov eax [ ebp - 0x10 ]
push eax
call sub_4040a0
test eax eax
je r-xdata
mov ecx [ ebp - 0x128 ]
mov [ ecx ] 0x0
mov edx [ ebp - 0x128 ]
add edx 0x1
mov [ ebp - 0x128 ] edx
lea eax [ ebp - 0x118 ]
push eax
mov ecx [ ebp - 0x10 ]
push ecx
call sub_4040a0
test eax eax
je r-xdata
mov edx [ ebp - 0x124 ]
mov eax [ edx * 4 + r--data ]
not eax
add eax 0x1
mov [ ebp - 0x11c ] eax
mov [ ebp - 0x11c ] 0x1
jmp r-xdata
mov edx [ ebp - 0x10 ]
push edx
push r--data
mov eax [ ebp + 0xc ]
push eax
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
jmp r-xdata
cmp [ ebp - 0x118 ] 0x0
jl r-xdata
mov edx [ ebp + 0x8 ]
push edx
push r--data
mov eax [ ebp + 0xc ]
push eax
call [ sprintf@IAT ]
add esp 0xc
xor eax eax
jmp r-xdata
cmp [ ebp - 0x118 ] 0x0
jl r-xdata
mov eax [ ebp + 0x14 ]
push eax
push 0x0
mov ecx [ ebp - 0x11c ]
mov edx [ ebp - 0x114 ]
lea eax [ edx + ecx - 0x1 ]
push eax
mov ecx [ ebp - 0x114 ]
push ecx
call [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x124 ] 0x20
jge r-xdata
cmp [ ebp - 0x120 ] 0x0
jne r-xdata
cmp [ ebp - 0x118 ] 0xff
jg r-xdata
cmp [ ebp - 0x118 ] 0xff
jg r-xdata
mov ecx [ ebp - 0x11c ]
sub ecx 0x2
mov [ ebp - 0x11c ] ecx
mov edx [ ebp - 0x114 ]
add edx 0x1
mov [ ebp - 0x114 ] edx
mov ecx [ ebp + 0x14 ]
push ecx
push 0x0
mov edx [ ebp - 0x114 ]
add edx [ ebp - 0x118 ]
push edx
mov eax [ ebp - 0x114 ]
add eax [ ebp - 0x118 ]
push eax
call [ ebp + 0x10 ]
test eax eax
jne r-xdata
lea edx [ ebp - 0x4 ]
push edx
mov eax [ ebp - 0x128 ]
push eax
call sub_4040a0
test eax eax
je r-xdata
jmp r-xdata
push r--data
mov ecx [ ebp + 0xc ]
push ecx
call [ sprintf@IAT ]
add esp 0x8
xor eax eax
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jl r-xdata
jmp r-xdata
cmp [ ebp - 0x4 ] 0xff
jg r-xdata
push r--data
mov edx [ ebp - 0x8 ]
push edx
call [ strtok@IAT ]
add esp 0x8
mov [ ebp - 0x10 ] eax
cmp [ ebp - 0x10 ] 0x0
je r-xdata
mov ecx [ ebp - 0x118 ]
cmp ecx [ ebp - 0x4 ]
jle r-xdata
mov ecx [ ebp + 0x14 ]
push ecx
push 0x0
mov edx [ ebp - 0x114 ]
add edx [ ebp - 0x4 ]
push edx
mov eax [ ebp - 0x114 ]
add eax [ ebp - 0x118 ]
push eax
call [ ebp + 0x10 ]
test eax eax
jne r-xdata
jmp r-xdata
push r--data
mov ecx [ ebp + 0xc ]
push ecx
call [ sprintf@IAT ]
add esp 0x8
xor eax eax
jmp r-xdata
sub_404d05
push ebp
mov ebp esp
sub esp 0xc
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0x0
jne r-xdata
push 0x106
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
cmp [ ebp + 0xc ] 0x0
jne r-xdata
push 0x107
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov ecx [ ebp + 0xc ]
mov [ ecx ] 0x0
mov edx [ __mb_cur_max@IAT ]
cmp [ edx ] 0x1
jle r-xdata
push 0x108
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
mov eax [ _pctype@IAT ]
mov ecx [ eax ]
xor eax eax
mov ax [ ecx + edx * 2 ]
and eax 0x4
mov [ ebp - 0x4 ] eax
push 0x4
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
push edx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov ecx [ __mb_cur_max@IAT ]
cmp [ ecx ] 0x1
jle r-xdata
xor eax eax
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
movsx ecx [ eax ]
mov edx [ _pctype@IAT ]
mov eax [ edx ]
xor edx edx
mov dx [ eax + ecx * 2 ]
and edx 0x4
mov [ ebp - 0x8 ] edx
push 0x4
mov edx [ ebp + 0x8 ]
mov eax [ edx ]
movsx ecx [ eax ]
push ecx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0x8 ] eax
jmp r-xdata
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx edx [ ecx ]
cmp edx 0x2e
je r-xdata
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x100
jge r-xdata
cmp [ ebp - 0x8 ] 0x0
je r-xdata
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
add ecx 0x1
mov edx [ ebp + 0x8 ]
mov [ edx ] ecx
mov eax [ ebp + 0xc ]
cmp [ eax ] 0x0
jl r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov edx [ ecx ]
imul edx edx 0xa
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
movsx eax [ ecx ]
lea ecx [ edx + eax - 0x30 ]
mov edx [ ebp + 0xc ]
mov [ edx ] ecx
mov eax [ ebp + 0x8 ]
mov ecx [ eax ]
add ecx 0x1
mov edx [ ebp + 0x8 ]
mov [ edx ] ecx
jmp r-xdata
mov [ ebp - 0xc ] 0x0
mov ecx [ ebp + 0xc ]
cmp [ ecx ] 0x100
jge r-xdata
mov [ ebp - 0xc ] 0x1
jmp r-xdata
mov eax [ ebp - 0xc ]
sub_404e80
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x1
je r-xdata
push 0x13
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax r--data
jmp r-xdata
jmp r-xdata
mov esp ebp
pop ebp
retn 0x8
mov edx [ ebp + 0xc ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ sprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
sub_404ee0
push ebp
mov ebp esp
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x20
je r-xdata
push 0x19
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax r--data
jmp r-xdata
cmp [ ebp - 0x4 ] 0x21
je r-xdata
mov esp ebp
pop ebp
retn 0x8
mov eax r--data
jmp r-xdata
jmp r-xdata
mov edx [ ebp + 0xc ]
push edx
push r--data
mov eax [ ebp + 0x8 ]
push eax
call [ sprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
sub_404f60
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x4 ] 0x0
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
jmp r-xdata
push 0x14
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
test ecx ecx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edx [ __mb_cur_max@IAT ]
cmp [ edx ] 0x1
jle r-xdata
mov ecx [ ebp - 0x8 ]
mov [ ecx ] 0x0
mov eax [ ebp - 0x4 ]
mov [ eax + 0x1 ] 0x0
jmp r-xdata
mov edx [ ebp + 0x8 ]
movsx eax [ edx ]
mov ecx [ _pctype@IAT ]
mov edx [ ecx ]
xor ecx ecx
mov cx [ edx + eax * 2 ]
and ecx 0x8
mov [ ebp - 0xc ] ecx
push 0x8
mov eax [ ebp + 0x8 ]
movsx ecx [ eax ]
push ecx
call [ _isctype@IAT ]
add esp 0x8
mov [ ebp - 0xc ] eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn 0x4
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] edx
cmp [ ebp - 0xc ] 0x0
jne r-xdata
mov edx [ ebp + 0x8 ]
add edx 0x1
mov [ ebp + 0x8 ] edx
sub_405010
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
mov ecx [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ ecx ] edx
mov eax [ ebp + 0x8 ]
mov [ eax + 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
pop ebp
retn 0x8
push 0xd
push r--data
push r--data
call [ _assert@IAT ]
add esp 0xc
sub_405050
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov ecx [ ebp - 0x4 ]
sub ecx 0x271e
mov [ ebp - 0x4 ] ecx
cmp [ ebp - 0x4 ] 0x4e
ja r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
push r--data
mov edx [ ebp + 0xc ]
push edx
call [ sprintf@IAT ]
add esp 0xc
mov eax [ ebp + 0xc ]
mov eax [ ebp - 0x4 ]
xor edx edx
mov dl [ eax + lookup_table_4050ee ]
jmp [ edx * 4 + jump_table_4050ce ]
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov eax r--data
jmp r-xdata
mov esp ebp
pop ebp
retn 0xc
sub_40513d
push ebp
mov ebp esp
sub esp 0x298
mov eax [ ebp + 0xc ]
and eax 0xff
mov ecx [ ebp + 0xc ]
and ecx 0xff
shl ecx 0x8
or eax ecx
mov [ ebp - 0x8 ] ax
lea edx [ ebp - 0x198 ]
push edx
mov ax [ ebp - 0x8 ]
push eax
call [ Ordinal_WSOCK32_115@IAT ]
mov [ ebp - 0x4 ] eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
push 0x100
lea ecx [ ebp - 0x298 ]
push ecx
mov edx [ ebp - 0x4 ]
push edx
call sub_405050
push eax
push r--data
call sub_404180
mov esp ebp
pop ebp
retn 0x8
mov eax [ ebp - 0x198 ]
and eax 0xffff
sar eax 0x8
and eax 0xff
and eax 0xff
push eax
mov ecx [ ebp - 0x198 ]
and ecx 0xff
push ecx
push r--data
call [ printf@IAT ]
add esp 0xc
mov edx [ ebp - 0x198 ]
and edx 0xffff
mov eax [ ebp - 0x196 ]
and eax 0xffff
cmp edx eax
je r-xdata
push r--data
call [ printf@IAT ]
add esp 0x4
mov eax [ _iob@IAT ]
add eax 0x20
push eax
call [ fflush@IAT ]
add esp 0x4
mov ecx [ ebp - 0x196 ]
and ecx 0xffff
sar ecx 0x8
and ecx 0xff
and ecx 0xff
push ecx
mov edx [ ebp - 0x196 ]
and edx 0xff
push edx
push r--data
call [ printf@IAT ]
add esp 0xc
sub_405270
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
mov esp ecx
mov ecx [ eax ]
mov eax [ eax + 0x4 ]
push eax
retn
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x1000
jae r-xdata
_start
push ebp
mov ebp esp
push 0xffffffff
push r--data
push _except_handler3
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
push 0x1
call [ __set_app_type@IAT ]
pop ecx
or [ rw-data ] 0xffffffff
or [ rw-data ] 0xffffffff
call [ __p__fmode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
call [ __p__commode@IAT ]
mov ecx [ rw-data ]
mov [ eax ] ecx
mov eax [ _adjust_fdiv@IAT ]
mov eax [ eax ]
mov [ rw-data ] eax
call sub_4053e3
cmp [ rw-data ] 0x0
jne r-xdata
call sub_4053ce
push rw-data
push rw-data
call _initterm
mov eax [ rw-data ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
push eax
push [ rw-data ]
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x1c ]
push eax
call [ __getmainargs@IAT ]
push rw-data
push rw-data
call _initterm
call [ __p___initenv@IAT ]
mov ecx [ ebp - 0x20 ]
mov [ eax ] ecx
push [ ebp - 0x20 ]
push [ ebp - 0x2c ]
push [ ebp - 0x1c ]
call sub_401262
add esp 0x30
mov [ ebp - 0x24 ] eax
push eax
call [ exit@IAT ]
push sub_4053e0
call [ __setusermatherr@IAT ]
pop ecx
sub_40166e
sysret
sub_401e40
push ebp
mov ebp esp
push 0x0
push sub_401e59
mov eax [ ebp + 0xc ]
push eax
mov ecx [ ebp + 0x8 ]
push ecx
call sub_404820
pop ebp
retn
sub_4036c0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push eax
call [ strerror@IAT ]
add esp 0x4
pop ebp
retn
sub_4036d2
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push eax
push r--data
push rw-data
call [ sprintf@IAT ]
add esp 0xc
mov eax rw-data
pop ebp
retn
sub_403903
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_4041c8
mov esp ebp
pop ebp
retn
sub_404f40
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jg r-xdata
mov eax [ ebp + 0x8 ]
push eax
call [ Sleep@IAT ]
jmp r-xdata
pop ebp
retn 0x4
Ordinal_WSOCK32_151
jmp [ Ordinal_WSOCK32_151@IAT ]
memset
jmp [ memset@IAT ]
strcmp
jmp [ strcmp@IAT ]
strcpy
jmp [ strcpy@IAT ]
memcpy
jmp [ memcpy@IAT ]
strlen
jmp [ strlen@IAT ]
_XcptFilter
jmp [ _XcptFilter@IAT ]
_initterm
jmp [ _initterm@IAT ]
sub_4053ce
push 0x30000
push 0x10000
call _controlfp
pop ecx
pop ecx
retn
sub_4053e0
xor eax eax
retn
sub_4053e3
retn
_except_handler3
jmp [ _except_handler3@IAT ]
_controlfp
jmp [ _controlfp@IAT ]
